mstrContextMenuImpl.prototype = new Object();
contextMenuScript = true;
mstrContextMenuImpl.prototype.cmm_id = null;
mstrContextMenuImpl.prototype.cmm_items = null;
mstrContextMenuImpl.prototype.menu_items = null;
mstrContextMenuImpl.prototype.length = 0;
mstrContextMenuImpl.IMG_EMPTY = 0;
mstrContextMenuImpl.IMG_CHECK = 1;
mstrContextMenuImpl.IMG_REMOVE = 2;
mstrContextMenuImpl.IMG_SUBTOTAL = 3;
mstrContextMenuImpl.IMG_DRILL_UP = 4;
mstrContextMenuImpl.IMG_DRILL_DOWN = 5;
mstrContextMenuImpl.IMG_DRILL_TEMPLATE = 6;
mstrContextMenuImpl.IMG_DRILL = 7;
mstrContextMenuImpl.IMG_LOADING = 8;
mstrContextMenuImpl.prototype.addItem = function(B, C, E, A, G) { 
    try {
	var F;
	if (!E) {
	    E = 1;
	}
	if (!A) {
	    A = 1;
	}
	if (!G) {
	    G = mstrContextMenuImpl.IMG_EMPTY;
	}
	if (typeof (C) == "string") {
	    F = new Array(B, C, G, 0, "", "", A, E);
	} else {
	    F = new Array(B, "", G, 1, "[" + C.menu_items.toString() + "]", "",
		    A, E);
	}
	return this.addItemDefinition(F);
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrContextMenuImpl.prototype.addSeparator = function() {
    try {
	var B = new Array("-", "", 0, 2, "", 1, 1);
	return this.addItemDefinition(B);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrContextMenuImpl.prototype.addItemDefinition = function(B) {
    try {
	this.cmm_items.push(B);
	this.menu_items.push(this.cmm_items.length - 1);
	this.length = this.menu_items.length;
	return B;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrContextMenuImpl.prototype.registerTrigger = function(A, B) {
    try {
	if (A) {
	    A.setAttribute("cx", "[" + this.menu_items.toString() + "]");
	    A.setAttribute("cxid", this.cmm_id);
	    if (B) {
		A.setAttribute("cxty", B);
	    }
	}
	return true;
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
function mstrContextMenuImpl(A, C, B) {
    this.cmm_id = A;
    this.cmm_items = C;
    this.menu_items = B;
    return this;
}
function util_alignColumnHeaderCell(A, C) {
    A.style.width = C + "px";
    if (mstr.utils.ISIE4 && !mstr.utils.ISIE8
	    && !(mstr.utils.ISIE9 || mstr.utils.ISIE10 || mstr.utils.ISW3CIE)) {
	if (C == 0) {
	    A.style.display = "none";
	} else {
	    A.style.display = "";
	}
	var B = function() {
	    var D = A.offsetWidth;
	    if (D != C) {
		A.style.width = Math.max(parseInt(A.style.width) + C - D, 0)
			+ "px";
	    }
	};
	window.setTimeout(B, 0);
    }
}
function util_convert2Px(D, B) {
    if (mstr.utils.ISIE8 && !/px$/.test(B)) {
	var A = document.createElement("img"), C;
	A.style.zIndex = -1;
	A.style.left = B;
	D.appendChild(A);
	C = A.style.pixelLeft;
	D.removeChild(A);
	return C + "px";
    }
    return B;
}
function util_getBorderWidth(A, E) {
    var B = "border-" + E + "-width", C = mstr.utils.CSS.getStyleValue(A, B), D = mstrNumber["UNIT_"
	    + C.substring(C.length - 2, C.length).toUpperCase()];
    if (D) {
	C = (parseFloat(microstrategy.number.convertUnit(D, mstrNumber.UNIT_PX,
		C)) || 0);
    }
    return C;
}
function util_getCellPadding(A, B) {
    return parseFloat(mstr.utils.CSS.getStyleValue(A, "padding-" + B));
}
function util_getRowHeight(G) {
    if ((mstr.utils.ISIE9 || mstr.utils.ISIE10 || mstr.utils.ISW3CIE)) {
	var C = G.cells, A = null;
	if (G.style.height) {
	    return parseFloat(G.style.height);
	}
	var E = 0;
	for ( var D = 0; D < C.length; D++) {
	    A = C[D];
	    var B = util_getBorderWidth(A, "top")
		    + util_getBorderWidth(A, "bottom");
	    var F = util_getCellPadding(A, "top")
		    + util_getCellPadding(A, "bottom");
	    if (A.getAttribute("rowspan") == null) {
		E = Math.max(E, parseFloat((mstr.utils.CSS.getStyleValue(A,
			"height")))
			+ B + F);
	    }
	}
	if (A) {
	    if (!G.getAttribute("o")) {
		return getObjOuterHeight(G);
	    }
	    return E;
	}
    }
    return mstr.utils.ISIE8 ? getObjInnerHeight(G) : getObjOuterHeight(G);
}
function util_getCellWidth(A) {
    if ((mstr.utils.ISIE9 || mstr.utils.ISIE10 || mstr.utils.ISW3CIE)) {
	var B = (parseFloat(mstr.utils.CSS.getStyleValue(A, "width")));
	B = B == 0 ? B
		: (B
			+ (parseFloat(mstr.utils.CSS.getStyleValue(A,
				"padding-right")) || 0)
			+ (parseFloat(mstr.utils.CSS.getStyleValue(A,
				"padding-left")) || 0)
			+ util_getBorderWidth(A, "left") + util_getBorderWidth(
			A, "right"));
	return B
		+ ((mstr.utils.ISIE9 || mstr.utils.ISIE10 || mstr.utils.ISW3CIE)
			&& A.parentNode.getAttribute("o") ? 0.1 : 0);
    }
    return getObjOuterWidth(A);
}
function util_serRowHeight(F, A, E) {
    F.style.height = A + "px";
    if (mstr.utils.ISSAFARI) {
	var C = F.cells;
	for ( var B = 0; B < C.length; B++) {
	    C[B].style.height = A + "px";
	}
    }
    if ((mstr.utils.ISIE9 || mstr.utils.ISIE10 || mstr.utils.ISW3CIE) && E) {
	var C = F.cells;
	if (C && C[0]) {
	    window
		    .setTimeout(
			    function() {
				C[0].style.height = (A
					- util_getBorderWidth(C[0], "top") - util_getBorderWidth(
					C[0], "bottom"))
					+ "px";
			    }, 100);
	}
    }
    if (mstr.utils.ISIE4
	    && (!((mstr.utils.ISIE9 || mstr.utils.ISIE10 || mstr.utils.ISW3CIE)))) {
	var D = function() {
	    var G = util_getRowHeight(F);
	    if (G != A) {
		F.style.height = Math.max(2 * A - G, 0) + "px";
	    }
	};
	window.setTimeout(D, 0);
    }
}
function util_getRowHeight(G) {
    if ((mstr.utils.ISIE9 || mstr.utils.ISIE10)) {
	var C = G.cells, A = null;
	if (G.style.height) {
	    return parseFloat(G.style.height);
	}
	var E = 0;
	for ( var D = 0; D < C.length; D++) {
	    A = C[D];
	    var B = util_getBorderWidth(A, "top")
		    + util_getBorderWidth(A, "bottom");
	    var F = util_getCellPadding(A, "top")
		    + util_getCellPadding(A, "bottom");
	    if (A.getAttribute("rowspan") == null) {
		E = Math.max(E, parseFloat((mstr.utils.CSS.getStyleValue(A,
			"height")))
			+ B + F);
	    }
	}
	if (A) {
	    if (!G.getAttribute("o")) {
		return getObjOuterHeight(G);
	    }
	    return E;
	}
    }
    return mstr.utils.ISIE8 ? getObjInnerHeight(G) : getObjOuterHeight(G);
}
function util_getBorderWidth(A, E) {
    var B = "border-" + E + "-width", C = mstr.utils.CSS.getStyleValue(A, B), D = mstrNumber["UNIT_"
	    + C.substring(C.length - 2, C.length).toUpperCase()];
    if (D) {
	C = (parseFloat(microstrategy.number.convertUnit(D, mstrNumber.UNIT_PX,
		C)) || 0);
    }
    return C;
}
function util_getCellPadding(A, B) {
    return parseFloat(mstr.utils.CSS.getStyleValue(A, "padding-" + B));
}
function util_getHeaderColumnLeftPosition(A) {
    var B = util_getHeaderColumnHelper(A, "getObjOffsetLeft");
    return B;
}
function util_getHeaderColumnWidths(B) {
    if (!mstr.utils.ISWK && !mstr.utils.ISIE8
	    && !(mstr.utils.ISIE9 || mstr.utils.ISIE10 || mstr.utils.ISW3CIE)) {
	var A = [];
	if (!B) {
	    return A;
	}
	var E = B.getElementsByTagName("COL");
	if (E && E.length) {
	    var D = E.length;
	    for ( var C = 0; C < D; C++) {
		A.push(getObjOuterWidth(E[C]));
	    }
	}
	return A;
    }
    return util_getHeaderColumnHelper(B, "util_getCellWidth");
}
function util_getHeaderColumnHelper(U, I) {
    var A = [];
    if (!U) {
	return A;
    }
    var P = U.rows, Q, B = P && P[0], L = 0;
    for (Q = 0; Q < P.length; Q++) {
	if (P[Q].cells.length !== 0) {
	    B = P[Q];
	    break;
	}
    }
    var J = function(l, c) {
	var h = l.getAttribute(c);
	return h == null ? 1 : parseInt(h);
    };
    var b = function(m, c) {
	var h = null;
	var n = m.getElementsByTagName("colgroup");
	var l = n && n[0];
	if (l && l.childNodes[c]) {
	    h = parseFloat(l.childNodes[c].style.width);
	}
	return h;
    };
    var D = function(h) {
	var c = 0;
	if ((mstr.utils.ISIE7 || mstr.utils.ISIE8 || (mstr.utils.ISIE9
		|| mstr.utils.ISIE10 || mstr.utils.ISW3CIE))
		&& !h.parentNode.getAttribute("o") && !h.getAttribute("p")) {
	    h.setAttribute("p", 1);
	    c = ((parseFloat(util_convert2Px(h, mstr.utils.CSS.getStyleValue(h,
		    "paddingRight"))) || 0) + ((mstr.utils.ISIE8 || (mstr.utils.ISIE9
		    || mstr.utils.ISIE10 || mstr.utils.ISW3CIE)) ? 1 : 0));
	    h.style.paddingRight = ((mstr.utils.ISIE9 || mstr.utils.ISIE10 || mstr.utils.ISW3CIE) ? c
		    : Math.ceil(c))
		    + "px";
	}
    };
    var S = function(o, r) {
	var m = o.cells, q = 0;
	for ( var l = 0, h = m.length; l < h; l++) {
	    var n = J(m[l], "colspan");
	    if (n == 1) {
		A[r + l + q] = ((mstr.utils.ISIE9 || mstr.utils.ISIE10 || mstr.utils.ISW3CIE) && I == "util_getCellWidth") ? b(
			U, r + l + q)
			|| window[I](m[l])
			: window[I](m[l]);
	    } else {
		var c = 0;
		for (V = r + l + q + 1; V < r + l + q + n; V++) {
		    c += A[V];
		}
		A[r + l + q] = window[I](m[l]) - c;
		q += n - 1;
	    }
	}
    };
    var a = function(s, l) {
	var r, h, q, o, m, t = l.cells, u = s.cells;
	for (h = 0, q = t.length; h < q; h++) {
	    m = J(t[h], "rowspan");
	    if (m === 1) {
		break;
	    }
	}
	for (r = 0, q = u.length; r < q; r++) {
	    o = u[r];
	    if (o.getAttribute("CTY") == "3") {
		return false;
	    } else {
		t[h++] = o;
	    }
	}
	return true;
    };
    if (P.length > 0) {
	var X = B.cells;
	for ( var V = 0, e = X.length; V < e; V++) {
	    var K = J(X[V], "colspan");
	    A.push(window[I](X[V]));
	    while (K-- > 1) {
		A.push(0);
	    }
	}
    }
    var g = null, O = null, E = [], R = {
	colStart : 0,
	rowSpan : 1
    }, N = 0, H = 0;
    for ( var W = Q + 1, T = P.length; W < T; W++) {
	var Z = P[W].getAttribute("level");
	if (!P[W].getAttribute("o")) {
	    var C = P[W].cells[0];
	    if (C && (C.getAttribute("oty") == "12" || C.getAttribute("MH"))) {
		g = P[W];
		H = W;
	    } else {
		H = W;
	    }
	} else {
	    if (!Z && P[W].getAttribute("o")) {
		if (!O) {
		    O = {
			cells : []
		    };
		}
		if (a(P[W], O)) {
		    break;
		}
	    } else {
		if (Z) {
		    if (Z <= N && P[W].style.display != "none") {
			O = P[W - 1];
			break;
		    } else {
			N = Z;
		    }
		}
	    }
	}
    }
    if (g) {
	for ( var W = Q, Y = H; W <= Y; W++) {
	    X = P[W].cells;
	    for ( var V = 0, M = X.length; V < M; V++) {
		var G = J(X[V], "rowspan");
		if (G > H) {
		    L += J(X[V], "colspan");
		} else {
		    break;
		}
	    }
	}
	S(g, L);
    }
    var F = function F() {
	var o, h, n, q, c, l, r = P.length, t = O && O.cells, m = A.length, s = m, u = false;
	if (!t || t.length == m) {
	    return;
	}
	for (o = Q + 1; o < r; o++) {
	    if (P[o].getAttribute("level")) {
		return;
	    }
	    if (P[o].getAttribute("o")) {
		n = P[o].cells;
		l = n.length;
		for (h = 0; h < l; h++) {
		    if (n[h].getAttribute("CTY") == "3") {
			u = true;
			break;
		    }
		}
		if (u && (J(n[h], "rowspan") > 1)) {
		    break;
		}
		return;
	    }
	}
	for (o = 0; o < m; o++) {
	    t[o] = null;
	}
	for (o = 0; o < r; o++) {
	    if (s == 0) {
		break;
	    }
	    n = P[o].cells;
	    c = m;
	    for (h = n.length - 1; h >= 0; h--) {
		q = J(n[h], "colspan");
		if (q > 1) {
		    c -= q;
		    continue;
		}
		c -= 1;
		if (!t[c]) {
		    t[c] = n[h];
		    s--;
		}
	    }
	}
	if (s > 0) {
	    for (o = 0; o < m; o++) {
		if (!t[o]) {
		    t[o] = {
			offsetLeft : 0,
			parentNode : {
			    getAttribute : function() {
				return null;
			    }
			},
			getAttribute : function(x) {
			    if (x == "colspan" || x == "p") {
				return 1;
			    }
			    return null;
			}
		    };
		}
	    }
	}
    };
    F();
    if (O) {
	for (W = 0, T = Math.min(B.cells.length, O.cells.length); W < T; W++) {
	    var d = B.cells[W];
	    if (d
		    && (d.getAttribute("AX") === "1"
			    || d.getAttribute("AX") === "2"
			    && d.getAttribute("oty") === "12" || d
			    .getAttribute("MH"))) {
		if (J(B.cells[W], "colspan") > J(O.cells[W], "colspan")) {
		    S(O, 0);
		    break;
		}
	    } else {
		break;
	    }
	}
    }
    return A;
}
function util_getColumnWidthsArray(A, C, D, F) {
    var E = util_getColumnLeftPositionsArray(A, C, D);
    var B = util_getWidthsArrayFromLeftsArray(A, C, D, E, F);
    return (B);
}
function util_getWidthsArrayFromLeftsArray(H, A, C, F, I) {
    var G = (I) ? 1 : 0;
    var B = new Array;
    for ( var E = 0; E < A; E++) {
	var J = E + 1;
	for (J = E + 1; J <= A; J++) {
	    if (F[J] != null) {
		break;
	    }
	}
	if (J <= A) {
	    B[E] = Math.max(F[J] - F[E] - I, 0);
	    for ( var D = E + 1; D < J; D++) {
		B[D] = 0;
	    }
	    E += J - (E + 1);
	}
    }
    return (B);
}
function util_getColumnLeftPosition(K, A, B, I) {
    var C = K.getElementsByTagName("COL");
    var D = (C) ? C.length : 0;
    var G = true;
    if (A < D) {
	G = false;
	for ( var H = A; H < D; H++) {
	    if (C[H].style.display != "none") {
		A = H;
		G = true;
		break;
	    }
	}
    }
    if (G) {
	var F = null;
	if (bIsIE4 && !bIsIE6) {
	    var L = util_getLetterForColumnNumber(A + 1);
	    var J = K.cells(L + "1:" + L + B);
	    if (J) {
		if (J.length) {
		    F = getObjSumLeft(J[0]);
		} else {
		    F = getObjSumLeft(J);
		}
	    }
	} else {
	    if (bIsW3C || bIsIE6) {
		if (mstr.utils.ISIE8 || (mstr.utils.ISIE9 || mstr.utils.ISIE10)) {
		    var E = util_getHeaderColumnLeftPosition(K);
		    F = E[A] + getObjSumLeft(K);
		} else {
		    if (mstr.utils.ISCHROME || mstr.utils.ISSAFARI
			    || mstr.utils.ISW3CIE) {
			E = util_getHeaderColumnHelper(K, "getObjSumLeft");
			F = E[A];
		    } else {
			if (!I) {
			    I = K.getElementsByTagName("COL");
			}
			F = getObjSumLeft(I && I[A]);
		    }
		}
	    }
	}
	return (F);
    } else {
	return (getObjSumLeft(K) + getObjWidth(K));
    }
}
function util_getColumnLeftPositionsArray(B, E, F) {
    var G = new Array;
    if (!B) {
	return (G);
    }
    for ( var C = 0; C < E; C++) {
	G[C] = util_getColumnLeftPosition(B, C, F);
    }
    var A = null;
    if (bIsIE4) {
	var D = util_getLetterForColumnNumber(E);
	A = B.cells.namedItem(D + "1:" + D + F);
	if (A) {
	    if (A.length) {
		A = A[0];
	    }
	}
    }
    if (A) {
	G[E] = getObjSumLeft(A) + getObjWidth(A);
    } else {
	G[E] = getObjSumLeft(B) + getObjWidth(B);
    }
    return (G);
}
function util_setObjTableLayout(A, B) {
    A.style.tableLayout = "fixed";
    A.style.width = "";
    if (A.width) {
	A.width = "";
    }
    return;
}
function util_getRowHeightsOfTable(D, B) {
    var A = new Array;
    for ( var C = 0; C < B; C++) {
	A[C] = getObjHeight(D.rows[C]);
    }
    return (A);
}
function util_applyRowHeightsToTable(D, B) {
    if (!D) {
	return;
    }
    var A = D.rows.length;
    for ( var C = 0; C < A; C++) {
	if (B[C] != getObjHeight(D.rows[C])) {
	    D.rows[C].style.height = B[C];
	}
    }
    return;
}
function util_applyColWidthsToTable(H, C, A) {
    if ((!H) || (!C)) {
	return;
    }
    var B = C.length;
    var G = -1;
    var I = -1;
    var D = 1;
    for ( var F = 0; F < B; F++) {
	if (A[F] != null) {
	    I = F;
	    D = 1;
	} else {
	    I = G;
	    var J = -1;
	    for ( var E = F + 1; E < B; E++) {
		if (A[F] != null) {
		    J = E;
		    break;
		}
	    }
	    D = J - G;
	    if (D < 1) {
		D = 1;
	    }
	}
	if (I > -1) {
	    if (parseInt(A[I]) > -1) {
		C[F].style.width = (parseInt(A[I]) / D) + "px";
		if (A[I] > 0) {
		    C[F].style.display = "";
		} else {
		    if (!mstr.utils.ISW3C) {
			C[F].style.display = "none";
		    } else {
			C[F].style.width = "0px";
		    }
		}
		G = I;
	    } else {
		C[F].style.display = "none";
	    }
	}
    }
    H.style.width = "";
    return;
}
function util_parseRowSpan(B, C) {
    var A = B.rowSpan;
    if ((A) && (!isNaN(parseInt(A))) && (parseInt(A) > 0)) {
	return (parseInt(A));
    }
    return (C);
}
function util_initCOLTags(G, A) {
    var C = 0;
    var B = G.getElementsByTagName("COL");
    if (B) {
	C = B.length;
    }
    if (C < A) {
	var F = null;
	var E = G.getElementsByTagName("COLGROUP");
	if (E.length == 0) {
	    F = document.createElement("COLGROUP");
	    F = G.insertBefore(F, G.getElementsByTagName("TBODY")[0]);
	} else {
	    F = E[0];
	}
	var I = A - C;
	for ( var D = 0; D < I; D++) {
	    var H = document.createElement("COL");
	    F.appendChild(H);
	}
    }
    return;
}
function util_getWidthofFixedColumns(A, D, E, C, B) {
    if ((!A) || (!D) || (!E) || (!C)) {
	return (0);
    }
    if (D >= E) {
	return (getObjWidth(A));
    } else {
	return (util_getColumnLeftPosition(A, D, C, B) - getObjSumLeft(A));
    }
    return (0);
}
function util_getHeightofFixedRows(A, B, C) {
    if ((!A) || (!B) || (!C)) {
	return (0);
    }
    if (B >= C) {
	return (getObjHeight(A));
    } else {
	return (getObjSumTop(A.rows[B]) - getObjSumTop(A));
    }
    return (0);
}
function util_getLetterForColumnNumber(D) {
    var G = 97;
    var F = 0;
    var E = 0;
    var C = 0;
    do {
	F++;
	E = 26 * F;
	C = 26 * (F - 1) + 1;
	if ((D <= E) && (D >= C)) {
	    break;
	}
    } while (E <= 256);
    var B = "";
    var A = "";
    if (F > 1) {
	B = String.fromCharCode(G + F - 2);
    }
    A = String.fromCharCode(G + (D - C));
    return (B + A);
}
function util_getFixedRows(C) {
    if (!C) {
	return (0);
    }
    var D = C.rows;
    if (!D) {
	return (0);
    }
    var A = D.length;
    var E = 0;
    var F = "";
    if (D[A - 1].getAttribute("o")) {
	F = "o";
    } else {
	if (D[A - 1].getAttribute("level")) {
	    F = "level";
	}
    }
    if (F == "") {
	E = A;
    } else {
	for ( var B = 0; B < A; B++) {
	    if (D[B].getAttribute(F)) {
		E = B;
		break;
	    }
	}
    }
    return (E);
}
function util_getFixedCols(A) {
    var C = 0;
    var B = util_lastRepeatColHeaderInRow(A, 0);
    C = util_sumColumnCountForCell(A, 0, B);
    return (C);
}
function util_lastRepeatColHeaderInRow(B, E) {
    var D = B.rows;
    if (!D) {
	return (0);
    }
    var G = D[E].childNodes.length - 1;
    var F = -1;
    for ( var C = 0; C <= G; C++) {
	if (D[E].childNodes[C].getAttribute) {
	    var A = D[E].childNodes[C].getAttribute("AX");
	}
	if (!A || (A != "1")) {
	    break;
	} else {
	    F = C;
	}
    }
    if (F < G) {
	if (D[E].childNodes[F + 1].getAttribute) {
	    if ((D[E].childNodes[F + 1].getAttribute("AX") == "2")
		    && (D[E].childNodes[F + 1].getAttribute("OR") == "H")) {
		F += 1;
	    }
	}
    }
    return (F);
}
function util_sumColumnCountForCell(A, F, D) {
    if (!(A.rows)) {
	return (0);
    }
    var C = A.rows[F];
    if (!C) {
	return (0);
    }
    var E = 0;
    for ( var B = 0; B < D + 1; B++) {
	E += util_parseSpan(C.childNodes[B], 1);
    }
    return (E);
}
function util_parseSpan(B, C) {
    var A = B.colSpan;
    if ((A) && (!isNaN(parseInt(A))) && (parseInt(A) > 0)) {
	return (parseInt(A));
    }
    return (C);
}
function util_copyNode(C, A) {
    A.innerHTML = C.innerHTML;
    if (C.attributes) {
	var D = C.attributes.length;
	for ( var B = 0; B < D; B++) {
	    if ((C.attributes[B]) && (C.attributes[B].specified)) {
		A.setAttribute(C.attributes[B].nodeName,
			C.attributes[B].nodeValue, 0);
	    }
	}
    }
    if (C.className) {
	A.className = C.className;
    }
    return;
}
function util_resolveRepeatedColumnWidths(B, D) {
    var H = B;
    var M = new Array;
    var K = 0;
    if (!D) {
	return (H);
    }
    var F = D.length;
    for ( var I = 0; I < F; I++) {
	var L = false;
	var J = D[I].getAttribute("KEY");
	if (J) {
	    for ( var G = 0; G < K; G++) {
		if (M[K] == J) {
		    L = true;
		    break;
		}
	    }
	} else {
	    L = true;
	}
	if (!L) {
	    var C = new Array;
	    var A = 0;
	    for ( var G = I; G < F; G++) {
		if (D[G].getAttribute("KEY") == J) {
		    C[A] = G;
		    A++;
		}
	    }
	    var E = 0;
	    for ( var G = 0; G < C.length; G++) {
		if (B[C[G]] > E) {
		    E = B[C[G]];
		}
	    }
	    for ( var G = 0; G < C.length; G++) {
		H[C[G]] = E;
	    }
	    M[K] = J;
	    K++;
	}
    }
    return (H);
}
function util_getColumnWidthsString(J, C, M, B) {
    if (!J) {
	return ("");
    }
    var A = util_getColumnWidthsArray(J, M, B);
    A = util_resolveRepeatedColumnWidths(A);
    var E = new Array;
    var K = 0;
    if (C) {
	var D = C.length;
	for ( var G = 0; G < D; G++) {
	    var I = C[G].getAttribute("KEY");
	    var L = false;
	    for ( var F = 0; F < K; F = F + 2) {
		if (E[F] == I) {
		    L = true;
		    break;
		}
	    }
	    if (!L) {
		E[K] = I;
		K++;
		E[K] = parseInt(A[G]);
		K++;
	    }
	}
    }
    var H = "";
    var G = 0;
    do {
	H += E[G] + ":" + E[G + 1] + "_";
	G = G + 2;
    } while (G < K);
    return (H);
}
function util_applySingleRowHeight(D, E, G, A) {
    if ((!D) || (!D.rows) || (!D.rows.length)) {
	return;
    }
    var F = D.rows.length;
    if (G > F - 1) {
	return;
    }
    if (A > F - 1) {
	A = F - 1;
    }
    var B = (E.length == 0) ? "" : E + "px";
    for ( var C = G; C <= A; C++) {
	D.rows[C].style.height = B;
    }
    return;
}
function util_getColIndex(K, M, C) {
    try {
	var F = K.parentNode.rowIndex;
	var J = util_sumColumnCountForCell(M, F, K.cellIndex) - 1;
	var N = M.rows;
	for ( var A = F; A >= 0; A--) {
	    for ( var I = 0, E = 0; I < (J + C[F]);) {
		var B = N[A].cells[E++];
		var H = util_parseRowSpan(B, 1);
		var G = util_parseSpan(B, 1);
		if (H > 1) {
		    for ( var L = A + 1; L < (A + H); L++) {
			C[L] += G;
		    }
		}
		I += G;
	    }
	}
	return (J + C[F]);
    } catch (D) {
	microstrategy.errors.log(D);
	return null;
    }
}
function util_getAllCellsInColumnFromThisCell(B, R, A) {
    try {
	var U = B.parentNode.rowIndex;
	var J = R.rows;
	var F = new Array();
	for ( var Q = 0; Q < J.length; Q++) {
	    F[Q] = 0;
	}
	var O = util_getColIndex(B, R, F);
	var M = new Array();
	M[0] = B;
	var P = 1;
	var H = util_parseRowSpan(B, 1);
	if (A == null || typeof (A) == "undefined") {
	    A = J.length;
	}
	for ( var L = U + H; L < A;) {
	    var D = J[L].cells;
	    for ( var S = 0, N = 0; S < O - F[L] && N < D.length;) {
		var T = D[N++];
		var E = util_parseRowSpan(T, 1);
		var I = util_parseSpan(T, 1);
		if (E > 1) {
		    for ( var K = L + 1; K < (L + E); K++) {
			F[K] += I;
		    }
		}
		if (I > 1) {
		    F[L] += I - 1;
		}
		S += I;
	    }
	    var C = 1;
	    if ((O - F[L]) >= 0) {
		M[P++] = D[O - F[L]];
		C = util_parseRowSpan(D[O - F[L]], 1);
	    }
	    L += C;
	}
	return M;
    } catch (G) {
	microstrategy.errors.log(G);
	return null;
    }
}
function util_getAllCellsInRowFromThisCell(G, H) {
    if (G.nodeName.toLowerCase() != "td") {
	return null;
    }
    var F = G.parentNode.rowIndex;
    var B = new Array();
    B[0] = G;
    var C = 1;
    var E = util_parseRowSpan(G, H);
    for ( var D = G.cellIndex + 1; D < G.parentNode.cells.length; D++) {
	B[C] = G.parentNode.cells[D];
	C++;
    }
    for ( var D = F + 1; D < F + E; D++) {
	var I = H.rows[D];
	for ( var A = 0; A < I.cells.length; A++) {
	    B[C] = H.rows[D].cells[A];
	    C++;
	}
    }
    return B;
}
function util_findCell(D, H, B, C, G) {
    var F = D.rows[H];
    if (F != null) {
	var A = F.cells[B];
	var E = A && A.getAttribute(G);
	if (E && E.toLowerCase() == C.toLowerCase()) {
	    return A;
	}
    }
    return null;
}
menuScript = true;
var oSubCTimer = null;
var oSubPkrTimer = null;
var bIsOverContext = false;
var bDisplayLeft = false;
var sQuote = "\\'";
var sQuoteSimple = "'";
var sQuoteDouble = '"';
var aOndemandMenuItems = null;
var aMenuItems = null;
var aMenuItemsName;
var sDrillContextMenuExtraArg1;
var currentPicker = null;
var specialMenuLayers = null;
mstrMenuObj.prototype = new Object();
function mstrMenuObj(A) {
}
mstrMenuObj.adjustMenuPositionForClient = function(I, H, B, D) {
    if (B.getAttribute("origHeight")) {
	B.style.height = B.getAttribute("origHeight") + "px";
    }
    if (B.getAttribute("origWidth")) {
	B.style.width = B.getAttribute("origWidth") + "px";
    }
    var F = B.getAttribute("ty") == "cxt";
    var J = getObjWidth(F ? B.firstChild : B);
    if (J + I < getClientWidth() + getDocumentScrollLeft()) {
	if (bDisplayLeft && D) {
	    I = D - J + 2;
	} else {
	    bDisplayLeft = false;
	}
    } else {
	bDisplayLeft = true;
	if (D) {
	    I = D - J + 2;
	} else {
	    I = I - J + 10;
	}
    }
    var A = getClientHeight();
    var C = getObjHeight(F ? B.firstChild : B);
    var G = getDocumentScrollTop();
    var E = (H + C) - (G + A);
    if (C > A) {
	H = G + 1;
	if (E > 0) {
	    if (!B.getAttribute("origHeight")) {
		B.setAttribute("origHeight", C);
	    }
	    if (!B.getAttribute("origWidth")) {
		B.setAttribute("origWidth", J);
	    }
	    if (!F) {
		B.style.height = Math.min(C, A) + "px";
		B.style.width = Math.min(J, J + B.offsetWidth - B.clientWidth)
			+ "px";
		B.style.overflowY = "auto";
	    }
	}
    } else {
	if (E > 0) {
	    H = G + A - C - 2;
	}
    }
    if (F) {
	B.style.height = Math.min(C, A) + "px";
	B.style.width = Math.min(J, J + B.offsetWidth - B.clientWidth) + "px";
	if (B.offsetHeight < C) {
	    if (bIsIE7) {
		B.style.overflow = "auto";
	    } else {
		B.style.overflowY = "auto";
	    }
	}
    }
    moveObjTo(B, I, H);
};
function displayContextMenu(oTarget, e, moveMenu) {
    var sMenu = oTarget.getAttribute("CX");
    if (sMenu.length == 0) {
	return true;
    }
    var menuDefTarget = findTarget(oTarget, "CXID");
    var aMenuElementsName = menuDefTarget.getAttribute("CXID");
    var aMenuElements = microstrategy.getContextMenuManager(aMenuElementsName).menu_items;
    if (!aMenuElements || aMenuElements.length == 0) {
	return false;
    }
    var sDrillExtraArgument1 = oTarget.getAttribute("D1");
    var types = oTarget.getAttribute("cxty");
    if (typeof (microstrategy) != "undefined") {
	microstrategy.updateActiveCXProps(oTarget, e);
    }
    hideContextMenus();
    getMouse(e);
    aMenuItems = aMenuElements;
    aMenuItemsName = aMenuElementsName;
    sDrillContextMenuExtraArg1 = sDrillExtraArgument1;
    var avMenu = eval(sMenu);
    buildContextMenu(avMenu, 1, eval(types), oTarget, false, null);
    if (hasMenuItem(avMenu, eval(types))) {
	var menuX, menuY;
	if (moveMenu) {
	    var tID = oTarget.id;
	    var menuX = getObjSumLeftScrolled(tID) + 3;
	    var menuY = getObjSumTopScrolled(tID) + getObjHeight(tID) + 4;
	    oTarget.onmouseout = function() {
		OutContext();
	    };
	} else {
	    menuX = lMouseX - microstrategy.CURSOR_OFFSET;
	    menuY = lMouseY - microstrategy.CURSOR_OFFSET;
	}
	positionContextMenu(menuX, menuY, aMenuItemsName + "1");
	if (bIsIE4) {
	    togglePulldowns(getObj(aMenuItemsName + "1"), false);
	}
	document.getElementById(aMenuItemsName + "1").style.visibility = "visible";
	microstrategy.setContextMenuStatus(true);
    }
    return false;
}
function isMenuShown(menuItem, selectedTypes) {
    var supportedTypes = menuItem[5];
    var showJS = menuItem[6];
    var displayMenuItem = true;
    var __result = true;
    if (supportedTypes && supportedTypes.length > 0 && selectedTypes
	    && selectedTypes.length > 0) {
	var supportedTypesArray = eval(supportedTypes);
	__result = false;
	for ( var j = 0; j < selectedTypes.length; j++) {
	    for ( var i = 0; i < supportedTypesArray.length; i++) {
		if (selectedTypes[j] == supportedTypesArray[i]) {
		    __result = true;
		    break;
		}
	    }
	    if (__result) {
		break;
	    }
	}
    }
    if (showJS && showJS.length > 0 && __result == true) {
	if (showJS == "$check-subMenu-existence$") {
	    var subs = eval(menuItem[4]);
	    var n = subs.length;
	    if (n > 0) {
		for ( var i = 0; i < n; i++) {
		    var sub = aMenuItems[subs[i]];
		    if (sub) {
			__result = isMenuShown(sub, selectedTypes);
			if (__result) {
			    break;
			}
		    }
		}
	    } else {
		__result = false;
	    }
	} else {
	    __result = eval(showJS) ? true : false;
	}
    }
    return __result;
}
function getPicker(D) {
    var E = document.getElementsByName(D);
    var A = null;
    var C = document.body.childNodes;
    for ( var B = 0; B < C.length; B++) {
	if (C[B].id == D) {
	    A = C[B];
	    break;
	}
    }
    if (E) {
	if (!A) {
	    while (E.length > 1) {
		E[0].parentNode.removeChild(E[0]);
	    }
	    A = document.body.appendChild(E[0]);
	}
    }
    return A;
}
function showPicker(A, E, H, G, F) {
    var C = getPicker(E);
    if (C) {
	if (A) {
	    currentPicker = C;
	    var B = aMenuItemsName + F;
	    var D = getElementById(B);
	    if (D) {
		C.style.zIndex = D.style.zIndex + 100;
	    }
	    C.style.visibility = "hidden";
	    C.style.display = "block";
	    mstrMenuObj.adjustMenuPositionForClient(H, G, C);
	    if (bDisplayLeft) {
		C.style.left = parseInt(C.style.left, 10) - getObjWidth(D)
			+ "px";
	    }
	    C.style.visibility = "visible";
	} else {
	    C.style.display = "none";
	    currentPicker = null;
	}
    }
}
function buildContextMenuRows(avItems, iMenu, types, oTarget,
	loadOndemandMenuItems, modelID) {
    var sContent = "";
    var lRowCount = 0;
    var sRowID = "";
    var sSubCommand = "";
    var sOnClickLink = "";
    var hasMenuItem = false;
    var enabled = true;
    if (!oTarget) {
	oTarget = microstrategy.activeCXMenu;
    }
    var aMenuItemsLocal = null;
    if (loadOndemandMenuItems) {
	aMenuItemsLocal = aOndemandMenuItems;
	lRowCount = getNumTagsInDiv(aMenuItemsName + iMenu, "tr");
    } else {
	aMenuItemsLocal = aMenuItems;
    }
    for ( var iIndex = 0; iIndex < avItems.length; iIndex++) {
	if (aMenuItemsLocal[avItems[iIndex]][3] != 2) {
	    if (isMenuShown(aMenuItemsLocal[avItems[iIndex]], types)) {
		hasMenuItem = true;
		var menuClass = "menu-item";
		var menuClassWithSeparator = "menu-item-with-separator";
		var separatorClass = "menu-item-separator";
		enabled = true;
		var enableJS = aMenuItemsLocal[avItems[iIndex]][7];
		if (enableJS && enableJS.length > 0) {
		    enabled = eval(enableJS);
		}
		if (!enabled || aMenuItemsLocal[avItems[iIndex]][8] == 1) {
		    menuClass = "menu-item-disabled";
		    menuClassWithSeparator = "menu-item-disabled-with-separator";
		}
		sRowID = "cm" + iMenu + "r" + lRowCount;
		sContent += '<TR ID="' + sRowID + '" HEIGHT="18" AC="true" ';
		var cmd = aMenuItemsLocal[avItems[iIndex]][1];
		if (menuClass == "menu-item") {
		    cmd = replacePlaceholders(cmd, oTarget);
		    if (aMenuItemsLocal[avItems[iIndex]][3] == 1) {
			var typesString = convertArrayToString(types);
			if (aMenuItemsLocal[avItems[iIndex]][10] != null) {
			    var ondemandModelId = aMenuItemsLocal[avItems[iIndex]][10];
			    var ondemandDynamicMenuKey = aMenuItemsLocal[avItems[iIndex]][11];
			    var ondemandViewId = aMenuItemsLocal[avItems[iIndex]][12];
			    sSubCommand = "buildSubMenu("
				    + aMenuItemsLocal[avItems[iIndex]][4]
				    + ", " + (iMenu + 1) + ", getObjSumTop("
				    + sQuote + sRowID + sQuote + "), ["
				    + typesString + "], "
				    + loadOndemandMenuItems + ", " + sQuote
				    + ondemandModelId + sQuote + ", " + sQuote
				    + ondemandDynamicMenuKey + sQuote + ", "
				    + sQuote + ondemandViewId + sQuote + " );";
			} else {
			    sSubCommand = "buildSubMenu("
				    + aMenuItemsLocal[avItems[iIndex]][4]
				    + ", " + (iMenu + 1)
				    + ", getObjSumTopScrolled(" + sQuote
				    + sRowID + sQuote + "), [" + typesString
				    + "], " + loadOndemandMenuItems + ");";
			}
			sContent += "onMouseOver=\"clearTimeout(oSubCTimer); delaySubCMenus('"
				+ sSubCommand + "'); menuOn(this);\" ";
			sContent += 'onMouseOut="menuOff(this);" LI="sub" ';
		    } else {
			if (aMenuItemsLocal[avItems[iIndex]][3] == 3) {
			    sSubCommand = "hideContextSubMenus(" + iMenu
				    + "); showPicker(true," + sQuote
				    + aMenuItemsLocal[avItems[iIndex]][4]
				    + sQuote + ",getObjWidth(" + sQuote
				    + sRowID + sQuote + ") + getObjSumLeft("
				    + sQuote + sRowID + sQuote
				    + "), getObjSumTop(" + sQuote + sRowID
				    + sQuote + ")," + iMenu + ");";
			    sContent += "onMouseOver=\"clearTimeout(oSubCTimer); delaySubCMenus('"
				    + sSubCommand + "'); menuOn(this);\"";
			    sContent += 'onMouseOut="menuOff(this);"';
			    var pkr = getPicker(aMenuItemsLocal[avItems[iIndex]][4]);
			    if (pkr) {
				pkr.onmouseover = new Function(
					"clearTimeout(oSubPkrTimer);");
				pkr.onmouseout = new Function("OutContext();");
				pkr.onmousedown = new Function("e",
					"if (!e) {e=window.event;} eval(" + cmd
						+ ");OutContext();");
			    }
			} else {
			    sContent += 'onMouseOver="clearTimeout(oSubCTimer); menuOn(this);';
			    sContent += " hideContextSubMenus(" + iMenu + ");";
			    sContent += '" onMouseOut="menuOff(this);" ';
			    sOnClickLink = cmd;
			    if (sOnClickLink.indexOf("DCM") != -1) {
				if (sDrillContextMenuExtraArg1 == null) {
				    sOnClickLink = sOnClickLink.substr(0,
					    sOnClickLink.indexOf(")"))
					    + ",'')";
				} else {
				    sOnClickLink = sOnClickLink.substr(0,
					    sOnClickLink.indexOf(")"))
					    + ",'"
					    + sDrillContextMenuExtraArg1
					    + "')";
				}
			    }
			    sContent += "onClick=\"menuClick(this, '"
				    + aMenuItemsName + iMenu + '\');" LI="'
				    + sOnClickLink + ';" ';
			}
		    }
		    if (bIsW3C) {
			sContent += 'STYLE="cursor: pointer;"';
		    } else {
			sContent += 'STYLE="cursor: hand;"';
		    }
		}
		var isNextMenuOptionASeparator = isNextMenuSeparator(
			aMenuItemsLocal, avItems, iIndex, types);
		sContent += ">\n";
		sContent += '<TD WIDTH="12" ALIGN="MIDDLE" CLASS="mstrContextMenuLeft"';
		if (isNextMenuOptionASeparator) {
		    sContent += " class=" + separatorClass + " ";
		}
		sContent += ">";
		switch (aMenuItemsLocal[avItems[iIndex]][2]) {
		case 0:
		    sContent += '<IMG SRC="'
			    + microstrategy.FOLDER_IMAGES
			    + '1ptrans.gif" WIDTH="12" HEIGHT="1" HSPACE="0" VSPACE="0" ALT="" BORDER="0" ALIGN="ABSMIDDLE" />';
		    break;
		case 1:
		    var showCheck = true;
		    var checkJS = aMenuItemsLocal[avItems[iIndex]][9];
		    if (checkJS && checkJS.length > 0) {
			showCheck = eval(checkJS);
		    }
		    if (showCheck) {
			sContent += '<IMG SRC="'
				+ microstrategy.FOLDER_IMAGES
				+ 'MenuCheck.gif" WIDTH="12" HEIGHT="9" HSPACE="0" VSPACE="0" ALT="" BORDER="0" ALIGN="ABSMIDDLE" />';
		    }
		    break;
		case 2:
		    sContent += '<IMG SRC="'
			    + microstrategy.FOLDER_IMAGES
			    + 'CMenuRemove.gif" WIDTH="11" HEIGHT="11" HSPACE="0" VSPACE="0" ALT="" BORDER="0" ALIGN="ABSMIDDLE" /><IMG SRC="'
			    + microstrategy.FOLDER_IMAGES
			    + '1ptrans.gif" WIDTH="1" HEIGHT="1" HSPACE="0" VSPACE="0" ALT="" BORDER="0" ALIGN="ABSMIDDLE" />';
		    break;
		case 3:
		    sContent += '<IMG SRC="'
			    + microstrategy.FOLDER_IMAGES
			    + 'CMenuSubtotal.gif" WIDTH="12" HEIGHT="12" HSPACE="0" VSPACE="0" ALT="" BORDER="0" ALIGN="ABSMIDDLE" />';
		    break;
		case 4:
		    sContent += '<IMG SRC="'
			    + microstrategy.FOLDER_IMAGES
			    + 'arrow_DrillUp.gif" WIDTH="9" HEIGHT="9" HSPACE="0" VSPACE="0" ALT="" BORDER="0" ALIGN="ABSMIDDLE" />';
		    break;
		case 5:
		    sContent += '<IMG SRC="'
			    + microstrategy.FOLDER_IMAGES
			    + 'arrow_DrillDown.gif" WIDTH="9" HEIGHT="9" HSPACE="0" VSPACE="0" ALT="" BORDER="0" ALIGN="ABSMIDDLE" />';
		    break;
		case 6:
		    sContent += '<IMG SRC="'
			    + microstrategy.FOLDER_IMAGES
			    + 'arrow_DrillTemplate.gif" WIDTH="9" HEIGHT="9" HSPACE="0" VSPACE="0" ALT="" BORDER="0" ALIGN="ABSMIDDLE" />';
		    break;
		case 7:
		    sContent += '<IMG SRC="'
			    + microstrategy.FOLDER_IMAGES
			    + 'drill.png" WIDTH="16" HEIGHT="16" HSPACE="0" VSPACE="0" ALT="" BORDER="0" ALIGN="ABSMIDDLE" />';
		    break;
		case 8:
		    sContent += '<IMG SRC="'
			    + microstrategy.FOLDER_IMAGES
			    + 'treeLoading.gif" WIDTH="12" HEIGHT="12" HSPACE="0" VSPACE="0" ALT="" BORDER="0" ALIGN="ABSMIDDLE" />';
		    break;
		}
		sContent += "</TD>";
		sContent += '<TD WIDTH="1"';
		if (isNextMenuOptionASeparator) {
		    sContent += " class=" + separatorClass + " ";
		}
		sContent += '><IMG SRC="'
			+ microstrategy.FOLDER_IMAGES
			+ '1ptrans.gif" HEIGHT="1" WIDTH="1" ALT="" BORDER="0"></TD>';
		sContent += '<TD ALIGN="LEFT" NOWRAP="1" ';
		if (isNextMenuOptionASeparator) {
		    sContent += " class=" + menuClassWithSeparator + " ";
		} else {
		    sContent += " class=" + menuClass + " ";
		}
		sContent += ">" + aMenuItemsLocal[avItems[iIndex]][0]
			+ "&nbsp;&nbsp;<BR/></TD>";
		sContent += '<TD WIDTH="12" ALIGN="RIGHT" NOWRAP="1" ';
		if (isNextMenuOptionASeparator) {
		    sContent += " class=" + separatorClass + " ";
		}
		sContent += ">";
		if (aMenuItemsLocal[avItems[iIndex]][3] == 1
			|| aMenuItemsLocal[avItems[iIndex]][3] == 3) {
		    var expandImage = enabled ? "MenuExpand.gif"
			    : "MenuExpand_off.gif";
		    sContent += '<IMG SRC="'
			    + microstrategy.FOLDER_IMAGES
			    + expandImage
			    + '" WIDTH="8" HEIGHT="9" ALT="" BORDER="0" /><IMG SRC="'
			    + microstrategy.FOLDER_IMAGES
			    + '1ptrans.gif" WIDTH="2" HEIGHT="1" ALT="0" BORDER="0" />';
		} else {
		    sContent += '<IMG SRC="'
			    + microstrategy.FOLDER_IMAGES
			    + '1ptrans.gif" WIDTH="12" HEIGHT="1" ALT="0" BORDER="0" />';
		}
		sContent += "</TD></TR>\n";
		lRowCount++;
	    }
	}
    }
    return sContent;
}
function replacePlaceholders(str, oTarget) {
    var matched = false;
    var tempStr = str;
    if (tempStr.indexOf("%40") > -1) {
	tempStr = unescape(tempStr);
    }
    if (tempStr.indexOf("@") > -1) {
	tempStr = tempStr.replace(/@[^@]+@/g, function(token) {
	    matched = true;
	    var attName = token.substring(1, token.length - 1);
	    if (attName.indexOf("__bone__") > -1) {
		attName = attName.replace("__bone__",
			"microstrategy.findBone(microstrategy.activeCXMenu)");
		return eval(attName);
	    } else {
		return oTarget.getAttribute(attName) || "";
	    }
	});
    }
    if (matched) {
	return tempStr;
    } else {
	return str;
    }
}
function isNextMenuSeparator(E, A, D, C) {
    for ( var B = D + 1; B < A.length; B++) {
	if (isMenuShown(E[A[B]], C)) {
	    return (E[A[B]][3] == 2);
	}
    }
    return false;
}
function getMenuDiv(B) {
    var A = getObj(B);
    if (!A) {
	A = document.createElement("DIV");
	A.setAttribute("id", B);
	A.setAttribute(microstrategy.HTMLATTR_OBJTYPE,
		microstrategy.OBJTYPE_CONTEXT_MENU);
	A.onmouseover = OverContext;
	A.onmouseout = OutContext;
	A.style.visibility = "hidden";
	A.style.position = "absolute";
	A.style.backgroundColor = "#FFFFFF";
	A.style.border = "1px #ddd solid";
	A.style.top = "-999px";
	document.body.appendChild(A);
    }
    return A;
}
function buildContextMenu(B, H, E, C, F, G) {
    var D = "";
    D = '<TABLE BORDER="0" CELLSPACING="0" CLASS="mstrContextMenuRight">\n';
    D += buildContextMenuRows(B, H, E, C, F, G);
    D += "</TABLE>";
    var A = getMenuDiv(aMenuItemsName + H);
    A.innerHTML = D;
}
function hasMenuItem(A, B) {
    for ( var C = 0; C < A.length; C++) {
	if (aMenuItems[A[C]][3] != 2) {
	    if (isMenuShown(aMenuItems[A[C]], B)) {
		return true;
	    }
	}
    }
    return false;
}
function upClick(C) {
    if (bIsW3C && !C) {
	return false;
    }
    var B = (bIsIE4) ? (event.button == 2 || event.button == 3)
	    : (C.button == 3);
    if (B) {
	var A = getEventTarget(C);
	A = findTarget(A, "CX");
	if (A) {
	    document.onmouseup = null;
	    return false;
	}
    }
}
function OverContext() {
    bIsOverContext = true;
}
function OutContext() {
    clearTimeout(oSubCTimer);
    bIsOverContext = false;
}
function hideContextMenus() {
    if (typeof (aMenuItemsName) == "undefined") {
	return;
    }
    if (!bIsOverContext) {
	hideContextSubMenus(1);
	var A = getObj(aMenuItemsName + "1");
	if (A) {
	    A.style.visibility = "hidden";
	    A.style.top = "-999px";
	    microstrategy.setContextMenuStatus(false);
	    A.innerHTML = "";
	}
	if (bIsIE4) {
	    togglePulldowns(A, true);
	}
    }
}
function hideContextSubMenus(C) {
    var B = 1;
    for ( var B = 4; B > C; B--) {
	var A = getObj(aMenuItemsName + B);
	if (A) {
	    A.style.visibility = "hidden";
	    A.innerHTML = "";
	    if (bIsIE4) {
		togglePulldowns(A, true);
	    }
	}
    }
    if (currentPicker != null) {
	currentPicker.style.display = "none";
	currentPicker = null;
    }
}
function buildSubMenu(C, D, K, H, F, B, L, A) {
    var G = aMenuItemsName + D;
    var I = getMenuDiv(G);
    I.modelID = B;
    if (bIsIE4) {
	I.style.height = "auto";
	I.style.width = "auto";
	I.style.overflowY = "visible";
    }
    I.style.zIndex = 1000;
    buildContextMenu(C, D, H, null, F, B);
    addOndemandSubMenuItems(B, L, A, D);
    if (I.childNodes.length == 0) {
	return;
    }
    var E = getObjLeft(aMenuItemsName + (D - 1));
    var J = getObjWidth(aMenuItemsName + (D - 1));
    positionContextMenu(E + J - 2, K, G, E);
    if (bIsIE4) {
	togglePulldowns(getObj(aMenuItemsName + D), false);
    }
    hideContextSubMenus(D);
    document.getElementById(aMenuItemsName + D).style.visibility = "visible";
}
function delaySubCMenus(sExecuteText) {
    clearTimeout(oSubCTimer);
    if (sExecuteText.length > 0) {
	if (bIsInPortal && mstr.utils.ISFF3) {
	    eval(sExecuteText);
	} else {
	    oSubCTimer = window.setTimeout(sExecuteText, 250);
	}
    }
}
function positionContextMenu(E, C, D, B) {
    if (bIsIE4) {
	var A = D;
	if (typeof (A) == "string") {
	    A = document.getElementById(D);
	}
	if (A) {
	    A.style.height = "auto";
	    A.style.width = "auto";
	    A.style.overflowY = "visible";
	}
    }
    var A = getObj(D);
    A.style.zIndex = 1000;
    mstrMenuObj.adjustMenuPositionForClient(E, C, A, B);
}
function generateLink(A) {
    A += "&innerWidth=" + getClientWidth() + "&innerHeight="
	    + getClientHeight();
    return A;
}
function submitCM(D, B, E) {
    if (B) {
	D = D + "&iframe=true";
    }
    var A = true;
    if (microstrategy && microstrategy.eventManager) {
	A = microstrategy.eventManager.notifyOrphanBones("onmenusubmitform");
    }
    if (A) {
	var C = createDynamicForm(D);
	if (B) {
	    C.target = "frameManager";
	}
	if (E != null) {
	    C.target = E;
	}
    }
    submitForm(C);
}
dropDownMenusScript = true;
var oTimer = null;
var bIsOver = false;
var oSubTimer = null;
var bMenuOpen = false;
var bCompleted = false;
var asBranch = new Array();
var nBranchElements = 0;
var bClickStyle = false;
function activateHeader(F, E, D) {
    for ( var B = 0; B < iMainMenus; B++) {
	var A = getObj("menuHeader" + B);
	if (A) {
	    var C = A.getAttribute("E") == "0";
	    if (!C) {
		if (B == F) {
		    A.className = E;
		} else {
		    A.className = D;
		}
	    }
	}
    }
}
function fixMenus(A) {
    var B;
    for (i = 0; i < A.length; i++) {
	B = getObj(A[i][1]);
	if (B) {
	    B.setAttribute(A[i][2], A[i][3]);
	}
    }
    B = B = getObj("mb" + A[0][0]);
    if (B) {
	B.setAttribute("C", "0");
    }
}
function updateCheckedAndEnabledOptions(menuName) {
    var menu = getObj(menuName);
    var TABLEs = menu.getElementsByTagName("TABLE");
    TABLEs[0].className = "menu-block";
    var TRs = TABLEs[0].getElementsByTagName("TR");
    var menuUpdated = false;
    var newValue;
    var wasChecked;
    var wasEnabled;
    var wasShown;
    var baseBone;
    for (i = 0; i < TRs.length; i++) {
	baseBone = TRs[i].getAttribute("BB");
	wasChecked = TRs[i].getAttribute("H");
	wasEnabled = TRs[i].getAttribute("E");
	wasShown = (TRs[i].style.display != "none");
	if (baseBone && baseBone.length > 0
		&& !(microstrategy && microstrategy.bone(baseBone))) {
	    continue;
	}
	var auxStr = TRs[i].getAttribute("DS");
	if (auxStr && auxStr.length > 0) {
	    newValue = eval(auxStr);
	    if (newValue != wasShown) {
		menuUpdated = true;
		if (newValue) {
		    TRs[i].style.display = "";
		} else {
		    TRs[i].style.display = "none";
		    continue;
		}
	    }
	}
	var auxStr = TRs[i].getAttribute("DC");
	if (auxStr && auxStr.length > 0) {
	    newValue = eval(auxStr) ? "1" : "0";
	    if (newValue != wasChecked) {
		TRs[i].setAttribute("H", newValue);
		menuUpdated = true;
	    }
	}
	auxStr = TRs[i].getAttribute("DE");
	if (auxStr && auxStr.length > 0) {
	    newValue = eval(auxStr) ? "1" : "0";
	    if (newValue != wasEnabled) {
		TRs[i].setAttribute("E", newValue);
		menuUpdated = true;
	    }
	}
    }
    if (menuUpdated) {
	menu.setAttribute("C", "0");
    }
}
function completeMenu(A) {
    var E;
    var C;
    var F = getObj(A);
    var D = F.getElementsByTagName("TABLE");
    D[0].className = "menu-block";
    var B = D[0].getElementsByTagName("TD");
    for (i = 0; i < B.length; i++) {
	if (B[i].id == "blank") {
	    B[i].width = "1";
	    B[i].innerHTML = '<IMG SRC="' + microstrategy.FOLDER_IMAGES
		    + '1ptrans.gif" WIDTH="1" HEIGTH="1">';
	} else {
	    if (B[i].id == "mnI") {
		B[i].align = "middle";
		if (B[i].parentNode.getAttribute("E") == "1") {
		    B[i].className = "menu-item-image";
		} else {
		    B[i].className = "menu-item-image-disabled";
		}
		if (B[i].parentNode.getAttribute("H") == "1") {
		    B[i].innerHTML = '<IMG SRC="' + microstrategy.FOLDER_IMAGES
			    + 'MenuCheck.gif" style="width:12px;height:9px;">';
		} else {
		    B[i].innerHTML = '<IMG SRC="' + microstrategy.FOLDER_IMAGES
			    + '1ptrans.gif">';
		}
	    } else {
		if (B[i].id == "mnT" || B[i].id == "mnS") {
		    B[i].noWrap = true;
		    C = (B[i].parentNode.getAttribute("E") == "1");
		    if (C) {
			B[i].className = "menu-item";
		    } else {
			B[i].className = "menu-item-disabled";
		    }
		    if (B[i].parentNode.getAttribute("AS") == "1") {
			if (C) {
			    B[i].className = "menu-top-separator";
			} else {
			    B[i].className = "menu-top-separator-disabled";
			}
		    }
		} else {
		    if (B[i].id == "mnE") {
			B[i].width = "12";
			B[i].align = "right";
			C = (B[i].parentNode.getAttribute("E") == "1");
			if (B[i].parentNode.getAttribute("AS") == "1") {
			    if (C) {
				B[i].className = "menu-top-separator";
			    } else {
				B[i].className = "menu-top-separator-disabled";
			    }
			}
			if (B[i].parentNode.getAttribute("SB") == "1") {
			    if (C) {
				B[i].innerHTML = '<IMG SRC="'
					+ microstrategy.FOLDER_IMAGES
					+ 'MenuExpand.gif" WIDTH="8" HEIGTH="9">';
			    } else {
				B[i].innerHTML = '<IMG SRC="'
					+ microstrategy.FOLDER_IMAGES
					+ 'MenuExpand_off.gif" WIDTH="8" HEIGTH="9">';
			    }
			} else {
			    B[i].innerHTML = '<IMG SRC="'
				    + microstrategy.FOLDER_IMAGES
				    + '1ptrans.gif" WIDTH="12" HEIGTH="10">';
			}
		    }
		}
	    }
	}
    }
    F.setAttribute("C", "1");
    bCompleted = true;
}
function ShowLayer(G, E) {
    if (oTimer) {
	clearTimeout(oTimer);
    }
    HideAllLayers();
    if (isNaN(G)) {
	if (specialMenuLayers == null) {
	    specialMenuLayers = [];
	}
	specialMenuLayers.push(G);
    }
    var F = getObj("mb" + G);
    if (F.getAttribute("C") != "1") {
	completeMenu("mb" + G);
    }
    var B = (E) ? E : ("menuHeader" + G);
    var C = getObjSumTop(B) + getObjHeight(B);
    var D = getObjSumLeftScrolled(B);
    var A = getObj("mb" + G);
    A.style.zIndex = 1000;
    positionContextMenu(D, C, A);
    if (bIsIE4) {
	togglePulldowns(A, false);
    }
    asBranch[0] = "mb" + G;
    nBranchElements = 1;
    A.style.visibility = "visible";
    bMenuOpen = true;
}
function hidePopupMenus(A) {
    hideContextMenus();
    if (A || (bClickStyle && bMenuOpen)) {
	UnselectAllLayers();
    }
}
function UnselectAllLayers() {
    if (!bIsOver && typeof (iMainMenus) != "undefined") {
	HideAllLayers();
	var B;
	for ( var A = 0; A < iMainMenus; A++) {
	    B = getObj("menuHeader" + A);
	    if (B) {
		if (B.getAttribute("E") == "0") {
		    B.className = mstrMenuDisabledClass;
		} else {
		    B.className = mstrMenuEnabledClass;
		}
	    }
	}
	bMenuOpen = false;
    }
}
function HideAllLayers() {
    nBranchElements = 0;
    if (!bIsOver && typeof (iSubMenus) != "undefined") {
	for ( var A = 0; A < iSubMenus; A++) {
	    var B = document.getElementById("mb" + A);
	    if (B) {
		B.style.visibility = "hidden";
	    }
	}
	if (specialMenuLayers != null) {
	    for ( var A = 0; A <= specialMenuLayers.length; A++) {
		document.getElementById("mb" + specialMenuLayers[A]).style.visibility = "hidden";
	    }
	    specialMenuLayers = null;
	}
	if (bIsIE4) {
	    togglePulldowns(null, true);
	}
    }
    bMenuOpen = false;
}
function OverLayer() {
    if (oTimer) {
	clearTimeout(oTimer);
    }
    bIsOver = true;
}
function OutLayer() {
    if (oTimer) {
	clearTimeout(oTimer);
    }
    bIsOver = false;
    if (!bClickStyle) {
	oTimer = setTimeout("UnselectAllLayers()", 300);
    }
}
function hideSubMenu(F, C, B) {
    var E = false;
    var A = 0;
    for (i = 0; i < nBranchElements; i++) {
	if (E) {
	    var D = document.getElementById(asBranch[i]);
	    if (D) {
		if (bIsIE4) {
		    togglePulldowns(D, true);
		}
		D.style.visibility = "hidden";
	    }
	    asBranch[i] = 0;
	}
	if (asBranch[i] == C) {
	    E = true;
	    A = i + 1;
	}
    }
    nBranchElements = A + 1;
    asBranch[nBranchElements - 1] = F;
}
function menuOn(A) {
    if (A.className != "menuDisabled") {
	A.className = "menu-row-selected";
    }
}
function menuOff(A) {
    if (A.className != "menuDisabled") {
	A.className = "menu-row";
    }
}
function menuClick(oMenuItem, sMenu) {
    var oMenu = typeof (sMenu) == "string" ? document.getElementById(sMenu)
	    : sMenu;
    if (oMenu.modelID) {
	var model = mstr.$obj(oMenu.modelID);
	if (model) {
	    var state = model.get("readyState");
	    if (state && state === mstr.Enum.Widget.READYSTATE.WAITING) {
		return;
	    }
	}
    }
    if (oMenuItem.className != "menuDisabled") {
	if (oMenuItem.getAttribute("AC") == "true") {
	    var sLink = oMenuItem.getAttribute("LI");
	    if (sLink.length > 0) {
		bIsOverContext = false;
		oMenu.style.visibility = "hidden";
		hideContextMenus();
		window.mstrSubmitLink = true;
		eval(sLink);
	    }
	} else {
	    bIsOverContext = false;
	    oMenu.style.visibility = "hidden";
	    HideAllLayers();
	    hideContextMenus();
	}
    }
}
function onCl(A) {
    onMv(A);
    ShowLayer(A.getAttribute("ndx"));
}
function onMv(C) {
    var B = C.getAttribute("E") == "0";
    var A = C.getAttribute("ndx");
    updateCheckedAndEnabledOptions("mb" + A);
    if (getObj("mb" + A).getAttribute("C") != "1") {
	completeMenu("mb" + A);
    }
    if (!B) {
	if (bMenuOpen) {
	    activateHeader(A, "menu-header-selected", "menu-header");
	    ShowLayer(A);
	} else {
	    activateHeader(A, "menu-header-selected", "menu-header");
	}
    }
}
function onMo(B) {
    var A = B.getAttribute("E") == "0";
    if (!A) {
	if (!bMenuOpen) {
	    B.className = "menu-header";
	} else {
	    OutLayer("menu-header", "menu-header-disabled");
	}
    }
}
function convertArrayToString(A) {
    var C = "";
    if (A) {
	for ( var B = 0; B < A.length; B++) {
	    if (A[B]) {
		C = C + sQuote + A[B] + sQuote + ", ";
	    } else {
		C = C + "null, ";
	    }
	}
	C = C.substr(0, C.length - 2);
    }
    return C;
}
function buildWidgetSubMenu(C, J, Q, D) {
    completeMenu(C);
    if (!D) {
	D = "currentControl";
    }
    var P = getObj(C);
    var L = P.getElementsByTagName("tbody")[0];
    var I = L.firstChild;
    var M = I.getAttribute("id");
    M = M.substr(0, M.length - 1);
    var K = microstrategy.getViewerBone().widgets;
    var G = false;
    if (K) {
	if (L.hasChildNodes()) {
	    for ( var F = L.childNodes.length - 1; F >= 0; F--) {
		if (J || L.childNodes[F].getAttribute("dyn_menu")) {
		    L.removeChild(L.childNodes[F]);
		}
	    }
	}
	G = !J && L.hasChildNodes();
	var E = false;
	for ( var F = 0; F < K.length; F++) {
	    var O = K[F];
	    if (!Q || Q == O.scope) {
		var B = I.getAttribute("id");
		var H = I.cloneNode(true);
		H.setAttribute("id", M + F);
		H.setAttribute("dyn_menu", true);
		H.className = "ctrl" + O.tbClass;
		if (!E && G) {
		    H.setAttribute("AS", 1);
		    E = true;
		}
		var N = microstrategy.SUBOBJTYPE_DOC_WIDGET + "|" + O.fqcn
			+ ";" + O.rslPath + ";" + O.title + ";"
			+ O.previewImage + ";" + O.isApp + ";" + O.scope + ";"
			+ O.defaultDHTMLStyle;
		var A = "microstrategy.bone('rwb_viewer').commands.exec('" + D
			+ "', '" + N + "');";
		if (D == "currentControl") {
		    A += "microstrategy.eventManager.notifyOrphanBones('requestCurrentControlChange', '"
			    + N + "');";
		}
		H.setAttribute("JS", A);
		H.childNodes[2].innerHTML = O.title;
		L.appendChild(H);
	    }
	}
	completeMenu(C);
    }
}
function addOndemandSubMenuItems(G, C, E, H) {
    if (G) {
	var B = mstr.$obj(G);
	if (!B) {
	    return;
	}
	var A = mstr.$obj(E);
	if (C) {
	    B.setCurrentDynamicMenuKey(C);
	}
	var D = "";
	if (microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION) {
	    D = "Report";
	} else {
	    var F = microstrategy.findBone(microstrategy.activeCXMenu);
	    D = F.objId;
	}
	B.setGridKey(D);
	A.setMenuLevel(H);
	A.setModel(B);
	B.execPopulate();
    }
}
function addDynamicMenus(E, D, B) {
    setOndemandMenuItems(D);
    var C = buildContextMenuRows(B, E, null, null, true, null);
    var A = getMenuDiv(aMenuItemsName + E);
    if (C == "") {
	if (A.childNodes[0].rows && A.childNodes[0].rows.length == 0) {
	    hideContextSubMenus(E - 1);
	}
    } else {
	addToExistingDivTable(A, C);
	mstrMenuObj.adjustMenuPositionForClient(parseInt(A.style.left, 10),
		parseInt(A.style.top, 10), A);
    }
}
function addToExistingDivTable(E, C) {
    var B = document.createElement("div");
    B.innerHTML = "<TABLE>" + C + "</TABLE>\n";
    var D = B.childNodes[0];
    var A = E.childNodes[0];
    if (A != null && (A.tBodies == null || A.tBodies.length == 0)) {
	A.appendChild(document.createElement("tbody"));
    }
    while (D.rows.length > 0 && (A != undefined)) {
	A.tBodies[0].appendChild(D.rows[0]);
    }
}
function getNumTagsInDiv(C, B) {
    var D = getObj(C);
    var A = D.getElementsByTagName(B);
    if (A != null) {
	return A.length;
    } else {
	return 0;
    }
}
function setOndemandMenuItems(A) {
    aOndemandMenuItems = A;
}
function removeProcessingMenuItem(D) {
    var A = getMenuDiv(aMenuItemsName + D);
    var C = A.getElementsByTagName("tr");
    if (C != null) {
	var B = 0;
	while (B < C.length) {
	    if (C[B] != null && "processing" == C[B].getAttribute("id")) {
		C[B].parentNode.removeChild(C[B]);
	    }
	    B++;
	}
    }
}
function addProcessingMenuItem(E) {
    var B = microstrategy.descriptors.getDescriptor("2901");
    var C = "";
    var D = "menu-item";
    C += '<TR ID="processing" name="processing" HEIGHT="18" AC="true" ';
    C += 'onMouseOver="clearTimeout(oSubCTimer); menuOn(this);';
    C += " hideContextSubMenus(" + E + ");";
    C += '" onMouseOut="menuOff(this);" ';
    if (bIsW3C) {
	C += 'STYLE="cursor: pointer;"';
    } else {
	C += 'STYLE="cursor: hand;"';
    }
    C += ">\n";
    C += '<TD WIDTH="12" ALIGN="MIDDLE" CLASS="mstrContextMenuLeft">';
    C += '<IMG SRC="'
	    + microstrategy.FOLDER_IMAGES
	    + 'treeLoading.gif" WIDTH="12" HEIGHT="12" HSPACE="0" VSPACE="0" ALT="" BORDER="0" ALIGN="ABSMIDDLE" />';
    C += "</TD>";
    C += '<TD WIDTH="1"><IMG SRC="' + microstrategy.FOLDER_IMAGES
	    + '1ptrans.gif" HEIGHT="1" WIDTH="1" ALT="" BORDER="0"></TD>';
    C += '<TD ALIGN="LEFT" NOWRAP="1" ';
    C += " class=" + D + " ";
    C += ">" + B + "&nbsp;&nbsp;<BR/></TD>";
    C += '<TD WIDTH="12" ALIGN="RIGHT" NOWRAP="1" ';
    C += ">";
    C += '<IMG SRC="' + microstrategy.FOLDER_IMAGES
	    + '1ptrans.gif" WIDTH="12" HEIGHT="1" ALT="0" BORDER="0" />';
    C += "</TD>";
    C += "</TR>";
    var A = getMenuDiv(aMenuItemsName + E);
    addToExistingDivTable(A, C);
}
var dropDown = new function() {
};
dropDown.prototype = new Object();
dropDown.togglePicker = function(show, id, dropdown, bone) {
    try {
	if (typeof microstrategy.log != "undefined"
		&& microstrategy.log.shouldLog(mstrLogImpl.METHOD_LEVEL)) {
	    microstrategy.log.start("dropDown.togglePicker", 0);
	}
	var oldPicker = null;
	if (bone.currentPicker) {
	    oldPicker = bone.currentPicker;
	    if (bone.currentPicker.selected) {
		var item = bone.currentPicker.selected;
		if (item) {
		    item.className = "";
		}
		bone.currentPicker.selected = null;
		bone.currentPicker.commandId = null;
		bone.currentPicker.toolId = null;
	    }
	    bone.currentPicker.style.display = "none";
	    bone.currentPicker = null;
	}
	if (show) {
	    bone.currentPicker = document.getElementById(id);
	    if (!bone.currentPicker) {
		microstrategy.errors.log(microstrategy.descriptors
			.getDescriptor("3623"));
		return false;
	    }
	    bone.currentPicker.style.zIndex = 1000;
	    var cmdId = dropdown.getAttribute(microstrategy.HTMLATTR_CMD_ID);
	    if (!cmdId) {
		cmdId = dropdown.parentNode
			.getAttribute(microstrategy.HTMLATTR_CMD_ID);
	    }
	    bone.currentPicker.commandId = cmdId;
	    var subtypeStyle = bone.currentPicker
		    .getAttribute(microstrategy.HTMLATTR_STYLE);
	    if (subtypeStyle != null) {
		this.adjustPickerElements(bone.currentPicker);
	    }
	    if (bone.selectPickerElement) {
		bone.selectPickerElement(bone.currentPicker);
	    }
	    for ( var i = 0; i < bone.currentPicker.childNodes.length; i++) {
		var oChild = bone.currentPicker.childNodes[i];
		auxStr = oChild.getAttribute("de");
		if (auxStr && auxStr.length > 0) {
		    oChild.className = (eval(auxStr)) ? " " : "disabled";
		}
	    }
	    var leftElem = mstr.utils.BoxModel
		    .getElementSumOffsetLeftAccurately(dropdown, document.body);
	    var bottomElem = mstr.utils.BoxModel
		    .getElementSumOffsetTopAccurately(dropdown, document.body)
		    + getObjHeight(dropdown);
	    if (bone.dialogDiv
		    && bone.dialogDiv
			    .getAttribute(mstrHTMLAttributes.ATTR_DIALOG) == "true") {
		leftElem -= getObjSumLeft(bone.dialogDiv);
		bottomElem -= getObjSumTop(bone.dialogDiv);
	    }
	    bone.currentPicker.style.visibility = "hidden";
	    bone.currentPicker.style.display = "block";
	    var lClientWidth = getClientWidth();
	    var lPickerWidth = getObjWidth(bone.currentPicker);
	    if (lPickerWidth + leftElem > lClientWidth
		    + ((bone.dialogDiv && !mstr.utils.ISIE6) ? bone.dialogDiv.scrollLeft
			    : 0)) {
		leftElem = Math.max(leftElem - lPickerWidth
			+ getObjWidth(dropdown), 0);
	    }
	    moveObjTo(bone.currentPicker, leftElem, bottomElem);
	    if (bIsIE6 && !bIsIE7 && bone.maxHeight) {
		bone.currentPicker.style.height = "auto";
		bone.currentPicker.style.height = (bone.currentPicker.clientHeight < parseInt(bone.maxHeight)) ? bone.currentPicker.clientHeight
			+ "px"
			: bone.maxHeight;
	    }
	    bone.currentPicker.style.visibility = "visible";
	    togglePulldowns(bone.currentPicker, false);
	} else {
	    if (oldPicker) {
		togglePulldowns(oldPicker, true);
	    }
	}
    } catch (err) {
	microstrategy.errors.log(err);
    } finally {
	if (typeof microstrategy.log != "undefined"
		&& microstrategy.log.shouldLog(mstrLogImpl.METHOD_LEVEL)) {
	    microstrategy.log.stop("dropDown.togglePicker", 0);
	}
    }
    return false;
};
dropDown.closePicker = function(F, D) {
    try {
	if (typeof microstrategy.log != "undefined"
		&& microstrategy.log.shouldLog(mstrLogImpl.METHOD_LEVEL)) {
	    microstrategy.log.start("dropDown.closePicker", 0);
	}
	if (!F) {
	    F = window.event;
	}
	var E = getEventTarget(F);
	var C = true;
	if (E) {
	    if (!E.getAttribute("id") && E.parentNode.nodeType == 1) {
		E = E.parentNode;
	    }
	    var B = false;
	    if (D.currentPicker) {
		B = (findTarget(E, "ty") == D.currentPicker)
			&& (E != D.currentPicker)
			&& (E.className.indexOf("disabled") < 0);
		C = (E.className.indexOf("disabled") < 0)
			&& (E != D.currentPicker);
	    }
	    if (B) {
		if (D.execPicker) {
		    C = D.execPicker(D.currentPicker, E);
		} else {
		    alert("Option '" + E.getAttribute("id")
			    + "' was selected from picker '"
			    + D.currentPicker.id
			    + "'. Please make sure the bone '" + D.id
			    + "' implements execPicker.");
		}
	    }
	}
	if (C && D.currentPicker) {
	    dropDown.togglePicker(false, D.currentPicker.id, null, D);
	}
	return true;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    } finally {
	if (typeof microstrategy.log != "undefined"
		&& microstrategy.log.shouldLog(mstrLogImpl.METHOD_LEVEL)) {
	    microstrategy.log.stop("dropDown.closePicker", 0);
	}
    }
};
dropDown.adjustPickerElements = function(I) {
    try {
	var E = I.getAttribute(microstrategy.HTMLATTR_STYLE);
	switch (E) {
	case "color":
	    var H = microstrategy.userPalette;
	    if (H) {
		var B = microstrategy.findChildWithAtt(I, "span", "name",
			"pkrCustom");
		if (!B) {
		    return;
		}
		if (B.getElementsByTagName("img").length == 0) {
		    var J = document.createElement("img");
		    J.src = microstrategy.FOLDER_IMAGES + "1ptrans.gif";
		    B.appendChild(J);
		}
		displayObj(B);
		if (!ISIE7) {
		    var F = microstrategy.findChildWithAtt(I, "span", "name",
			    "pkrMore");
		    if (F) {
			F.style.marginTop = "25px";
		    }
		}
		H = H.split(",");
		var A = microstrategy.findChildrenWithAtt(I, "span", "custom",
			"1");
		if (A.length == H.length && A.length == 8) {
		    if (A[0].id == "pkr" + H[0]) {
			return;
		    }
		} else {
		    if (A.length == H.length) {
			return;
		    }
		}
		for ( var D = 0; D < A.length; D++) {
		    I.removeChild(A[D]);
		}
		for ( var D = (H.length - 1); D >= 0; D--) {
		    var G = document.createElement("span");
		    G.setAttribute("custom", "1");
		    G.id = "pkr" + H[D];
		    G.setAttribute("name", "pkr" + H[D]);
		    G.setAttribute("title", H[D]);
		    G.style.backgroundColor = H[D];
		    B.insertAdjacentElement("afterEnd", G);
		}
	    }
	    break;
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrSerializer.prototype = new Object;
mstrSerializer.prototype.buffer = "";
mstrSerializer.prototype.needDelim = false;
mstrSerializer.CH_ESCAPE = "*";
mstrSerializer.CH_DELIM = ".";
mstrSerializer.CH_BRA = "-";
mstrSerializer.CH_KET = "_";
mstrSerializer.CH_LESS = "<";
mstrSerializer.STR_NULL = "*0";
mstrSerializer.prototype.getState = function() {
    try {
	return this.buffer;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrSerializer.prototype.addStr = function(B) {
    try {
	if (this.needDelim) {
	    this.buffer += mstrSerializer.CH_DELIM;
	}
	this.appendValue(B);
	this.needDelim = true;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrSerializer.prototype.addInt = function(B) {
    try {
	this.addStr(B + "");
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrSerializer.prototype.addBoolean = function(B) {
    try {
	this.addStr(B ? "1" : "0");
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrSerializer.prototype.addValues = function(A) {
    try {
	this.buffer += mstrSerializer.CH_BRA;
	for ( var B = 0; B < A.length; B++) {
	    if (B > 0) {
		this.buffer += mstrSerializer.CH_DELIM;
	    }
	    this.appendValue(A[B]);
	}
	this.buffer += mstrSerializer.CH_KET;
	this.needDelim = false;
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrSerializer.prototype.appendValue = function(C) {
    try {
	var A = new RegExp(
		"[\\" + mstrSerializer.CH_ESCAPE + "\\" + mstrSerializer.CH_BRA
			+ "\\" + mstrSerializer.CH_KET + "\\"
			+ mstrSerializer.CH_DELIM + "\\"
			+ mstrSerializer.CH_LESS + "]", "g");
	var D = mstrSerializer.CH_ESCAPE + "$&";
	C = String(C).replace(A, D);
	this.buffer += C;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
function mstrSerializer() {
    return this;
}
mstrNumber.UNIT_CM = "1";
mstrNumber.UNIT_IN = "2";
mstrNumber.UNIT_MM = "3";
mstrNumber.UNIT_PT = "4";
mstrNumber.UNIT_PC = "5";
mstrNumber.UNIT_PX = "6";
mstrNumber.UNIT_EM = "7";
mstrNumber.prototype = new Object;
mstrNumber.prototype.locale = "1033";
mstrNumber.prototype.units = mstrNumber.UNIT_IN;
mstrNumber.prototype.unitsLabel = "";
mstrNumber.prototype.thousandSeparatorRegex = null;
mstrNumber.prototype.toLocaleString = function(B) {
    try {
	return (B + "").replace(".", mstr.Settings.Locale.DECIMALSEP);
    } catch (A) {
	microstrategy.errors.log(A);
	return B;
    }
};
mstrNumber.prototype.toString = function(D, A) {
    try {
	if (A == true) {
	    var C = this.getThousandSepRegex();
	    if (C) {
		D = String(D).replace(C, "");
	    }
	}
	D = String(D).replace(mstr.Settings.Locale.DECIMALSEP, ".");
	return D;
    } catch (B) {
	microstrategy.errors.log(B);
	return D;
    }
};
mstrNumber.prototype.toUserUnits = function(C, B) {
    try {
	return this.toLocalUnits(this.units, C, B);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrNumber.prototype.toLocalUnits = function(D, E, C) {
    try {
	var A;
	switch (D) {
	case mstrNumber.UNIT_CM:
	    A = (parseFloat(this.toString(E)) * 2.54).toFixed(4) + "";
	    break;
	case mstrNumber.UNIT_MM:
	    A = (parseFloat(this.toString(E)) * 25.4).toFixed(4) + "";
	    break;
	case mstrNumber.UNIT_PT:
	    A = (parseFloat(this.toString(E)) * 72).toFixed(4) + "";
	    break;
	case mstrNumber.UNIT_PC:
	    A = (parseFloat(this.toString(E)) * 6).toFixed(4) + "";
	    break;
	case mstrNumber.UNIT_PX:
	    A = (parseFloat(this.toString(E)) * microstrategy.DPI_CONVERSION)
		    + "";
	    break;
	case mstrNumber.UNIT_EM:
	    A = (parseFloat(this.toString(E)) * 10.6666).toFixed(4) + "";
	    break;
	default:
	    A = parseFloat(this.toString(E)).toFixed(4) + "";
	}
	if (C) {
	    return A;
	} else {
	    return this.toLocaleString(A);
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrNumber.prototype.toUSUnits = function(C, B) {
    try {
	return this.convertToUSUnits(this.units, C, B);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrNumber.prototype.convertToUSUnits = function(D, E, C) {
    try {
	var A = E;
	switch (D) {
	case mstrNumber.UNIT_CM:
	    A = parseFloat(this.toString(E)) / 2.54 + "";
	    break;
	case mstrNumber.UNIT_MM:
	    A = parseFloat(this.toString(E)) / 25.4 + "";
	    break;
	case mstrNumber.UNIT_PT:
	    A = parseFloat(this.toString(E)) / 72 + "";
	    break;
	case mstrNumber.UNIT_PC:
	    A = parseFloat(this.toString(E)) / 6 + "";
	    break;
	case mstrNumber.UNIT_PX:
	    A = parseFloat(this.toString(E)) / microstrategy.DPI_CONVERSION
		    + "";
	    break;
	case mstrNumber.UNIT_EM:
	    A = (parseFloat(this.toString(E)) / 10.6666) + "";
	    break;
	}
	if (C) {
	    return A;
	} else {
	    return this.toLocaleString(A);
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrNumber.prototype.convertUnit = function(B, C, A) {
    return this.toLocalUnits(C, this.convertToUSUnits(B, A, true), true);
};
mstrNumber.prototype.getThousandSepRegex = function() {
    if (this.thousandSeparatorRegex == null) {
	var A = mstr.Settings.Locale.THOUSANDSEP;
	A = A.replace(/(\W){1}/g, "\\$1");
	this.thousandSeparatorRegex = new RegExp(A, "g");
    }
    return this.thousandSeparatorRegex;
};
function mstrNumber() {
    return this;
}
microstrategy.number = new mstrNumber();
mstr.behaviors.Generic = (function() {
    var J = {};
    J.returnFalse = function() {
	return false;
    };
    J.returnTrue = function() {
	return true;
    };
    J.set_enabled = function B(K, G) {
	K && (K.disabled = !G);
    };
    J.set_tooltip = function I(K, G) {
	K && (K.title = (G != null) ? G : "");
    };
    J.clearBrowserHighlights = function D(G) {
	mstr.utils.Dom.clearBrowserHighlights(G);
	return true;
    };
    J.set_css_display = function A(M, N, K, L) {
	if (M && M.style) {
	    var G = !!L ? N : K;
	    if (!mstr.utils.ISW3C) {
		if (G == "table") {
		    G = "block";
		}
	    }
	    M.style.display = G;
	}
    };
    J.toggleCellElement = function F(S, Q, P, M, N, L, O) {
	var G = (Q > -1) && S && S.rows && S.rows[Q];
	var R = G && G.cells && G.cells[P];
	var K = R && R.childNodes && R.childNodes[M];
	this.set_css_display(K, N, L, O);
    };
    J.renderState = function E(G, L) {
	if (!G) {
	    return;
	}
	var M = null;
	if (L & mstr.Enum.Widget.STATE.SELECTED) {
	    M = mstr.Settings.Scheme.SELECTED_BORDERCOLOR;
	} else {
	    if (L & mstr.Enum.Widget.STATE.HOVER) {
		M = mstr.Settings.Scheme.HOVER_BORDERCOLOR;
	    } else {
		M = mstr.Settings.Scheme.DEFAULT_BORDERCOLOR;
	    }
	}
	if (M != null) {
	    G.style.border = "1px " + M + " solid";
	    G.style.margin = "0px";
	} else {
	    G.style.border = "0px";
	    G.style.margin = "1px";
	}
	var K = null;
	if (!G.disabled && (L & mstr.Enum.Widget.STATE.SELECTED)
		&& (L & mstr.Enum.Widget.STATE.HOVER)) {
	    K = mstr.Settings.Scheme.SELECTED_HOVER_BGCOLOR;
	} else {
	    if (L & mstr.Enum.Widget.STATE.SELECTED) {
		K = mstr.Settings.Scheme.SELECTED_BGCOLOR;
	    } else {
		if (!G.disabled && (L & mstr.Enum.Widget.STATE.HOVER)) {
		    K = mstr.Settings.Scheme.HOVER_BGCOLOR;
		} else {
		    K = mstr.Settings.Scheme.DEFAULT_BGCOLOR;
		}
	    }
	}
	G.style.backgroundColor = (K != null) ? K : "transparent";
    };
    J.oncontextmenu = function C(O, K, G) {
	var M = mstr.$obj(G);
	var L = new mstr.lang.Event(O, K);
	if (!M || !M.fireCommands) {
	    return true;
	}
	var N = M.getModel().getRMCModel();
	if (M.props.enabled && N) {
	    M.execCommand("OpenPopup", {
		popup : mstr.$obj("RMCPopup1"),
		x : L.x + 3,
		y : L.y + 3
	    });
	    cancelEvent(O);
	    return false;
	}
	return true;
    };
    J.on_model_set_validationStatus = function H(K, L, O) {
	if (K.props.visible && K.props.enabled) {
	    var G = L && L.get("validationStatus"), N = G && G.statusCode;
	    if (N && N != mstr.Enum.Validation.STATUSCODE.VALID) {
		var M = L && L.get("message");
		if (M) {
		    alert(M);
		}
	    }
	}
    };
    return J;
})();
mstr.behaviors.MojoWidget = (function() {
    var MW = {};
    MW.on_set_visible = function MW_on_set_visible(view, model, rootTag) {
	var bShow = view.props.visible;
	mstr.behaviors.Generic.set_css_display(rootTag, "block", "none", bShow);
	if (bShow) {
	    this.renderMojoWidget(view, model, rootTag);
	}
    };
    MW.renderMojoWidget = function MW_renderMojoWidget(view, model, rootTag) {
	var props = view.props, id = props.id, cfg = props.cfg, uiCfg = cfg.ui, dataCfg = cfg.data, dataProp = cfg.dataProp, mojoConfig = {};
	if (!mstr.utils.String.isEmpty(cfg)) {
	    try {
		uiCfg = eval("(" + uiCfg + ")") || {};
	    } catch (ex) {
	    }
	    mojoConfig = uiCfg;
	    var data = dataProp && model.props[dataProp] || {};
	    if (dataProp === undefined) {
		try {
		    dataCfg = eval("(" + dataCfg + ")") || {};
		} catch (ex) {
		}
		data = dataCfg;
	    }
	}
	mojoConfig.placeholder = rootTag.lastChild;
	mojoConfig.id = id.replace("id_", "");
	var fnHandlePropChanges = function(newV) {
	    var m = model.getAncestorByProperty(dataProp, true);
	    if (m) {
		m.set(dataProp, newV);
	    }
	};
	switch (props.name) {
	case "ACLEditor":
	    mstr.$H.overwrite(mojoConfig, {
		acls : data
	    });
	    mojoConfig.onhasChangedChange = function() {
		var newV = this.getACLItems();
		fnHandlePropChanges(newV);
	    };
	    mojoConfig.getAvailableRightsForSelection = function() {
		return model.props.userSubscribeRights.items;
	    };
	    microstrategy.showSharingEditor(null, null, null, mojoConfig);
	    break;
	}
    };
    return MW;
})();
mstr.behaviors.FloatingEditor = (function() {
    var B = {};
    B.on_set_visible = function A(C, E, F) {
	var D = C.props.visible;
	if (C.get("isModal")) {
	    mstr.controllers.ModalEditors[D ? "add" : "remove"](C);
	}
	if (D) {
	    F.style.zIndex = microstrategy.getMaxZIndex();
	}
	mstr.behaviors.Generic.set_css_display(F, "block", "none", D);
    };
    return B;
})();
mstr.behaviors.TextBox = (function() {
    var D = {};
    D.on_set_visible = function B(P, S, V) {
	mstr.behaviors.Generic.set_css_display(V, "block", "none",
		P.props.visible);
	if (mstr.utils.ISIE4 && !V.mstrInitialized) {
	    V.mstrInitialized = true;
	    var T = V.getElementsByTagName("input")[0];
	    if (T) {
		var O = T.onfocus, U = function() {
		    P.textBoxInitialized = true;
		    return true;
		};
		if (O) {
		    T.onfocus = function() {
			return O.apply(this, arguments)
				&& U.apply(null, arguments);
		    };
		} else {
		    T.onfocus = U;
		}
		var R = T.onblur, Q = function() {
		    P.textBoxInitialized = false;
		    return true;
		};
		if (R) {
		    T.onblur = function() {
			return Q.apply(null, arguments)
				&& R.apply(this, arguments);
		    };
		} else {
		    T.onblur = Q;
		}
	    }
	    self.setTimeout('mstr.behaviors.TextBox.initValue("' + P.getId()
		    + '")', 100);
	}
    };
    D.initValue = function K(O) {
	var P = mstr.$obj(O);
	if (P) {
	    this.on_model_set_value(P, P.props.model, P.props.element);
	}
    };
    D.on_set_enabled = function H(P, R, S) {
	mstr.behaviors.Generic.set_enabled(S, P.props.enabled);
	var O = S.childNodes[1].childNodes[0];
	var Q = P.props.enabled;
	mstr.behaviors.Generic.set_enabled(O, Q);
	O.style.backgroundColor = Q ? "#ffffff" : "#d4d0c8";
    };
    D.on_set_caption = function N(P, Q, S) {
	var R = S.childNodes[0];
	var O = P.props.caption;
	R.childNodes[0].innerHTML = (O != null) ? O : "";
	mstr.behaviors.Generic.set_css_display(R, "block", "none", (O != null)
		&& (O != ""));
    };
    D.on_set_size = function M(O, P, R) {
	var Q = parseInt(O.props.size);
	if (!isNaN(Q)) {
	    R.childNodes[1].childNodes[0].size = Q;
	}
    };
    D.on_set_maxlength = function I(P, Q, R) {
	var O = parseInt(P.props.maxlength);
	if (!isNaN(O)) {
	    R.childNodes[1].childNodes[0].maxlength = O;
	}
    };
    D.on_model_set_dataType = function A(O, P, R) {
	var Q = mstr.utils.Math.isDataTypeNumeric(P && P.get("dataType"));
	R.childNodes[1].childNodes[0].style.textAlign = Q ? "right" : "left";
    };
    D.on_model_set_value = function F(O, Q, S) {
	var P = Q && Q.get(O.get("valueField"));
	if (P == null) {
	    P = "";
	}
	P += "";
	O.props.rendering = true;
	var R = O.get("selectionRange");
	if (R) {
	    window.setTimeout(function() {
		O.set("selectionRange", null);
	    }, 0);
	}
	if (mstr.utils.ISIE4) {
	    if (!O.textBoxInitialized || !this._containDBCharacter(P)) {
		S.value = P;
	    }
	} else {
	    if (S.value != P) {
		S.value = P;
	    }
	}
	if (R) {
	    mstr.utils.Controls.setSelectionRange(S, R.start, R.end);
	}
	O.props.rendering = false;
	O.set("validationStatus", {
	    statusCode : mstr.Enum.Validation.STATUSCODE.VALID,
	    message : "",
	    bubble : true
	});
    };
    D._containDBCharacter = function J(O) {
	for ( var P = 0; P < O.length; P++) {
	    var Q = O.charCodeAt(P);
	    if (Q > 256 && !this._isDBCurSymbol(Q)) {
		return true;
	    }
	}
	return false;
    };
    D._isDBCurSymbol = function J(O) {
	return (O == 8364) || (O == 8361) || (O == 65509) || (O == 65510);
    };
    D.on_value_change = function L(X, T, U) {
	var V = mstr.$obj(X);
	if (!V) {
	    return true;
	}
	if (V.props.rendering) {
	    return true;
	}
	var S = V.getModel();
	if (S) {
	    var Y = mstr.utils.Math.convertStringToDataType(T && T.value, S
		    .get("dataType"));
	    var O = document.getElementsByClassName("mstrImagePreview")[0];
	    if (O) {
		var Q = microstrategy.getViewerBone().doc.prevSelectedId, W = document
			.getElementById(Q);
		if (U) {
		    var P = mstr.utils.Math.convertStringToDataType(window.URL
			    .createObjectURL(U), S.get("dataType"));
		    U.url = P;
		    W.setAttribute("ut", mstr.Enum.IMAGE_URL_TYPE.IMAGE_NAME);
		    O.blobURL = P;
		    O.imgName = T.value;
		} else {
		    O.blobURL = undefined;
		    W.setAttribute("ut", mstr.Enum.IMAGE_URL_TYPE.HTTP_URL);
		}
	    }
	    var Z = (!V.get("validator") || V.get("validator").validate(Y));
	    if (Z) {
		V.set("selectionRange", mstr.utils.Controls
			.getSelectionRange(T));
		if (O) {
		    S._storeDeltaProp("imgFile", U);
		}
		S.set(V.props.valueField, Y);
		S.set("isComplex", false);
	    }
	}
	var R = V.fireCommands && V.fireCommands();
	return true;
    };
    D.on_file_selected = function G(O, S) {
	if (S.type !== "file" || !S.files[0]) {
	    return false;
	}
	var V = document.getElementById("imgUrl_txt"), R = S.files[0];
	S.value = "";
	if (S.value != "") {
	    var U = S.cloneNode(true);
	    S.parentNode.appendChild(U);
	    if (S.removeNode) {
		S.removeNode(true);
	    }
	}
	var P = R.name, Q = [ "image/jpeg", "image/bmp", "image/gif",
		"image/png" ], T = true;
	me = this, ONE_MB = 1 << 20, IMG_MAX_SIZE = 3, ORI_MAX_SIZE = 10;
	if (R.size > ORI_MAX_SIZE * ONE_MB
		|| (R.size > IMG_MAX_SIZE * ONE_MB && R.type === "image/gif")) {
	    mstrmojo
		    .alert(mstrmojo
			    .desc(14665,
				    "Cannot embed an image larger than ##MB. Enter a URL to the image instead.")
			    .replace("##", IMG_MAX_SIZE));
	    return false;
	}
	mstr.$A
		.forEach(
			Q,
			function(X) {
			    if (T && R.type === X) {
				var Y = new Image(), W = new FileReader();
				W.onload = function(Z) {
				    Y.src = Z.target.result;
				    Y.onload = function() {
					var a = R;
					if (R.size > IMG_MAX_SIZE * ONE_MB) {
					    var c = mstrmojo.imageUtils, b = Y.naturalWidth >= 1920
						    && Y.naturalHeight >= 1080 ? 45
						    : 75, d = R.type === "image/png" ? "png"
						    : "jpg";
					    compressImg = c.compress(Y, b, d);
					    a = c
						    .dataURLToBlob(compressImg.src);
					    if (a.size > IMG_MAX_SIZE * ONE_MB) {
						mstrmojo
							.alert(mstrmojo
								.desc(
									14633,
									"Cannot embed an image larger than ##MB. Your image is still ###MB after compression. Enter a URL to the image instead.")
								.replace("##",
									IMG_MAX_SIZE)
								.replace(
									"###",
									(a.size / ONE_MB)
										.toFixed(1)));
						return false;
					    }
					}
					V.value = P;
					a.name = R.name;
					me.on_value_change("imgUrl", V, a);
				    };
				    Y.onerror = function() {
					mstrmojo
						.alert(mstrmojo
							.desc(14636,
								"Invalid image format. Please use .png, .jpg, .jpeg, .gif or .bmp."));
					return false;
				    };
				};
				W.onerror = function() {
				    mstrmojo
					    .alert(mstrmojo
						    .desc(14636,
							    "Invalid image format. Please use .png, .jpg, .jpeg, .gif or .bmp."));
				    return false;
				};
				W.readAsDataURL(R);
				T = false;
				return false;
			    }
			});
	if (T) {
	    mstrmojo
		    .alert(mstrmojo
			    .desc(14636,
				    "Invalid image format. Please use .png, .jpg, .jpeg, .gif or .bmp."));
	    return false;
	}
    };
    D.on_keyPress = function E(R, O) {
	R = R || hWin.event;
	if (R.keyCode == 13) {
	    var P = mstr.$obj(O);
	    if (!P) {
		return true;
	    }
	    var Q = P.getModel();
	    if (!Q) {
		return true;
	    }
	    if (!Q.get("submitQueueOnEnter")) {
		return true;
	    }
	    if (Q.submitParentQueue) {
		Q.submitParentQueue();
	    }
	    return false;
	}
	return true;
    };
    D.on_set_validationStatus = function C(O, P, Q) {
	mstr.behaviors.Controls.on_set_validationStatus(O, P, Q);
	if (!mstr.behaviors.Controls.needsValidation(O)) {
	    return true;
	}
	if (mstr.behaviors.Controls.validate(O)) {
	    Q.style.backgroundImage = "none";
	} else {
	    Q.style.background = "#ffffff url(../style/mstr/images/errorLine.gif) bottom left repeat-x";
	}
	return true;
    };
    return D;
})();
mstr.behaviors.TextBoxWithIcon = (function() {
    var B = {};
    B.on_set_enabled = function H(K, N, O) {
	var M = !!K.props.enabled;
	mstr.behaviors.Generic.set_enabled(O, M);
	var L = O.childNodes[1].rows[0].cells;
	var J = L[0].childNodes[0].firstChild;
	mstr.behaviors.Generic.set_enabled(J, M);
	J.style.backgroundColor = M ? "#ffffff" : "#d4d0c8";
	var I = L[1].childNodes[0];
	mstr.behaviors.ToolButtonRounded.markAsEnabled(I, M);
    };
    B.on_set_caption = function E(J, K, M) {
	var L = M.childNodes[0];
	var I = J.props.caption;
	L.childNodes[0].innerHTML = (I != null) ? I : "";
	mstr.behaviors.Generic.set_css_display(L, "block", "none", (I != null)
		&& (I != ""));
    };
    B.on_set_size = function C(I, J, L) {
	var K = parseInt(I.props.size);
	if (!isNaN(K)) {
	    L.childNodes[1].rows[0].cells[0].childNodes[0].size = K;
	}
    };
    B.on_set_maxlength = function D(J, K, L) {
	var I = parseInt(J.props.maxlength);
	if (!isNaN(I)) {
	    L.childNodes[1].rows[0].cells[0].childNodes[0].maxlength = I;
	}
    };
    B.on_model_set_valueString = function A(I, K, L) {
	var J = K && K.get("valueString");
	if (J == null) {
	    J = "";
	}
	L.childNodes[1].rows[0].cells[0].childNodes[0].value = J;
    };
    B.onkeypress = function G(L, J, I, K) {
	L = L || J.event;
	if (L.keyCode == 13) {
	    this.fire(I, K);
	    stopEventBubbling(L);
	    return false;
	}
	return true;
    };
    B.fire = function F(I, K) {
	var J = mstr.$obj(I);
	if (J && J.fireCommands && !!J.props.enabled) {
	    J.fireCommands(null, K);
	}
	return true;
    };
    return B;
})();
mstr.behaviors.ToolButtonRounded = (function() {
    var E = {};
    E.hover = function C(F) {
	F && !F.disabled && (F.style.backgroundPosition = "center right");
    };
    E.unhover = function B(F) {
	F && !F.disabled && (F.style.backgroundPosition = "center left");
    };
    E.on_set_enabled = function D(F, G, H) {
	this.markAsEnabled(H, !!F.props.enabled);
    };
    E.markAsEnabled = function A(G, F) {
	if (!F) {
	    this.unhover(G);
	}
	mstr.behaviors.Generic.set_enabled(G, F);
	G.childNodes[0].style.backgroundPosition = F ? "left center"
		: "right center";
	G.childNodes[0].style.cursor = F ? "pointer" : "default";
    };
    return E;
})();
mstr.behaviors.ToolButton = (function() {
    var B = {};
    B.hover = function A(F) {
	F
		&& !F.disabled
		&& mstr.behaviors.Generic.renderState(F,
			mstr.Enum.Widget.STATE.HOVER);
    };
    B.unhover = function D(F) {
	F && mstr.behaviors.Generic.renderState(F, 0);
    };
    B.on_set_enabled = function E(F, G, H) {
	this.markAsEnabled(H, !!F.props.enabled);
    };
    B.markAsEnabled = function C(G, F) {
	if (!F) {
	    this.unhover(G);
	}
	mstr.behaviors.Generic.set_enabled(G, F);
	G.style.backgroundPosition = F ? "left center" : "right center";
    };
    return B;
})();
mstr.behaviors.TextLink = (function() {
    var A = {};
    A.on_set_enabled = function B(D, F, G) {
	var C = G && G.childNodes[0];
	if (!C) {
	    return;
	}
	var E = D.props.enabled;
	C.disabled = !E;
	if (E) {
	    C.className = C.className.replace("Disabled", "");
	} else {
	    C.className += "Disabled";
	}
    };
    return A;
})();
mstr.behaviors.TextFieldLabel = (function() {
    var A = {};
    A.on_model_set_value = function B(C, F, E) {
	var D = F && F.get(C.get("valueField"));
	if (D == null) {
	    D = "";
	}
	D += "";
	E.innerHTML = D;
    };
    return A;
})();
mstr.behaviors.TextDiv = (function() {
    var A = {};
    A.on_set_caption = function B(E, F, H) {
	var G = H.childNodes[0];
	var D = E.props.caption;
	G.innerHTML = (D != null) ? D : "";
	mstr.behaviors.Generic.set_css_display(G, "block", "none", (D != null)
		&& (D != ""));
    };
    A.on_model_set_value = function C(D, F, G) {
	var E = (F && F.get && F.get("value")) || F;
	if (E == null || E == undefined || typeof (E) != "string") {
	    E = "";
	}
	G.childNodes[1].innerHTML = E;
    };
    return A;
})();
mstr.behaviors.ListTextDiv = (function() {
    var A = {};
    A.on_model_set_items = function B(D, E, F) {
	F.childNodes[1].innerHTML = this.buildObjectListString(E);
    };
    A.buildObjectListString = function C(E) {
	var G = [];
	for ( var F = 0, D = mstr.$A.len(E); F < D; F++) {
	    G[F] = E[F]["n"];
	}
	return G.join(", ");
    };
    return A;
})();
mstr.behaviors.Pulldown = (function() {
    var E = {};
    E.onmousedown = function G(K) {
	var L = mstr.$obj(K);
	var M = L.getModel && L.getModel();
	if (L.props.enabled && !this._showAsLabel(L, M)) {
	    if (L.get("opened")) {
		L.execCommand("ClosePopup");
	    } else {
		L.execCommand("OpenPopup");
		if (L.get("popup") && L.get("popup").focus) {
		    L.get("popup").focus();
		}
	    }
	}
	return true;
    };
    E.on_set_enabled = function C(K, M, Q) {
	var L = !!K.props.enabled;
	Q.disabled = !L;
	var P = Q.childNodes[0];
	P.style.color = L ? "#000000" : "#808080";
	var O = Q.childNodes[1].rows[0].cells[1];
	O.style.color = L ? "#000000" : "#808080";
	O.style.backgroundColor = (this._showAsLabel(K, M)) ? "transparent"
		: (L ? "#ffffff" : "#d4d0c8");
	O.style.cursor = (L && !this._showAsLabel(K, M)) ? "pointer"
		: "default";
	if (O.childNodes[1].firstChild) {
	    O.childNodes[1].firstChild.ignoreMouseEvents = !(L && !this
		    ._showAsLabel(K, M));
	}
	var N = K.get("disabledModelValue");
	if (!L && N != undefined) {
	    M.execSingleSelect(N);
	}
    };
    E.on_set_opened = function J(K, L, N) {
	var M = N.childNodes[1].rows[0].cells[2].childNodes[0];
	if (K.props.opened) {
	    M.className += "Pushed";
	} else {
	    M.className = M.className.replace(/Pushed/, "");
	}
    };
    E.on_set_width = function A(M, N, O) {
	var L = M.props.width;
	if (L && L != "auto" && !L.match(/\%$/)) {
	    O.style.width = L;
	    O.childNodes[1].style.width = L;
	    O.childNodes[1].style.tableLayout = "fixed";
	    var K = M.props.popup;
	    if (K) {
		K.width = L;
	    }
	}
    };
    E.on_set_enabled_colorPicker = function I(K, M, P) {
	var L = !!K.props.enabled;
	P.disabled = !L;
	var O = P.childNodes[1].rows[0].cells[1].childNodes[1];
	var N = M.get("actualColor");
	if (N && N.indexOf(",") > 0) {
	    N = "#" + N.split(",")[0];
	}
	O.style.backgroundColor = L ? N : "#a3a19d";
    };
    E.clickColorButton = function D(P) {
	var M = mstr.$obj(P);
	var L = M ? M.get("model") : null;
	var N = L ? L.get("parent") : null;
	var O = M.props.modelPath;
	var K = O
		.substring(
			O.lastIndexOf(mstr.controllers.Factory.PATHDELIM) + 1,
			O.length);
	if (N && N.exec) {
	    N.exec(K, L.get("actualColor"));
	}
    };
    E.showPulldownOrLabel = function B(K, M, P) {
	var O = P.childNodes[1].rows[0].cells[2];
	O.style.display = (!this._showAsLabel(K, M)) ? ((mstr.utils.ISW3C) ? "table-cell"
		: "block")
		: "none";
	var L = P.childNodes[1].rows[0].cells[1];
	var N = L.className;
	if (this._showAsLabel(K, M)) {
	    if (!/AsLabel$/.test(N)) {
		N += "AsLabel";
	    }
	} else {
	    N = N.replace(/AsLabel$/, "");
	}
	L.className = N;
    };
    E._showAsLabel = function H(K, M) {
	var L = M && M.props && M.props.items;
	return (K.props.showSingleItemListAsLabel && (L && mstr.$A.len(L) == 1));
    };
    E.on_model_set_readyState = function F(T, Q, V) {
	var O = Q && Q.get("readyState");
	T.set("message", null);
	var U = V.childNodes[1].rows[0].cells[1];
	var N = U.childNodes[1];
	var M = U.childNodes[2];
	var L = false;
	if ((O != mstr.Enum.Widget.READYSTATE.IDLE)
		&& mstr.utils.Hash.isEmpty(Q && Q.get("selectedIndices"))) {
	    L = true;
	}
	if (!L) {
	    M.style.display = "none";
	    N.style.display = "block";
	    this.showPulldownOrLabel(T, Q, V);
	} else {
	    N.style.display = "none";
	    M.style.display = "block";
	    var S = '<span class="' + (T.props.cssPrefix || "")
		    + (T.props.cssClass || "") + 'ReadyState">';
	    var K = "</span>";
	    var P = "";
	    var R = T.props.descriptors;
	    switch (O) {
	    case mstr.Enum.Widget.READYSTATE.SUCCESS:
		P = R && R.loadingText;
		break;
	    case mstr.Enum.Widget.READYSTATE.CANCELLED:
		P = R && R.requestCancelledText;
		break;
	    case mstr.Enum.Widget.READYSTATE.WAITING:
		P = R && R.waitingText;
		break;
	    case mstr.Enum.Widget.READYSTATE.TIMEOUT:
		P = "Request timed out.";
		break;
	    case mstr.Enum.Widget.READYSTATE.ERROR:
	    default:
		P = R && R.requestTimeOutText;
		break;
	    }
	    M.innerHTML = S + P + K;
	}
    };
    return E;
})();
mstr.behaviors.ListView = (function() {
    var K = {};
    K.on_set_height = function I(L, N, R) {
	var Q = L && L.props, P = Q && Q.scrollArea, M = P && P.style, O = Q.height;
	if (M && O) {
	    M.height = O;
	}
    };
    K.on_set_width = function G(M, O, R) {
	var Q = M && M.props, P = Q && Q.scrollArea, N = P && P.style, L = Q.width;
	if (!N) {
	    return;
	}
	if (L == "" || L == "auto") {
	    R.style.width = N.width = L;
	} else {
	    if (L && L.match(/\%$/)) {
		R.style.width = L;
		if (!mstr.utils.ISIE6) {
		    N.width = "auto";
		}
	    } else {
		N.width = (L != null) ? L : "";
		R.style.width = "auto";
	    }
	}
    };
    K.on_set_caption = function A(M, N, P) {
	var L = M.props.caption != null ? M.props.caption : "";
	var O = P.rows[0].cells[0].firstChild.firstChild;
	mstr.behaviors.Generic.set_css_display(O, "block", "none", L != "");
	O.innerHTML = L;
    };
    K.on_set_message = function F(L, M, R) {
	var Q = L && L.props, O = Q && Q.message, N = Q && Q.scrollArea, P = N
		&& N.childNodes;
	if (!P) {
	    return;
	}
	if (O) {
	    P[0].style.display = "none";
	    P[1].style.display = "none";
	    P[2].style.display = "block";
	    P[2].firstChild.innerHTML = O;
	} else {
	    P[0].style.display = "block";
	    P[1].style.display = "none";
	    P[2].style.display = "none";
	}
    };
    K.on_model_set_leadIndex = function C(M, N, O) {
	var L = mstr.utils.ListViewHelper.getItemRenderer(M);
	if (!L || !L.on_set_leadIndex) {
	    return false;
	}
	return L.on_set_leadIndex(M, N, O);
    };
    K.on_model_set_readyState = function J(X, S, Y) {
	var Q = S && S.get("readyState");
	X.set("message", null);
	var P = X.props.scrollArea, W = P.childNodes, O = W[1], R = W[0];
	if (Q == mstr.Enum.Widget.READYSTATE.IDLE) {
	    O.style.display = "none";
	    R.style.display = "block";
	    X._updateEmptyMessage();
	} else {
	    var N = !X.props.showItemsDuringRequest;
	    if (N) {
		R.style.display = "none";
	    }
	    O.style.display = "block";
	    var T = X.props.descriptors;
	    switch (Q) {
	    case mstr.Enum.Widget.READYSTATE.SUCCESS:
		O.innerHTML = microstrategy.descriptors.getDescriptor("5674");
		break;
	    case mstr.Enum.Widget.READYSTATE.CANCELLED:
		O.innerHTML = "Request cancelled.";
		break;
	    case mstr.Enum.Widget.READYSTATE.WAITING:
		O.innerHTML = microstrategy.descriptors.getDescriptor("5674");
		break;
	    case mstr.Enum.Widget.READYSTATE.TIMEOUT:
		O.innerHTML = "Request timed out.";
		break;
	    case mstr.Enum.Widget.READYSTATE.ERROR:
	    default:
		var M = T && T.errorText, U = S && S.props.requestContext, V = U
			&& U.response, L = V && V.errorMessage
			&& V.errorMessage.replace(/[\r\n]/g, "");
		if (L) {
		    M = M + ' <a href="javascript:void(0)" onclick="alert(\''
			    + L.replace(/'/g, "\\'") + "');return false;\">"
			    + T.errorDetailsText + "</a>";
		}
		O.innerHTML = M;
		break;
	    }
	}
    };
    K.ondblclick = function D(P, N, M) {
	var O = mstr.$obj(M);
	if (!O || !O.fireCommands || !O.props.enabled) {
	    return true;
	}
	var L = O.props.cmdsDblClick;
	if (!L) {
	    return true;
	}
	O.fireCommands(L, null);
	return true;
    };
    K.onmousedown = function B(Q, N, T) {
	var R = mstr.$obj(T);
	if (!R || !R.fireCommands || !R.props.enabled) {
	    return true;
	}
	var U = new mstr.lang.Event(Q, N);
	var M = U.ctrl(), W = U.shift();
	if (M || W) {
	    mstr.utils.Dom.clearBrowserHighlights(N);
	}
	var P = {
	    valueForm : null,
	    ctrl : M,
	    shift : W,
	    browseType : null,
	    rmc : U.rightClick()
	};
	var L = U.target();
	if (L) {
	    L.mstrViewId = T;
	}
	var V = mstr.utils.Dom.findAncestor(L, "mstrListItemInfo", null,
		R.props[mstr.$W.ELEMENT], true);
	if (V) {
	    var O = V.mstrListItemInfo.split("/");
	    var T = O.shift();
	    var S = O.pop();
	    P.valueForm = O.join("/");
	    if (!M && !W && !U.rightClick()
		    && String(L.nodeName).toLowerCase() == "a") {
		P.browseCommand = S;
	    }
	}
	window.setTimeout(function() {
	    R.fireCommands(null, P);
	}, 0);
	return true;
    };
    K.on_set_visible = function E(M, N, R) {
	if (M.props.showDescriptions) {
	    var L = M.props.scrollArea, P = L.childNodes, O = P[0];
	    O.className += " mstrListWithDescriptions";
	}
	mstr.behaviors.Generic.set_css_display(R, "table", "none",
		M.props.visible);
	var Q = M.props.id;
	if (mstr.utils.ISIE4 && !M.keysInited) {
	    var Q = M.props.id;
	    R.attachEvent("onkeypress", function(S) {
		mstr.$obj(Q).onkeypress(S, window);
	    });
	    R.attachEvent("onkeydown", function(S) {
		mstr.$obj(Q).onkeydown(S, window);
	    });
	    M.keysInited = true;
	}
    };
    K.on_set_validationStatus = function H(L, O, P) {
	mstr.behaviors.Controls.on_set_validationStatus(L, O, P);
	if (!mstr.behaviors.Controls.needsValidation(L)) {
	    return true;
	}
	var N = L && L.get("validator");
	var M = N.get("cache");
	if (mstr.behaviors.Controls.validate(L)) {
	    if (M) {
		P.style.color = M.c;
		P.style.textDecoration = M.td;
	    }
	} else {
	    if (M) {
		M.c = P.style.color;
		M.td = P.style.textDecoration;
	    }
	    P.style.color = "#ff0000";
	    P.style.textDecoration = "underline";
	}
	return true;
    };
    return K;
})();
mstr.itemrenderers = {};
mstr.itemrenderers.FastListView = (function() {
    var A = {};
    A.listItemHeightMin = function E(J) {
	return 20;
    };
    A.listItemHeight = function D(J) {
	return (J && J.props.showDescriptions) ? 40 : 20;
    };
    A.listItemHeightMax = function H(J) {
	return (J && J.props.showDescriptions) ? 40 : 20;
    };
    A.renderListItem = function C(V, P, Z, K) {
	var Y = K.item;
	var X = V.props[mstr.$W.DOCUMENT];
	var Q = (V.props.cssPrefix || "") + (V.props.itemCSSPrefix || "");
	if ("enabled" in Y && !Y.enabled) {
	    Q += "Disabled";
	}
	var M = Q;
	if (Y.cssClass) {
	    M = V.props.cssPrefix + Y.cssClass + " " + Q;
	}
	var L = X.createElement("div");
	L.className = M;
	if (Y.cssText) {
	    L.style.cssText = Y.cssText;
	}
	if (V && V.props.showDescriptions) {
	    L.style.height = this.listItemHeight(V) + "px";
	}
	L.onmouseover = this.hover;
	L.onmouseout = this.unhover;
	if (Y.n != null && Y.n != "" && Y.desc != null && Y.desc != "") {
	    L.title = Y.n + ". " + Y.desc;
	} else {
	    if (Y.n != null && Y.n != "" && Y.dsn != null && Y.dsn != "") {
		L.title = Y.n + " (" + Y.dsn + ")";
	    } else {
		if (Y.n != null && Y.n != "") {
		    L.title = Y.n;
		} else {
		    if (Y.desc != null && Y.desc != "") {
			L.title = Y.desc;
		    }
		}
	    }
	}
	var R = X.createElement("div");
	L.appendChild(R);
	R.className = Q + "Name";
	if (V.props.showDescriptions && Y.desc) {
	    var J = X.createElement("div");
	    L.appendChild(J);
	    J.className = Q + "Desc";
	    J.appendChild(X.createTextNode(Y.desc));
	} else {
	    var J = null;
	}
	var T = null;
	if (V.props.shouldReplaceSpace) {
	    var S = Y.n.replace(/ /g, "\u00a0");
	    T = X.createTextNode(S || "");
	} else {
	    T = X.createTextNode(Y.n || "");
	}
	var W = K.browseCommand;
	if (W && !Y.locked) {
	    var O = X.createElement("a");
	    R.appendChild(O);
	    O.appendChild(T);
	    O.href = "javascript:void(0)";
	    var N = function(a) {
		cancelEvent(a || window.event);
		return false;
	    };
	    O.onclick = N;
	    O.tabIndex = -1;
	    O.oncontextmenu = N;
	    W = null;
	} else {
	    R.appendChild(T);
	}
	if (V.props.showIcons) {
	    var U = Y.icon;
	    if (Y.locked) {
		U += "_locked";
	    }
	    if (U) {
		mstr.utils.Dom.setBGIconClass(R, U);
		R.style.backgroundPosition = "2px 50%";
		R.style.paddingLeft = "23px";
		if (J) {
		    J.style.paddingLeft = "23px";
		}
	    }
	}
	return L;
    };
    A.hover = function(J) {
	if (!this.ignoreMouseEvents && !/Hover$/.test(this.className)) {
	    this.className += "Hover";
	}
    };
    A.unhover = function(J) {
	if (!this.ignoreMouseEvents) {
	    this.className = this.className.replace(/Hover/, "");
	}
    };
    A.markListItemAsSelected = function B(J, K, O, L) {
	if (J.get("ignoreSelection")) {
	    return;
	}
	var M = L.elItem;
	if (!M) {
	    return;
	}
	var N = M.className;
	if (/Hover/.test(N)) {
	    N = N.replace(/Hover/, "SelectedHover");
	} else {
	    if (!/Selected/.test(N)) {
		N += "Selected";
	    }
	}
	M.className = N;
    };
    A.markListItemAsUnselected = function G(J, K, N, L) {
	var M = L.elItem;
	if (!M) {
	    return;
	}
	M.className = M.className.replace(/Selected/, "");
    };
    A.fireBrowse = function I() {
	var L = this.mstrListItemInfo || this.parentNode.mstrListItemInfo
		|| this.parentNode.parentNode.mstrListItemInfo;
	L = L && L.split("/");
	if (L && (L[0] != null) && (L[1] != null) && (L[2] != null)) {
	    var J = mstr.controllers.Factory.obj(L[0]);
	    var K = J && J.getModel();
	    if (K) {
		K.execCommand(L[2], L[1]);
	    }
	}
	return true;
    };
    A.on_set_leadIndex = function F(K, L, O) {
	var N = L && L.get("leadIndex");
	if (N == null || N < 0) {
	    return false;
	}
	var M = K && K._getOrMakeElementForItemAt(N);
	if (!M) {
	    return false;
	}
	var J = K.get("scrollArea")
		|| O.rows[0].cells[0].firstChild.childNodes[2];
	if (!J) {
	    return false;
	}
	mstr.utils.BoxModel.scrollToElement(J, M);
    };
    return A;
})();
mstr.itemrenderers.ListPulldownView = (function() {
    var A = {};
    A.renderListItem = function(B, D, I, E) {
	var C = mstr.itemrenderers.FastListView.renderListItem(B, D, I, E);
	var H = this._getContentContainer(I);
	mstr.utils.Dom.clearChild(H, 0);
	H.appendChild(C);
	C.ignoreMouseEvents = !B.props.enabled || E.showAsLabel;
	H.title = C.title || "";
	if (mstr.utils.ISIE4) {
	    var F = H.style, G = F.width;
	    if (G == null) {
		G = "";
	    }
	    F.width = "1px";
	    F.width = G;
	}
    };
    A.renderMultipleItems = function(H, E, I, B) {
	var G = B.items;
	var F = mstr.$A.len(G);
	var J = new Array(F);
	for ( var D = 0; D < F; D++) {
	    J[D] = G[D]["n"];
	}
	J = J.join(", ");
	var C = this._getContentContainer(I);
	C.innerHTML = J;
	C.title = J;
    };
    A.renderEmpty = function(B, C, F, E) {
	var D = (B.props.cssPrefix || "") + (B.props.cssClass || "");
	this._getContentContainer(F).innerHTML = '<span class="' + D
		+ 'EmptyText">' + B.props.descriptors.emptyText + "</span>";
    };
    A._getContentContainer = function(B) {
	return B.childNodes[1].rows[0].cells[1].childNodes[1];
    };
    return A;
})();
mstr.itemrenderers.CheckList = (function() {
    var H = {};
    H.renderListItem = function G(M, J, Q, I) {
	if (I.at == 0) {
	    var L = (M.props.cssPrefix || "") + (M.props.cssClass || "");
	    var O = L + (M.props.multiSelect ? "Checks" : "Radios");
	    var K = [
		    '<table class="' + L
			    + 'Table" cellspacing="0" cellpadding="0">',
		    '<tbody class="' + O + '" >' ];
	    if (M.props.horizontal) {
		K = K.concat(this._buildHorizontalTableHTML(M, J, Q));
	    } else {
		K = K.concat(this._buildVerticalTableHTML(M, J, Q));
	    }
	    K.push("</tbody></table>");
	    var P = this._getListContainer(Q);
	    if (P) {
		P.innerHTML = K.join("");
	    }
	}
	var N = this._findCellForIndex(M, Q, parseInt(I.at),
		!M.props.horizontal);
	return N && N.childNodes[0];
    };
    H._buildHorizontalTableHTML = function F(Q, M, S) {
	var O = M && M.getItems(), N = mstr.$A.len(O), J = Q
		&& parseInt(Q.props.arrangementSize), P = (!J || (J < 1)) ? N
		: J, T = mstr.utils.Math.roundUpDiv(N, P);
	var L = [];
	if (T && P) {
	    var I = 0;
	    for ( var R = 1; R <= T; R++) {
		L.push("<tr>");
		for ( var K = 1; K <= P; K++) {
		    L.push(this._buildItemCell(Q, M, S, O[I++]));
		    if (I >= N) {
			break;
		    }
		}
		L.push("</tr>");
	    }
	}
	return L;
    };
    H._buildVerticalTableHTML = function C(Q, M, S) {
	var O = M && M.getItems(), N = mstr.$A.len(O), J = Q
		&& parseInt(Q.props.arrangementSize), T = (!J || (J < 1)) ? N
		: J, P = mstr.utils.Math.roundUpDiv(N, T);
	var L = [];
	if (T && P) {
	    var I;
	    for ( var R = 1; R <= T; R++) {
		L.push("<tr>");
		for ( var K = 1; K <= P; K++) {
		    I = (R - 1) + (K - 1) * T;
		    if (I >= N) {
			break;
		    }
		    L.push(this._buildItemCell(Q, M, S, O[I++]));
		}
		L.push("</tr>");
	    }
	}
	return L;
    };
    H._buildItemCell = function A(Q, M, U, S) {
	var J = (S.cssText && S.cssText != "") ? '" style="' + S.cssText : "";
	var N = (Q.props.cssPrefix || "") + (Q.props.itemCSSPrefix || "");
	if ("enabled" in S && !S.enabled) {
	    N += "Disabled";
	}
	var L = !!Q.props.multiSelect;
	var I = S.n;
	var O = S.desc;
	var T = [ '<td><div onmouseover="return mstr.itemrenderers.CheckList.hover(this)" onmouseout="return mstr.itemrenderers.CheckList.unhover(this)" class="'
		+ N
		+ '" title="'
		+ ((O != null && O != "") ? I + ". " + O : I)
		+ J + '">' ];
	var R = N + "Name";
	var K = "";
	if (Q.props.showIcons) {
	    var P = S.icon;
	    if (S.locked) {
		P += "_locked";
	    }
	    if (P) {
		R = mstr.utils.Dom.getBGIconClass(P) + " " + R;
		K = ' style="padding-left: 23px" ';
	    }
	}
	T.push('<div class="' + R + '" ' + K + " >" + S.n + "</div>");
	if (Q.props.showDescriptions) {
	    if ((O != null) && (O != "")) {
		T.push('<div class="' + N + 'Desc" ' + K + " >" + O + "</div>");
	    }
	}
	return T.join("");
    };
    H.hover = function E(I) {
	I.className += "Hover";
    };
    H.unhover = function B(I) {
	I.className = I.className.replace(/Hover/, "");
    };
    H._getListContainer = function D(I) {
	return I.rows[0].cells[0].firstChild.childNodes[2].firstChild;
    };
    H.markListItemAsSelected = function(I, J, L, K) {
	this._toggleCheckBox(I, J, L, K, true);
    };
    H.markListItemAsUnselected = function(I, J, L, K) {
	this._toggleCheckBox(I, J, L, K, false);
    };
    H._toggleCheckBox = function(I, K, P, L, O) {
	I.props.rendering = true;
	var M = this._findCellForIndex(I, P, parseInt(L.at),
		!I.props.horizontal);
	var J = M && M.childNodes[0];
	if (J) {
	    if (O) {
		var N = J.className;
		if (!(/Selected/.test(N))) {
		    var N = J.className;
		    if (/Hover/.test(N)) {
			N = N.replace(/Hover/, "SelectedHover");
		    } else {
			N += "Selected";
		    }
		    J.className = N;
		}
	    } else {
		J.className = J.className.replace(/Selected/, "");
	    }
	}
	I.props.rendering = false;
    };
    H._findCheckboxForIndex = function(I, L, J, K) {
	return this._findCellForIndex(I, L, J, K);
    };
    H._findCellForIndex = function(J, M, K, L) {
	var I = this._computeRowColumnForIndex(J, K, L);
	if (I) {
	    return this._getListContainer(M).firstChild.rows[I.row].cells[I.col];
	}
    };
    H._computeRowColumnForIndex = function(I, K, N) {
	var L = parseInt(I.props.arrangementSize);
	var M = (L && L > 0) ? K % L : K;
	var J = (L && L > 0) ? parseInt(K / L) : 0;
	if (N) {
	    return {
		row : M,
		col : J
	    };
	} else {
	    return {
		row : J,
		col : M
	    };
	}
    };
    return H;
})();
mstr.behaviors.Popup = (function() {
    var B = {};
    B.on_set_visible = function C(F, G, K, H) {
	var E = F.props.id;
	var D = new Function("mstr.$obj('" + E
		+ "').props['timeoutID'] = self.setTimeout(\"mstr.$obj('" + E
		+ "').execCommand('Unpop');\", 500)");
	if ((H && H.init) || !F.props.animate) {
	    if (F.props.autoHide) {
		K.onmouseover = new Function("self.clearTimeout(mstr.$obj('"
			+ E + "').props['timeoutID']);");
		K.onmouseout = D;
	    }
	    return mstr.behaviors.Generic.set_css_display(K, "table", "none",
		    F.props.visible);
	}
	var I = !!F.props.visible;
	if (F.props.autoHide && I) {
	    D();
	}
	if (I) {
	    mstr.behaviors.Generic.set_css_display(K, "table", "none",
		    F.props.visible);
	}
	var J = new Function("", "mstr.behaviors.Popup.on_after_set_visible('"
		+ F.props.id + "')");
	mstr.utils.Animations.alpha(K, I ? 0 : 100, I ? 100 : 0, I ? 5 : 15, J);
    };
    B.on_after_set_visible = function A(D) {
	var E = mstr.$obj(D);
	if (!E) {
	    return;
	}
	var F = !!E.props.visible;
	var G = E.props.element;
	if (!F) {
	    mstr.behaviors.Generic.set_css_display(G, "table", "none", F);
	}
    };
    B.origon_set_visible = function C(D, E, F) {
	mstr.behaviors.Generic.set_css_display(F, "table", "none",
		D.props.visible);
    };
    return B;
})();
mstr.behaviors.Controls = (function() {
    var B = {};
    B.on_model_set_value = function(C, G, H) {
	if (H == null) {
	    return;
	}
	var F = (G && G.get && G.get(C.props.valueField));
	C.props.rendering = true;
	if (H.tagName.toLowerCase() == "input") {
	    switch (H.getAttribute("type").toLowerCase()) {
	    case "checkbox":
		H.checked = F || false;
		break;
	    default:
		H.value = (F != null && F != undefined) ? F : "";
		C.fireCommands(null, G && G.get && G.get(C.props.valueField));
		break;
	    }
	} else {
	    H.innerHTML = F;
	}
	C.set("validationStatus", {
	    statusCode : mstr.Enum.Validation.STATUSCODE.VALID,
	    message : "",
	    bubble : true
	});
	C.props.rendering = false;
    };
    B.on_set_validationStatus = function E(C, H, I) {
	if (!mstr.behaviors.Controls.needsValidation(C)) {
	    return true;
	}
	var G = C && C.get("validator");
	var F = G.get("cache");
	var J = C.get("validationStatus");
	if (mstr.behaviors.Controls.validate(C)) {
	    if (F) {
		I.style.borderColor = F.b;
		I.setAttribute("title", F.t);
	    }
	} else {
	    if (!F) {
		G.set("cache", {
		    b : I.style.borderColor,
		    t : I.getAttribute("title")
		});
	    }
	    I.style.borderColor = "#ff0000";
	    I.setAttribute("title", J.message);
	}
	return true;
    };
    B.needsValidation = function A(C) {
	var F = C && C.get("validator");
	if (!F) {
	    return false;
	}
	var G = C.get("validationStatus");
	if (!G) {
	    return false;
	}
	return true;
    };
    B.validate = function D(C) {
	var F = C.get("validationStatus");
	return (F.statusCode == mstr.Enum.Validation.STATUSCODE.VALID);
    };
    return B;
})();
mstr.behaviors.ListToolButton = (function() {
    var B = {};
    B.onmousedown = function A(C) {
	var D = mstr.$obj(C);
	if (D.props.enabled) {
	    D.execCommand("OpenPopup");
	}
	return true;
    };
    return B;
})();
mstr.models.PromptAnswer = (function() {
    mstr.$O.extendsClass(B, mstr.models.BaseModel);
    B.prototype.validate = function D(F, G) {
	var E = this._validateInternally(F, G);
	this.set("message", this._getMsgForStatus(E.statusCode));
	this.set("validationStatus", E);
	return E.statusCode;
    };
    B.prototype.format = function A(E) {
	return this.validate(E, true);
    };
    B.prototype.execValidate = function C(E) {
	return (this.validate(E) == mstr.Enum.Validation.STATUSCODE.VALID);
    };
    function B(E) {
	mstr.models.BaseModel.apply(this, [ E ]);
    }
    return B;
})();
mstr.models.ConstantPromptAnswer = (function() {
    mstr.$O.extendsClass(H, mstr.models.PromptAnswer);
    H.prototype.getValueString = H.prototype.getSelected = function D() {
	return this.props.isComplex ? null : this.props.valueString;
    };
    H.prototype.isEmpty = function G() {
	var K = this.props, J = K.isComplex ? K.complexString : K.valueString;
	return this._isEmptyAnswerString(J);
    };
    H.prototype._isEmptyAnswerString = function E(K) {
	var P = false;
	var O = this.props;
	if (O && O.dataType) {
	    var N = String(O.dataType).split(",");
	    var L = mstr.Enum.Nodes.DATATYPE;
	    var J = false;
	    for ( var M = 0; M < N.length; M++) {
		if (mstr.utils.Math.isDataTypeString(N[M])) {
		    J = true;
		    break;
		}
	    }
	    if (J) {
		if (!K) {
		    P = true;
		}
	    } else {
		P = mstr.utils.String.isEmpty(K);
	    }
	} else {
	    P = mstr.utils.String.isEmpty(K);
	}
	return P;
    };
    H.prototype.format = function F(K) {
	var J = this._validateInternally(K, true);
	if (J.valueStringFormatted) {
	    this.set("valueString", J.valueStringFormatted);
	}
	this.set("message", this._getMsgForStatus(J.statusCode));
	this.set("validationStatus", J);
	return J;
    };
    H.prototype._validateInternally = function C(L, P) {
	var K = mstr.Enum.Validation.STATUSCODE, J = {
	    statusCode : K.VALID,
	    context : L && L.stage
	};
	var O = this.get("parent") && this.get("parent").get("savingAnswer");
	var M = this.props;
	if (!M.isComplex) {
	    var N = this._validateString(M.valueString, P);
	    J.statusCode = N.statusCode;
	    J.valueStringFormatted = N.valueStringFormatted;
	}
	if (J.statusCode == K.VALID && O) {
	    J.statusCode = this.validateSavedAnswer();
	}
	return J;
    };
    H.prototype._validateString = function A(R, M) {
	var U = mstr.Enum.Validation.STATUSCODE, S = {
	    statusCode : U.VALID
	}, K = this.props;
	if (this._isEmptyAnswerString(R)) {
	    if (K.required) {
		S.statusCode = U.NO_INPUT;
	    }
	} else {
	    if (K.dataType) {
		var V = String(K.dataType).split(",");
		var J = (mstr.utils.QualNode) ? mstr.utils.QualNode
			.constValue2Array(R, !!K.multiSelect) : [ R ], Z = M ? J
			.concat()
			: [];
		var T = K.min, W = K.max, Q = mstr.utils.Math, L = mstr.utils.LocaleParser;
		for ( var X = 0, Y = J.length; X < Y; X++) {
		    var a = J[X], O = L.whichDataType(a, V, M), N = M ? O
			    && O.dataType : O, P;
		    if (N == null) {
			S.statusCode = U.INVALID_DATATYPE;
			break;
		    } else {
			if (M) {
			    Z[X] = O.formatted;
			}
			if (Q.isDataTypeNumeric(N)) {
			    P = L.inNumericRange(a, T, W);
			    if (P) {
				S.statusCode = (P > 0) ? U.EXCEEDS_MAX_VALUE
					: U.EXCEEDS_MIN_VALUE;
				break;
			    }
			} else {
			    if (Q.isDataTypeDateTime(N)) {
				P = L.inDateTimeRange(a, T, W);
				if (P) {
				    S.statusCode = (P > 0) ? U.EXCEEDS_MAX_VALUE
					    : U.EXCEEDS_MIN_VALUE;
				    break;
				}
			    } else {
				if (Q.isDataTypeString(N)) {
				    P = L.inNumericRange(a.length, T, W);
				    if (P) {
					S.statusCode = (P > 0) ? U.EXCEEDS_MAX_LENGTH
						: U.EXCEEDS_MIN_LENGTH;
					break;
				    }
				} else {
				    if (Q.isDataTypeBigDecimal(N)) {
					P = L.inBigDecimalRange(a, T, W);
					if (P) {
					    S.statusCode = (P > 0) ? U.EXCEEDS_MAX_VALUE
						    : U.EXCEEDS_MIN_VALUE;
					    break;
					}
				    }
				}
			    }
			}
		    }
		}
		if (M) {
		    S.valueStringFormatted = (mstr.utils.QualNode) ? mstr.utils.QualNode
			    .constArray2Value(Z)
			    : (Z && Z.length > 0) ? Z[0] : null;
		}
	    }
	}
	return S;
    };
    H.prototype.loadRequestResponse = function B() {
	var J = this.props.requestContext;
	var L = J && J.response;
	if (!L || !L.data) {
	    this.set("readyState", mstr.Enum.Widget.READYSTATE.ERROR);
	    return;
	}
	this.set("valueString", L.data.get("valueString"));
	var K = L.data.get("validationStatus");
	if (K && K.statusCode != mstr.Enum.Validation.STATUSCODE.VALID) {
	    this.set("message", this._getMsgForStatus(K.statusCode).replace(
		    "##", L.data.get("max")));
	    this.set("validationStatus", K);
	}
	this.props.requestContext = {};
	this.set("readyState", mstr.Enum.Widget.READYSTATE.IDLE);
    };
    H.prototype.init = function I() {
	mstr.models.PromptAnswer.prototype.init.apply(this);
	if (!("CommandEnabledValidate" in this.props)) {
	    this.set("CommandEnabledValidate", true);
	}
    };
    function H(J) {
	mstr.models.PromptAnswer.apply(this, [ J ]);
    }
    return H;
})();
mstr.models.ListModel = (function() {
    mstr.$O.extendsClass(V, mstr.models.BaseModel);
    V.RESERVED_LISTS = {
	items : true
    };
    V.RESERVED_HASHS = {
	selectedIndices : true
    };
    V.prototype.DEFAULTS = {
	readyState : mstr.Enum.Widget.READYSTATE.IDLE
    };
    V.prototype.sethash = function o(Ap, An) {
	var Ao = this.hashclear(Ap);
	if (An && An.length) {
	    return this.hashadd(Ap, An);
	} else {
	    return Ao;
	}
    };
    V.prototype.setlist = function J(Ap, An) {
	var Ao = this.listclear(Ap);
	if (An && An.length) {
	    return this.listadd(Ap, An);
	} else {
	    return Ao;
	}
    };
    V.prototype.execToggleSelect = function AD(An) {
	if (this.props.selectedIndices[An]) {
	    this.execRemoveSelect(An);
	} else {
	    this.execAddSelect(An);
	}
	this.set("leadIndex", An);
	return true;
    };
    V.prototype.execAddSelect = function AM(An) {
	if (!mstr.utils.ListModelHelper.canAdd(this, this.getItems()[An])) {
	    return false;
	}
	var Ao = {};
	Ao[An] = true;
	this.hashadd("selectedIndices", Ao);
	this.props.anchorIndex = An;
	return true;
    };
    V.prototype.execRemoveSelect = function AR(An) {
	var Ao = {};
	Ao[An] = true;
	this.hashremove("selectedIndices", Ao);
	if (this.props.anchorIndex == An) {
	    this.props.anchorIndex = -1;
	}
	return true;
    };
    V.prototype.execRangeSelect = function AA(Ao) {
	var An = this.props.anchorIndex;
	if (An < 0) {
	    if (mstr.utils.ListModelHelper.canAdd(this, this.getItems()[Ao])) {
		var Ar = {};
		Ar[Ao] = true;
		this.hashadd("selectedIndices", Ar);
	    }
	} else {
	    var Ar = {};
	    var As = Math.min(Ao, An);
	    var Aq = Math.max(Ao, An);
	    for ( var Ap = As; Ap <= Aq; Ap++) {
		Ar[Ap] = true;
	    }
	    if (this.execSelect(Ar)) {
		this.props.anchorIndex = An;
	    }
	}
	this.set("leadIndex", Ao);
	return true;
    };
    V.prototype.execSingleSelect = function AE(An) {
	if (!this.props.enableReselect) {
	    var Ap = this.props.selectedIndices;
	    if (Ap && Ap[An]) {
		if (!mstr.utils.Hash.lenGreaterThan(Ap, 1)) {
		    return false;
		}
	    }
	}
	var Ao = {};
	Ao[An] = true;
	if (this.execSelect(Ao)) {
	    this.props.anchorIndex = An;
	    this.set("leadIndex", An);
	}
	return true;
    };
    V.prototype.execRMCSelect = function AS(An) {
	var Ap = this.props.selectedIndices;
	if (Ap && Ap[An]) {
	    return false;
	}
	var Ao = {};
	Ao[An] = true;
	this.execSelect(Ao);
	this.props.anchorIndex = An;
	return true;
    };
    V.prototype.execSelect = function Ac(An) {
	An = mstr.utils.ListModelHelper.verifySelectionKeys(this, An);
	if (!An) {
	    return false;
	}
	this.execClearSelect();
	this.hashadd("selectedIndices", An);
	return true;
    };
    V.prototype.execDeleteSelected = function s() {
	var An = this.props.selectedIndices;
	var Ao = mstr.$H.len(An);
	if (!Ao) {
	    return;
	}
	var Ap = mstr.$A.sortNumericArray(mstr.$A.fromHashKeys(An, true));
	this.removeItemsAt(Ap, true);
    };
    V.prototype.execRenameSelectedItem = function Am(An) {
	if (An) {
	    var Ao = this.getSelectedIndex();
	    if (Ao == null) {
		return;
	    }
	    var Ap = this.props.items && this.props.items[Ao];
	    if (Ap) {
		this.removeItemsAt([ Ao ], true);
		Ap.n = An;
		this.insertItemsAt([ Ap ], Ao);
		this.execSingleSelect(Ao);
	    }
	}
    };
    V.prototype.execEnableIndices = function Al(Ao) {
	var Aq = mstr.utils.Hash.clone(this.getSelectedIndices());
	var As = false;
	for ( var An in Ao) {
	    var Ap = this.indexOfValue(An);
	    if (Ap == -1) {
		continue;
	    }
	    var Ar = this.props.items && this.props.items[Ap];
	    if (!Ar || Ar.enabled == Ao[An]) {
		continue;
	    }
	    if (Aq[Ap]) {
		As = true;
	    }
	    this.removeItemsAt([ Ap ], true);
	    Ar.enabled = Ao[An];
	    this.insertItemsAt([ Ar ], Ap);
	}
	if (As) {
	    this.execSelect(Aq);
	}
    };
    V.prototype.verifySelectionKeys = function AC(Ap) {
	var An = this.getItems();
	for ( var Ao in Ap) {
	    if (!mstr.utils.ListModelHelper.canAdd(this, An[Ao])) {
		delete Ap[Ao];
	    }
	}
	return (mstr.utils.Hash.isEmpty(Ap)) ? null : Ap;
    };
    V.prototype.execSelectPrevious = function z(Aq) {
	var As = this.props.selectedIndices;
	var At = this.getSelectedItems();
	var Ar = parseInt(this.props.leadIndex);
	var An = parseInt(this.props.anchorIndex);
	if (Aq) {
	    var Ap = mstr.utils.Hash.maxNumber(As);
	    if ((An == Ar) && At.length > 1) {
		var Ao = {};
		Ao[Ar] = true;
		if ((Ar - 1) >= 0) {
		    Ao[Ar - 1] = true;
		}
		this.execSelect(Ao);
	    } else {
		if (Ar <= Ap) {
		    if ((Ar - 1) >= 0) {
			this.execRangeSelect(Ar - 1);
		    }
		} else {
		    this.execRemoveSelect(Ar);
		    this.set("leadIndex", Ar - 1);
		}
	    }
	} else {
	    if ((Ar - 1) >= 0) {
		this.execClearSelect();
		this.execSingleSelect(Ar - 1);
	    }
	}
	return true;
    };
    V.prototype.execSelectNext = function Aj(Aq) {
	var As = this.props.selectedIndices;
	var At = this.getSelectedItems();
	var Ao = this.props.items;
	var Ar = parseInt(this.props.leadIndex);
	var An = parseInt(this.props.anchorIndex);
	if (Aq) {
	    if ((An == Ar) && At.length > 1) {
		var Ap = {};
		Ap[Ar] = true;
		if ((Ar + 1) < Ao.length) {
		    Ap[Ar + 1] = true;
		}
		this.execSelect(Ap);
	    } else {
		if (Ar >= An) {
		    if ((Ar + 1) < Ao.length) {
			this.execRangeSelect(Ar + 1);
		    }
		} else {
		    this.execRemoveSelect(Ar);
		    this.set("leadIndex", Ar + 1);
		}
	    }
	} else {
	    if ((Ar + 1) < Ao.length) {
		this.execClearSelect();
		this.execSingleSelect(Ar + 1);
	    }
	}
	return true;
    };
    V.prototype.execSingleSelectNextAndLoop = function Ab() {
	var Ao = this.props.selectedIndicesList;
	if (isNaN(Ao)) {
	    return false;
	}
	var An = parseInt(Ao);
	var Ap = this.props.items.length;
	var Aq;
	if (An + 1 < Ap) {
	    Aq = An + 1;
	} else {
	    Aq = 0;
	}
	this.execSingleSelect(Aq);
	return true;
    };
    V.prototype.execSelectString = function Af(Ap, Ar, Aq) {
	if (!Ap) {
	    return false;
	}
	if (!Ar) {
	    Ar = "n";
	}
	var Ao = new RegExp("^" + Ap, "i"), An = mstr.$A.matchByForm(this
		.getItems(), Ao, Ar, this.props.leadIndex
		+ ((Aq === undefined) ? 1 : Aq));
	return (An > -1) && this.execSingleSelect(An);
    };
    V.prototype.execSelectValue = function b(An) {
	var Ao = this.indexOfValue(An);
	if (Ao == -1) {
	    return false;
	}
	this.execSingleSelect(Ao);
	return true;
    };
    V.prototype.execSelectValues = function AX(An) {
	if (!An) {
	    return false;
	}
	if (typeof (An) == "string") {
	    An = [ An ];
	}
	var Aq = {};
	for ( var Ap = 0; Ap < An.length; Ap++) {
	    var Ao = this.indexOfValue(An[Ap]);
	    if (Ao != -1) {
		Aq[Ao] = true;
	    }
	}
	if (mstr.utils.Hash.isEmpty(Aq)) {
	    return false;
	}
	return this.execSelect(Aq);
    };
    V.prototype.getSelectedIndices = function AZ() {
	return this.props.selectedIndices;
    };
    V.prototype.getSelectedIndex = function Aa() {
	var An = parseInt(mstr.$H.firstKey(this.props.selectedIndices));
	if (An != null && !isNaN(An)) {
	    return An;
	}
	return -1;
    };
    V.prototype.getSelectedItems = function AK(Ar) {
	var Ao = this.props.items;
	if ((!Ao || !Ao.length) && this.props.keptSelections) {
	    return [].concat(this.props.keptSelections);
	} else {
	    var An = this.props.selectedIndices;
	    var At = (Ar) ? mstr.$A.sortNumericArray(mstr.$A.fromHashKeys(An,
		    true)) : An;
	    if (At) {
		var As = [];
		for ( var Ap in At) {
		    var Aq = (Ar) ? Ao[At[Ap]] : Ao[parseInt(Ap)];
		    if (Aq) {
			As.push(Aq);
		    }
		}
		return As;
	    }
	}
	return null;
    };
    V.prototype.getSelectedItem = function m() {
	var Ap = this.props.selectedIndices;
	if (Ap) {
	    var An = this.props.items;
	    for ( var Ao in Ap) {
		return An[parseInt(Ao)];
	    }
	}
	return null;
    };
    V.prototype.getSelectedItemValue = function AH() {
	var Ao = this.getSelectedItem();
	var An = Ao && Ao[this.get("valueForm")];
	return An || null;
    };
    V.prototype.setSelectedItems = function AO(An) {
	var Ao = this.indexOfMultiple(An, false);
	if (Ao && Ao.foundCount) {
	    this.execSelect(mstr.$A.toHash(Ao.indices));
	} else {
	    this.execClearSelect();
	}
    };
    V.prototype.execClearSelect = function B() {
	var An = mstr.$H.clone(this.props.selectedIndices);
	this.hashremove("selectedIndices", An);
	this.props.anchorIndex = -1;
	this.props.leadIndex = -1;
    };
    V.prototype.execSelectAll = function d() {
	var Ap = [];
	var An = this.getItems();
	for ( var Ao = 0; Ao < An.length; Ao++) {
	    Ap.push(true);
	}
	this.execSelect(Ap);
    };
    V.prototype.queryEnabledSelectAll = function N() {
	return (this.getSelectedIndices().length != this.getItems().length);
    };
    V.prototype.getItems = function S() {
	return this.props.items;
    };
    V.prototype.setItems = function AT(Ao) {
	this.execClearSelect();
	var Ap = mstr.$A.len(this.props.items);
	if (Ap) {
	    var An = {
		min : 0,
		max : Ap - 1
	    };
	    this.removeItemsAtRanges([ An ], true);
	}
	this.insertItemsAt(Ao, 0);
	if (this.props.autoSelectFirstItem && !this.props.defaultSelection
		&& this.getSelectedIndex() == -1) {
	    this.execSelect({
		0 : true
	    });
	}
    };
    V.prototype.insertItemsAt = function H(Aq, Ar) {
	if (Ar == null || Ar < 0) {
	    Ar = mstr.$A.len(this.props.items);
	}
	var As = mstr.$A.len(Aq);
	if (!As) {
	    return -1;
	}
	var Ap = this.props.selectedIndices;
	if (Ap) {
	    var An = {};
	    for ( var Ao in Ap) {
		if (parseInt(Ao) >= Ar) {
		    Ao = parseInt(Ao) + As;
		}
		An[Ao] = true;
	    }
	    this.props.selectedIndices = An;
	}
	this.listadd("items", Aq, Ar);
	this._updateCommandEnabledUpDown();
	return Ar;
    };
    V.prototype.removeItems = function Ai(An) {
	var Ao = this.indexOfMultiple(An, false);
	if (Ao && Ao.foundCount) {
	    this.removeItemsAt(Ao && Ao.indices);
	}
    };
    V.prototype.removeItemsAt = function n(Ap, Ao) {
	if (!mstr.$A.len(Ap)) {
	    return;
	}
	var An = mstr.utils.Math.convertIndicesToRanges(Ap, Ao);
	this.removeItemsAtRanges(An, true);
    };
    V.prototype.removeItemsAtRanges = function AP(Ao, Av) {
	if (!mstr.utils.Hash.isEmpty(this.props.selectedIndices)) {
	    var Ay = Av ? Ao : Ao.concat().sort(mstr.$A.rangeSorter);
	    mstr.$H.remove(this.props.selectedIndices, mstr.utils.Hash
		    .fromRanges(Ay));
	}
	var Ap = this.listremove("items", Ao, Av);
	if (!mstr.utils.Hash.isEmpty(this.props.selectedIndices)) {
	    var Aw = mstr.$A.sortNumericArray(mstr.$A.fromHashKeys(
		    this.props.selectedIndices, true));
	    var A0 = mstr.$A.len(Aw);
	    for ( var As = 0, At = mstr.$A.len(Ap); As < At; As++) {
		var Ar = Ap[As].min;
		var Ax = Ap[As].max;
		for ( var Az = Ax; Az >= Ar; Az--) {
		    for ( var Aq = A0 - 1; Aq > -1; Aq--) {
			if (Aw[Aq] < Az) {
			    break;
			}
			Aw[Aq]--;
		    }
		}
	    }
	    this.props.selectedIndices = mstr.$A.toHash(Aw);
	} else {
	    var An = Math.max(Ap[0].min, 0);
	    var Au = mstr.$A.len(this.props.items);
	    if (Au) {
		this.execSingleSelect(Math.min(Au - 1, An));
	    } else {
		this._updateCommandEnabledUpDown();
	    }
	}
    };
    V.prototype.execUp = function Ad() {
	var As = this.props.selectedIndices, Ao = mstr.utils.Math
		.convertIndicesToRanges(mstr.$A.fromHashKeys(As, true), false);
	var Ap, Ar;
	for ( var Aq = 0, An = mstr.$A.len(Ao); Aq < An; Aq++) {
	    Ap = Ao[Aq];
	    if (Ap && Ap.min && (Ap.max >= Ap.min)) {
		Ar = this.props.items[Ap.min - 1];
		this.removeItemsAtRanges([ {
		    min : Ap.min - 1,
		    max : Ap.min - 1
		} ], true);
		this.insertItemsAt([ Ar ], Ap.max);
		As[Ap.min - 1] = true;
		As[Ap.max] = false;
	    }
	}
	this._updateCommandEnabledUpDown();
	return true;
    };
    V.prototype.execDown = function q() {
	var As = this.props.selectedIndices, Ao = mstr.utils.Math
		.convertIndicesToRanges(mstr.$A.fromHashKeys(As, true), false);
	var Ap, At = mstr.$A.len(this.props.items) - 1, Ar;
	for ( var Aq = 0, An = mstr.$A.len(Ao); Aq < An; Aq++) {
	    Ap = Ao[Aq];
	    if (Ap && (Ap.max > -1) && (Ap.max < At)) {
		Ar = this.props.items[Ap.max + 1];
		this.removeItemsAtRanges([ {
		    min : Ap.max + 1,
		    max : Ap.max + 1
		} ], true);
		this.insertItemsAt([ Ar ], Ap.min);
		As[Ap.min] = false;
		As[Ap.max + 1] = true;
	    }
	}
	this._updateCommandEnabledUpDown();
	return true;
    };
    V.prototype.on_hashadd_selectedIndices = V.prototype.on_hashremove_selectedIndices = function AY(
	    An) {
	if (An && An.src == this) {
	    this._updateCommandEnabledUpDown();
	}
	var Ap = mstr.utils.Arrays.fromHashKeys(An.memo.at);
	this.props.selectedIndicesList = Ap.join(",");
	var Ao = this.props.selectedIndices;
	this.set("selectedCount", mstr.utils.Hash.len(Ao));
    };
    V.prototype.on_set_selectedIndicesList = function Ah(An) {
	this.execSelect(mstr.utils.Arrays.toHash(String(An.memo.value).split(
		",")));
    };
    V.prototype._updateCommandEnabledUpDown = function a() {
	var Ar = this.props.selectedIndices, As = mstr.$A.len(this.props.items) - 1, Ap;
	var An = false, Ao = false;
	for ( var Aq in Ar) {
	    Ap = parseInt(Aq);
	    if (!An) {
		An = Ap && !Ar[Ap - 1];
	    }
	    if (!Ao) {
		Ao = (Ap < As) && !Ar[Ap + 1];
	    }
	    if (An && Ao) {
		break;
	    }
	}
	this.set("CommandEnabledUp", An);
	this.set("CommandEnabledDown", Ao);
    };
    V.prototype.indexOfItem = function AW(Ao) {
	var An = this.props.valueForm;
	if (An != null && !Ao.get) {
	    return mstr.$A.findByForm(this.props.items, Ao && Ao[An], An);
	} else {
	    return mstr.$A.find(this.props.items, Ao);
	}
    };
    V.prototype.indexOfValue = function AB(Aq) {
	var An = false, Ao, As, Ar;
	if (Aq instanceof Object) {
	    Ao = Aq.form || this.props.valueForm;
	    As = Aq.value;
	    An = Aq.ignoreCase ? true : false;
	} else {
	    Ao = this.props.valueForm;
	    As = Aq;
	}
	if (Ao != null) {
	    var Ap = this.props.items;
	    if (Ap && Ap[0] && Ap[0].get) {
		return mstr.$A.findByGetter(this.props.items, "get", As, Ao);
	    } else {
		return mstr.$A.findByForm(this.props.items, As, Ao, An);
	    }
	}
	return -1;
    };
    V.prototype.indexOfMultiple = function AI(Ao, Ap) {
	var An = this.props.valueForm;
	if (An != null) {
	    return mstr.$A.findByFormMultiple(this.props.items, Ao, An, Ap);
	} else {
	    return mstr.$A.findMultiple(this.props.items, Ao, Ap);
	}
    };
    V.prototype.getContainerTree = function E() {
	var An = this.props.containerTree;
	if (!An) {
	    An = this.setContainerTree(this.props.container);
	}
	return An;
    };
    V.prototype.setContainerTree = function F(An) {
	var Ao = new mstr.models.TreeModel({
	    parent : this,
	    valueForm : this.props.valueForm,
	    scriptClass : "mstr.models.TreeModel"
	});
	mstr.controllers.Factory.add(Ao);
	if (An) {
	    var Ap = {
		value : An
	    };
	    Ao.setRootNode(Ap);
	    Ao.execCommand("SingleSelect", Ap);
	}
	this.props.containerTree = Ao;
	return Ao;
    };
    V.prototype.getContainer = function Ak() {
	var An = this.getContainerTree();
	if (An) {
	    return An.getSelectedNode && An.getSelectedNode();
	}
	return null;
    };
    V.prototype.execBrowseListItem = function O(An) {
	if (An && An.browseCommand && An.valueForm != null) {
	    return this.execCommand(An.browseCommand, An.valueForm);
	}
	return false;
    };
    V.prototype.execBrowseFolder = function t(Ap) {
	var An, Ao;
	if (Ap && Ap.dssid != null) {
	    An = Ap.dssid;
	    Ao = Ap;
	} else {
	    if (typeof (Ap) == "string") {
		An = Ap;
	    }
	}
	if (An) {
	    return this.browseFolderBlock(An, 1, null, Ao);
	}
	return false;
    };
    V.prototype.browseFolderBlock = function AN(Ap, As, At, Ao, Aq) {
	if (!As || As < 0) {
	    return false;
	}
	if (!Ap && !this.props.searchXML) {
	    return false;
	}
	var An;
	if (!Aq) {
	    Aq = {};
	}
	if (At != null && At != "") {
	    An = new mstr.http.MetadataSearchRequestInputs(
		    Ap || "",
		    As,
		    (this.props.blockCount && !this.props.blockCountAuto) ? this.props.blockCount
			    : mstr.utils.ListViewHelper
				    .getFetchBlockForTask("searchMetadata"),
		    this.props.totalSize || 0, this.props.objectType,
		    this.props.searchXML || "", At, this.props.dataSourcesXML);
	    if (!Aq.commandId) {
		Aq.commandId = "Search";
	    }
	    Aq.searchPattern = At;
	    Aq.item = Ao;
	    var Ar = this.props.searchFlags;
	    if (Ar && (Ar & 256) == 0 && (Ar & 1024) == 0) {
		An.params.recursive = 0;
	    }
	} else {
	    An = new mstr.http.BrowseFolderRequestInputs(
		    Ap || "",
		    As,
		    (this.props.blockCount && !this.props.blockCountAuto) ? this.props.blockCount
			    : mstr.utils.ListViewHelper
				    .getFetchBlockForTask("searchMetadata"),
		    this.props.totalSize || 0, this.props.hierarchical,
		    this.props.objectType, this.props.searchXML || "",
		    this.props.dataSourcesXML);
	    if (!Aq.commandId) {
		Aq.commandId = "BrowseFolder";
	    }
	    if (this.props.styleName) {
		An.params.styleName = this.props.styleName;
	    }
	    Aq.item = Ao;
	}
	this.submitRequest(An, Aq);
	return true;
    };
    V.prototype.canBrowseFolder = function Z(An) {
	if (An) {
	    switch (parseInt(An.tp)) {
	    case mstr.Enum.MSTRFolderItem.TYPE.FOLDER:
	    case mstr.Enum.MSTRFolderItem.TYPE.PROJECT:
		return true;
	    }
	}
	return false;
    };
    V.prototype.canBrowseHierarchy = function c(An) {
	return false;
    };
    V.prototype._loadResults = function X(An) {
	this.set("readyState", mstr.Enum.Widget.READYSTATE.SUCCESS);
	this.set("searchPattern", (An && An.searchPattern) || "");
	this.set("totalSize", (An && An.totalSize) || 0);
	this.set("blockBegin", (An && An.blockBegin) || 1);
	this.set("blockCount", (An && An.blockCount) || this.props.blockCount
		|| 1);
	this.set("leafElements", !!(An && An.leafElements));
	this._appendBrowsedItemsToContainerTree((An && An.browsedItems) || [],
		(An && An.browsedItemsSiblings) || []);
	this.set("rmc", (An && An.rmc) || null);
	if (this.props.headerModel) {
	    this.updateHeaderModel();
	}
	var Ao = (An && An.listItems) || [];
	if (this.props.prefixItems) {
	    Ao = Ao.concat(this.props.prefixItems);
	}
	this.setItems(Ao);
	this.set("readyState", mstr.Enum.Widget.READYSTATE.IDLE);
    };
    V.prototype.execBrowseContainerTreeNode = function AG(Aq) {
	var Ap = Aq && Aq.value;
	if (!Ap) {
	    return false;
	}
	switch (parseInt(Ap.tp)) {
	case mstr.Enum.MSTRFolderItem.TYPE.FOLDER:
	case mstr.Enum.MSTRFolderItem.TYPE.PROJECT:
	    return this.browseFolderBlock(Ap[this.props.valueForm], 1, null,
		    Ap, {
			commandId : "BrowseContainerTreeNode",
			node : Aq
		    });
	default:
	    if (mstr.utils.ListViewHelper.isWithinHierarchy(Aq)) {
		if (this.isElementSearchRequired(Aq)) {
		    var An = this.getContainerTree();
		    if (An) {
			An.removeAllChildNodes(Aq);
			An.execSelect([ Aq ]);
		    }
		    this._loadResults({
			browsedItems : null,
			browsedItemsSiblings : null,
			listItems : [],
			totalSize : 0,
			blockBegin : 1
		    });
		    return true;
		} else {
		    var Ar = this.canAutoExpandOnDrill(), Au = Aq;
		    var Ao = Au && Au.value;
		    if (Ar && Ao && Ao.filters && Ao.filters.length == 1) {
			if (!Au.children || Au.children.length == 0) {
			    this._loadResults({
				browsedItems : [ Ao.filters[0] ],
				browsedItemsSiblings : [ [ Ao.filters[0] ] ],
				listItems : [],
				totalSize : 0,
				blockBegin : 1
			    });
			}
			Au = Au.children[0];
		    }
		    return this.browseHierarchyBlock(this
			    ._buildHierarchyPathForNode(Au), 1, "", {
			commandId : "BrowseContainerTreeNode",
			node : Au
		    });
		}
	    } else {
		if (this._isDummyNode(Aq)) {
		    var As = [];
		    if (Aq.children) {
			for ( var At in Aq.children) {
			    if (Aq.children[At].value) {
				As.push(Aq.children[At].value);
			    }
			}
		    }
		    var An = this.getContainerTree();
		    if (An) {
			An.removeAllChildNodes(Aq);
			An.execSelect([ Aq ]);
		    }
		    this._loadResults({
			browsedItems : null,
			browsedItemsSiblings : null,
			listItems : As,
			totalSize : 0,
			blockBegin : 1
		    });
		    return true;
		}
	    }
	}
	return false;
    };
    V.prototype.execBrowseContainerParent = function y() {
	var Ap = this.getContainer();
	if (Ap && Ap.parent) {
	    var Ao = this.canAutoExpandOnDrill && this.canAutoExpandOnDrill(), Aq = Ap.parent;
	    if (Ao && mstr.utils.ListViewHelper.isWithinHierarchy(Aq)) {
		var An = Aq && Aq.value;
		if (An && An.filters && An.filters.length == 1) {
		    Aq = Aq.parent || Aq;
		}
	    }
	    return this.execBrowseContainerTreeNode(Aq);
	}
	return false;
    };
    V.HIERARCHY_PATHDELIM = "~";
    V.ELE_FILTER_ATT_DELIM = ",";
    V.prototype._getNodeFromBrowsePath = function Ae(An, Ao) {
	while (An) {
	    browsePathItem = An.value;
	    if (!browsePathItem) {
		break;
	    }
	    tp = parseInt(browsePathItem.tp);
	    if (tp == mstr.Enum.MSTRFolderItem.TYPE.PROJECT
		    || tp == mstr.Enum.MSTRFolderItem.TYPE.FOLDER
		    || tp == mstr.Enum.MSTRFolderItem.TYPE.DIMENSION) {
		break;
	    }
	    if (browsePathItem[this.props.valueForm] == Ao) {
		return An;
	    }
	    An = An.parent;
	}
	return null;
    };
    V.prototype.execFetchBlock = function P(An) {
	if (!An) {
	    return;
	}
	return this.fetchBlock(An, this.props.searchPattern);
    };
    V.prototype.execFetchData = function L() {
	if (this.shouldFetchData()) {
	    var An = this.props.readyState;
	    if (An == null || An == mstr.Enum.Widget.READYSTATE.IDLE) {
		return this.execCommand("FetchFirst");
	    }
	}
	return false;
    };
    V.prototype.shouldFetchData = function C() {
	if (this.props.totalSize == null) {
	    if (this.props.prefixItems) {
		return (mstr.$A.len(this.props.items) - mstr.$A
			.len(this.props.prefixItems)) <= 0;
	    } else {
		return !mstr.$A.len(this.props.items);
	    }
	}
	return false;
    };
    V.prototype.fetchBlock = function AJ(An, Ao) {
	var Ap = this.getContainer();
	if (!Ap) {
	    return false;
	}
	switch (Ap.value && parseInt(Ap.value.tp)) {
	case mstr.Enum.MSTRFolderItem.TYPE.FOLDER:
	case mstr.Enum.MSTRFolderItem.TYPE.PROJECT:
	    return this.browseFolderBlock(Ap.value.dssid, An, Ao, Ap.value);
	    break;
	default:
	    if (mstr.utils.ListViewHelper.isWithinHierarchy(Ap)) {
		if (!Ao && this.isElementSearchRequired(Ap)) {
		    this._loadResults({
			browsedItems : null,
			browsedItemsSiblings : null,
			listItems : [],
			totalSize : 0,
			blockBegin : 1,
			searchPattern : Ao
		    });
		    return true;
		} else {
		    return this.browseHierarchyBlock(this
			    ._buildHierarchyPathForNode(Ap), An, Ao, {
			commandId : "BrowseContainerTreeNode",
			node : Ap,
			searchPattern : Ao
		    });
		}
	    } else {
		if (parseInt(Ap.value.tp) == mstr.Enum.MSTRFolderItem.TYPE.ATTRIBUTE) {
		    if (!Ao && this.isElementSearchRequired(Ap)) {
			this._loadResults({
			    browsedItems : null,
			    browsedItemsSiblings : null,
			    listItems : [],
			    totalSize : 0,
			    blockBegin : 1,
			    searchPattern : Ao
			});
			return true;
		    } else {
			return this
				.browseAttributeBlock(Ap.value.dssid, An, Ao);
		    }
		}
	    }
	    break;
	}
    };
    V.prototype.execFetchFirst = function AF() {
	return this.execFetchBlock(1);
    };
    V.prototype.execFetchPrevious = function h() {
	return this.execFetchBlock(this._computePreviousBlockBegin());
    };
    V.prototype.execFetchNext = function x() {
	return this.execFetchBlock(this._computeNextBlockBegin());
    };
    V.prototype.execFetchLast = function l() {
	return this.execFetchBlock(this._computeLastBlockBegin());
    };
    V.prototype.queryEnabledFetchFirst = function G() {
	var An = this.props.totalSize;
	var Ao = this.props.blockCount;
	return (An > 0) && (Ao > 0) && (this.props.blockBegin > 1);
    };
    V.prototype.queryEnabledFetchPrevious = function AQ() {
	var An = this.props.blockBegin;
	return (An > 1) && (this._computePreviousBlockBegin() < An);
    };
    V.prototype.queryEnabledFetchNext = function U() {
	return this._computeNextBlockBegin() > 0;
    };
    V.prototype.queryEnabledFetchLast = function Q() {
	var An = this.props.blockBegin;
	return An > 0
		&& (this._computeLastBlockBegin() >= An + this.props.blockCount);
    };
    V.prototype._computePreviousBlockBegin = function r() {
	var An = this.props.totalSize;
	var Ao = this.props.blockCount;
	if (An > 0 && Ao > 0) {
	    return Math.max(1, this.props.blockBegin - Ao);
	}
	return -1;
    };
    V.prototype._computeNextBlockBegin = function R() {
	var An = this.props.totalSize;
	var Ao = this.props.blockCount;
	if (An > 0 && Ao > 0) {
	    if (this.props.blockBegin + Ao <= An) {
		return this.props.blockBegin + Ao;
	    }
	}
	return -1;
    };
    V.prototype._computeLastBlockBegin = function u() {
	var An = this.props.totalSize;
	var Ao = this.props.blockCount;
	if (An > 0 && Ao > 0) {
	    var Ap = An % Ao;
	    if (Ap == 0) {
		Ap = Ao;
	    }
	    return An - Ap + 1;
	}
	return -1;
    };
    V.prototype.getFetchBlockModel = function Y() {
	var Aq = false;
	var An = this.props.fetchBlockModel;
	if (An) {
	    Aq = (An.get("blockBegin") == this.props.blockBegin)
		    && (An.get("totalSize") == this.props.totalSize);
	}
	if (!Aq) {
	    var Ap = parseInt(this.props.totalSize) || 0;
	    var Ao = {
		min : Math.min(1, Ap),
		max : Ap,
		dataType : mstr.Enum.Nodes.DATATYPE.INTEGER,
		valueString : parseInt(this.props.blockBegin) || ""
	    };
	    An = new mstr.models.ConstantPromptAnswer(Ao);
	    if (An) {
		mstr.controllers.Factory.add(An);
		An.init && An.init();
		this.props.fetchBlockModel = An;
	    }
	}
	return An;
    };
    V.prototype.execSearch = function AV(An) {
	this.fetchBlock(1, An);
    };
    V.prototype.on_set_readyState = function e(An) {
	if (An && An.src == this) {
	    this._updateCommandEnabledSearch();
	    this._updateCommandEnabledFetchBlock();
	    this._updateCommandEnabledBrowseFolder();
	}
    };
    V.prototype._updateCommandEnabledSearch = function D() {
	var Ao = false;
	var Av = false;
	if (this.props.readyState == mstr.Enum.Widget.READYSTATE.IDLE) {
	    var Au = this.getContainer(), Aq = Au && Au.value, At = Aq
		    && parseInt(Aq.tp);
	    switch (At) {
	    case mstr.Enum.MSTRFolderItem.TYPE.FOLDER:
		Ao = true;
		break;
	    case mstr.Enum.MSTRFolderItem.TYPE.ATTRIBUTE:
		var Ar = this.props.items, An = this.props.prefixItems, As = Ar
			&& Ar[(An ? An.length : 0)];
		Ao = (!this.props.elementSearchDisabled)
			&& (!As || (parseInt(As.tp) == mstr.Enum.MSTRFolderItem.TYPE.ELEMENT));
		Av = Ao && !this.props.matchCaseDisabled;
		break;
	    case mstr.Enum.MSTRFolderItem.TYPE.FILTER:
		Ao = (Au.readyState == null)
			|| (Au.readyState == mstr.Enum.Widget.READYSTATE.IDLE);
		Ao = Ao && (!this.props.elementSearchDisabled);
		Ao = Ao && mstr.utils.ListViewHelper.isWithinHierarchy(Au);
		Av = Ao && !this.props.matchCaseDisabled;
		break;
	    }
	} else {
	    if (this.props.readyState == mstr.Enum.Widget.READYSTATE.ERROR) {
		var Ap = this.props.requestContext
			&& this.props.requestContext.memo
			&& this.props.requestContext.memo.searchPattern;
		if (Ap) {
		    Ao = true;
		}
	    }
	}
	this.set("CommandEnabledSearch", Ao);
	this.set("searchMatchCaseAvailable", Av);
    };
    V.prototype._updateCommandEnabledBrowseFolder = function A() {
	var Ao = this.props.readyState, Ap = (Ao == mstr.Enum.Widget.READYSTATE.IDLE), An = Ap
		|| (Ao == mstr.Enum.Widget.READYSTATE.ERROR);
	this.set("CommandEnabledBrowseFolder", Ap);
	this.set("CommandEnabledBrowseContainerTreeNode", An);
	var Aq = (An && this.getContainer()) || null;
	this.set("CommandEnabledBrowseContainerParent",
		!!(Aq && Aq.parent && !(Aq.parent.parent == null && this
			._isDummyNode(Aq.parent))));
    };
    V.prototype._updateCommandEnabledFetchBlock = function W() {
	var Ao = this.props.blockCount;
	var An = this.props.totalSize;
	this.set("CommandEnabledFetchBlock",
		(this.props.readyState == mstr.Enum.Widget.READYSTATE.IDLE)
			&& (Ao > 0) && (An > 0) && (Ao < An));
    };
    V.prototype.loadRequestResponse = function I() {
	var As = this.props.requestContext;
	var A3 = As && As.response;
	if (!A3 || !A3.data) {
	    this.set("readyState", mstr.Enum.Widget.READYSTATE.ERROR);
	    return;
	}
	var A1 = A3.data;
	this.set("searchPattern", As.memo && As.memo.searchPattern);
	var An;
	if (this.props.keepSelectionsAfterRequest) {
	    An = this.getSelectedItems();
	    if (!An || !An.length) {
		An = this.props.keptSelections;
	    }
	    this.props.keptSelections = null;
	}
	var At;
	switch (As.memo && As.memo.commandId) {
	case "BrowseForms":
	    var Av = A1.getContainer();
	    At = Av && Av.value && Av.value.dssforms;
	    if (this.props.prefixItems) {
		At = At ? this.props.prefixItems.concat(At)
			: this.props.prefixItems.concat();
	    }
	    var A0 = mstr.$A.len(At);
	    this.set("totalSize", A0);
	    this.set("blockCount", 0);
	    this.set("blockBegin", A0 ? 0 : 1);
	    this.set("leafElements", false);
	    this.setContainerTree(Av && Av.value);
	    this.setItems(At || []);
	    break;
	default:
	    var A2 = [ "totalSize", "blockCount", "blockBegin", "leafElements" ];
	    for ( var Az = 0; Az < A2.length; Az++) {
		this.set(A2[Az], A1.get(A2[Az]));
	    }
	    switch (As.memo && As.memo.commandId) {
	    case "BrowseHierarchyItem":
		this._appendBrowsedItemsToContainerTree(As.memo.items,
			As.memo.itemsSiblings);
		break;
	    case "BrowseContainerTreeNode":
		var Ay = As.memo.node;
		if (Ay) {
		    var Ar = this.getContainerTree();
		    if (Ar) {
			Ar.execCommand("SingleSelect", Ay);
			var Au = Ay.parent;
			var Aq = Au && Au.children || [ Ay ];
			for ( var Az = 0, A0 = mstr.$A.len(Aq); Az < A0; Az++) {
			    Ar.removeAllChildNodes(Aq[Az]);
			}
		    }
		}
		break;
	    default:
		if (this.props.keepFolders
			|| (As.memo && As.memo.commandId == "BrowseAttribute")) {
		    var Ao = As.memo.item;
		    if (!Ao) {
			var Ax = A1.getContainer();
			Ao = Ax && Ax.value;
		    }
		    this._appendBrowsedItemsToContainerTree([ Ao ], [ this
			    .getItems() ]);
		} else {
		    var A4 = A1.getContainerTree();
		    var Aw = this.getContainerTree();
		    if (Aw) {
			var Ap = A4 && A4.getRootNode();
			if (Ap) {
			    Ap = mstr.utils.Trees.cloneSubTree(Ap);
			}
			Aw.setRootNode(Ap);
			Aw.setSelectedPaths(A4 && A4.getSelectedPaths());
		    }
		}
	    }
	    At = A1.getItems() || [];
	    this.setRMCModel(A1.props.rmc);
	    if (this.props.headerModel) {
		this.updateHeaderModel();
	    }
	    if (this.props.prefixItems) {
		At = At ? this.props.prefixItems.concat(At)
			: this.props.prefixItems.concat();
	    }
	    this.setItems(At);
	}
	if (mstr.$A.len(An)) {
	    this.setSelectedItems(An);
	}
	this.props.requestContext = {};
	this.set("readyState", mstr.Enum.Widget.READYSTATE.IDLE);
	this.raiseEvent("loadRequestResponse", null);
    };
    V.prototype._shouldKeepBrowsedItemSiblings = function AU(Ao, An) {
	if (!Ao || !An) {
	    return null;
	}
	if (this.props.keepEntryPoints && Ao.value
		&& (Ao.value.tp == mstr.Enum.MSTRFolderItem.TYPE.HIERARCHY)) {
	    return mstr.Enum.MSTRFolderItem.TYPE.ATTRIBUTE;
	} else {
	    if (this.props.keepHierarchies
		    && (An.tp == mstr.Enum.MSTRFolderItem.TYPE.HIERARCHY)) {
		return mstr.Enum.MSTRFolderItem.TYPE.HIERARCHY;
	    } else {
		if (this.props.keepFolders && !Ao.parent
			&& (An.tp == mstr.Enum.MSTRFolderItem.TYPE.FOLDER)) {
		    return mstr.Enum.MSTRFolderItem.TYPE.FOLDER;
		}
	    }
	}
	return null;
    };
    V.prototype._isSingleFilterNode = function K(Ao) {
	var An = Ao && Ao.value;
	if (An && (An.stp == 256 || An.tp == 1)) {
	    var Ap = Ao.parent && Ao.parent.value;
	    if (Ap && Ap.filters && Ap.filters.length == 1) {
		return true;
	    }
	}
	return false;
    };
    V.prototype._isDummyNode = function g(An) {
	return !(An && An.value && An.value.tp && (An.value.tp > 0));
    };
    V.prototype._appendBrowsedItemsToContainerTree = function AL(Av, Aw) {
	var A0 = this.getContainerTree();
	if (!A0 || !mstr.$A.len(Av)) {
	    return;
	}
	var Az = this.getContainer(), Au = this.props.valueForm, A1, Ax, Ao, Aq, Ay, Ap;
	for ( var Ar in Av) {
	    A1 = Av[Ar];
	    Ax = Aw && Aw[Ar];
	    if (!A1 || !Az) {
		break;
	    }
	    if (Az && Az.value && Az.value[Au] == A1[Au]) {
		if (Az.value.dssforms && A1.dssforms) {
		    Az.value.dssforms = A1.dssforms;
		}
		break;
	    }
	    Aq = [];
	    Ay = null;
	    var At = this._isDummyNode(Az);
	    if (At || (Ap = this._shouldKeepBrowsedItemSiblings(Az, A1))) {
		for ( var As = 0, An = mstr.$A.len(Ax); As < An; As++) {
		    if (At || (Ax[As] && Ax[As]["tp"] == Ap)) {
			Aq.push({
			    value : Ax[As]
			});
			if (Ax[As][Au] == A1[Au]) {
			    Ay = Aq[Aq.length - 1];
			}
		    }
		}
		if (!Ay) {
		    Ay = {
			value : A1
		    };
		    Aq.push(Ay);
		}
	    } else {
		Ay = {
		    value : A1
		};
		Aq.push(Ay);
	    }
	    Ao = A0.getNodePath(Az) + mstr.models.AbstractTreeBase.PATHDELIM
		    + mstr.$A.len(Az.children);
	    A0.insertNodesAt(Aq, Ao);
	    A0.execCommand("SingleSelect", Ay);
	    Az = Ay;
	}
    };
    V.prototype.getPropertyNameForForm = function M(Ap) {
	if (Ap != null) {
	    var Ao = this.getContainer();
	    if (Ao && Ao.value && Ao.value.dssforms) {
		var An = mstr.$A.findByForm(Ao.value.dssforms, Ap, "dssid");
		if (An > -1) {
		    return "form" + An;
		}
	    }
	}
	return null;
    };
    V.prototype.clone = function Ag() {
	var Ao = mstr.$H.clone(this.props);
	Ao.items = [].concat(Ao.items);
	Ao.selectedIndices = mstr.$H.clone(Ao.selectedIndices);
	if (this.getContainer()) {
	    Ao.containerTree = this.getContainerTree()
		    && this.getContainerTree().clone();
	} else {
	    Ao.containerTree = null;
	}
	Ao.container = null;
	Ao.id = mstr.controllers.Factory.nextFreeId();
	var An = new V(Ao, false);
	if (this.props.headerModel) {
	    An._initHeaderModel();
	}
	if (!An) {
	    return;
	}
	mstr.controllers.Factory.add(An);
	An.init && An.init();
	return An;
    };
    V.prototype.init = function T() {
	mstr.models.BaseModel.prototype.init.apply(this);
	if (this.props.container || this.props.blockBegin) {
	    this._updateCommandEnabledBrowseFolder();
	    this._updateCommandEnabledSearch();
	}
	if (this.props.autoSelectFirstItem && !this.props.defaultSelection
		&& this.getSelectedIndex() == -1) {
	    this.execSelect({
		0 : true
	    });
	}
    };
    function V(An, Ao) {
	mstr.models.BaseModel.apply(this, [ An ]);
	this.props.items = this.props.items || [];
	if (this.props.prefixItems && (Ao !== false)) {
	    this.props.items = this.props.prefixItems.concat(this.props.items);
	}
	this.props.selectedIndices = this.props.selectedIndices || {};
	if (this.props.selectedIndicesList) {
	    var Ap = mstr.$A.toHash(this.props.selectedIndicesList.split(","));
	    this.execSelect(Ap);
	}
	if (this.props.anchorIndex == null) {
	    this.props.anchorIndex = -1;
	}
	if (this.props.leadIndex == null) {
	    this.props.leadIndex = -1;
	}
	this._updateCommandEnabledFetchBlock();
    }
    return V;
})();
mstr.models.dnd = {};
mstr.models.dnd.DragZone = (function() {
    mstr.$O.extendsClass(G, mstr.models.BaseModel);
    G.prototype.init = function E() {
	mstr.controllers.EventManager.attachWindowEventListener(this,
		"mousedown", "onmousedown");
	mstr.controllers.EventManager.attachWindowEventListener(this,
		"mouseup", "onmouseup");
	mstr.utils.Hash.applydefault(this.props, {
	    delay : 200
	});
    };
    G.prototype.findTarget = function H(M, N) {
	return null;
    };
    G.prototype.getDragData = function L(M, N) {
	return {
	    ddel : this.get("src").cloneNode(true)
	};
    };
    G.prototype.startDrag = function A(M) {
    };
    G.prototype.drag = function K(N, M, O) {
    };
    G.prototype.endDrag = function J(N, M, O) {
    };
    G.prototype.onmousedown = function C(O) {
	if (this.get("view").get("renderStatus") < 3) {
	    return null;
	}
	var M = this.findTarget(this.get("view"), O);
	if (!M) {
	    return;
	}
	var N = this;
	this.delayHandle = window.setTimeout(function() {
	    N.initDrag(O, M);
	}, this.get("delay"));
    };
    G.prototype.initDrag = function D(T, V) {
	delete this.delayHandle;
	mstr.controllers.EventManager.attachWindowEventListener(this,
		"mousemove", "onmousemove");
	this.set("dragging", true);
	this.set("src", V);
	var S = mstr.utils.BoxModel.getBox(V);
	this.set("xOffset", T.x - S.left);
	this.set("yOffset", T.y - S.top);
	var U = this.getDragData(this.get("view"), T);
	this.set("data", U);
	U.ddel.style.left = "0";
	U.ddel.style.top = "0";
	var N = this.get("el");
	if (!N) {
	    N = document.createElement("div");
	    N.style.position = "absolute";
	    N.style.zIndex = 10001;
	    document.body.appendChild(N);
	    this.set("el", N);
	} else {
	    N.removeChild(N.firstChild);
	}
	N.appendChild(U.ddel);
	var P = {};
	var Q = [ "x", "y" ];
	var M, O;
	for ( var R = 0; R < 2; R++) {
	    M = Q[R];
	    O = this.get(M + "Min");
	    if (O || !isNaN(O)) {
		P[M + "Min"] = (typeof (O) == "function") ? O() : O;
	    }
	    O = this.get(M + "Max");
	    if (O || !isNaN(O)) {
		P[M + "Max"] = (typeof (O) == "function") ? O() : O;
	    }
	    P[M] = (("xMin" in P) || ("xMax" in P));
	}
	this.set("constraints", P);
	this.startDrag(this.get("view"));
	this.onmousemove(T);
    };
    G.prototype.onmousemove = function I(O) {
	if (!this.get("dragging")) {
	    return;
	}
	var M = O.x - this.get("xOffset");
	var Q = O.y - this.get("yOffset");
	var P = this.constrainXY(M, Q);
	var N = this.get("el");
	N.style.left = P.x + "px";
	N.style.top = P.y + "px";
	this.drag(this.get("view"), P.x, P.y);
    };
    G.prototype.onmouseup = function F(N) {
	if (!this.get("dragging")) {
	    if (this.delayHandle) {
		window.clearTimeout(this.delayHandle);
		delete this.delayHandle;
	    }
	    return;
	}
	this.set("dragging", false);
	mstr.controllers.EventManager.detachWindowEventListener(this,
		"mousemove");
	var O = this.constrainXY(N.x - this.get("xOffset"), N.y
		- this.get("yOffset"));
	this.endDrag(this.get("view"), O.x, O.y);
	var M = this.get("el");
	M.style.top = "-10000px";
    };
    G.prototype.constrainXY = function B(N, M) {
	var O = this.get("constraints");
	if (O.x) {
	    if (!isNaN(O.xMin)) {
		N = Math.max(N, O.xMin);
	    }
	    if (!isNaN(O.xMax)) {
		N = Math.min(N, O.xMax);
	    }
	}
	if (O.y) {
	    if (!isNaN(O.yMin)) {
		M = Math.max(M, O.yMin);
	    }
	    if (!isNaN(O.yMax)) {
		M = Math.min(M, O.yMax);
	    }
	}
	return {
	    x : N,
	    y : M
	};
    };
    function G(N, M) {
	mstr.models.BaseModel.apply(this, [ N ]);
	mstr.utils.Hash.overwrite(this, M);
	mstr.controllers.Factory.add(this);
	this.init();
    }
    return G;
})();
mstr.http.FrameProcessor = (function() {
    mstr.$O.extendsClass(B, mstr.models.BaseModel);
    B.prototype.isHTTPProcessor = true;
    B.prototype.setInputs = function C(J) {
	this.props.inputs = J;
	this.props.readyState = mstr.Enum.Widget.READYSTATE.IDLE;
	this.props.response = null;
    };
    B.prototype.submit = function A() {
	var K = this.props.inputs;
	if (!K) {
	    return;
	}
	var O = K.htmlForm ? K.htmlForm.ownerDocument : this.props.document;
	if (!O) {
	    return;
	}
	var M = K.htmlForm;
	if (!M) {
	    M = O.createElement("form");
	    O.body.appendChild(M);
	    M.method = "POST";
	}
	var J = this.props.taskURL;
	J = microstrategy.addJSessionID(J);
	M.action = J;
	M.target = this.props.frameName;
	M.appendChild(this._getHiddenInput(O, "taskEnv", "juil_iframe", Q));
	var N;
	var Q = (K.htmlForm) ? [] : null;
	for ( var P in K.params) {
	    M.appendChild(this._getHiddenInput(O, P, K.params[P], Q));
	}
	M
		.appendChild(this._getHiddenInput(O, "_xts_", new Date()
			.getTime(), Q));
	for ( var L in microstrategy.persistParams) {
	    M.appendChild(this._getHiddenInput(O, L,
		    microstrategy.persistParams[L], Q));
	}
	this.props.cancelled = false;
	this.props.readyState = mstr.Enum.Widget.READYSTATE.WAITING;
	this.props.lastSubmit = new Date();
	if (parseInt(this.props.timeout)) {
	    this.props.timeoutId = self.setTimeout('mstr.$obj("' + this.getId()
		    + '").timeout()', parseInt(this.props.timeout));
	}
	M.submit();
	if (Q) {
	    while (N = Q.pop()) {
		M.removeChild(N);
	    }
	}
    };
    B.prototype._getHiddenInput = function G(L, N, J, M) {
	var K = L.createElement("input");
	K.type = "hidden";
	K.name = N;
	K.value = J;
	if (M) {
	    M.push(K);
	}
	return K;
    };
    B.prototype.timeout = function H() {
	this._clearTimeout();
	if (this.props.readyState == mstr.Enum.Widget.READYSTATE.WAITING) {
	    this.set("readyState", mstr.Enum.Widget.READYSTATE.TIMEOUT);
	}
    };
    B.prototype.cancel = function D() {
	this._clearTimeout();
	if (this.props.readyState == mstr.Enum.Widget.READYSTATE.WAITING) {
	    this.props.cancelled = true;
	    this.set("readyState", mstr.Enum.Widget.READYSTATE.CANCELLED);
	}
    };
    B.prototype.update = function F(J) {
	this._clearTimeout();
	var K = this.props.response = J && J.mstrResponse;
	if (J) {
	    J.mstrResponse = null;
	}
	if (parseInt(K && K.statusCode) == 200) {
	    this.props.lastSuccess = new Date();
	    this.set("readyState", mstr.Enum.Widget.READYSTATE.SUCCESS);
	} else {
	    this.set("readyState", mstr.Enum.Widget.READYSTATE.ERROR);
	}
    };
    B.prototype.getResponse = function I() {
	return this.props.response;
    };
    B.prototype._clearTimeout = function E() {
	var J = this.props.timeoutId;
	if (J) {
	    self.clearTimeout(J);
	    this.props.timeoutId = null;
	}
    };
    function B(J) {
	mstr.models.BaseModel.apply(this, [ J ]);
    }
    return B;
})();
mstr.http.BrowseFolderRequestInputs = (function() {
    function A(D, E, G, C, B, H, F, I) {
	this.url = "../servlet/taskProc";
	this.params = {
	    taskId : "searchMetadata",
	    rootFolderID : D,
	    blockBegin : E,
	    blockCount : G,
	    recursive : B ? 0 : (F ? "" : 1),
	    folderBrowserStyle : B ? 1 : 0,
	    includeAncestorInfo : String(!!B),
	    searchXML : F,
	    dataSourcesXML : I || "",
	    objectType : H
	};
    }
    return A;
})();
mstr.http.MetadataSearchRequestInputs = (function() {
    function A(C, D, G, B, H, F, E, I) {
	this.params = {
	    taskId : "searchMetadata",
	    rootFolderID : C,
	    searchPattern : E,
	    nameWildcards : 1,
	    blockBegin : D,
	    blockCount : G,
	    recursive : 1,
	    folderBrowserStyle : 0,
	    includeAncestorInfo : "true",
	    searchXML : F,
	    dataSourcesXML : I || "",
	    objectType : H
	};
    }
    return A;
})();
mstr.views = {};
mstr.views.IView = {
    get : null,
    set : null,
    getModel : null,
    setModel : null,
    render : null,
    update : null
};
mstr.views.BaseView = (function() {
    mstr.$O.extendsClass(BV, mstr.models.BaseModel);
    BV.prototype.DEFAULTS = {
	visible : true,
	enabled : true,
	renderStatus : mstr.Enum.Widget.RENDERSTATUS.NOT_STARTED,
	validationStatus : {
	    statusCode : mstr.Enum.Validation.STATUSCODE.VALID,
	    message : "",
	    bubble : false
	}
    };
    BV.prototype.getModel = function BV_getModel() {
	return this.props.model;
    };
    BV.prototype.setModel = function BV_setModel(m) {
	if (m == this.props.model) {
	    return false;
	}
	if (this.props.model) {
	    this._detachLayoutHandlers();
	}
	this.props.model = m;
	this._modelDirty = true;
	var names = this.props.modelPushedProps;
	var arr = names && names.split && names.split(",");
	for ( var i = 0, len = arr && arr.length || 0; i < len; i++) {
	    var p = arr[i];
	    var overwrite = (p.indexOf("!") == 0);
	    if (overwrite) {
		p = p.substr(1);
	    }
	    if (!(p in m.props)) {
		continue;
	    }
	    this["set_" + p] = function(evt) {
		var p1 = evt.name.substring(4, evt.name.length);
		var m1 = evt.originalSrc;
		this.setPropertyByPath(p1.replace("|", "/"),
			m1 && m1.props[p1], false);
	    };
	    m.attachEventListener(this, "set_" + p, "set_" + p);
	    if (overwrite
		    || mstr.controllers.Factory.getPath(p.replace("|", "/"),
			    this) == null) {
		this.setPropertyByPath(p.replace("|", "/"), m && m.props[p],
			true);
		if (m.props[p] instanceof mstr.models.BaseModel) {
		    m.props[p].set("parent", this);
		}
	    }
	}
	if (this.props.cmds) {
	    this._refreshCommandHandlers();
	}
	this._refreshChildViewModels();
	if (this._shouldAutoRender()) {
	    this.render();
	}
	return true;
    };
    BV.prototype.initModel = function BV_initModel() {
	var p = this.props.modelPath;
	if (p != null) {
	    this.setModel(mstr.controllers.Factory.getPath(p, this));
	}
    };
    BV.prototype.initValidator = function BV_initValidator() {
	var p = this.props.validator;
	if (p != null) {
	    var obj = p[mstr.$W.SCRIPTCLASS]
		    && mstr.controllers.Factory.registerJSON(p,
			    this.props[mstr.$W.DOCUMENT]);
	    if (obj) {
		this.props.validator = obj;
		var zz = obj.props && (obj.props[mstr.$W.PARENT] = this);
		zz = obj.init && obj.init();
	    }
	}
    };
    BV.prototype.execResetValidationStatus = function BV_execResetValidationStatus() {
	var vs = this.get("validationStatus");
	if (vs.statusCode != mstr.Enum.Validation.STATUSCODE.VALID) {
	    this.set("validationStatus", {
		statusCode : mstr.Enum.Validation.STATUSCODE.VALID,
		message : "",
		bubble : true
	    });
	    this.updateAllProps();
	}
    };
    BV.prototype.execCheckValidationStatus = function FE_execCheckValidationStatus() {
	return !(this.get("validationStatus").statusCode > mstr.Enum.Validation.STATUSCODE.VALID);
    };
    BV.prototype.after_set_validationStatus = function BV_after_set_validationStatus() {
	var vs = this.get("validationStatus");
	if (vs.bubble) {
	    this.raiseEvent("set_childValidationStatus", {
		id : this.getId(),
		code : vs.statusCode
	    }, true);
	}
    };
    BV.prototype._refreshChildViewModels = function BV_refCVM(cascade) {
	for ( var i = 0, len = mstr.$A.len(this._childViewsInstantiated); i < len; i++) {
	    var child = this._childViewsInstantiated[i];
	    var p = child && child.props && child.props.modelPath;
	    if (p && (p.substring(0, 7) == "parent/")) {
		child.initModel && child.initModel();
	    }
	    var cmds = child.props.cmdArray;
	    for ( var j = 0, lenCmds = mstr.$A.len(cmds); j < lenCmds; j++) {
		if (cmds[j] && cmds[j].targetPath
			&& (cmds[j].targetPath.substring(0, 7) == "parent/")) {
		    child._refreshCommandHandlers();
		    break;
		}
	    }
	    if (cascade) {
		child._refreshChildViewModels(cascade);
	    }
	}
    };
    BV.prototype.getLayoutXML = function BV_getLayoutXML() {
	return this._layoutXML;
    };
    BV.prototype.setLayoutXML = function BV_setLayoutXML(sXML) {
	if (sXML == this._layoutXML) {
	    return false;
	}
	if (this._layoutXML) {
	    this._detachLayoutHandlers();
	}
	this._layoutXML = sXML;
	this._layoutDirty = true;
	if (this._shouldAutoRender()) {
	    this.render();
	}
    };
    BV.prototype.initLayoutXML = function BV_initLayoutXML() {
	var c = this.props[mstr.$W.LAYOUTCLASS];
	if (c) {
	    c = c.replace(/\@[^:]*:/g, "");
	    this.props[mstr.$W.LAYOUTCLASS] = c;
	}
	c && this.setLayoutXML(eval(c));
    };
    BV.prototype.render = function BV_render() {
	if (!mstr.timers.renderStart) {
	    mstr.timers.renderStart = new Date();
	}
	var LR = mstr.utils.LayoutRenderer;
	var result = LR.render(this.props, this._layoutXML);
	var elNew = result && result.el && result.el.childNodes
		&& result.el.childNodes[0];
	if (!elNew) {
	    return;
	}
	elNew.style.display = "none";
	var curElement = this.props[mstr.$W.ELEMENT];
	if (this.get("preserveDOMNode") && this.get("parent") == null) {
	    mstr.$D.insertNode(elNew, curElement.parentNode, curElement);
	} else {
	    mstr.$D.replaceNode(curElement, elNew);
	}
	this.props[mstr.$W.ELEMENT] = elNew;
	this.props[mstr.$W.RENDERSTATUS] = result.renderStatus;
	this._layoutHandlers = LR.getLayoutHandlers(
		this.props[mstr.$W.LAYOUTCLASS], this._layoutXML);
	this._layoutHandlers = LR.replaceLayoutHandlerTokens(
		this._layoutHandlers, this);
	this._attachLayoutHandlers();
	if (this.props.cmds) {
	    this._refreshCommandHandlers();
	}
	this._layoutDirty = false;
	this.updateAllProps();
	this._modelDirty = false;
	this.props.childViewPaths = result.childPaths;
	this.props.childViewRenderCounter = 0;
	if (mstr.$A.len(result.childPaths)) {
	    var p = parseInt(this.props.pauseBeforeRenderingChildren);
	    if (p > 0) {
		window.setTimeout('mstr.$obj("' + this.getId()
			+ '").renderNextChildView()', p);
	    } else {
		this.renderNextChildView();
	    }
	} else {
	    this.props[mstr.$W.RENDERSTATUS] = mstr.Enum.Widget.RENDERSTATUS.RENDEREDCHILDREN;
	    mstr.timers.renderStop = new Date();
	    mstr.timers.render = mstr.timers.renderStop
		    - mstr.timers.renderStart;
	}
    };
    BV.prototype._shouldAutoRender = function BV_shouldAutoRender() {
	var rs = this.props[mstr.$W.RENDERSTATUS];
	return (rs != null && rs != mstr.Enum.Widget.RENDERSTATUS.NOT_STARTED);
    };
    BV.prototype.renderNextChildView = function BV_renderNextChildView() {
	var paths = this.props.childViewPaths, unrenderedPaths = {};
	if (paths) {
	    var childInfo;
	    while (childInfo = paths.shift()) {
		if (this.renderChildAt(childInfo.name, childInfo.id)) {
		    this.props.childViewRenderCounter++;
		    if (this.props.childViewRenderCounter
			    % mstr.views.BaseView.REPAINT_EVERY_CHILDCOUNT == 0) {
			window.setTimeout('mstr.$obj("' + this.getId()
				+ '").renderNextChildView()', 1);
			break;
		    }
		} else {
		    unrenderedPaths[childInfo.name] = childInfo;
		}
	    }
	    this.props.unrenderedChildViewPaths = unrenderedPaths;
	}
	if (!mstr.$A.len(paths)) {
	    this.props[mstr.$W.RENDERSTATUS] = mstr.Enum.Widget.RENDERSTATUS.RENDEREDCHILDREN;
	    mstr.timers.renderStop = new Date();
	    mstr.timers.render = mstr.timers.renderStop
		    - mstr.timers.renderStart;
	    this.execLayoutHandler("on_win_resize");
	}
    };
    BV.prototype.renderChildAt = function BV_renderChildAt(path, placeholderId) {
	var child = mstr.controllers.Factory.getPath(path, this);
	if (!child) {
	    return false;
	}
	var doc = this.props[mstr.$W.DOCUMENT];
	var el = doc && doc.getElementById(placeholderId);
	mstr.controllers.Factory.safeset(child, "document", doc);
	mstr.controllers.Factory.safeset(child, "element", el);
	mstr.controllers.Factory.safeset(child, "renderStatus",
		mstr.Enum.Widget.RENDERSTATUS.NOT_STARTED);
	if ((child.props && child.props.visible == false)
		|| child.visible == false) {
	    return false;
	}
	if (!child.getId) {
	    child[mstr.$W.PARENT] = this;
	    child = mstr.controllers.Factory.registerElement(el, null, child);
	    if (child) {
		mstr.controllers.Factory.setPath(path, this, child, true);
	    }
	    this._childViewsInstantiated.push(child);
	}
	if (child && child.render) {
	    child.render();
	    return true;
	}
	return false;
    };
    BV.prototype._attachLayoutHandlers = function BV_attachLayoutHandlers() {
	var model = this.props.model;
	var handlers = this._layoutHandlers && this._layoutHandlers.info;
	if (handlers && model && model.attachEventListener) {
	    for ( var n in handlers) {
		switch (handlers[n].src) {
		case "model":
		    model.attachEventListener(this, handlers[n].eventName,
			    "update");
		    break;
		case "win":
		    mstr.controllers.EventManager.attachWindowEventListener(
			    this, handlers[n].eventName, "update");
		    break;
		default:
		    if (handlers[n] && handlers[n].src
			    && handlers[n].src.substr(0, 5) == "model") {
			var paths = handlers[n].src.split(".");
			var temp = model;
			for ( var i = 1; i < paths.length; i++) {
			    temp = temp.get(paths[i]);
			}
			temp.attachEventListener(this, handlers[n].eventName,
				"update");
			break;
		    }
		}
	    }
	}
	this._attachPropertiesHandlers([ "enabled", "visible" ]);
    };
    BV.prototype._attachPropertiesHandlers = function BV_attachPropertiesHandlers(
	    ps) {
	var path, pathParts, obj, field, callbackName;
	for ( var i = 0, len = ps.length; i < len; i++) {
	    path = this.props[ps[i] + "Field"];
	    if (path == null || path == "") {
		continue;
	    }
	    callbackName = "on" + ps[i] + "FieldValueChange";
	    if (!this[callbackName]) {
		continue;
	    }
	    if (path.charAt(0) == "!") {
		path = path.substring(1);
	    }
	    pathParts = path.split(mstr.controllers.Factory.PATHDELIM);
	    field = pathParts.pop();
	    var valueIndex = field.indexOf(":");
	    if (valueIndex > -1) {
		var valueParts = field.split(":");
		field = valueParts[0];
		this.props[ps[i] + "SourceFieldValues"] = valueParts[1]
			.split(",");
	    }
	    this.props[ps[i] + "SourceField"] = field;
	    path = pathParts.join(mstr.controllers.Factory.PATHDELIM);
	    this.props[ps[i] + "Source"] = obj = path.length ? mstr.$path(path,
		    this) : this;
	    if (obj instanceof mstr.models.ListModel
		    && field == "selectedIndices") {
		obj
			&& obj.attachEventListener
			&& obj.attachEventListener(this, "hashadd_" + field,
				callbackName);
	    } else {
		obj
			&& obj.attachEventListener
			&& obj.attachEventListener(this, "set_" + field,
				callbackName);
	    }
	    if (obj) {
		this[callbackName]({
		    memo : {
			value : obj.get(field)
		    }
		});
	    }
	}
    };
    BV.prototype._detachLayoutHandlers = function BV_detachLayoutHandlers() {
	var model = this.props.model;
	var handlers = this._layoutHandlers && this._layoutHandlers.info;
	if (handlers && model && model.detachEventListener) {
	    for ( var n in handlers) {
		switch (handlers[n].src) {
		case "model":
		    model.detachEventListener(this, handlers[n].eventName);
		    break;
		case "win":
		    mstr.controllers.EventManager.detachWindowEventListener(
			    this, handlers[n].eventName);
		}
	    }
	}
	this._detachPropertiesHandlers([ "enabled", "visible" ]);
    };
    BV.prototype._detachPropertiesHandlers = function BV_detachPropertiesHandlers(
	    ps) {
	var obj, field;
	for ( var i = 0, len = ps.length; i < len; i++) {
	    obj = this.props[ps[i] + "Source"];
	    field = this.props[ps[i] + "SourceField"];
	    obj && obj.detachEventListener
		    && obj.detachEventListener(this, "set_" + field);
	}
    };
    BV.prototype.onenabledFieldValueChange = function BV_onEnabledFieldValueChange(
	    evt) {
	var fieldValue = this.extractEventSourceFieldValue("enabled", evt);
	var fieldPath = this.props.enabledField;
	if (fieldPath && fieldPath.charAt(0) == "!") {
	    fieldValue = !fieldValue;
	}
	this.set("enabled", fieldValue);
    };
    BV.prototype.onvisibleFieldValueChange = function BV_onVisibleFieldValueChange(
	    evt) {
	var fieldValue = this.extractEventSourceFieldValue("visible", evt);
	fieldPath = this.props.visibleField;
	if (fieldPath && fieldPath.charAt(0) == "!") {
	    fieldValue = !fieldValue;
	}
	this.set("visible", fieldValue);
    };
    BV.prototype.extractEventSourceFieldValue = function BV_extractEventSourceFieldValue(
	    name, evt) {
	if (!this.props[name + "SourceFieldValues"]) {
	    return !!evt && evt.memo && evt.memo.value;
	} else {
	    var src = this.props[name + "Source"];
	    if (src instanceof mstr.models.ListModel) {
		var hash = src && src.get(this.props[name + "SourceField"]);
		if (hash) {
		    var testValues = this.props[name + "SourceFieldValues"];
		    if (typeof (hash) == "object") {
			for ( var i = 0, cnt = testValues.length; i < cnt; i++) {
			    if (testValues[i] in hash) {
				return true;
			    }
			}
		    } else {
			for ( var i = 0, cnt = testValues.length; i < cnt; i++) {
			    if (testValues[i] == hash) {
				return true;
			    }
			}
		    }
		}
	    } else {
		return !evt
			&& evt.memo
			&& evt.memo.value
			&& evt.memo.value == this.props[name
				+ "SourceFieldValues"];
	    }
	}
	return false;
    };
    BV.prototype._refreshCommandHandlers = function BV_refreshCommandHandlers() {
	var cmds = this.props.cmdArray;
	if (!cmds) {
	    cmds = this.props.cmdArray = this._initCommands(this.props.cmds);
	}
	if (this.props.enabledField != undefined) {
	    return;
	}
	if (!cmds || !cmds.length) {
	    return;
	}
	var bAnyCommandEnabled = false;
	var bRequiredCommandsEnabled = true;
	for ( var i = 0, len = cmds.length; i < len; i++) {
	    if (!cmds[i].id) {
		continue;
	    }
	    var cmdId = cmds[i].id;
	    var attachedTarget = cmds[i].target;
	    var target = cmds[i].targetPath ? mstr.$path(cmds[i].targetPath,
		    this) : this;
	    if (target != attachedTarget) {
		attachedTarget
			&& attachedTarget.detachEventListener
			&& attachedTarget.detachEventListener(this,
				"set_CommandEnabled" + cmdId);
		target
			&& target.attachEventListener
			&& target.attachEventListener(this,
				"set_CommandEnabled" + cmdId,
				"updateCommandEnabled");
		cmds[i].target = attachedTarget = (target && target.execCommand) ? target
			: null;
	    }
	    var v = cmds[i].valuePath;
	    v = (v && !/^prompt\(/.test(v)) ? mstr.controllers.Factory
		    .resolveArgsString(v, this) : null;
	    cmds[i].enabled = ((attachedTarget
		    && attachedTarget.queryCommandEnabled && attachedTarget
		    .queryCommandEnabled(cmdId, v))
		    || cmdId.substr(0, 4) == "Set_" || false);
	    if (!bAnyCommandEnabled) {
		bAnyCommandEnabled = cmds[i].enabled;
	    }
	    if (bRequiredCommandsEnabled && cmds[i].required
		    && !cmds[i].enabled) {
		bRequiredCommandsEnabled = false;
	    }
	}
	this.set("enabled", bRequiredCommandsEnabled && bAnyCommandEnabled);
    };
    BV.prototype.updateCommandEnabled = function BV_updateCmdEnabled(evt) {
	var id = String(evt && evt.name).substr(18);
	if (!id) {
	    return;
	}
	var cmds = this.props.cmdArray;
	var index = mstr.$A.findByForm(cmds, id, "id");
	if (index > -1) {
	    var v = cmds[index].valuePath;
	    v = v ? mstr.controllers.Factory.resolveArgsString(v, this) : null;
	    var en = !!(evt.src && evt.src.queryCommandEnabled && evt.src
		    .queryCommandEnabled(id, v));
	    var bChanged = (!!cmds[index].enabled != !!en);
	    if (bChanged) {
		cmds[index].enabled = !!en;
		var bViewEnabled = !!en;
		if (!bViewEnabled) {
		    var i = mstr.$A.findByForm(cmds, "enabled", true);
		    if (i > -1) {
			bViewEnabled = true;
		    }
		}
		this.set("enabled", bViewEnabled);
	    }
	}
    };
    BV.prototype.execFireCommands = function BV_execFireCmds(defaultCmdValue) {
	//console.log("execFireCommands");
	return this.fireCommands(null, defaultCmdValue);
    };
    BV.prototype.fireCommands = function CV_fireCommands(cmdsString,
	    defaultCmdValue) {
	var cmds;
	//console.log("CV_fireCommands : " + cmdsString + "," +  defaultCmdValue);
	if (cmdsString) {
	    cmds = this._initCommands(cmdsString);
	} else {
	    cmds = this.props.cmdArray;
	    //console.log(String(cmds));
	}
	for ( var i = 0, len = mstr.$A.len(cmds); i < len; i++) {
	    var cmdReturnValue = false;
	    var t = cmds[i].target;
	    // 배우의
	    if (!t) {
		t = cmds[i].targetPath ? mstr.$path(cmds[i].targetPath, this)
			: this;
	    }
	    if (t && t.execCommand) {
		var v = cmds[i].valuePath;
		v = v ? mstr.controllers.Factory.resolveArgsString(v, this)
			: null;
		if (v == null) {
		    v = [ defaultCmdValue ];
		}
		//배우의
		//alert("t.execCommand.apply : " + t.execCommand);
		//console.log(String([ cmds[i].id ].concat(v)));
		cmdReturnValue = t.execCommand.apply(t, [ cmds[i].id ]
			.concat(v));
	    }
	    
	    //console.log(String(cmdReturnValue));
	    if (!cmdReturnValue && cmds[i].required) {
		break;
	    }
	}
	return true;
    };
    BV.prototype._initCommands = function BV_initCommands(s) {
	if (!s) {
	    return;
	}
	s = (s && s.split) ? s.split(";") : [ s ];
	var len = s.length;
	if (len) {
	    var arr = [];
	    for ( var i = 0; i < len; i++) {
		var parts = (s[i] && s[i].split) ? s[i].split("|") : [ s[i] ];
		if (parts[0]) {
		    var bRequired = (String(parts[0]).charAt(0) == "!");
		    if (bRequired) {
			parts[0] = String(parts[0]).substr(1);
		    }
		    arr.push({
			id : parts[0],
			valuePath : parts[1],
			targetPath : parts[2],
			required : bRequired
		    });
		}
	    }
	    return arr;
	}
	return null;
    };
    BV.prototype.computeHandlerNameForEvent = function BV_compHNforEvent(evt) {
	if (evt.src == this.props.model) {
	    return "on_model_" + evt.name;
	} else {
	    if (evt.src == this.props.document) {
		return "on_win_" + evt.name;
	    } else {
		return "on_" + evt.name;
	    }
	}
    };
    BV.prototype.searchHandlerByEventName = function BV_searchHandlerByEventName(
	    evt) {
	if (this._layoutHandlers && this._layoutHandlers.info) {
	    for ( var n in this._layoutHandlers.info) {
		if (this._layoutHandlers.info[n].eventName == evt.name) {
		    return this._layoutHandlers.info[n];
		}
	    }
	}
	return null;
    };
    BV.prototype.update = function BV_update(evt) {
	if (evt) {
	    var hName = this.computeHandlerNameForEvent(evt);
	    var hInfo = this._layoutHandlers && this._layoutHandlers.info
		    && this._layoutHandlers.info[hName];
	    if (!hInfo) {
		hInfo = this.searchHandlerByEventName(evt);
		if (hInfo) {
		    hName = hInfo.name;
		}
	    }
	    switch (hInfo && hInfo.method) {
	    case "listadd":
		var range = {
		    min : evt.memo.start,
		    max : evt.memo.start + evt.memo.count - 1
		};
		this._updateListPropIteratively(hName, hInfo, [ range ]);
		break;
	    case "listremove":
		this._updateListPropIteratively(hName, hInfo, evt.memo.ranges);
		break;
	    case "hashadd":
	    case "hashremove":
		this._updateHashPropIteratively(hName, hInfo, evt.memo.at);
		break;
	    default:
		return this.execLayoutHandler(hName);
	    }
	}
    };
    BV.prototype.updateAllProps = function BV_updateAllProps() {
	if (!this._layoutHandlers) {
	    return;
	}
	var names = this._layoutHandlers.sequence;
	var infos = this._layoutHandlers.info;
	var v = this, m = this.props.model, el = this.props.element;
	for ( var i = 0, len = mstr.$A.len(names); i < len; i++) {
	    var hName = names[i];
	    var hInfo = infos[hName];
	    switch (hInfo && hInfo.method) {
	    case "set":
	    case "win":
	    case null:
	    case undefined:
		var h = this._validateLayoutHandlerFunction(hInfo);
		if (h) {
		    var retVal = h(v, m, el, {
			init : true
		    });
		    if (hName && !hName.match(/^on\_/)) {
			this.props[hName] = retVal;
		    }
		}
		break;
	    case "listadd":
		var src = (hInfo.src == "model") ? m : v;
		if (src) {
		    var vals = (src == v) ? src.props[hInfo.prop] : src.get
			    && src.get(hInfo.prop);
		    var len = mstr.$A.len(vals);
		    if (len) {
			var range = {
			    min : 0,
			    max : len - 1
			};
			this
				._updateListPropIteratively(hName, hInfo,
					[ range ]);
		    }
		}
		break;
	    case "hashadd":
		var src = (hInfo.src == "model") ? m : v;
		if (src) {
		    var keys = (src == v) ? src.props[hInfo.prop] : src.get
			    && src.get(hInfo.prop);
		    this._updateHashPropIteratively(hName, hInfo, keys);
		}
		break;
	    }
	}
    };
    BV.prototype.execLayoutHandler = function BV_execLH(hName, index) {
	var hInfo = this._layoutHandlers && this._layoutHandlers.info
		&& this._layoutHandlers.info[hName];
	var h = this._validateLayoutHandlerFunction(hInfo);
	return h
		&& h(this, this.props.model, this.props[mstr.$W.ELEMENT], index);
    };
    BV.prototype._updateHashPropIteratively = function BV_updateHashPropIteratively(
	    hName, hInfo, keys) {
	var h = this._validateLayoutHandlerFunction(hInfo);
	if (!h) {
	    return;
	}
	var v = this;
	var m = this.props.model;
	var el = this.props[mstr.$W.ELEMENT];
	for ( var key in keys) {
	    h(v, m, el, key);
	}
    };
    BV.prototype._updateListPropIteratively = function BV_updateListPropIteratively(
	    hName, hInfo, ranges) {
	var h = this._validateLayoutHandlerFunction(hInfo);
	if (!h) {
	    return;
	}
	var v = this;
	var m = this.props.model;
	var el = this.props[mstr.$W.ELEMENT];
	for ( var i = 0, len = mstr.$A.len(ranges); i < len; i++) {
	    var min = ranges[i].min;
	    var max = ranges[i].max;
	    for ( var index = min; index <= max; index++) {
		h(v, m, el, index);
	    }
	}
    };
    BV.prototype.raiseEvent = function BV_raiseEvent(name, memo, bubble) {
	if (name) {
	    var evt = new mstr.lang.CustomEvent(this, name, memo);
	    if (this["before_" + name]) {
		this["before_" + name](evt);
	    }
	    this.update(evt);
	    if (this["after_" + name]) {
		this["after_" + name](evt);
	    }
	    this.notifyListeners(evt);
	    if (bubble) {
		var zz = this.get("parent") && this.get("parent").raiseEvent
			&& this.get("parent").raiseEvent(name, memo, bubble);
	    }
	}
    };
    BV.prototype._validateLayoutHandlerFunction = function BV_validLHF(hInfo) {
	if (hInfo) {
	    if (!hInfo.func && hInfo.str) {
		hInfo.func = new Function("view, model, rootTag, context",
			hInfo.str);
		hInfo.str = null;
	    }
	    return hInfo.func;
	}
	return null;
    };
    BV.prototype.execHide = function BV_execHide() {
	this.set("visible", false);
	return true;
    };
    BV.prototype.execShow = function BV_execShow() {
	this.set("visible", true);
	return true;
    };
    BV.prototype.execHideChild = function BV_execHideChild(path) {
	if (path) {
	    mstr.controllers.Factory.setPath(path + "/visible", this, false,
		    false);
	}
    };
    BV.prototype.execShowChild = function BV_execShowChild(path) {
	return this._showChildViewAtPath(path);
    };
    BV.prototype._showChildViewAtPath = function BV_showChildViewAtPath(
	    childPath) {
	var childView = mstr.controllers.Factory.getPath(childPath, this);
	if (childView) {
	    mstr.controllers.Factory.safeset(childView, "visible", true);
	    if ((this.props.renderStatus == mstr.Enum.Widget.RENDERSTATUS.RENDEREDCHILDREN)
		    && (!childView.getId || (childView.props.renderStatus == mstr.Enum.Widget.RENDERSTATUS.NOT_STARTED))) {
		var childInfo = this.props.unrenderedChildViewPaths
			&& this.props.unrenderedChildViewPaths[childPath];
		if (childInfo && childInfo.id != null) {
		    this.renderChildAt(childPath, childInfo.id);
		    childView = mstr.controllers.Factory.getPath(childPath,
			    this);
		    var m = childView && childView.props.model;
		    if (m) {
			m.execCommand && m.execCommand("FetchData");
		    }
		}
	    }
	}
    };
    BV.prototype.execOpenPopup = function BV_execOpenPopup(popupInfo) {
	self.supressWaitPage = true;
	try {
	    if (popupInfo) {
		if (typeof (popupInfo) == "string") {
		    popupInfo = {
			popup : mstr.$obj(popupInfo)
		    };
		} else {
		    if (popupInfo.popup == null) {
			popupInfo = {
			    popup : popupInfo
			};
		    }
		}
	    }
	    var popup = popupInfo && popupInfo.popup;
	    if (!popup && this.props.popupId) {
		popup = mstr.$obj(this.props.popupId);
	    }
	    var useDefault = !popup || !popup.getId;
	    if (useDefault) {
		popup = this.props.popup;
	    }
	    if (!popup) {
		return;
	    }
	    var p = this.props.currentPopUp;
	    if (p) {
		this.execClosePopup();
	    }
	    if (!popup.getId) {
		if (useDefault) {
		    popup[mstr.$W.PARENT] = this;
		}
		popup = mstr.controllers.Factory.registerJSON(popup,
			this.props.document);
		popup && popup.init && popup.init();
		if (useDefault) {
		    this.props.popup = popup;
		    popup && this._childViewsInstantiated.push(popup);
		}
	    }
	    this.props.currentPopUp = popup;
	    if (!popup) {
		return;
	    }
	    popup.attachEventListener(this, "Pop", "onPop");
	    if (popupInfo && popupInfo.x != null) {
		popup.set("x", popupInfo.x);
	    }
	    if (popupInfo && popupInfo.y != null) {
		popup.set("y", popupInfo.y);
	    }
	    popup.execCommand("Pop", this);
	} finally {
	    window.setTimeout("self.supressWaitPage = false;", 10);
	}
    };
    BV.prototype.onPop = function BV_onPop(evt) {
	var p = this.props.currentPopUp;
	if (p != (evt && evt.src)) {
	    return;
	}
	this.set("opened", true);
	p.detachEventListener(this, "Pop");
	p.attachEventListener(this, "Unpop", "onUnpop");
	self.setTimeout(
		"mstr.controllers.EventManager.attachWindowEventListener(mstr.$obj('"
			+ this.props.id + "'),'mousedown','onMouseEvent')", 1);
	var sc = this.getAncestorByProperty("isScrollProvider");
	if (sc) {
	    if (p.props.element.offsetParent != sc.props.element) {
		sc.attachEventListener(this, "sync_scroll", "onSyncScroll");
		sc.props._initialScrollTop = sc.props.element.scrollTop;
		p.props._scrollProvider = sc;
		if (mstr.utils.ISWK) {
		    var docEl = document.documentElement, ov = docEl.style.overflow;
		    docEl.style.overflow = "hidden";
		    window.setTimeout(function() {
			docEl.style.overflow = ov;
		    }, 0);
		}
	    }
	}
    };
    BV.prototype.onSyncScroll = function BV_onSyncScroll(evt) {
	var popup = this.props.currentPopUp;
	if (popup) {
	    if (this._scTimer) {
		window.clearTimeout(this._scTimer);
	    }
	    var opener = this.props.element;
	    this._scTimer = window
		    .setTimeout(
			    function() {
				var popupProps = popup.props, sc = popupProps
					&& popupProps._scrollProvider;
				if (sc) {
				    var scProps = sc.props, scEl = scProps.element, scST = scEl.scrollTop, delta = scST
					    - scProps._initialScrollTop;
				    var el = popupProps.element;
				    if (el) {
					el.style.top = parseInt(el.style.top)
						- delta + "px";
					scProps._initialScrollTop = scEl.scrollTop;
					var scPos = mstr.utils.BoxModel
						.position(scEl), scBottom = scPos.top
						+ scPos.height, openerPos = mstr.utils.BoxModel
						.position(opener), openerBottom = openerPos.top
						+ openerPos.height;
					el.style.display = openerBottom >= scBottom ? "none"
						: "";
					if (mstr.utils.ISWK) {
					    var docEl = document.documentElement, ov = mstr.utils.CSS
						    .getStyleValue(docEl,
							    "overflow");
					    docEl.style.overflow = "hidden";
					    window.setTimeout(function() {
						docEl.style.overflow = ov;
					    }, 100);
					}
				    }
				}
			    }, 100);
	}
    };
    BV.prototype.onUnpop = function BV_onUnpop(evt) {
	var p = this.props.currentPopUp;
	if (p != (evt && evt.src)) {
	    return;
	}
	this.set("opened", false);
	p.detachEventListener(this, "Unpop");
	mstr.controllers.EventManager.detachWindowEventListener(this,
		"mousedown");
	mstr.controllers.EventManager
		.detachWindowEventListener(this, "mouseup");
	this.props.currentPopUp = null;
    };
    BV.prototype.onMouseEvent = function BV_onMouseEvent(evt) {
	var p = this.props.currentPopUp;
	if (!p) {
	    return;
	}
	var elTarget = evt && evt.target();
	if (!mstr.utils.Dom.containsElement(p.props.element, elTarget, true)
		&& (!mstr.utils.Dom.containsElement(this.props.element,
			elTarget, true) || this.props.popupPolicy == "toggle")) {
	    var viewId = elTarget && elTarget.mstrViewId, view = viewId
		    && mstr.$obj(viewId);
	    if (!p.isAncestorOf(view)) {
		this.execClosePopup();
	    }
	}
    };
    BV.prototype.isAncestorOf = function(view) {
	var p = view;
	while (p) {
	    p = p && p.props && p.props.parent;
	    if (p == this) {
		return true;
	    }
	}
	return false;
    };
    BV.prototype.execClosePopup = function BV_execClosePopup() {
	var p = this.props.currentPopUp;
	if (p) {
	    p.execCommand("Unpop");
	}
    };
    BV.prototype.execPop = function BV_execPop(opener) {
	if (!opener) {
	    return;
	}
	this.props.opener = opener;
	this.set("visible", false);
	if (!this.props.element) {
	    var doc = opener.props.document || document;
	    this.props.element = doc.createElement("span");
	}
	var el = this.props.element;
	var elOpener = opener.props.element;
	if (elOpener && elOpener.parentNode) {
	    if (el.parentNode) {
		el.parentNode.removeChild(el);
	    }
	    var elNextSibling = elOpener.nextSibling;
	    if (elNextSibling) {
		elOpener.parentNode.insertBefore(el, elNextSibling);
	    } else {
		elOpener.parentNode.appendChild(el);
	    }
	}
	var m = mstr.$path(this.props.modelPath, this);
	if (m != this.getModel()) {
	    this.setModel(m);
	}
	this.render();
	this._positionPop();
	this.set("visible", true);
	this.raiseEvent("Pop");
    };
    BV.prototype._positionPop = function BV_positionPop() {
	this._prePositionPop();
	var coords = this._computeNewClientCoords();
	var BM = mstr.utils.BoxModel, mySize = this._getMySize(), bAllowNudge = (this.props.popOrientation != mstr.Enum.Widget.POPORIENTATION.VERTICAL);
	if (bAllowNudge || this.props.nudge) {
	    coords.width = mySize.width;
	    coords.height = mySize.height;
	    coords = BM.fitRectWithinRect(coords, BM
		    .getBrowserWindowRect(this.props.element.ownerDocument));
	}
	var elOffsetParent = this.props.element.offsetParent, offsetScrollLeft = 0, offsetScrollTop = 0;
	if (elOffsetParent) {
	    offsetScrollLeft = +elOffsetParent.scrollLeft;
	    offsetScrollTop = +elOffsetParent.scrollTop;
	}
	BM.setClientCoords(this.props.element, coords.left + offsetScrollLeft,
		coords.top + offsetScrollTop);
	this._postPositionPop(mySize.width, mySize.height);
    };
    BV.prototype._prePositionPop = function BV_prePositionPop() {
	var el = this.props.element, s = el && el.style;
	if (!s) {
	    return;
	}
	el.className = el.className.replace(/ mstrAsPopup/, "")
		+ " mstrAsPopup";
	s.visibility = "hidden";
	s.position = "absolute";
	s.zIndex = 999;
	s.display = (el.tagName && el.tagName.toLowerCase() == "table" && mstr.utils.ISW3C) ? "table"
		: "block";
    };
    BV.prototype._postPositionPop = function BV_postPositionPop(width, height) {
	var el = this.props.element, s = el && el.style;
	if (!s) {
	    return;
	}
	s.display = "none";
	s.visibility = "visible";
	if (mstr.utils.ISIE6) {
	    var popupMask = microstrategy.getPopupMask(el), pms = popupMask
		    && popupMask.style;
	    if (pms) {
		popupMask.className = "popupMask_" + el.id;
		pms.left = s.left;
		pms.top = s.top;
		pms.width = width + "px";
		pms.height = height + "px";
		pms.zIndex = s.zIndex - 1;
	    }
	}
    };
    BV.prototype._getMySize = function BV_getMySize() {
	var ps = this.props, w = ps.width, h = ps.height, el = ps.element, BM = mstr.utils.BoxModel;
	if (w && w.match(/px$/)) {
	    w = parseInt(w);
	} else {
	    w = BM.getElementOuterWidth(el)
		    || BM.getElementOuterWidth(el.firstChild);
	}
	if (h && h.match(/px$/)) {
	    h = parseInt(h);
	} else {
	    h = BM.getElementOuterHeight(el)
		    || BM.getElementOuterHeight(el.firstChild);
	}
	return {
	    width : w,
	    height : h
	};
    };
    BV.prototype._computeNewClientCoords = function BV_ccc() {
	return (this.props.popOrientation == mstr.Enum.Widget.POPORIENTATION.VERTICAL) ? this
		._computeNewClientCoordsAsDropdown()
		: this._computeNewClientCoordsAsCtxtMenu();
    };
    BV.prototype._computeNewClientCoordsAsDropdown = function BV_cmpClientAsDD() {
	var elOpener = this._getOpenerArea();
	var coords = mstr.utils.BoxModel.getClientCoords(elOpener);
	coords.top += elOpener.offsetHeight;
	return coords;
    };
    BV.prototype._computeNewClientCoordsAsCtxtMenu = function BV_cmpClientAsCM() {
	if (!isNaN(parseInt(this.props.x)) && !isNaN(parseInt(this.props.y))) {
	    var el = this.props.element, doc = el && el.ownerDocument, de = doc
		    && doc.documentElement;
	    return {
		left : parseInt(this.props.x) - (de && de.scrollLeft || 0),
		top : parseInt(this.props.y) - (de && de.scrollTop || 0)
	    };
	} else {
	    return mstr.utils.BoxModel.getClientCoords(this._getOpenerArea());
	}
    };
    BV.prototype._getOpenerArea = function BV_getOpenerArea() {
	var opener = this.get("opener"), elOpener = opener
		&& (opener.execLayoutHandler("openerArea") || opener
			.get("element"));
	return elOpener;
    };
    BV.prototype.execUnpop = function BV_execUnpop() {
	if (mstr.utils.ISIE4) {
	    microstrategy.releasePopupMask(this.props.element);
	}
	this.set("visible", false);
	this.props.opener = null;
	this.raiseEvent("Unpop");
    };
    BV.prototype.execConfirm = function BV_execConfirm(msg) {
	if (!msg) {
	    return false;
	}
	return window.confirm(msg);
    };
    BV.prototype.prompt = function BV_prompt(msg, defV) {
	if (!msg) {
	    return null;
	}
	return window.prompt(msg, (defV ? defV : ""));
    };
    BV.prototype.init = function BV_init() {
	this.initLayoutXML();
	this.initModel();
	this.initValidator();
    };
    function BV(props) {
	this.props = mstr.utils.Hash.applydefault(props, this.DEFAULTS);
	this._childViewsInstantiated = [];
    }
    return BV;
})();
mstr.views.Editor = (function() {
    mstr.$O.extendsClass(B, mstr.views.BaseView);
    B.prototype.execApply = function A(E) {
	this.raiseEvent("apply", {
	    value : E
	});
    };
    B.prototype.execSave = function D(E) {
	this.raiseEvent("save", {
	    value : E
	});
    };
    B.prototype.queryEnabledApply = function C() {
	return true;
    };
    B.prototype.queryEnabledApply = function C() {
	return false;
    };
    function B(E) {
	mstr.views.BaseView.apply(this, [ E ]);
    }
    return B;
})();
mstr.views.TextInput = (function() {
    mstr.$O.extendsClass(B, mstr.views.BaseView);
    B.prototype.shouldWriteBack = function A(F) {
	F = String(F).toLowerCase();
	var E = mstr.Enum.Widget.AUTOWRITEBACK;
	switch (parseInt(this.props.autoWriteBack)) {
	case E.ONKEYPRESS:
	    return !!F.match(/keypress|keydown|blur/i);
	case E.ONBLUR:
	    return !!F.match(/blur/i);
	case E.OFF:
	    return false;
	}
	return !!F.match(/keypress|keydown|blur/i);
    };
    B.prototype.getAutoValidate = function C() {
	var G = mstr.Enum.Widget.AUTOVALIDATE, F = parseInt(this.props.autoValidate);
	if (isNaN(F)) {
	    F = G.USEDEFAULT;
	}
	if (F == G.USEDEFAULT) {
	    var E = mstr.Enum.Prompts.VALIDATIONLEVEL;
	    switch (mstr.Settings.Prompts.VALIDATIONLEVEL) {
	    case E.AFTERANSWEREACH:
		F = G.ONBLUR;
		break;
	    case E.INMIDANSWEREACH:
		F = G.ONKEYPRESS;
		break;
	    case E.OFF:
	    case E.ATRUNREPORT:
	    default:
		F = G.OFF;
		break;
	    }
	}
	return F;
    };
    B.prototype.getAutoFormat = function D() {
	var G = mstr.Enum.Widget.AUTOFORMAT, F = parseInt(this.props.autoFormat);
	if (isNaN(F)) {
	    F = G.USEDEFAULT;
	}
	if (F == G.USEDEFAULT) {
	    var E = mstr.Enum.Prompts.AUTOFORMATLEVEL;
	    switch (mstr.Settings.Prompts.AUTOFORMATLEVEL) {
	    case E.AFTERANSWEREACH:
		F = G.ONBLUR;
		break;
	    case E.INMIDANSWEREACH:
		F = G.ONKEYPRESS;
		break;
	    case E.OFF:
	    case E.BEFORERUNREPORT:
	    case E.AFTERRUNREPORT:
	    default:
		F = G.OFF;
		break;
	    }
	}
	return F;
    };
    function B(E) {
	mstr.views.BaseView.apply(this, [ E ]);
    }
    return B;
})();
mstr.views.ViewListBase = (function() {
    mstr.$O.extendsClass(B, mstr.views.BaseView);
    B.prototype._attachLayoutHandlers = function C() {
	mstr.views.BaseView.prototype._attachLayoutHandlers.apply(this);
	var F = this.props.model;
	if (F && F.attachEventListener) {
	    F.attachEventListener(this, "hashadd_selectedIndices",
		    "onAddSelections");
	    F.attachEventListener(this, "hashremove_selectedIndices",
		    "onRemoveSelections");
	}
    };
    B.prototype._detachLayoutHandlers = function D() {
	mstr.views.BaseView.prototype._detachLayoutHandlers.apply(this);
	var F = this.props.model;
	if (F && F.attachEventListener) {
	    F.detachEventListener(this, "hashadd_selectedIndices");
	    F.detachEventListener(this, "hashremove_selectedIndices");
	}
    };
    B.prototype.initChildModelPaths = function E() {
	var G = this.props.views;
	var J = "parent/model/items/";
	for ( var H = 0, F = mstr.$A.len(G); H < F; H++) {
	    var I = G[H];
	    if (!I || ((I.props && I.props.modelPath) || (I.modelPath))) {
		continue;
	    }
	    if (I.props) {
		I.props.modelPath = J + H;
	    } else {
		I.modelPath = J + H;
	    }
	}
    };
    B.prototype.init = function A() {
	this.initChildModelPaths();
	mstr.views.BaseView.prototype.init.apply(this);
    };
    function B(F) {
	mstr.views.BaseView.apply(this, [ F ]);
    }
    return B;
})();
mstr.views.ViewBook = (function() {
    mstr.$O.extendsClass(D, mstr.views.ViewListBase);
    D.prototype.init = function E() {
	mstr.views.ViewListBase.prototype.init.apply(this);
	var F = this.getModel();
	F.attachEventListener(this, "listadd_items", "reRender");
	F.attachEventListener(this, "listremove_items", "reRender");
    };
    D.prototype.reRender = function C() {
	if (this.props.renderStatus != mstr.Enum.Widget.RENDERSTATUS.NOT_STARTED) {
	    this.render();
	}
    };
    D.prototype.render = function B() {
	this._initChildViewList();
	mstr.views.ViewListBase.prototype.render.apply(this);
    };
    D.prototype._initChildViewList = function A() {
	var H = "parent/model/items/";
	var N = this.props.views = [];
	var J = this.props.childViewTypes
		|| this.props.parent.props.childViewTypes;
	var M = this.props.document, F = this.props.model, K = F
		&& F.getItems(), Q, L, O;
	for ( var G = 0, I = mstr.$A.len(K); G < I; G++) {
	    Q = K[G];
	    L = (Q && Q.get && Q.get("type")) || "default";
	    O = J && (J[L] || J["default"]);
	    if (!O) {
		continue;
	    }
	    O = mstr.utils.Hash.deepClone(O);
	    O.parent = this;
	    O.modelPath = H + G;
	    N[G] = mstr.controllers.Factory.registerJSON(O, M);
	    if (N[G] && N[G].init) {
		N[G].init();
	    }
	}
    };
    function D(F) {
	mstr.views.ViewListBase.apply(this, [ F ]);
    }
    return D;
})();
mstr.views.ViewStack = (function() {
    mstr.$O.extendsClass(F, mstr.views.ViewListBase);
    F.prototype.setModel = function I(L) {
	mstr.views.ViewListBase.prototype.setModel.apply(this, [ L ]);
	if (L) {
	    L.set("stack", true);
	}
    };
    F.prototype.onAddSelections = function K(L) {
	var N = L && L.memo && L.memo.at;
	var M = parseInt(mstr.$H.firstKey(N));
	this._showChildViewAtIndex(M);
	this._updateNavCommands();
    };
    F.prototype._updateNavCommands = function E() {
	var M;
	var L = this.props.model;
	if (L) {
	    M = L.getSelectedIndex();
	}
	if (M == null) {
	    M = -1;
	}
	this.set("CommandEnabledPreviousView", M > 0);
	this.set("CommandEnabledNextView",
		M < (mstr.$A.len(this.props.views) - 1));
    };
    F.prototype.onRemoveSelections = function A(L) {
	var N = L && L.memo && L.memo.at;
	var M = parseInt(mstr.$H.firstKey(N));
	if (M > -1) {
	    var O = this.props.views && this.props.views[M];
	    mstr.controllers.Factory.safeset(O, "visible", false);
	}
    };
    F.prototype.render = function J() {
	var N = this.props.views, M = mstr.$A.len(N), Q;
	for ( var P = 0; P < M; P++) {
	    mstr.controllers.Factory.safeset(N[P], "visible", false);
	    mstr.controllers.Factory.safeset(N[P], "renderStatus",
		    mstr.Enum.Widget.RENDERSTATUS.NOT_STARTED);
	}
	mstr.views.BaseView.prototype.render.apply(this);
	var L = this.getModel();
	var O = L && L.getSelectedIndex();
	this._showChildViewAtIndex(O);
	mstr.timers.renderStop = new Date();
	mstr.timers.render = mstr.timers.renderStop - mstr.timers.renderStart;
    };
    F.prototype.renderNextChildViewOld = function B() {
	var O = this.props.childViewPaths;
	if (O) {
	    var N = this.props.stackInfo = {};
	    var M;
	    for ( var L = O.length - 1; L > -1; L--) {
		M = O[L];
		if (M.name && M.name.substring(0, 6) == "views/") {
		    N[M.name] = M;
		    O.splice(L, 1);
		}
	    }
	}
	this.renderNextChildView = mstr.views.BaseView.prototype.renderNextChildView;
	this.renderNextChildView();
    };
    F.prototype.execPreviousView = function D() {
	var L = this.props.model;
	if (L) {
	    var M = L.getSelectedIndex();
	    if (M > 0) {
		return this.execGotoView(M - 1);
	    }
	}
	return false;
    };
    F.prototype.execNextView = function G() {
	var L = this.props.model;
	if (L) {
	    var M = L.getSelectedIndex();
	    if (M > -1) {
		return this.execGotoView(M + 1);
	    }
	}
	return false;
    };
    F.prototype.execGotoView = function H(M) {
	var L = this.props.model;
	if (L) {
	    if ((M > -1) && (M < mstr.$A.len(this.props.views))) {
		return L.execCommand("SingleSelect", M);
	    }
	}
	return false;
    };
    F.prototype._showChildViewAtIndex = function C(L) {
	L = parseInt(L);
	if (L != null && L > -1) {
	    this._showChildViewAtPath("views/" + L);
	}
    };
    function F(L) {
	mstr.views.ViewListBase.apply(this, [ L ]);
	this._updateNavCommands();
    }
    return F;
})();
mstr.views.Pulldown = (function() {
    mstr.$O.extendsClass(C, mstr.views.BaseView);
    C.prototype.render = function H() {
	mstr.views.BaseView.prototype.render.apply(this);
	if (!this.get("horizontalCaption")) {
	    var I = this.get("element");
	    var J = I.getElementsByTagName("td");
	    if (J.length > 0) {
		J[0].style.display = "none";
	    }
	}
	this.renderSelections();
    };
    C.prototype._attachLayoutHandlers = function G() {
	mstr.views.BaseView.prototype._attachLayoutHandlers.apply(this);
	var I = this.props.model;
	if (I && I.attachEventListener) {
	    I.attachEventListener(this, "set_icon", "set_buttonClass");
	    I.attachEventListener(this, "set_showPressed", "set_pressed");
	    var J = this._getPropNameForSelections();
	    if (J) {
		I.attachEventListener(this, "hashadd_" + J, "renderSelections");
		I.attachEventListener(this, "hashremove_" + J,
			"renderSelections");
	    }
	}
    };
    C.prototype.set_buttonClass = function A(I) {
	this.set("buttonClass", I.memo.value);
    };
    C.prototype.set_pressed = function D(I) {
	this.set("pressed", I.memo.value);
    };
    C.prototype._detachLayoutHandlers = function B() {
	mstr.views.BaseView.prototype._detachLayoutHandlers.apply(this);
	var I = this.props.model;
	if (I && I.attachEventListener) {
	    var J = this._getPropNameForSelections();
	    if (J) {
		I.detachEventListener(this, "hashadd_" + J);
		I.detachEventListener(this, "hashremove_" + J);
	    }
	}
    };
    C.prototype._getPropNameForSelections = function E() {
	var I = this.props.modelClass;
	if (/TreeModel/.test(I)) {
	    return "selections";
	} else {
	    if (/ListModel/.test(I)) {
		return "selectedIndices";
	    }
	}
	return null;
    };
    C.prototype.renderSelections = function F() {
	var L = mstr.utils.ListViewHelper.getItemRenderer(this);
	if (!L) {
	    return;
	}
	var I = this.props.model;
	var K = (this.props.popup && (this.props.popup.singleFilterCssClass || this.props.popup.props
		&& this.props.popup.props.singleFilterCssClass)) ? (I
		&& I.getViewableSelectedItems && I.getViewableSelectedItems())
		: (I && I.getSelectedItems());
	var M = (this.props.showSingleItemListAsLabel && (K && mstr.$A.len(K) == 1));
	var J;
	switch (mstr.$A.len(K)) {
	case 1:
	    J = "renderListItem";
	    break;
	case 0:
	    J = "renderEmpty";
	    break;
	default:
	    J = "renderMultipleItems";
	    break;
	}
	if (L[J]) {
	    L[J](this, I, this.props.element, {
		item : K && K[0],
		items : K,
		showAsLabel : M
	    });
	}
    };
    function C(I) {
	mstr.views.BaseView.apply(this, [ I ]);
    }
    return C;
})();
mstr.views.FieldSet = (function() {
    mstr.$O.extendsClass(B, mstr.views.BaseView);
    B.prototype.onlegendFieldValueChange = function C(F) {
	var G = this.get("element"), E = G.firstChild;
	if (F.memo.value) {
	    E.innerHTML = F.memo.value;
	}
    };
    B.prototype._attachLayoutHandlers = function D() {
	mstr.views.BaseView.prototype._attachLayoutHandlers.apply(this);
	mstr.views.BaseView.prototype._attachPropertiesHandlers.call(this,
		[ "legend" ]);
    };
    B.prototype._detachLayoutHandlers = function A() {
	mstr.views.BaseView.prototype._detachLayoutHandlers.apply(this);
	mstr.views.BaseView.prototype._detachPropertiesHandlers.call(this,
		[ "legend" ]);
    };
    function B(E) {
	mstr.views.BaseView.apply(this, [ E ]);
    }
    return B;
})();
mstr.views.ListView = (function() {
    mstr.$O.extendsClass(N, mstr.views.BaseView);
    N.prototype.render = function B() {
	mstr.views.BaseView.prototype.render.apply(this);
	var S = this.getModel();
	var R = mstr.$A.len(S && S.getItems && S.getItems());
	if (R) {
	    this.renderItemsAt(0, R);
	}
	this._updateEmptyMessage();
	mstr.timers.renderStop = new Date();
	mstr.timers.render = mstr.timers.renderStop - mstr.timers.renderStart;
    };
    N.prototype._updateEmptyMessage = function J() {
	var S = this.props.model, R = mstr.$A.len(S && S.getItems
		&& S.getItems()), U = mstr.$A.len(S && S.props
		&& S.props.prefixItems), W = this.props.descriptors, V = W
		&& W.searchRequiredText, T = W && W.emptyText, X = S
		&& S.isElementSearchRequired && S.isElementSearchRequired()
		&& !S.get("searchPattern");
	if (R > U || (!X && R)) {
	    this._clearEmptyMessage();
	} else {
	    msg = (X) ? V : T;
	    this.set("message", msg);
	}
    };
    N.prototype._clearEmptyMessage = function G() {
	var U = this.get("message"), T = this.props.descriptors, R = T
		&& T.emptyText, S = T && T.searchRequiredText;
	switch (U) {
	case R:
	case S:
	    this.set("message", null);
	    break;
	}
    };
    N.prototype.renderItemsAt = function P(R, Y) {
	var d = mstr.utils.ListViewHelper.getItemRenderer(this);
	if (!d || !d.renderListItem) {
	    return null;
	}
	var g = this, S = this.getId(), V = this.props.model;
	var Z = V && V.getItems();
	var T = (V && V.getSelectedIndices()) || {};
	var a = Math.min(R + Y, mstr.$A.len(Z));
	var W = this.props[mstr.$W.ELEMENT];
	var b = V && V.get("valueForm"), e;
	for ( var X = R; X < a; X++) {
	    var h = Z[X];
	    var c = mstr.utils.ListViewHelper.getItemBrowseCommand(this, h)
		    || "";
	    var U = d.renderListItem(g, V, W, {
		at : X,
		item : h,
		browseCommand : c
	    });
	    if (U) {
		if (T[X]) {
		    d.markListItemAsSelected(g, V, W, {
			at : X,
			item : h,
			elItem : U
		    });
		}
		if (!("enabled" in h) || h.enabled) {
		    e = h[b];
		    if (e == null && h.get) {
			e = h.get(b);
		    }
		    U.mstrListItemInfo = S + "/" + (e || "") + "/" + c;
		}
	    }
	}
    };
    N.prototype._attachLayoutHandlers = function Q() {
	mstr.views.BaseView.prototype._attachLayoutHandlers.apply(this);
	var R = this.props.model;
	if (R && R.attachEventListener) {
	    R.attachEventListener(this, "listadd_items", "onAddListItems");
	    R
		    .attachEventListener(this, "listremove_items",
			    "onRemoveListItems");
	    R.attachEventListener(this, "hashadd_selectedIndices",
		    "onAddSelectedIndices");
	    R.attachEventListener(this, "hashremove_selectedIndices",
		    "onRemoveSelectedIndices");
	}
    };
    N.prototype._detachLayoutHandlers = function L() {
	mstr.views.BaseView.prototype._detachLayoutHandlers.apply(this);
	var R = this.props.model;
	if (R && R.attachEventListener) {
	    R.detachEventListener(this, "listadd_items");
	    R.detachEventListener(this, "listremove_items");
	    R.detachEventListener(this, "hashadd_selectedIndices");
	    R.detachEventListener(this, "hashremove_selectedIndices");
	}
    };
    N.prototype.onAddListItems = function K(R) {
	var T = R.memo.start;
	var S = R.memo.count;
	if (!S || (T == null)) {
	    return;
	}
	this._updateEmptyMessage();
	this.renderItemsAt(T, S);
    };
    N.prototype.onRemoveListItems = function I(Z) {
	var X = mstr.utils.ListViewHelper.getItemRenderer(this);
	if (!X || !X.removeListItem) {
	    return;
	}
	var R = Z.memo.ranges;
	var Y = this, S = this.props.model, W = this.props[mstr.$W.ELEMENT];
	for ( var U = mstr.$A.len(R) - 1; U > -1; U--) {
	    var V = R[U];
	    for ( var T = V.max; T >= V.min; T--) {
		X.removeListItem(Y, S, W, {
		    at : T
		});
	    }
	}
	this._updateEmptyMessage();
    };
    N.prototype.onAddSelectedIndices = function F(R) {
	this._toggleSelectedIndices(R.memo.at, "markListItemAsSelected");
    };
    N.prototype.onRemoveSelectedIndices = function A(R) {
	this._toggleSelectedIndices(R.memo.at, "markListItemAsUnselected");
    };
    N.prototype._toggleSelectedIndices = function O(Y, V) {
	if (!Y) {
	    return;
	}
	var S = mstr.utils.ListViewHelper.getItemRenderer(this);
	if (!S || !S[V]) {
	    return;
	}
	var U = this, R = this.props.model, X = this.props[mstr.$W.ELEMENT];
	var T = R && R.getItems();
	for ( var W in Y) {
	    W = parseInt(W);
	    S[V](U, R, X, {
		at : W,
		item : T[W]
	    });
	}
    };
    N.prototype.execClickListItem = function E(V) {
	var S = this.props.model;
	if (!S) {
	    return false;
	}
	var U = !!this.props.multiSelect;
	var T = S.indexOfValue(V.valueForm);
	if (T > -1) {
	    var R = null;
	    if (this.props.isCheckList) {
		if (U) {
		    R = "ToggleSelect";
		} else {
		    R = "SingleSelect";
		}
	    } else {
		if (V.ctrl && U) {
		    R = "ToggleSelect";
		} else {
		    if (V.shift && U) {
			R = "RangeSelect";
		    } else {
			if (V.rmc && U) {
			    R = "RMCSelect";
			} else {
			    R = "SingleSelect";
			}
		    }
		}
	    }
	    if (this.get("validator")) {
		this.get("validator").validate(R, T);
	    }
	    S.execCommand(R, T);
	    return true;
	} else {
	    if (U && !this.props.isCheckList) {
		S.execCommand("ClearSelect");
	    }
	    return false;
	}
    };
    N.prototype.onkeypress = function D(X, T) {
	if (this.get("ignoreKeyStrokes")) {
	    return false;
	}
	var W = 1;
	if (this._timerID) {
	    window.clearTimeout(this._timerID);
	    this._timerID = null;
	    W = 0;
	}
	var S = this.getModel();
	if (!S) {
	    return true;
	}
	var U = mstr.utils.Events.keyChar(X, T), R = (U == String
		.fromCharCode(9));
	if (mstr.Enum.REGEXP_RESERVED_CHARS[U]) {
	    U = "\\" + U;
	}
	this._selKeys += U;
	S.execCommand("SelectString", this._selKeys, "n", W);
	var V = this;
	this._timerID = window.setTimeout(function() {
	    V._selKeys = "";
	    V._timerID = null;
	}, this._keyDelay);
	if (!R) {
	    mstr.utils.Events.cancel(X, T);
	}
	return R;
    };
    N.prototype.onkeydown = function H(V, S) {
	if (this.get("ignoreKeyStrokes")) {
	    return true;
	}
	var R = this.getModel();
	if (!R) {
	    return true;
	}
	var U = mstr.utils.Events.keyCode(V, S), T = mstr.utils.Events
		.shiftKey(V, S);
	switch (U) {
	case 38:
	    this.getModel().execCommand("SelectPrevious", T);
	    mstr.utils.Events.cancel(V, S);
	    return false;
	case 40:
	    this.getModel().execCommand("SelectNext", T);
	    mstr.utils.Events.cancel(V, S);
	    return false;
	default:
	    return true;
	}
    };
    N.prototype.focus = function C() {
	if (!mstr.utils.ISIE4) {
	    document.getElementById(this.get("id") + "TabStop").focus();
	}
    };
    N.prototype.restoreFocus = function M() {
	if (!mstr.utils.ISIE4) {
	    document.getElementById(this.get("id") + "TabStop").focus();
	} else {
	    this.props.scrollArea.focus();
	}
    };
    function N(R) {
	mstr.views.BaseView.apply(this, [ R ]);
	this._selKeys = "";
	this._timerID = null;
	this._keyDelay = 1000;
    }
    return N;
})();
mstr.itemrenderers.ListView = (function() {
    var G = {};
    G.renderListItem = function(H, J, L, K) {
	var I = mstr.itemrenderers.FastListView.renderListItem(H, J, L, K);
	this._insertElementForIndex(H, L, K.at, I);
	return I;
    };
    G.markListItemAsSelected = function A(H, I, K, J) {
	J.elItem = this._findElementForIndex(H, K, J.at);
	mstr.itemrenderers.FastListView.markListItemAsSelected(H, I, K, J);
    };
    G.markListItemAsUnselected = function E(H, I, K, J) {
	J.elItem = this._findElementForIndex(H, K, J.at);
	mstr.itemrenderers.FastListView.markListItemAsUnselected(H, I, K, J);
    };
    G.removeListItem = function F(H, J, M, K) {
	var I = this._findElementForIndex(H, M, K.at);
	var L = I && I.parentNode;
	if (L) {
	    L.removeChild(I);
	}
    };
    G._insertElementForIndex = function B(H, M, J, K) {
	var L = H.props.scrollArea.firstChild;
	var I = L.childNodes[J];
	if (I) {
	    L.insertBefore(K, I);
	} else {
	    L.appendChild(K);
	}
    };
    G.on_set_leadIndex = function D(I, J, M) {
	var L = J && J.get("leadIndex");
	if (L == null || L < 0) {
	    return false;
	}
	var K = this._findElementForIndex(I, M, L);
	if (!K) {
	    return false;
	}
	var H = I.get("scrollArea")
		|| M.rows[0].cells[0].firstChild.childNodes[2];
	if (!H) {
	    return false;
	}
	mstr.utils.BoxModel.scrollToElement(H, K);
    };
    G._findElementForIndex = function C(H, J, I) {
	return H.props.scrollArea.firstChild.childNodes[I];
    };
    return G;
})();
mstr.views.TextBox = (function() {
    mstr.$O.extendsClass(A, mstr.views.BaseView);
    A.prototype.execClearSearch = function B() {
	var C = this.props.element.getElementsByTagName("input");
	if (C && C[0].value != "") {
	    C[0].value = "";
	}
	this.fireCommands(null, "");
    };
    function A(C) {
	mstr.views.BaseView.apply(this, [ C ]);
    }
    return A;
})();
mstr.views.FastListView = (function() {
    mstr.$O.extendsClass(Q, mstr.views.ListView);
    Q.DEFAULT_LIST_ITEM_HEIGHT = 20;
    Q.prototype.init = function U() {
	mstr.views.ListView.prototype.init.apply(this, arguments);
	this.set("baseHeight", this.get("height"));
    };
    Q.prototype._positionPop = function T() {
	var g = this.props.element;
	var e = g && g.style;
	if (!e) {
	    return;
	}
	e.position = mstr.utils.ISFF ? "fixed" : "absolute";
	e.display = "block";
	var d = this.props.scrollArea;
	d.style.height = "auto";
	var c = mstr.utils.BoxModel.getElementOuterHeight(g);
	if (mstr.utils.ISIE4 && mstr.utils.BoxModel.hasScrollbar(d, "x")) {
	    c += SCROLLBAR_SIZE;
	}
	var b = this.get("baseHeight");
	if (b != "auto") {
	    c = Math.min(c, parseInt(b)) + "px";
	} else {
	    c = b;
	}
	d.style.height = c;
	this.props.height = c;
	mstr.views.BaseView.prototype._positionPop.apply(this);
    };
    Q.prototype.render = function I() {
	mstr.views.BaseView.prototype.render.apply(this);
	var b = this.execLayoutHandler("scrollArea");
	this.props.scrollArea = b;
	if (b && this.props.renderListItemsOnScroll) {
	    b.onscroll = new Function("e",
		    "return mstr.controllers.Factory.obj('" + this.getId()
			    + "').onScroll()");
	}
	this.props.listItemsContainer = b && b.childNodes[0];
	this._updateItemsContainerDimensions();
	this.initItems();
	mstr.timers.renderStop = new Date();
	mstr.timers.render = mstr.timers.renderStop - mstr.timers.renderStart;
    };
    Q.prototype.initItems = function H() {
	var d = this.getModel();
	var c = mstr.$A.len(d && d.getItems && d.getItems());
	var e = d && d.props && d.props.prefixItems
		&& d.props.prefixItems.length || 0;
	this._updateEmptyMessage();
	this.props.isListItemRendered = [];
	if (!c) {
	    return;
	}
	var h = this.props.renderListItemsOnScroll && this.props.scrollArea;
	if (!h) {
	    this.renderItemsAt(0, c);
	} else {
	    this._addIndicesToRender(0, g);
	    var g = parseInt(this.props.initialListItemRenderCount) || 0;
	    g && this.renderItemsAt(0, g);
	}
	var b = mstr.utils.ListViewHelper.getItemRenderer(this);
	if (b && b.on_set_leadIndex) {
	    b.on_set_leadIndex(this, this.getModel(), this.props.element);
	}
	if (h) {
	    this.onScroll();
	}
    };
    Q.prototype.renderItemsAt = function W(d, e) {
	var c = mstr.utils.ListViewHelper.getItemRenderer(this);
	if (!c) {
	    return null;
	}
	var x = this.props.listItemsContainer;
	if (!x) {
	    return null;
	}
	var u = this._countIndicesRenderedBefore(d);
	var h = x.childNodes[u];
	var q = this.props.model;
	var o = q && q.getItems();
	var r = Math.min(d + e, mstr.$A.len(o));
	var l = {};
	var s = this.props.isListItemRendered;
	var g = (q && q.getSelectedIndices()) || {};
	var n = this;
	var AB = this.getId();
	var q = this.props.model;
	var b = this.props[mstr.$W.ELEMENT];
	var t = q && q.get("valueForm");
	for ( var y = d; y < r; y++) {
	    var z = o[y];
	    var AA = mstr.utils.ListViewHelper.getItemBrowseCommand(this, z)
		    || "";
	    var b = c.renderListItem(n, q, b, {
		at : y,
		item : z,
		browseCommand : AA
	    });
	    if (h) {
		x.insertBefore(b, h);
	    } else {
		x.appendChild(b);
	    }
	    if (g[y]) {
		c.markListItemAsSelected(n, q, b, {
		    at : y,
		    item : z,
		    elItem : b,
		    notFocus : true
		});
	    }
	    if (!("enabled" in z) || z.enabled) {
		b.mstrListItemInfo = AB + "/" + (z[t] || "") + "/" + AA;
	    }
	    s[y] = true;
	    if (y == d) {
		l.first = b;
	    }
	    if (y == r - 1) {
		l.last = b;
	    }
	}
	return l;
    };
    Q.prototype.onAddListItems = function F(b) {
	var e = b.memo.start;
	var d = b.memo.count;
	if (!d || (e == null)) {
	    return;
	}
	this._updateEmptyMessage();
	this._updateItemsContainerDimensions();
	this._addIndicesToRender(e, d);
	var c = this.findNextRenderedIndex(e + d, false);
	if (c > -1) {
	    this._adjustWhiteSpaceAboveItem(c, this._getElementForItemAt(c));
	}
	this.updateScrollArea();
    };
    Q.prototype.onRemoveListItems = function D(n) {
	this._updateItemsContainerDimensions();
	var h = [];
	mstr.$A.forEach(n.memo.ranges, function(q) {
	    h.push(mstr.$H.clone(q));
	});
	var b = this._splitRangesByRenderStatus(h);
	var o = this.props.isListItemRendered;
	var d = this.props.listItemsContainer;
	for ( var g = mstr.$A.len(b) - 1; g > -1; g--) {
	    var l = b[g];
	    if (o[l.min]) {
		var c = this._getElementForItemAt(l.min);
		for ( var e = 0; e < l.max - l.min; e++) {
		    d.removeChild(c.nextSibling);
		}
		d.removeChild(c);
	    }
	    this._removeIndicesToRender(l.min, l.max - l.min + 1);
	    var m = this.findNextRenderedIndex(l.max + 1, false);
	    if (m > -1) {
		this
			._adjustWhiteSpaceAboveItem(m, this
				._getElementForItemAt(m));
	    }
	}
	this.updateScrollArea();
	this._updateEmptyMessage();
    };
    Q.prototype._toggleSelectedIndices = function G(o, h) {
	if (!o) {
	    return;
	}
	var l = mstr.utils.ListViewHelper.getItemRenderer(this);
	if (!l) {
	    return;
	}
	var n = this, c = this.props.model, d = this.props[mstr.$W.ELEMENT];
	var g = c && c.getItems();
	for ( var e in o) {
	    e = parseInt(e);
	    var b = this._getElementForItemAt(e);
	    if (b) {
		l[h](n, c, d, {
		    at : e,
		    item : g[e],
		    elItem : b
		});
	    }
	}
    };
    Q.prototype._updateItemsContainerDimensions = function K() {
	this._updateItemsContainerHeight();
    };
    Q.prototype._updateItemsContainerHeight = function N() {
	var e = this.props.listItemsContainer;
	if (!e) {
	    return;
	}
	var c = this.props.height;
	if (!c || c == "auto") {
	    return;
	}
	var g = mstr.utils.ListViewHelper.getItemRenderer(this);
	var d = g
		&& ((g.listItemHeight && g.listItemHeight(this)) || (g.listItemHeightMin && g
			.listItemHeightMin(this)));
	if (!d) {
	    d = Q.DEFAULT_LIST_ITEM_HEIGHT;
	}
	if (d) {
	    var b = this.getModel();
	    d = d * mstr.$A.len(b && b.getItems && b.getItems());
	}
	if (d) {
	    e.style.height = d + "px";
	} else {
	    e.style.height = mstr.utils.ISIE4 ? "1px" : "auto";
	}
	if (mstr.utils.ISIE4) {
	    e.style.overflow = d ? "visible" : "hidden";
	}
    };
    Q.prototype._addIndicesToRender = function A(c, b) {
	this.props.isListItemRendered = mstr.$A.insert(
		this.props.isListItemRendered, new Array(b), c);
    };
    Q.prototype._removeIndicesToRender = function E(c, b) {
	this.props.isListItemRendered = mstr.$A.removeRange(
		this.props.isListItemRendered, c, b);
    };
    Q.prototype._countIndicesRenderedBefore = function P(b) {
	var d = 0;
	var e = this.props.isListItemRendered;
	for ( var c = 0; c < b; c++) {
	    if (e[c]) {
		d++;
	    }
	}
	return d;
    };
    Q.prototype._getElementForItemAt = function S(b) {
	if (this.props.isListItemRendered[b]) {
	    var c = this._countIndicesRenderedBefore(b);
	    return this.props.listItemsContainer.childNodes[c];
	}
	return null;
    };
    Q.prototype._getOrMakeElementForItemAt = function M(d) {
	var g = this._getElementForItemAt(d);
	if (!g) {
	    var b = this.getModel(), c = b && b.getItems(), h = c[d];
	    if (h) {
		var e = this.renderItemsAt(d, 1);
		g = e && e.first;
		if (g) {
		    this._adjustWhiteSpaceAboveItem(d, g);
		    this._adjustWhiteSpaceBelowItem(d, g);
		}
	    }
	}
	return g;
    };
    Q.prototype.onScroll = function R() {
	if (this.props.scrollTimeoutId) {
	    return true;
	}
	this.props.scrollTimeoutId = self.setTimeout(
		'mstr.controllers.Factory.obj("' + this.getId()
			+ '").updateScrollArea()', 200);
	return true;
    };
    Q.prototype.after_set_visible = function V(b) {
	if (this.props.visible) {
	    this.updateScrollArea();
	}
    };
    Q.prototype.on_win_resize = function Y(b) {
	this._updateListContainerWidth();
    };
    Q.prototype.updateScrollArea = function C() {
	if (this.props.scrollTimeoutId) {
	    self.clearTimeout(this.props.scrollTimeoutId);
	    this.props.scrollTimeoutId = null;
	}
	var h = this._computeVisibleItemsRange();
	if (!h) {
	    return;
	}
	var c = this._splitRangesByRenderStatus([ h ]);
	var l = this.props.isListItemRendered;
	for ( var e = 0, b = mstr.$A.len(c); e < b; e++) {
	    var d = c[e];
	    if (!l[d.min]) {
		var g = this.renderItemsAt(d.min, d.max - d.min + 1);
		if (!g || !g.first) {
		    continue;
		}
		this._adjustWhiteSpaceAboveItem(d.min, g.first);
		this._adjustWhiteSpaceBelowItem(d.max, g.last);
	    }
	}
	this._updateListContainerWidth();
    };
    Q.prototype._updateListContainerWidth = function B() {
	if (mstr.utils.ISIE6) {
	    return;
	}
	var b = this.props.scrollArea, c = b && b.firstChild;
	if (c.style.width != (b.scrollWidth + "px")
		&& mstr.utils.BoxModel.hasScrollbar(b, "x")) {
	    window.setTimeout(function() {
		c.style.width = b.scrollWidth + "px";
	    }, 0);
	}
    };
    Q.prototype.execResetScrollArea = function O() {
	var b = this.props.scrollArea;
	if (mstr.utils.ISFF) {
	    b.scrollTop = 0;
	}
    };
    Q.prototype._adjustWhiteSpaceAboveItem = function X(c, g) {
	if (!g) {
	    return;
	}
	var l = mstr.utils.ListViewHelper.getItemRenderer(this);
	var e = l
		&& ((l.listItemHeight && l.listItemHeight(this)) || (l.listItemHeightMin && l
			.listItemHeightMin(this)));
	if (!e) {
	    e = Q.DEFAULT_LIST_ITEM_HEIGHT;
	}
	if (!e) {
	    return;
	}
	var d = this.findNextRenderedIndex(c - 1, true);
	var b = c - d - 1;
	g.style.marginTop = (b * e) + "px";
    };
    Q.prototype._adjustWhiteSpaceBelowItem = function L(c, e) {
	var g = mstr.utils.ListViewHelper.getItemRenderer(this);
	var d = g
		&& ((g.listItemHeight && g.listItemHeight(this)) || (g.listItemHeightMin && g
			.listItemHeightMin(this)));
	if (!d) {
	    d = Q.DEFAULT_LIST_ITEM_HEIGHT;
	}
	if (!d) {
	    return;
	}
	var m = this.findNextRenderedIndex(c + 1, false);
	if (m > -1) {
	    var l = m - c - 1;
	    var b = e.nextSibling;
	    if (b) {
		b.style.marginTop = (l * d) + "px";
		if (mstr.utils.ISIE8) {
		    b.style.display = "none";
		    window.setTimeout(function() {
			b.style.display = "block";
		    }, 0);
		}
	    }
	}
    };
    Q.prototype._computeVisibleItemsRange = function a() {
	var b = this.props, d = b.scrollArea, n = b.height;
	if (n && n.match(/px$/) || (n == String(parseInt(n)))) {
	    n = parseInt(n);
	} else {
	    if (n && (n != "auto") && !n.match(/\%$/)) {
		n = d && d.clientHeight;
		if (!n && d && d.style) {
		    n = d.style.height;
		    n = (n.match(/px$/) || (n == String(parseInt(n)))) ? parseInt(n)
			    : "auto";
		}
	    } else {
		n = "auto";
	    }
	}
	if (!n || isNaN(n)) {
	    var e = this.props.model, o = e && e.props && e.props.items;
	    return {
		min : 0,
		max : o && o.length || 0
	    };
	}
	var g, s;
	var c = mstr.utils.ListViewHelper.getItemRenderer(this);
	if (c && c.listItemHeight) {
	    g = s = c.listItemHeight(this);
	} else {
	    g = (c && c.listItemHeightMin && c.listItemHeightMin(this))
		    || Q.DEFAULT_LIST_ITEM_HEIGHT;
	    s = (c && c.listItemHeightMax && c.listItemHeightMax(this))
		    || Q.DEFAULT_LIST_ITEM_HEIGHT;
	}
	if (g) {
	    var q = d.scrollTop;
	    var l = {
		min : parseInt(q / s),
		max : parseInt((q + n) / g) + 1
	    };
	    return l;
	}
	return null;
    };
    Q.prototype._splitRangesByRenderStatus = function J(d) {
	var m = this.props.isListItemRendered;
	var c = mstr.$A.len(d);
	var l = 0;
	while (l < c) {
	    var e = d[l];
	    var b = m[e.min];
	    for ( var h = e.min + 1; h <= e.max; h++) {
		if (m[h] != b) {
		    var g = {
			min : h,
			max : e.max
		    };
		    e.max = h - 1;
		    d = mstr.$A.insert(d, g, l + 1);
		    c++;
		    break;
		}
	    }
	    l++;
	}
	return d;
    };
    Q.prototype.findNextRenderedIndex = function Z(g, d) {
	var e = this.props.isListItemRendered;
	if (d) {
	    for ( var c = g; c > -1; c--) {
		if (e[c]) {
		    return c;
		}
	    }
	} else {
	    var b = mstr.$A.len(e);
	    for ( var c = g; c < b; c++) {
		if (e[c]) {
		    return c;
		}
	    }
	}
	return -1;
    };
    function Q(b) {
	mstr.views.ListView.apply(this, [ b ]);
	this.props.isListItemRendered = [];
    }
    return Q;
})();
mstr.views.FloatingEditor = (function() {
    mstr.$O.extendsClass(G, mstr.views.BaseView);
    G.prototype.before_set_visible = function C(L) {
	if (L.memo.value && this.get("reloadCmds")) {
	    this.fireCommands(this.get("reloadCmds"), "");
	}
    };
    G.prototype.execResetValidationStatus = function E() {
	mstr.views.BaseView.prototype.execResetValidationStatus.apply(this,
		arguments);
	if (!this.childValidationStatus) {
	    return;
	}
	for ( var L in this.childValidationStatus) {
	    mstr.$obj(L).execResetValidationStatus();
	}
    };
    G.prototype.after_set_childValidationStatus = function J(M) {
	var L = M.memo;
	this.childValidationStatus = this.childValidationStatus || {};
	if (L.code == mstr.Enum.Validation.STATUSCODE.VALID) {
	    if (L.id in this.childValidationStatus) {
		delete this.childValidationStatus[L.id];
		if (mstr.utils.Hash.isEmpty(this.childValidationStatus)) {
		    this.set("validationStatus",
			    mstr.Enum.Validation.STATUSCODE.VALID);
		    this.set("message", "");
		    this.set("CommandEnabledCheckValidationStatus", true);
		    var N = this.getModel()
			    && this.getModel().disableModelFromView
			    && this.getModel().disableModelFromView(false);
		}
	    }
	} else {
	    if (mstr.utils.Hash.isEmpty(this.childValidationStatus)) {
		this.set("validationStatus",
			mstr.Enum.Validation.STATUSCODE.INVALID_ANSWERS);
		this.set("message", this.props.descriptors.ALERT);
		this.set("CommandEnabledCheckValidationStatus", false);
		var O = this.getModel() && this.getModel().disableModelFromView
			&& this.getModel().disableModelFromView(true);
	    }
	    this.childValidationStatus[L.id] = L.code;
	}
    };
    G.prototype.after_set_message = function I(N) {
	var P = this.get("element").firstChild.rows[1].cells[0].firstChild;
	var O = P.firstChild;
	var M = N.memo.value;
	if (M) {
	    P.style.visibility = "hidden";
	    P.style.position = "absolute";
	    O.innerHTML = M;
	    P.style.height = "auto";
	    var L = function() {
		var Q = mstr.utils.BoxModel.getElementInnerHeight(P);
		P.style.height = 0;
		P.style.position = "static";
		P.style.visibility = "visible";
		mstr.utils.Animations.resize(P, null, Q, 3, null);
	    };
	    window.setTimeout(L, 0);
	} else {
	    mstr.utils.Animations.resize(P, null, 0, 3, function() {
		O.innerHTML = "";
	    });
	}
    };
    G.prototype.after_set_opener = function A(M) {
	var Q = this.get("cmdButtons") || [];
	for ( var O = 0, N = Q.length; O < N; O++) {
	    var L = Q[O] && Q[O]._refreshCommandHandlers
		    && Q[O]._refreshCommandHandlers();
	}
	var P = this.get("modelPath");
	if (P && P.substr(0, 6) == "opener") {
	    this.initModel();
	    this._refreshChildViewModels(true);
	}
    };
    G.prototype.render = function F() {
	mstr.views.BaseView.prototype.render.apply(this);
	var M = this.props[mstr.$W.ELEMENT];
	if (this.get("moveToBody") && mstr.utils.ISIE9
		&& M.parentNode != document.body) {
	    this.props[mstr.$W.ELEMENT] = document.body.appendChild(M);
	}
	var O = M.firstChild;
	var Q = null;
	this.set("titleBar", this.execLayoutHandler("titleBar"));
	if (this.get("isModal")) {
	    var L = mstr.utils.Dom.findPositionedAncestor(M);
	    var P = mstr.utils.BoxModel.computeDistanceFromAncestor(L);
	    var N = mstr.utils.BoxModel.getBrowserWindowRect(M.ownerDocument);
	    M.style.top = (N.top - P.offsetY) + "px";
	    M.style.left = (N.left - P.offsetX) + "px";
	    M.style.width = N.width + "px";
	    M.style.height = N.height + "px";
	    M.style.backgroundRepeat = "repeat";
	    mstr.utils.Dom.setBGIconClass(M, "1ptrans");
	    Q = O;
	    if (this.left) {
		Q.style.left = this.left;
		Q.style.top = this.top;
	    } else {
		mstr.utils.BoxModel.centerElementOnObject(M, Q);
		this.left = Q.style.left;
		this.top = Q.style.top;
	    }
	} else {
	    M.style.height = "auto";
	    M.style.width = "auto";
	    M.style.background = "transparent";
	    Q = M;
	    mstr.utils.BoxModel.centerElementOnObject(document.body, Q);
	}
	O.style.visibility = "visible";
	mstr.utils.Dom.insertPopupMask(Q, M, Q.style.left, Q.style.top);
	if (this.get("loadCmds")) {
	    this.fireCommands(this.get("loadCmds"), "");
	}
    };
    G.prototype.getHelpLink = function B() {
	if (this.get("helpTopic") && this.get("helpTopic")
		&& this.get("helpPath")) {
	    var L = this.get("helpPath");
	    return L + (L.lastIndexOf("#") === L.length - 1 ? "" : "#")
		    + this.get("helpTopic");
	}
	return this.get("helpPath");
    };
    G.prototype.execShowHelp = function K(L) {
	window.open(L);
    };
    G.prototype.execSetModel = function H(L) {
	this.setModel(L);
    };
    G.prototype.execCheckValidationStatus = function D() {
	return !(this.get("validationStatus") > mstr.Enum.Validation.STATUSCODE.VALID);
    };
    function G(L) {
	mstr.views.BaseView.apply(this, [ L ]);
	if (!this.get("isDraggable")) {
	    return;
	}
	this.set("dz", new mstr.models.dnd.DragZone({
	    view : this
	}, {
	    findTarget : function(M, O) {
		var N = M.get("element");
		var P = mstr.utils.Dom.findAncestor(O.target(), "className",
			"mstrFloatingEditorTitle");
		return (P && P == M.get("titleBar")) ? P : null;
	    },
	    getDragData : function(M, O) {
		var P = document.createElement("div");
		P.style.border = "2px solid #9e9e9e";
		var N = M.get("element").firstChild;
		P.style.height = mstr.utils.BoxModel.getElementOuterHeight(N)
			+ "px";
		P.style.width = mstr.utils.BoxModel.getElementOuterWidth(N)
			+ "px";
		return {
		    ddel : P
		};
	    },
	    endDrag : function(N, M, P) {
		M = Math.max(0, M);
		P = Math.max(0, P);
		var O = N.get("element");
		if (N.get("isModal")) {
		    P -= mstr.utils.BoxModel.getElementSumOffsetTop(O);
		    O.firstChild.style.left = M + "px";
		    O.firstChild.style.top = P + "px";
		    if (O.firstChild != O.lastChild
			    && O.lastChild.className !== "mstrCurtain") {
			O.lastChild.style.left = M + "px";
			O.lastChild.style.top = P + "px";
		    }
		} else {
		    O.style.left = M + "px";
		    O.style.top = P + "px";
		}
	    }
	}));
    }
    return G;
})();
mstr.views.JoinBehaviorTable = (function() {
    mstr.$O.extendsClass(A, mstr.views.BaseView);
    A.prototype.init = function E() {
	mstr.views.BaseView.prototype.init.apply(this);
    };
    A.prototype.render = function C() {
	var I = "mstrDG", G = this, F = G.getModel(), H = function() {
	    var J = G.buildDGItems(G.getModel().get(G.get("valueField"))), K = false;
	    G.dgWidget = mstrmojo
		    .insert({
			scriptClass : "mstrmojo.DataGrid",
			placeholder : G.props.element,
			cssClass : "jointype",
			columns : [
				{
				    headerText : mstrmojo.desc(5467, "Objects"),
				    dataField : "mn",
				    headerCss : "jointype-hd",
				    tooltip : true,
				    itemTooltipField : "tf",
				    itemCSSField : "itemCss",
				    colWidth : 160
				},
				{
				    headerText : mstrmojo.desc(13176,
					    "Join Type"),
				    headerCss : "jointype-hd",
				    dataWidget : {
					scriptClass : "mstrmojo.Pulldown",
					popupToBody : true,
					itemIdField : "v",
					itemTitleField : "title",
					popupZIndex : 999,
					items : [
						{
						    n : mstrmojo.desc(959,
							    "Default"),
						    v : "dft",
						    title : mstrmojo.desc(959,
							    "Default")
						},
						{
						    n : mstrmojo.desc(13177,
							    "Inner Join"),
						    v : "0",
						    title : mstrmojo
							    .desc(13178,
								    "Results displaying only those attribute elements that have metric value")
						},
						{
						    n : mstrmojo
							    .desc(13179,
								    "Outer Join - Ignore Filter"),
						    v : "2",
						    title : mstrmojo
							    .desc(
								    13180,
								    "Outer join to attribute's look up table without considering the filter on template")
						},
						{
						    n : mstrmojo
							    .desc(13181,
								    "Outer Join - Preserve Filter"),
						    v : "3",
						    title : mstrmojo
							    .desc(
								    13182,
								    "Outer join to attribute's look up table after considering the filter on template")
						} ],
					onvalueChange : function() {
					    if (!F.translating && K) {
						F.joinTypeChange(this.data.id,
							this.value);
					    }
					},
					postCreate : function() {
					    this.markupMethods = mstrmojo.hash
						    .copy(
							    {
								ondataChange : function() {
								    var L = this.data;
								    this
									    .set(
										    "value",
										    L[this.itemIdField]);
								}
							    },
							    mstrmojo.hash
								    .copy(this.markupMethods));
					    if (this.data
						    && this.data.id !== "allAttrs") {
						this.items = [
							{
							    n : mstrmojo.desc(
								    959,
								    "Default"),
							    v : "dft",
							    title : mstrmojo
								    .desc(959,
									    "Default")
							},
							{
							    n : mstrmojo
								    .desc(
									    13177,
									    "Inner Join"),
							    v : "0",
							    title : mstrmojo
								    .desc(
									    13178,
									    "Results displaying only those attribute elements that have metric value")
							},
							{
							    n : mstrmojo
								    .desc(
									    13183,
									    "Outer Join"),
							    v : "1",
							    title : mstrmojo
								    .desc(
									    13184,
									    "Outer join to attributes look up table")
							} ];
					    }
					}
				    }
				} ],
			items : J
		    });
	    G.dgWidget.render();
	    K = true;
	};
	G.initModel();
	F.attachEventListener(this, "set_" + G.get("valueField"),
		"onUpdateDataGrid");
	if (!window.mstrmojo) {
	    microstrategy.mojoLoader.loadWidget({
		scriptClass : "DataGrid",
		id : I,
		bundle : "mojo-sle.js",
		callback : function() {
		    microstrategy.mojoLoader.loadWidget({
			scriptClass : "Pulldown",
			id : I,
			bundle : "mojo-coreui.js",
			callback : H
		    });
		}
	    });
	} else {
	    H();
	}
    };
    A.prototype.onUpdateDataGrid = function B(F) {
	if (this.dgWidget) {
	    this.dgWidget.set("items", this.buildDGItems(F.memo.value));
	}
    };
    A.prototype.buildDGItems = function D(G) {
	var F = [];
	mstr.$A.forEach(G, function(H) {
	    F.push({
		mn : H.alias,
		id : H.dssId,
		v : H.jt,
		n : H.n,
		tf : H.alias,
		itemCss : H.ic
	    });
	});
	return F;
    };
    function A(F) {
	mstr.views.BaseView.apply(this, [ F ]);
    }
    return A;
})();
GradientUtilScript = true;
var gradientUtil = new function() {
};
gradientUtil.prototype = new Object();
gradientUtil.PIXEL_WIDTH = 2;
gradientUtil.GRADIENTSHADING_STYLE_HORIZONTAL = 1;
gradientUtil.GRADIENTSHADING_STYLE_VERTICAL = 2;
gradientUtil.GRADIENTSHADING_STYLE_DIAGONALUP = 3;
gradientUtil.GRADIENTSHADING_STYLE_DIAGONALDOWN = 4;
gradientUtil.GRADIENTSHADING_STYLE_FROMCORNER = 5;
gradientUtil.GRADIENTSHADING_STYLE_FROMCENTER = 6;
gradientUtil.GRADIENTSHADING_STYLE_CUSTOM = 7;
gradientUtil.GRADIENT_START_COLOR_INDEX = 0;
gradientUtil.GRADIENT_END_COLOR_INDEX = 1;
gradientUtil.GRADIENT_TRANSITION_TYPE_INDEX = 2;
gradientUtil.GRADIENT_ANGLE_INDEX = 3;
gradientUtil.GRADIENT_XOFFSET_INDEX = 4;
gradientUtil.GRADIENT_YOFFSET_INDEX = 5;
gradientUtil.GRADIENT_POSTFIX = "_gradient";
gradientUtil.getXCoordinate = function(C, A) {
    try {
	return parseInt(C % (A / this.PIXEL_WIDTH));
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
gradientUtil.getYCoordinate = function(C, A) {
    try {
	return parseInt(C / (A / this.PIXEL_WIDTH));
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
gradientUtil.getColorPercent = function(E, G, A, C, B) {
    try {
	switch (parseInt(B)) {
	case gradientUtil.GRADIENTSHADING_STYLE_HORIZONTAL:
	    if (A == 1) {
		return E * gradientUtil.PIXEL_WIDTH / C;
	    } else {
		if (A == 2) {
		    return 1 - E * gradientUtil.PIXEL_WIDTH / C;
		} else {
		    if (A == 3) {
			return 1
				- (((-2) * Math.abs(E
					- (C / gradientUtil.PIXEL_WIDTH) / 2)) + (C / gradientUtil.PIXEL_WIDTH))
				* gradientUtil.PIXEL_WIDTH / C;
		    }
		}
	    }
	    break;
	case gradientUtil.GRADIENTSHADING_STYLE_VERTICAL:
	    if (A == 1) {
		return G * gradientUtil.PIXEL_WIDTH / C;
	    } else {
		if (A == 2) {
		    return 1 - G * gradientUtil.PIXEL_WIDTH / C;
		} else {
		    if (A == 3) {
			return 1
				- (((-2) * Math.abs(G
					- (C / gradientUtil.PIXEL_WIDTH) / 2)) + (C / gradientUtil.PIXEL_WIDTH))
				* gradientUtil.PIXEL_WIDTH / C;
		    }
		}
	    }
	    break;
	case gradientUtil.GRADIENTSHADING_STYLE_DIAGONALUP:
	    if (A == 1) {
		return ((E + G) * gradientUtil.PIXEL_WIDTH / C) / 2;
	    } else {
		if (A == 2) {
		    return 1 - ((E + G) * gradientUtil.PIXEL_WIDTH / C) / 2;
		} else {
		    if (A == 3) {
			return 1
				- (((-1) * Math.abs((E + G)
					- (C / gradientUtil.PIXEL_WIDTH))) + (C / gradientUtil.PIXEL_WIDTH))
				* gradientUtil.PIXEL_WIDTH / C;
		    }
		}
	    }
	    break;
	case gradientUtil.GRADIENTSHADING_STYLE_DIAGONALDOWN:
	    if (A == 1) {
		return 1 - ((E + (C / gradientUtil.PIXEL_WIDTH) - G)
			* gradientUtil.PIXEL_WIDTH / C) / 2;
	    } else {
		if (A == 2) {
		    return ((E + (C / gradientUtil.PIXEL_WIDTH) - G)
			    * gradientUtil.PIXEL_WIDTH / C) / 2;
		} else {
		    if (A == 3) {
			return 1
				- (((-1) * Math.abs((E
					+ (C / gradientUtil.PIXEL_WIDTH) - G)
					- (C / gradientUtil.PIXEL_WIDTH))) + (C / gradientUtil.PIXEL_WIDTH))
				* gradientUtil.PIXEL_WIDTH / C;
		    }
		}
	    }
	    break;
	case gradientUtil.GRADIENTSHADING_STYLE_FROMCORNER:
	    if (A == 1) {
		return Math.max(E, G) * gradientUtil.PIXEL_WIDTH / C;
	    } else {
		if (A == 2) {
		    return Math.max((C / gradientUtil.PIXEL_WIDTH) - E, G)
			    * gradientUtil.PIXEL_WIDTH / C;
		} else {
		    if (A == 3) {
			return 1 - Math.min(E, G) * gradientUtil.PIXEL_WIDTH
				/ C;
		    } else {
			if (A == 4) {
			    return 1
				    - Math.min((C / gradientUtil.PIXEL_WIDTH)
					    - E, G) * gradientUtil.PIXEL_WIDTH
				    / C;
			}
		    }
		}
	    }
	    break;
	case gradientUtil.GRADIENTSHADING_STYLE_FROMCENTER:
	    var F = 2 * gradientUtil.PIXEL_WIDTH;
	    if (A == 1) {
		return 1
			- (2 * Math.min(Math.min((C / gradientUtil.PIXEL_WIDTH)
				- E, E), Math.min(
				(C / gradientUtil.PIXEL_WIDTH) - G, G)))
			* gradientUtil.PIXEL_WIDTH / C;
	    } else {
		if (A == 2) {
		    return ((Math.abs(E - (C / F)) / (C / F)) + (Math.abs(G
			    - (C / F)) / (C / F))) / 2;
		} else {
		    if (A == 3) {
			return Math
				.sqrt((Math.pow(Math.abs(E - (C / F)), 2) + Math
					.pow(Math.abs(G - (C / F)), 2))
					/ Math.pow((C / F), 2));
		    }
		}
	    }
	    break;
	}
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
gradientUtil.getRGBColor = function(B) {
    try {
	if (B.indexOf("#") >= 0) {
	    B = B.substring(B.indexOf("#") + 1);
	}
	var C = new Array();
	if (B.length == 6) {
	    var F = parseInt(B.substring(0, 2), 16);
	    var E = parseInt(B.substring(2, 4), 16);
	    var A = parseInt(B.substring(4, 6), 16);
	    C.push(F);
	    C.push(E);
	    C.push(A);
	    return C;
	} else {
	    return [ 0, 0, 0 ];
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
gradientUtil.createIntervalColors = function(C, B, A, D) {
    try {
	var E = new Array();
	var G = (A - D) / 2;
	E[0] = gradientUtil.createIntervalColor(C, B, (A - G) / A);
	E[1] = gradientUtil.createIntervalColor(C, B, G / A);
	return E;
    } catch (F) {
	microstrategy.errors.log(F);
	return false;
    }
};
gradientUtil.createIntervalColor = function(B, A, D) {
    try {
	var C = gradientUtil.setColorHue(gradientUtil.longHexToDec(B), D,
		gradientUtil.longHexToDec(A));
	return mstr.utils.Color.rgb2hex(C[0], C[1], C[2]);
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
gradientUtil.setColorHue = function(E, D, F) {
    try {
	var A = new Array();
	for ( var B = 0; B < E.length; B++) {
	    A[B] = Math.round(E[B] * D) + Math.round(F[B] * (1 - D));
	    A[B] = A[B] > 255 ? 255 : A[B];
	}
	return A;
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
gradientUtil.longHexToDec = function(A) {
    try {
	return new Array(gradientUtil.toDec(A.substring(0, 2)), gradientUtil
		.toDec(A.substring(2, 4)), gradientUtil
		.toDec(A.substring(4, 6)));
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
gradientUtil.toDec = function(B) {
    try {
	return parseInt(B, 16);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
gradientUtil.applyGradientSettings = function(C, A, B) {
    gradientUtil.applyGradient(C, A[gradientUtil.GRADIENT_START_COLOR_INDEX],
	    A[gradientUtil.GRADIENT_END_COLOR_INDEX],
	    A[gradientUtil.GRADIENT_ANGLE_INDEX],
	    A[gradientUtil.GRADIENT_XOFFSET_INDEX],
	    A[gradientUtil.GRADIENT_YOFFSET_INDEX], microstrategy.styleObj);
};
gradientUtil.applyGradient = function(E, H, C, I, F, B, A) {
    try {
	var G = (I == 0) ? gradientUtil.GRADIENTSHADING_STYLE_HORIZONTAL
		: gradientUtil.GRADIENTSHADING_STYLE_VERTICAL;
	if ((G == gradientUtil.GRADIENTSHADING_STYLE_HORIZONTAL && F != 100)
		|| (G == gradientUtil.GRADIENTSHADING_STYLE_VERTICAL && B != 100)) {
	    gradientUtil.createGradient(E, H, C, G, A, true);
	} else {
	    gradientUtil.createGradient(E, C, H, G, A, false);
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
gradientUtil.createGradient = function(H, K, E, J, A, M) {
    try {
	var C = (J == gradientUtil.GRADIENTSHADING_STYLE_HORIZONTAL) ? 1 : 0;
	if (bIsDXIE) {
	    var B = false;
	    var D = H.style.filter;
	    if ((D == null || D.length == 0) && A) {
		D = A.getFilter(H);
		if (D && D.length > 0) {
		    B = true;
		}
	    }
	    var I = null;
	    if (D != null && D.length > 0) {
		I = H.filters["DXImageTransform.Microsoft.Gradient"];
	    }
	    if ((getObjInnerHeight(H) < 2 && J == gradientUtil.GRADIENTSHADING_STYLE_VERTICAL)
		    || (getObjInnerWidth(H) < 2 && J == gradientUtil.GRADIENTSHADING_STYLE_HORIZONTAL)) {
		if (I) {
		    I.enabled = false;
		}
		H.style.backgroundColor = "#" + K;
		return;
	    }
	    if (I != null) {
		I.gradientType = C;
		I.startColorStr = "#FF" + K;
		I.endColorStr = "#FF" + E;
		I.enabled = true;
	    } else {
		if (!B) {
		    H.style.filter += "progid:DXImageTransform.Microsoft.Gradient(GradientType="
			    + C
			    + ", StartColorStr='#"
			    + K
			    + "', EndColorStr='#" + E + "') ";
		} else {
		    A.objSheet.styleRules[A.getId(H)].style.filter += "progid:DXImageTransform.Microsoft.Gradient(GradientType="
			    + C
			    + ", StartColorStr='#"
			    + K
			    + "', EndColorStr='#" + E + "') ";
		}
	    }
	    H.style.backgroundColor = "transparent";
	} else {
	    H.style.backgroundColor = "#" + ((M == true) ? K : E);
	    var L = "#" + K, G = "#" + E;
	    if (mstr.utils.ISFF) {
		H.style.background = "-moz-linear-gradient("
			+ ((C === 0) ? "top" : "left") + "," + L + "," + G
			+ ")";
	    } else {
		if (mstr.utils.ISWK) {
		    H.style.background = "-webkit-gradient(linear,"
			    + ((C === 0) ? "left top, left bottom"
				    : "left top, right top") + ",from(" + L
			    + "),to(" + G + "))";
		} else {
		    if (mstr.utils.ISIE10 || mstr.utils.ISW3CIE) {
			H.style.background = "linear-gradient("
				+ ((C === 0) ? "to bottom" : "to right") + ","
				+ L + "," + G + ")";
		    }
		}
	    }
	}
    } catch (F) {
	microstrategy.errors.log(F);
	return false;
    }
};
mstrObserverImpl.prototype = new Object();
mstrObserverImpl.prototype.items = null;
mstrObserverImpl.prototype.onload = function() {
    if (microstrategy.observerItems) {
	this.items = microstrategy.observerItems;
	microstrategy.observerItems = null;
    }
};
mstrObserverImpl.prototype.onunload = function() {
    microstrategy.observerItems = this.items;
};
mstrObserverImpl.prototype.register = function(A) {
    if (typeof (this.items[A]) == "undefined") {
	this.items[A] = A;
    }
    return true;
};
mstrObserverImpl.prototype.unregister = function(A) {
    if (typeof (this.items[A]) != "undefined") {
	delete this.items[A];
    }
    return true;
};
mstrObserverImpl.prototype.notifyAll = function(A, D) {
    try {
	for ( var E in this.items) {
	    var C = mstr.$obj(E);
	    if (C && A in C) {
		C[A](D);
	    }
	}
	return true;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
function mstrObserverImpl(A) {
    this.items = new Object();
    return this;
}
microstrategy.FEATURE_CHECK_SHOW_SUBTOTALS = "check-show-subtotals";
microstrategy.FEATURE_CHECK_MERGE_COL_HEADER = "check-merge-col-header";
microstrategy.FEATURE_CHECK_MERGE_ROW_HEADER = "check-merge-row-header";
microstrategy.FEATURE_CHECK_OUTLINE_MODE = "check-outline-mode";
microstrategy.FEATURE_WEB_REMOVE_FROM_GRID = "web-remove-from-grid";
microstrategy.FEATURE_INSERT_NEW_METRIC = "insert-new-metric";
microstrategy.FEATURE_INSERT_TRANSFORMATION_METRICS = "insert-transformation-metrics";
microstrategy.FEATURE_MODIFY_GRID_LEVEL_IN_DOCUMENTS = "modify-grid-level-in-documents";
microstrategy.FEATURE_DOCUMENTS_DESIGN_MODE = "documents-design-mode";
microstrategy.FEATURE_SET_ATTRIBUTEFORM_DISPLAY = "set-attributeform-display";
microstrategy.FEATURE_RW_INTERACTIVE_VIEW_MODE_EPLUS = "rw-interactive-view-mode-eplus";
microstrategy.FEATURE_RW_EDITABLE_VIEW_MODE_EPLUS = "rw-editable-view-mode-eplus";
microstrategy.FEATURE_DATASET_OBJECTS_LIST = "dataset-objects-list";
microstrategy.FEATURE_WEB_PIVOT = "web-pivot";
microstrategy.FEATURE_CHECK_SHOW_PIVOT_BUTTONS = "check-show-pivot-buttons";
microstrategy.FEATURE_CHECK_SHOW_SORT_BUTTONS = "check-show-sort-buttons";
microstrategy.FEATURE_USE_OFFICE = "useOffice";
microstrategy.FEATURE_MODIFY_REPORT_LIST = "modify-report-list";
microstrategy.FEATURE_REPORT_FROM_REPORT = "web-remove-from-report";
microstrategy.FEATURE_USE_REPORT_OBJECT_WINDOW = "report-objects-window";
microstrategy.FEATURE_EMBEDDED_TEMPLATE_NODE = "embedded-template-node";
microstrategy.FEATURE_RW_EDITABLE_VIEW_MODE = "rw-editable-view-mode";
microstrategy.FEATURE_ENABLE_REEXECUTE = "enable-reexecute";
microstrategy.FEATURE_CHECK_SHOW_BANDING = "check-show-banding";
microstrategy.FEATURE_ENABLE_SCHEDULING = "enable-scheduling";
microstrategy.FEATURE_IS_NON_VIEWABLE_REPORT = "is-non-viewable-report";
microstrategy.FEATURE_REPORT_FILTER = "report-filter";
microstrategy.FEATURE_CREATE_HTML_CONTAINER = "create-html-container";
microstrategy.FEATURE_CHECK_SHOW_GRAPH_ZONES = "check-show-graph-zones";
microstrategy.FEATURE_INSERT_INTO_PANEL = "insert-into-panel";
microstrategy.FEATURE_CHECK_DESIGN_MODE = "check-design-mode";
microstrategy.FEATURE_ENABLE_SHOW_SUBTOTALS = "enable-show-subtotals";
microstrategy.FEATURE_IS_VIEW_REPORT = "is-view-report";
microstrategy.FEATURE_CHECK_LOCK_COLUMN_HEADERS = "check-lock-column-headers";
microstrategy.FEATURE_CHECK_LOCK_ROW_HEADERS = "check-lock-row-headers";
microstrategy.FEATURE_CONFIGURE_TRANSACTIONS = "configure-transactions";
microstrategy.FEATURE_ASK_BEFORE_SAVE_CHANGES = "ask-before-save-changes";
microstrategy.FEATURE_FORCE_SAVE_AS = "force-save-as";
microstrategy.FEATURE_REPORT_TEMPLATE_SEARCH = "report-template-search";
microstrategy.FEATURE_SINGLE_SOURCE_GRID = "single-source-grid";
microstrategy.FEATURE_RW_LEVEL_MCE_JOIN = "rw-MCE-join";
microstrategy.FEATURE_PROJECT_LEVEL_MCE_JOIN = "project-MCE-join";
microstrategy.FEATURE_MANAGE_DATASETS = "manage-datasets";
mstrTemplateImpl.prototype = {};
mstrTemplateImpl.prototype.parentBone = null;
mstrTemplateImpl.prototype.target = null;
mstrTemplateImpl.prototype.gridInfo = null;
mstrTemplateImpl.prototype.fp = null;
mstrTemplateImpl.prototype.showAttForms = true;
mstrTemplateImpl.prototype.onload = function(C, B, A) {
    try {
	this.target = C;
	this.parentBone = B;
	this.showAttForms = this.parentBone.showAttForms;
	this.fp = A;
	this.gridInfo = this.parentBone.gridStructureInfo;
	return true;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrTemplateImpl.prototype.prepareColGroupAndHandles = function() {
    try {
	if (!this.parentBone.quickSearchEnabled
		|| !mstrGridReport.isDesignMode()
		|| !(this.parentBone.isGrid && mstrGridReport.isReport())) {
	    return;
	}
	var H = this.target;
	var D = H.getElementsByTagName("COLGROUP")[0];
	if (D) {
	    H.removeChild(D);
	}
	D = document.createElement("colgroup");
	var F = H.getElementsByTagName("TBODY")[0];
	var G = F.rows[0].childNodes.length;
	for ( var E = 0; E < G; E++) {
	    var B = document.createElement("col");
	    D.appendChild(B);
	}
	H.insertBefore(D, F);
	var A = H.parentNode;
	var I = microstrategy.findChildrenWithAtt(A, "div", "sty", "vline");
	for ( var E in I) {
	    A.removeChild(I[E]);
	}
	this.parentBone.initColResize();
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrTemplateImpl.buildEmptyTemplate = function(C, A) {
    try {
	var D = document.createElement("table");
	D.setAttribute("width", "100%");
	D.border = 0;
	D.cellSpacing = 0;
	D.cellPadding = 0;
	D.className = C + "default";
	D.style.fontSize = (8 * (microstrategy.ZOOM_FACTOR / 100)) + "pt";
	D.appendChild(document.createElement("tbody"));
	mstrTemplateImpl.buildEmptyTemplateRows(D, C, A);
	return D;
    } catch (B) {
	microstrategy.errors.log(B);
	return null;
    }
};
mstrTemplateImpl.buildEmptyTemplateRows = function(F, D, A) {
    try {
	var B = F.getElementsByTagName("TBODY")[0];
	mstrTemplateImpl.removeAllChildren(B);
	var E = B.insertRow(-1);
	mstrTemplateImpl.buildEmptyTemplateCell(E.insertCell(E.cells.length),
		null, D);
	mstrTemplateImpl.buildEmptyTemplateCell(E.insertCell(E.cells.length),
		microstrategy.GRIDCELL_AXIS_COLUMNS, D);
	E = B.insertRow(-1);
	mstrTemplateImpl.buildEmptyTemplateCell(E.insertCell(E.cells.length),
		microstrategy.GRIDCELL_AXIS_ROWS, D);
	if (A) {
	    E.appendChild(mstrTemplateImpl.buildEmptyCell(
		    microstrategy.GRIDCELL_AXIS_METRICS, D));
	} else {
	    mstrTemplateImpl.buildEmptyTemplateCell(E
		    .insertCell(E.cells.length),
		    microstrategy.GRIDCELL_AXIS_METRICS, D);
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrTemplateImpl.buildEmptyTemplateCell = function(D, A, C) {
    try {
	switch (A) {
	case null:
	    D.className = "r-rowTitle r-cell";
	    D.innerHTML = "&nbsp;";
	    break;
	case microstrategy.GRIDCELL_AXIS_ROWS:
	    D.className = "r-rowHeader r-cell";
	    D.appendChild(document.createTextNode(microstrategy.descriptors
		    .getDescriptor("4500")));
	    break;
	case microstrategy.GRIDCELL_AXIS_COLUMNS:
	    D.className = "r-colHeader r-cell";
	    D.appendChild(document.createTextNode(microstrategy.descriptors
		    .getDescriptor("4502")));
	    break;
	case microstrategy.GRIDCELL_AXIS_METRICS:
	    D.className = "r-metricValue r-cell";
	    D.appendChild(document.createTextNode(microstrategy.descriptors
		    .getDescriptor("4501")));
	    break;
	}
	D.appendChild(document.createElement("br"));
	if (A && mstrGridReport.createQuickSearchPlaceHolder) {
	    D.appendChild(mstrGridReport.createQuickSearchPlaceHolder(A));
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrTemplateImpl.buildEmptyCell = function(A, C) {
    try {
	var D = document.createElement("td");
	D.innerHTML = "&nbsp;";
	D.appendChild(document.createElement("br"));
	D.className = (A == microstrategy.GRIDCELL_AXIS_ROWS) ? C + "rowTitle"
		: C + "metricValue";
	return D;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrTemplateImpl.removeAllChildren = function(B) {
    try {
	while (B.hasChildNodes()) {
	    B.removeChild(B.firstChild);
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrTemplateImpl.prototype.buildPreviewCell = function(A, C, B) {
    try {
	var E = A.cloneNode(true);
	E.className += " " + C;
	E.innerHTML = "&lt;" + B + "&gt;";
	return E;
    } catch (D) {
	microstrategy.errors.log(D);
    }
    return A;
};
mstrTemplateImpl.prototype.buildEmptyRows = function(H, B, D) {
    try {
	this.target.className = this.target.className.replace("metricsOnRows",
		"");
	var A = this.target.getElementsByTagName("TBODY")[0];
	var F = A.insertRow(-1);
	var G, C;
	if (!H || H.length == 0) {
	    mstrTemplateImpl.buildEmptyTemplateCell(F
		    .insertCell(F.cells.length),
		    microstrategy.GRIDCELL_AXIS_ROWS,
		    this.parentBone.gridCellCssPrefix);
	} else {
	    G = this.buildHeaderCell(microstrategy.GRIDCELL_AXIS_ROWS);
	    for (C = 0; C < H.length; C++) {
		F.appendChild(this.buildPreviewCell(G, "r-cell-preview", H[C]
			.getAttribute(microstrategy.HTMLATTR_DESCRIPTION)));
	    }
	}
	if (B && B.length > 0) {
	    F.appendChild(this
		    .buildHeaderCell(microstrategy.GRIDCELL_AXIS_ROWS));
	}
	if (!D || D.length == 0) {
	    mstrTemplateImpl.buildEmptyTemplateCell(F
		    .insertCell(F.cells.length),
		    microstrategy.GRIDCELL_AXIS_METRICS,
		    this.parentBone.gridCellCssPrefix);
	} else {
	    if (this.gridInfo.metricsAxis == microstrategy.GRIDCELL_AXIS_COLUMNS) {
		G = mstrTemplateImpl.buildEmptyCell(
			microstrategy.GRIDCELL_AXIS_METRICS,
			this.parentBone.gridCellCssPrefix);
		for (C = 0; C < D.length; C++) {
		    F
			    .appendChild(this
				    .buildPreviewCell(
					    G,
					    "r-cell-preview",
					    D[C]
						    .getAttribute(microstrategy.HTMLATTR_DESCRIPTION)));
		}
	    } else {
		F.appendChild(this.buildPreviewCell(mstrTemplateImpl
			.buildEmptyCell(microstrategy.GRIDCELL_AXIS_METRICS,
				this.parentBone.gridCellCssPrefix),
			"r-cell-preview",
			D[0].getAttribute(microstrategy.HTMLATTR_DESCRIPTION)));
	    }
	}
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrTemplateImpl.prototype.buildMetricsRows = function(A, H) {
    try {
	if (this.target.className.indexOf("metricsOnRows") == -1) {
	    this.target.className += " metricsOnRows";
	}
	var G = this.target.getElementsByTagName("TBODY")[0];
	var B = this.buildHeaderCell(microstrategy.GRIDCELL_AXIS_ROWS);
	var E = this.gridInfo.rowAxis.unitLength(this.gridInfo.metricsDepth);
	var D;
	for ( var F = 0; F < H.length; F++) {
	    var I = G.insertRow(-1);
	    for (D = 1; D < E; D++) {
		I
			.appendChild(this
				.buildPreviewCell(
					B,
					"r-cell-preview",
					A[D - 1]
						.getAttribute(microstrategy.HTMLATTR_DESCRIPTION)));
	    }
	    I.appendChild(H[F]);
	    for (D = E; D < A.length; D++) {
		I.appendChild(this.buildPreviewCell(B, "r-cell-preview", A[D]
			.getAttribute(microstrategy.HTMLATTR_DESCRIPTION)));
	    }
	    if (this.gridInfo.colAxis.size() > 0) {
		I.appendChild(B.cloneNode(true));
	    }
	    I.appendChild(this.buildPreviewCell(mstrTemplateImpl
		    .buildEmptyCell(microstrategy.GRIDCELL_AXIS_METRICS,
			    this.parentBone.gridCellCssPrefix), " ", H[F]
		    .getAttribute(microstrategy.HTMLATTR_DESCRIPTION)));
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrTemplateImpl.prototype.buildHeaderCell = function(A) {
    try {
	var D = document.createElement("td");
	D.innerHTML = "&nbsp;";
	D.appendChild(document.createElement("br"));
	var C = this.parentBone.gridCellCssPrefix;
	D.className = (A == microstrategy.GRIDCELL_AXIS_ROWS) ? C + "rowHeader"
		: C + "colHeader";
	return D;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrTemplateImpl.prototype.buildTitleCell = function(A) {
    try {
	var G = document.createElement("td");
	G.setAttribute(microstrategy.HTMLATTR_TARGET, "TRUE", 0);
	G.setAttribute(microstrategy.HTMLATTR_GRIDCELL_DEPTH.toUpperCase(),
		A.depth, 0);
	G.setAttribute(microstrategy.HTMLATTR_SUBOBJTYPE, A.subtype, 0);
	if (A.isLocked) {
	    G
		    .setAttribute(microstrategy.HTMLATTR_IS_LOCKED,
			    microstrategy.TRUE);
	}
	if (A.dssId != null && A.dssId.length > 0) {
	    G.setAttribute(microstrategy.HTMLATTR_DSS_ID, A.dssId, 0);
	    G.setAttribute(microstrategy.HTMLATTR_DSS_TYPE, A.dssType, 0);
	    if (A.dssSubtype) {
		G.setAttribute(microstrategy.HTMLATTR_DSS_SUBTYPE,
			A.dssSubtype, 0);
	    }
	} else {
	    if (A.alias) {
		G.setAttribute("mh", "TRUE", 0);
	    }
	}
	var B = A.alias;
	var F = this.parentBone.gridCellCssPrefix;
	if (A.subtype == microstrategy.SUBOBJTYPE_METRIC) {
	    var C = this.gridInfo.metricsAxis;
	    G.setAttribute(microstrategy.HTMLATTR_GRIDCELL_AXIS, C, 0);
	    if (C == microstrategy.GRIDCELL_AXIS_ROWS) {
		G.setAttribute(microstrategy.HTMLATTR_ORIENTATION,
			microstrategy.GRIDCELL_ORIENTATION_HORIZONTAL, 0);
		G.className = F + "rowHeader";
	    } else {
		G.setAttribute(microstrategy.HTMLATTR_ORIENTATION,
			microstrategy.GRIDCELL_ORIENTATION_VERTICAL, 0);
		G.className = F + "colHeader";
	    }
	} else {
	    G.setAttribute(microstrategy.HTMLATTR_GRIDCELL_AXIS, A.axis, 0);
	    G.setAttribute(microstrategy.HTMLATTR_FORM_ID, A.attFormId, 0);
	    G.setAttribute(microstrategy.HTMLATTR_FORM_NAME, A.attFormName, 0);
	    if (A.attFormList != null) {
		G.setAttribute(microstrategy.HTMLATTR_FORM_LIST, A.attFormList
			.toString(), 0);
	    }
	    G.setAttribute(microstrategy.HTMLATTR_FORM_POS, A.subDepth, 0);
	    if (A.subtype == microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM) {
		G.setAttribute(microstrategy.HTMLATTR_DSS_ID, A.parentDssId, 0);
		B = A.parentAlias + " " + A.alias;
	    }
	    if (A.axis == microstrategy.GRIDCELL_AXIS_ROWS) {
		G
			.setAttribute(
				microstrategy.HTMLATTR_GRIDROW_MAX_DEPTH,
				(this.gridInfo.colAxis.size() > 0) ? this.gridInfo.colAxis
					.size()
					: 1, 0);
		G.setAttribute(microstrategy.HTMLATTR_ORIENTATION,
			microstrategy.GRIDCELL_ORIENTATION_VERTICAL, 0);
		G.className = F + "rowTitle";
	    } else {
		G.setAttribute(microstrategy.HTMLATTR_GRIDROW_MAX_DEPTH,
			this.gridInfo.rowAxis.size() + 1, 0);
		G.setAttribute(microstrategy.HTMLATTR_ORIENTATION,
			microstrategy.GRIDCELL_ORIENTATION_HORIZONTAL, 0);
		G.className = F + "colTitle";
	    }
	}
	if (B != null && B.length > 0) {
	    if (this.fp.isDragAndDropEnabled
		    || this.parentBone.showGraphDropZones) {
		G.setAttribute("dg", "TRUE", 0);
		G.style.cursor = (bIsIE4) ? "hand" : "pointer";
	    }
	    var E = B;
	    if (this.fp.showDescriptionAsTooltip != microstrategy.FALSE
		    && A.description.length > 0) {
		E += "; " + A.description;
	    } else {
		if ((this.fp.isDragAndDropEnabled || this.parentBone.showGraphDropZones)
			&& !this.parentBone.commands
				.queryEnabled("isLinkedGrid")) {
		    E += "; " + microstrategy.descriptors.getDescriptor("2146");
		}
		if (this.fp.isContextMenuEnabled
			&& !this.parentBone.commands
				.queryEnabled("isLinkedGrid")) {
		    E += "; " + microstrategy.descriptors.getDescriptor("2142");
		}
	    }
	    G.setAttribute("title", E, 0);
	    G.setAttribute(microstrategy.HTMLATTR_DESCRIPTION, B, 0);
	    G.setAttribute(microstrategy.HTMLATTR_DSS_DESCRIPTION,
		    A.description, 0);
	    G.appendChild(document.createTextNode(B));
	}
	G.appendChild(document.createElement("br"));
	A.src = G;
	return G;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrTemplateImpl.prototype.buildTitleCellCollection = function(F) {
    try {
	var B = null;
	var A = F.size();
	if (A > 0) {
	    B = [];
	    for ( var D = 0; D < A; D++) {
		var E = F.units[D];
		if (this.showAttForms && E.attForms != null
			&& E.attForms.size() > 1) {
		    for ( var C = 0; C < E.attForms.size(); C++) {
			B.push(this.buildTitleCell(E.attForms.units[C]));
		    }
		    E.src = E.attForms.units[0].src;
		} else {
		    B.push(this.buildTitleCell(E));
		    if (E.hasAttForms()) {
			E.attForms.units[0].src = E.src;
		    }
		}
	    }
	    if (F.axisType != microstrategy.GRIDCELL_AXIS_METRICS
		    || this.gridInfo.metricsAxis != microstrategy.GRIDCELL_AXIS_ROWS) {
		B = this.buildAxisPivotButtons(B);
	    }
	    B = this.buildAxisContextMenus(B);
	}
	return B;
    } catch (G) {
	microstrategy.errors.log(G);
	return false;
    }
};
mstrTemplateImpl.prototype.buildAxisPivotButtons = function(C) {
    try {
	if (this.fp.showPivot && C.length > 0
		&& !this.parentBone.commands.queryEnabled("isLinkedGrid")) {
	    var G = document.createElement("span");
	    G.className = "mstrIconPivot";
	    G.setAttribute(microstrategy.HTMLATTR_SUBOBJTYPE,
		    microstrategy.SUBOBJTYPE_BTN);
	    var A = C.length;
	    var E = (C[0].getAttribute(microstrategy.HTMLATTR_SUBOBJTYPE) == microstrategy.SUBOBJTYPE_METRIC) ? microstrategy.GRIDCELL_AXIS_METRICS
		    : parseInt(C[0]
			    .getAttribute(microstrategy.HTMLATTR_GRIDCELL_AXIS));
	    var B = C[0].getAttribute(microstrategy.HTMLATTR_ORIENTATION);
	    for ( var D = 0; D < A; D++) {
		if (B == microstrategy.GRIDCELL_ORIENTATION_VERTICAL) {
		    if (D > 0) {
			C[D].appendChild(this.addPivotImage(G,
				microstrategy.FOLDER_IMAGES
					+ this.fp.imgShiftLeft,
				microstrategy.descriptors.getDescriptor("142"),
				"l"));
		    }
		    if (D < A - 1) {
			C[D].appendChild(this.addPivotImage(G,
				microstrategy.FOLDER_IMAGES
					+ this.fp.imgShiftRight,
				microstrategy.descriptors.getDescriptor("143"),
				"r"));
		    }
		    if (E == microstrategy.GRIDCELL_AXIS_ROWS) {
			C[D].appendChild(this.addPivotImage(G,
				microstrategy.FOLDER_IMAGES
					+ this.fp.imgShiftRightUp,
				microstrategy.descriptors.getDescriptor("141"),
				"c"));
		    }
		} else {
		    if (E == microstrategy.GRIDCELL_AXIS_COLUMNS) {
			C[D].appendChild(this.addPivotImage(G,
				microstrategy.FOLDER_IMAGES
					+ this.fp.imgShiftLeftDown,
				microstrategy.descriptors.getDescriptor("137"),
				"c"));
		    }
		    if (D > 0) {
			C[D].appendChild(this.addPivotImage(G,
				microstrategy.FOLDER_IMAGES
					+ this.fp.imgShiftUp,
				microstrategy.descriptors.getDescriptor("138"),
				"u"));
		    }
		    if (D < A - 1) {
			C[D].appendChild(this.addPivotImage(G,
				microstrategy.FOLDER_IMAGES
					+ this.fp.imgShiftDown,
				microstrategy.descriptors.getDescriptor("139"),
				"d"));
		    }
		}
		if (microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION) {
		    if (C[D].getAttribute(microstrategy.HTMLATTR_SUBOBJTYPE) != microstrategy.SUBOBJTYPE_METRIC) {
			C[D].appendChild(this.addPivotImage(G,
				microstrategy.FOLDER_IMAGES
					+ this.fp.imgToPageBy,
				microstrategy.descriptors.getDescriptor("140"),
				"p"));
		    }
		}
		if (this.fp.showRemove) {
		    var H = this.parentBone
			    .isFeatureAvailable(microstrategy.FEATURE_WEB_REMOVE_FROM_GRID) ? "2214"
			    : "2216";
		    C[D].appendChild(this.addPivotImage(G,
			    microstrategy.FOLDER_IMAGES + this.fp.imgRemove,
			    microstrategy.descriptors.getDescriptor(H), "x"));
		}
	    }
	}
	return C;
    } catch (F) {
	microstrategy.errors.log(F);
	return C;
    }
};
mstrTemplateImpl.prototype.addPivotImage = function(C, E, D, F) {
    try {
	var A = C.cloneNode(false);
	A.setAttribute("title", D);
	A.setAttribute("id", F);
	A.className += " " + F;
	return A;
    } catch (B) {
	microstrategy.errors.log(B);
	return img;
    }
};
mstrTemplateImpl.prototype.buildShortcutContextMenus = function(M, G) {
    try {
	var O = microstrategy.getContextMenuManager("vb_GM");
	var B = O.getMenu();
	var D = O.getMenu();
	var L = O.getMenu();
	var A = [ microstrategy.DSSTYPE_FILTER ];
	var C = microstrategy.descriptors.getDescriptor("3331").split("##");
	var P = O.getMenu();
	P.addItem(microstrategy.descriptors.getDescriptor("1885"), M
		+ "('rm', '" + SORT_ASCENDING + ",n');", "");
	P.addItem(microstrategy.descriptors.getDescriptor("1886"), M
		+ "('rm', '" + SORT_DESCENDING + ",n');", "");
	L.addItem(C[0] + microstrategy.descriptors.getDescriptor("2057"), P);
	if (this.gridInfo
		.hasNonMetricUnitsOnAxis(microstrategy.GRIDCELL_AXIS_ROWS)
		&& !this.gridInfo.unitTypeExistsOnAxis(
			microstrategy.GRIDCELL_AXIS_COLUMNS, A)
		&& !this.gridInfo.unitTypeExistsOnAxis(
			microstrategy.GRIDCELL_AXIS_PAGE_BY, A)) {
	    D.addItem(microstrategy.descriptors.getDescriptor("3326"), M
		    + "('pttm', 'r');", "");
	}
	if (this.gridInfo
		.hasNonMetricUnitsOnAxis(microstrategy.GRIDCELL_AXIS_COLUMNS)
		&& !this.gridInfo.unitTypeExistsOnAxis(
			microstrategy.GRIDCELL_AXIS_ROWS, A)
		&& !this.gridInfo.unitTypeExistsOnAxis(
			microstrategy.GRIDCELL_AXIS_PAGE_BY, A)) {
	    D.addItem(microstrategy.descriptors.getDescriptor("3327"), M
		    + "('pttm', 'c');", "");
	}
	if (this.gridInfo
		.hasNonMetricUnitsOnAxis(microstrategy.GRIDCELL_AXIS_PAGE_BY)
		&& !this.gridInfo.unitTypeExistsOnAxis(
			microstrategy.GRIDCELL_AXIS_PAGE_BY, A)) {
	    D.addItem(microstrategy.descriptors.getDescriptor("3328"), M
		    + "('pttm', 'p');", "");
	}
	D.addItem(microstrategy.descriptors.getDescriptor("3329"), M
		+ "('pttm', 'g');", "");
	var F = this.gridInfo.getAttributes();
	if (F != null && F.length > 0) {
	    var K = O.getMenu();
	    if (F != null) {
		for ( var I = 0; I < F.length; I++) {
		    K.addItem(F[I].alias, M + "('pttm', 'a," + F[I].dssId
			    + "');", "");
		    P = O.getMenu();
		    P.addItem(microstrategy.descriptors.getDescriptor("1885"),
			    M + "('rm', '" + SORT_ASCENDING + ",a,"
				    + F[I].dssId + "');", "");
		    P.addItem(microstrategy.descriptors.getDescriptor("1886"),
			    M + "('rm', '" + SORT_DESCENDING + ",a,"
				    + F[I].dssId + "');", "");
		    L.addItem(C[0] + F[I].alias, P);
		}
	    }
	    D.addItem(microstrategy.descriptors.getDescriptor("3330"), K);
	}
	B.addItem(microstrategy.descriptors.getDescriptor("3323"), D);
	if (this.parentBone
		.isFeatureAvailable(microstrategy.FEATURE_INSERT_TRANSFORMATION_METRICS)
		&& microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION) {
	    var N = O.getMenu();
	    if (this.parentBone.transformationRoles != null) {
		for ( var H in this.parentBone.transformationRoles) {
		    var J = O.getMenu();
		    J.addItem(microstrategy.descriptors.getDescriptor("2120"),
			    M + "('tm', '" + H + ",1');", "");
		    J.addItem(microstrategy.descriptors.getDescriptor("2132"),
			    M + "('tm', '" + H + ",2');", "");
		    J.addItem(microstrategy.descriptors.getDescriptor("3325"),
			    M + "('tm', '" + H + ",3');", "");
		    N.addItem(this.parentBone.transformationRoles[H], J);
		}
	    }
	    B.addItem(microstrategy.descriptors.getDescriptor("3324"), N);
	}
	B.addItem(microstrategy.descriptors.getDescriptor("2789"), L);
	if (this.parentBone
		.isFeatureAvailable(microstrategy.FEATURE_INSERT_NEW_METRIC)) {
	    B.addSeparator();
	    B
		    .addItem(
			    microstrategy.descriptors.getDescriptor("1895"),
			    "microstrategy.bone('rwb_viewer').commands.exec('edtDMetric');",
			    "microstrategy.bone('rwb_viewer').commands.queryEnabled('edtDMetric');",
			    "microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION");
	}
	G.addItem(microstrategy.descriptors.getDescriptor("3322"), B);
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrTemplateImpl.prototype.buildAxisContextMenus = function(E) {
    try {
	if (this.fp.isContextMenuEnabled && E.length > 0
		&& !this.parentBone.commands.queryEnabled("isLinkedGrid")) {
	    var A = E.length;
	    var C = (E[0].getAttribute(microstrategy.HTMLATTR_SUBOBJTYPE) == microstrategy.SUBOBJTYPE_METRIC) ? microstrategy.GRIDCELL_AXIS_METRICS
		    : parseInt(E[0]
			    .getAttribute(microstrategy.HTMLATTR_GRIDCELL_AXIS));
	    var D = E[0].getAttribute(microstrategy.HTMLATTR_ORIENTATION);
	    var N = microstrategy.getContextMenuManager("vb_GM");
	    var Q = "var bone = microstrategy.findBone(microstrategy.activeCXMenu); bone.processContextMenus";
	    for ( var U = 0; U < E.length; U++) {
		var V = N.getMenu();
		if (this.parentBone
			.isFeatureAvailable(microstrategy.FEATURE_ENABLE_SORT)
			&& E[U].getAttribute(microstrategy.HTMLATTR_DSS_TYPE) != microstrategy.DSSTYPE_CONSOLIDATION
			&& E[U]
				.getAttribute(microstrategy.HTMLATTR_DSS_SUBTYPE) != microstrategy.DSSTYPE_CUSTOM_GROUP) {
		    var G = (C == microstrategy.GRIDCELL_AXIS_ROWS) ? microstrategy.GRIDCELL_AXIS_ROWS
			    : microstrategy.GRIDCELL_AXIS_COLUMNS;
		    if (microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION) {
			V
				.addItem(
					microstrategy.descriptors
						.getDescriptor("3200"),
					"var bone = microstrategy.findBone(microstrategy.activeCXMenu); bone.commands.exec('sort', "
						+ G + ");");
		    } else {
			V.addItem(microstrategy.descriptors
				.getDescriptor("3200"),
				"microstrategy.bone('rwb_viewer').commands.exec('edtSortGrid',"
					+ G + ");");
		    }
		    V.addSeparator();
		}
		if (this.parentBone
			.isFeatureAvailable(microstrategy.FEATURE_INSERT_NEW_METRIC)) {
		    if (C == microstrategy.GRIDCELL_AXIS_METRICS) {
			this.buildShortcutContextMenus(Q, V);
		    } else {
			if (C == microstrategy.GRIDCELL_AXIS_ROWS
				&& microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION) {
			    var X = {
				evt : "4081",
				src : this.parentBone.beanPath + ".4081",
				functionType : "FUNCTIONTYPE",
				unitsCollection : E[U]
					.getAttribute(microstrategy.HTMLATTR_DSS_ID)
					+ "%2C"
					+ E[U]
						.getAttribute(microstrategy.HTMLATTR_DSS_TYPE)
			    };
			    var Z;
			    var I = [];
			    var P = "submitCM('" + microstrategy.servletName
				    + "?";
			    for (Z in X) {
				if (X.hasOwnProperty(Z)) {
				    I.push(Z + "=" + X[Z]);
				}
			    }
			    P += I.join("&") + "',1);";
			    var B = N.getMenu();
			    B.addItem(microstrategy.descriptors
				    .getDescriptor("2122"), P.replace(
				    "FUNCTIONTYPE", "14"));
			    B.addItem(microstrategy.descriptors
				    .getDescriptor("2123"), P.replace(
				    "FUNCTIONTYPE", "13"));
			    B.addItem(microstrategy.descriptors
				    .getDescriptor("2125"), P.replace(
				    "FUNCTIONTYPE", "16"));
			    B.addItem(microstrategy.descriptors
				    .getDescriptor("2127"), P.replace(
				    "FUNCTIONTYPE", "15"));
			    B.addItem(microstrategy.descriptors
				    .getDescriptor("2131"), P.replace(
				    "FUNCTIONTYPE", "12"));
			    V.addItem(microstrategy.descriptors
				    .getDescriptor("3322"), B);
			    V.addSeparator();
			}
		    }
		}
		if (microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION
			&& C != microstrategy.GRIDCELL_AXIS_METRICS) {
		    var J = Q + "('tuce');";
		    var S = Q + "('cgs');";
		    V
			    .addItem(
				    microstrategy.descriptors
					    .getDescriptor("6152"),
				    J,
				    "",
				    "microstrategy.bone('rwb_viewer').commands.queryState('hasNoTargets') && !microstrategy.bone('rwb_viewer').autoWire");
		    V
			    .addItem(
				    microstrategy.descriptors
					    .getDescriptor("7483"),
				    S,
				    "",
				    "microstrategy.bone('rwb_viewer').commands.queryState('hasNoTargets') && microstrategy.bone('rwb_viewer').autoWire");
		    V
			    .addItem(microstrategy.descriptors
				    .getDescriptor("4964"), J, "",
				    "!microstrategy.bone('rwb_viewer').commands.queryState('hasNoTargets')");
		    V
			    .addItem(
				    microstrategy.descriptors
					    .getDescriptor("6151"),
				    "microstrategy.bone('rwb_viewer').commands.exec('removeTargets')",
				    "",
				    "!microstrategy.bone('rwb_viewer').commands.queryState('hasNoTargets')");
		    V.addItem(microstrategy.descriptors.getDescriptor("4724"),
			    Q + "('sct');");
		    V.addItem(microstrategy.descriptors.getDescriptor("4725"),
			    Q + "('csc');");
		}
		if (this.fp.showPivotRMC) {
		    var B = N.getMenu();
		    if (microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION
			    && C != microstrategy.GRIDCELL_AXIS_METRICS) {
			B.addItem(microstrategy.descriptors
				.getDescriptor("1892"), Q + "('p');");
		    }
		    if (D == microstrategy.GRIDCELL_ORIENTATION_VERTICAL) {
			if (C == microstrategy.GRIDCELL_AXIS_ROWS) {
			    B.addItem(microstrategy.descriptors
				    .getDescriptor("3048"), Q + "('c');");
			    B.addSeparator();
			} else {
			    if (microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION
				    && (U > 0 || U < A - 1)) {
				B.addSeparator();
			    }
			}
			if (U > 0) {
			    B.addItem(microstrategy.descriptors
				    .getDescriptor("3049"), Q + "('l');");
			}
			if (U < A - 1) {
			    B.addItem(microstrategy.descriptors
				    .getDescriptor("3050"), Q + "('r');");
			}
		    } else {
			if (C == microstrategy.GRIDCELL_AXIS_COLUMNS) {
			    B.addItem(microstrategy.descriptors
				    .getDescriptor("3051"), Q + "('c');");
			    B.addSeparator();
			} else {
			    if (microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION
				    && (U > 0 || U < A - 1)) {
				B.addSeparator();
			    }
			}
			if (U > 0) {
			    B.addItem(microstrategy.descriptors
				    .getDescriptor("3052"), Q + "('u');");
			}
			if (U < A - 1) {
			    B.addItem(microstrategy.descriptors
				    .getDescriptor("3053"), Q + "('d');");
			}
		    }
		    if (B.length > 0) {
			V.addItem(microstrategy.descriptors
				.getDescriptor("3054"), B);
		    }
		}
		if (microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION) {
		    V.addItem(microstrategy.descriptors.getDescriptor("9509"),
			    Q + "('keepOnGrid');");
		}
		this.buildRemoveContextMenus(V, "x");
		if (this.fp.showFormattingRMC) {
		    V
			    .addItem(microstrategy.descriptors
				    .getDescriptor("2215"), Q
				    + "('gridFormat');",
				    "microstrategy.bone('rwb_viewer').commands.queryEnabled('onegrid');");
		}
		if (this.parentBone
			.isFeatureAvailable(microstrategy.FEATURE_SET_ATTRIBUTEFORM_DISPLAY)) {
		    var O = E[U].getAttribute(microstrategy.HTMLATTR_DSS_TYPE);
		    if (O == microstrategy.DSSTYPE_ATTRIBUTE
			    || O == microstrategy.DSSTYPE_ATTRIBUTE_FORM) {
			var T = N.getMenu();
			if (E[U].getAttribute(microstrategy.HTMLATTR_FORM_LIST)) {
			    var M = E[U].getAttribute(
				    microstrategy.HTMLATTR_FORM_LIST).split(
				    unescape(UNIT_SEPARATOR));
			    var K = [];
			    var H = [];
			    var W = [];
			    var R;
			    for (R = 0; R < M.length; R++) {
				form = M[R]
					.split(unescape(mstrUpdateManager.ITEM_SEPARATOR));
				switch (parseInt(form[microstrategy.FORM_LIST_STATUS])) {
				case microstrategy.FORM_NOT_ON_WS:
				    W.push(M[R]);
				    break;
				case microstrategy.FORM_ON_VIEW:
				    K.push(M[R]);
				    break;
				case microstrategy.FORM_ON_WS:
				    H.push(M[R]);
				    break;
				}
			    }
			    for (R = 0; (K != null) && (R < K.length); R++) {
				form = K[R]
					.split(unescape(mstrUpdateManager.ITEM_SEPARATOR));
				T.addItem(form[microstrategy.FORM_LIST_NAME], Q
					+ "('atfr', '"
					+ form[microstrategy.FORM_LIST_ID]
					+ "');", "", "",
					mstrContextMenuImpl.IMG_CHECK);
			    }
			    for (R = 0; (H != null) && (R < H.length); R++) {
				form = H[R]
					.split(unescape(mstrUpdateManager.ITEM_SEPARATOR));
				T.addItem(form[microstrategy.FORM_LIST_NAME], Q
					+ "('atfa', '"
					+ form[microstrategy.FORM_LIST_ID]
					+ EXPRESSION_SEPARATOR
					+ form[microstrategy.FORM_LIST_NAME]
					+ "');");
			    }
			    if (microstrategy.EXECUTION_SCOPE != microstrategy.RWD_EXECUTION) {
				T.addSeparator();
				T
					.addItem(microstrategy.descriptors
						.getDescriptor("1005"), Q
						+ "('atfm');");
			    }
			}
			if (T.length > 0) {
			    V.addItem(microstrategy.descriptors
				    .getDescriptor("2890"), T);
			}
		    }
		}
		if (this.fp.showRenameRMC) {
		    C = E[U].getAttribute(microstrategy.HTMLATTR_GRIDCELL_AXIS);
		    var Y = E[U]
			    .getAttribute(microstrategy.HTMLATTR_GRIDCELL_DEPTH);
		    var L = this.gridInfo.getAttrFormPos(E[U]);
		    if (microstrategy.subObjectType(E[U]) == microstrategy.SUBOBJTYPE_METRIC) {
			C = microstrategy.GRIDCELL_AXIS_METRICS;
			L = 1;
		    }
		    V.addItem(microstrategy.descriptors.getDescriptor("2453"),
			    Q + "('rename', "
				    + this.gridInfo.getUnitIndex(C, Y, L)
				    + ");");
		}
		if (microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION
			&& E[U].getAttribute(microstrategy.HTMLATTR_DSS_ID)) {
		    V
			    .addItem(microstrategy.descriptors
				    .getDescriptor("5140"),
				    "microstrategy.bone('rwb_viewer').commands.exec('WebHyperLinkEditor');");
		}
		V.registerTrigger(E[U]);
	    }
	}
	return E;
    } catch (F) {
	microstrategy.errors.log(F);
	return E;
    }
};
mstrTemplateImpl.prototype.buildRemoveContextMenus = function(C, A) {
    try {
	var B = "var bone = microstrategy.findBone(microstrategy.activeCXMenu); bone.processContextMenus";
	var E = false;
	if ((this.fp.showRemoveRMC || this.parentBone.showGraphDropZones)
		&& (this.parentBone
			.isFeatureAvailable(microstrategy.FEATURE_WEB_REMOVE_FROM_GRID) || microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION)) {
	    C.addItem(microstrategy.descriptors.getDescriptor("2214"), B + "('"
		    + A + "');", "", "", mstrContextMenuImpl.IMG_REMOVE);
	    E = true;
	}
	if (microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION
		&& this.parentBone
			.isFeatureAvailable(microstrategy.FEATURE_MODIFY_REPORT_LIST)
		&& this.parentBone
			.isFeatureAvailable(microstrategy.FEATURE_REPORT_FROM_REPORT)
		&& (!E || this.fp.showExtraRemoveRMC || this.parentBone.showGraphDropZones)) {
	    C.addItem(microstrategy.descriptors.getDescriptor("2216"), B + "('"
		    + A + "x');", "", "", mstrContextMenuImpl.IMG_REMOVE);
	}
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrTemplateImpl.prototype.generateTemplate = function() {
    try {
	var F = this.target.getElementsByTagName("TBODY")[0];
	mstrTemplateImpl.removeAllChildren(F);
	if (this.gridInfo.isEmptyTemplate) {
	    mstrTemplateImpl
		    .buildEmptyTemplateRows(this.target,
			    this.parentBone.gridCellCssPrefix,
			    this.gridInfo.hasMetrics);
	} else {
	    var I = 1;
	    var K = colSpacer = null;
	    var E, D, J;
	    var H = this.gridInfo;
	    if (H.rowAxis.size() == 0 || H.colAxis.headerSize() > 1) {
		K = mstrTemplateImpl.buildEmptyCell(
			microstrategy.GRIDCELL_AXIS_ROWS,
			this.parentBone.gridCellCssPrefix);
		K.colSpan = Math.max(H.rowAxis.headerSize(), 1);
	    }
	    if (H.metricsAxis != microstrategy.GRIDCELL_AXIS_COLUMNS
		    || H.colAxis.headerSize() > 1) {
		colSpacer = this
			.buildHeaderCell(microstrategy.GRIDCELL_AXIS_COLUMNS);
		if (H.metricsAxis == microstrategy.GRIDCELL_AXIS_COLUMNS) {
		    I = H.metricAxis.headerSize();
		}
	    }
	    var L = this.buildTitleCellCollection(H.metricAxis);
	    var A = this.buildTitleCellCollection(H.rowAxis);
	    var B = this.buildTitleCellCollection(H.colAxis);
	    var G = -1;
	    if (H.metricsAxis == microstrategy.GRIDCELL_AXIS_COLUMNS) {
		G = H.colAxis.unitLength(H.metricsDepth);
	    } else {
		if (H.metricsAxis == microstrategy.GRIDCELL_AXIS_ROWS) {
		    G = H.rowAxis.unitLength(H.metricsDepth);
		}
	    }
	    if (B != null) {
		for (E = 0; E < B.length - 1; E++) {
		    J = F.insertRow(-1);
		    if (K != null) {
			J.appendChild(K.cloneNode(true));
		    }
		    J.appendChild(B[E]);
		    if (H.metricsAxis == microstrategy.GRIDCELL_AXIS_COLUMNS
			    && (G - 1 == E)) {
			for (D = 0; D < L.length; D++) {
			    J.appendChild(L[D]);
			}
		    } else {
			if (colSpacer != null) {
			    for (D = 0; D < I; D++) {
				J
					.appendChild(this
						.buildPreviewCell(
							colSpacer,
							"previewHeaderCell",
							B[E]
								.getAttribute(microstrategy.HTMLATTR_DESCRIPTION)));
			    }
			}
		    }
		}
	    }
	    if (A != null || B != null) {
		J = F.insertRow(-1);
		if (A == null) {
		    J.appendChild(K.cloneNode(true));
		} else {
		    for (E = 0; E < A.length; E++) {
			J.appendChild(A[E]);
		    }
		}
		if (B == null) {
		    mstrTemplateImpl.buildEmptyTemplateCell(J
			    .insertCell(J.cells.length),
			    microstrategy.GRIDCELL_AXIS_COLUMNS,
			    this.parentBone.gridCellCssPrefix);
		} else {
		    J.appendChild(B[B.length - 1]);
		    if (H.metricsAxis == microstrategy.GRIDCELL_AXIS_COLUMNS
			    && G == B.length) {
			for (D = 0; D < L.length; D++) {
			    J.appendChild(L[D]);
			}
		    } else {
			if (colSpacer != null) {
			    for (D = 0; D < I; D++) {
				J
					.appendChild(this
						.buildPreviewCell(
							colSpacer,
							"previewHeaderCell",
							B[B.length - 1]
								.getAttribute(microstrategy.HTMLATTR_DESCRIPTION)));
			    }
			}
		    }
		}
	    }
	    if (H.metricsAxis == microstrategy.GRIDCELL_AXIS_ROWS && L != null) {
		this.buildMetricsRows(A, L);
	    } else {
		this.buildEmptyRows(A, B, L);
	    }
	}
	if (microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION) {
	    this.renderPageBy();
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrTemplateImpl.prototype.adjustPageByMetrics = function(D) {
    try {
	var C = "";
	for ( var B = 0; B < this.gridInfo.metricAxis.size(); B++) {
	    var A = this.gridInfo.metricAxis.units[B];
	    C += A.dssId + "|" + A.alias + ITEM_SEPARATOR;
	    A.src = D;
	}
	if (C.length > 0) {
	    D.setAttribute("mid", C.substr(0, C.length - 1));
	}
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrTemplateImpl.prototype.generatePageBySpan = function(E, G) {
    try {
	var B = document.createElement("span");
	B.setAttribute("id", "pbk" + G);
	if (this.fp.isDragAndDropEnabled || this.parentBone.showGraphDropZones) {
	    B.setAttribute("dg", "TRUE");
	}
	B.setAttribute(microstrategy.HTMLATTR_GRIDCELL_AXIS,
		microstrategy.GRIDCELL_AXIS_PAGE_BY);
	if (E.hasAttForms()) {
	    B.setAttribute(microstrategy.HTMLATTR_SUBOBJTYPE,
		    microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM);
	} else {
	    B.setAttribute(microstrategy.HTMLATTR_SUBOBJTYPE,
		    microstrategy.SUBOBJTYPE_ATTRIBUTE);
	}
	B.setAttribute(microstrategy.HTMLATTR_OBJTYPE,
		microstrategy.OBJTYPE_PAGE_BY_ELEM);
	B.setAttribute(microstrategy.HTMLATTR_GRIDCELL_DEPTH, G);
	B.setAttribute(microstrategy.HTMLATTR_FORM_POS, "1");
	if (E.isMetricTemplateUnit) {
	    B.setAttribute("MH", "TRUE");
	    this.adjustPageByMetrics(B);
	} else {
	    B.setAttribute(microstrategy.HTMLATTR_DSS_ID, E.dssId);
	    B.setAttribute(microstrategy.HTMLATTR_DSS_TYPE, E.dssType);
	}
	if (E.attFormList.forms) {
	    var A, D, F = [];
	    for (A = 0; D = E.attFormList.forms[A]; A++) {
		F.push(D.join(unescape(mstrUpdateManager.ITEM_SEPARATOR)));
	    }
	    B.setAttribute(microstrategy.HTMLATTR_FORM_LIST, F
		    .join(unescape(UNIT_SEPARATOR)));
	}
	B.setAttribute(microstrategy.HTMLATTR_DESCRIPTION, E.alias);
	B.className = "pgby" + (mstrGridReport.isDesignMode() ? "Design" : "");
	B.onmouseover = new Function("this.className+=' pgbyHover';");
	B.onmouseout = new Function(
		"this.className = this.className.replace(' pgbyHover','');");
	B.setAttribute("nowrap", "1");
	B.appendChild(document.createTextNode(E.alias + " "));
	B.style.cursor = (bIsIE4) ? "hand" : "pointer";
	return B;
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return null;
};
mstrTemplateImpl.prototype.renderPageBy = function() {
    try {
	var B = this.gridInfo.pageAxis;
	var J = document.getElementById("pbb_PageByStyle");
	if (J != null) {
	    var A = microstrategy.subObjectFind(J, "div",
		    microstrategy.SUBOBJTYPE_BODY);
	    mstrTemplateImpl.removeAllChildren(A);
	    var I;
	    var F = B.size();
	    if (F > 0) {
		for ( var E = 0; E < F; E++) {
		    var H = B.units[E];
		    var D = E + 1;
		    I = this.generatePageBySpan(H, D);
		    H.src = I;
		    if (H.attForms) {
			H.attForms.setUnitSource(I);
		    }
		    A.appendChild(I);
		}
		this.buildPageByAxisPivotButtons();
		this.buildPageByAxisContextMenus();
	    } else {
		I = document.createElement("span");
		var K = document.createTextNode(microstrategy.descriptors
			.getDescriptor("2020"));
		I.className = "pgbyNone";
		I.appendChild(K);
		A.appendChild(I);
	    }
	    microstrategy.eventManager.notifyOrphanBones("onpagebychange");
	    if (mstrGridReport.createQuickSearchPlaceHolder) {
		A
			.appendChild(mstrGridReport
				.createQuickSearchPlaceHolder(microstrategy.GRIDCELL_AXIS_PAGE_BY));
	    }
	    var G = document.createElement("div");
	    G.setAttribute("style", "clear:both;height:0;line-height:0");
	    A.appendChild(G);
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrTemplateImpl.prototype.buildPageByAxisPivotButtons = function() {
    try {
	var D = this.gridInfo.pageAxis;
	if ((this.fp.showPivot || this.parentBone.showGraphDropZones)
		&& D.size() > 0) {
	    var F = document.createElement("span");
	    F.className = "mstrIconPivot";
	    var A = D.size();
	    for ( var B = 0; B < A; B++) {
		var C = D.units[B].src;
		if (B > 0) {
		    C.appendChild(this.buildPageByPivotImage(F, "pivotLeft",
			    microstrategy.descriptors.getDescriptor("142"),
			    "move", "l"));
		}
		if (B < A - 1) {
		    C.appendChild(this.buildPageByPivotImage(F, "pivotRight",
			    microstrategy.descriptors.getDescriptor("143"),
			    "move", "r"));
		}
		C.appendChild(this.buildPageByPivotImage(F, "pivotToRows",
			microstrategy.descriptors.getDescriptor("137"), "move",
			"tr"));
		C.appendChild(this.buildPageByPivotImage(F, "pivotToCols",
			microstrategy.descriptors.getDescriptor("141"), "move",
			"tc"));
		if (this.fp.showRemove || this.parentBone.showGraphDropZones) {
		    var G = this.parentBone
			    .isFeatureAvailable(microstrategy.FEATURE_WEB_REMOVE_FROM_GRID) ? "2214"
			    : "2216";
		    C.appendChild(this.buildPageByPivotImage(F, "pivotRemove",
			    microstrategy.descriptors.getDescriptor(G), "rmv",
			    "x"));
		}
	    }
	}
	return D;
    } catch (E) {
	microstrategy.errors.log(E);
	return D;
    }
};
mstrTemplateImpl.prototype.buildPageByPivotImage = function(E, B, G, A, F) {
    try {
	var C = E.cloneNode(false);
	C.setAttribute("title", G);
	C.setAttribute("cmdid", A);
	C.setAttribute("cmdvl", F);
	C.className += " " + B;
	return C;
    } catch (D) {
	microstrategy.errors.log(D);
	return E;
    }
};
mstrTemplateImpl.prototype.buildPageByAxisContextMenus = function() {
    try {
	var E = this.gridInfo.pageAxis;
	if ((this.fp.isContextMenuEnabled || this.parentBone.showGraphDropZones)
		&& E.size() > 0) {
	    var A = E.size();
	    if (microstrategy.getContextMenuManager != undefined) {
		var H = microstrategy.getContextMenuManager("vb_GM");
		var B = "var bone = microstrategy.findBone(microstrategy.activeCXMenu); bone.processContextMenus";
		for ( var D = 0; D < A; D++) {
		    var C = H.getMenu();
		    if (this.fp.showPivotRMC
			    || this.parentBone.showGraphDropZones) {
			var G = H.getMenu();
			G.addItem(microstrategy.descriptors
				.getDescriptor("3051"), B + "('move', 'tr');");
			G.addItem(microstrategy.descriptors
				.getDescriptor("3048"), B + "('move', 'tc');");
			G.addSeparator();
			if (D > 0) {
			    G.addItem(microstrategy.descriptors
				    .getDescriptor("3049"), B
				    + "('move', 'l');");
			}
			if (D < A - 1) {
			    G.addItem(microstrategy.descriptors
				    .getDescriptor("3050"), B
				    + "('move', 'r');");
			}
			if (G.length > 0) {
			    C.addItem(microstrategy.descriptors
				    .getDescriptor("3054"), G);
			}
		    }
		    this.buildRemoveContextMenus(C, "rmv");
		    C.registerTrigger(E.units[D].src);
		}
	    }
	}
	return E;
    } catch (F) {
	microstrategy.errors.log(F);
	return E;
    }
};
mstrTemplateImpl.prototype.add = function(C, D, F, B) {
    try {
	var A = this.gridInfo.buildGridUnitInfo(C, D, F, B);
	this.addFromObjInfo(A);
	return true;
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrTemplateImpl.prototype.addFromObjInfo = function(A) {
    try {
	this.gridInfo.add(A, true);
	this.generateTemplate();
	this.sendUpdate();
	return true;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrTemplateImpl.prototype.pivot = function(E, C, G, B) {
    try {
	if (!E) {
	    this.gridInfo.pivotUnit(this.gridInfo.metricsAxis,
		    this.gridInfo.metricsDepth, 1, C, G, 1);
	} else {
	    var A = this.gridInfo.getGridUnitInfo(E);
	    var F = this.gridInfo.buildGridUnitInfo(E, C, G, B);
	    this.gridInfo.pivot(A, F);
	}
	this.generateTemplate();
	this.sendUpdate();
	return true;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrTemplateImpl.prototype.remove = function(A) {
    try {
	this.gridInfo.remove(A);
	this.generateTemplate();
	this.sendUpdate();
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrTemplateImpl.prototype.swapAxes = function() {
    try {
	this.gridInfo.swapAxes();
	this.generateTemplate();
	this.sendUpdate();
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrTemplateImpl.prototype.sendUpdate = function() {
    try {
	this.parentBone.hasNoMetrics = !this.gridInfo.hasMetrics;
	if (microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION
		&& microstrategy.DISPLAY_MODE == microstrategy.DESIGN_MODE) {
	    var A = document.getElementById("btnApplyDesignChanges");
	    if (A) {
		A.disabled = (this.gridInfo.hasNoUnits);
	    }
	    A = document.getElementById("3013");
	    if (A) {
		A.disabled = (this.gridInfo.hasNoUnits);
	    }
	}
	microstrategy.eventManager
		.notifyOrphanBones("onselectedgridstructurechange");
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrTemplateImpl.prototype.undo = function(E) {
    try {
	var J, C, G, B, A;
	var H = E.id;
	switch (H) {
	case mstrUpdateManager.PIVOT_TEMPLATE_UNIT:
	    J = this.gridInfo.findUnit(E.elem.dssId);
	    if (J) {
		C = parseInt(E.args[1]);
		G = parseInt(E.args[2]);
		this.pivot(J.src, C, G, 1);
	    }
	    break;
	case mstrUpdateManager.PIVOT_TEMPLATE_METRIC:
	    J = this.gridInfo.findUnit(E.elem.dssId);
	    if (J) {
		G = parseInt(E.args[1]);
		this.pivot(J.src, this.gridInfo.metricsAxis, G);
	    }
	    break;
	case mstrUpdateManager.ADD_TEMPLATE_UNIT:
	case mstrUpdateManager.ADD_TEMPLATE_METRIC:
	    J = this.gridInfo.findUnit(E.elem.dssId);
	    if (J) {
		this.remove(J);
	    }
	    break;
	case mstrUpdateManager.ADD_FORM:
	    C = parseInt(E.args[3]);
	    G = parseInt(E.args[4]);
	    B = parseInt(E.args[5]);
	    J = this.gridInfo.findUnit(E.elem.parentDssId);
	    if (E.cachedArray.pivot) {
		if (J) {
		    A = J.attForms.findUnit(E.elem.dssId);
		    if (A) {
			this.pivot(A.src, C, G, B);
		    }
		}
	    } else {
		if (E.cachedArray.allForms) {
		    this.remove(J);
		} else {
		    A = J.attForms.findUnit(E.elem.dssId);
		    if (A) {
			this.remove(A);
		    }
		}
	    }
	    break;
	case mstrUpdateManager.REMOVE_TEMPLATE_UNIT:
	    C = parseInt(E.args[1]);
	    G = parseInt(E.args[2]);
	    if (E.elem.isMetricTemplateUnit) {
		var I = E.cachedArray.metrics;
		this.add(I[0].src, C, G, 1);
		for ( var F = 1; F < I.length; F++) {
		    this.add(I[F].src, C, F + 1, 1);
		}
	    } else {
		this.add(E.elem.src, C, G, 1);
	    }
	    break;
	case mstrUpdateManager.REMOVE_TEMPLATE_METRIC:
	    C = E.cachedArray.metricsAxis;
	    G = (E.cachedArray.metricsDepth != null) ? E.cachedArray.metricsDepth
		    : parseInt(E.args[1]);
	    this.add(E.elem.src, E.cachedArray.metricsAxis, G, 1);
	    break;
	case mstrUpdateManager.REMOVE_FORM:
	    if (E.elem.isVisible) {
		this
			.add(E.elem.src, E.elem.axis, E.elem.depth,
				E.elem.subDepth);
	    } else {
		this.addFromObjInfo(E.elem);
	    }
	    break;
	case mstrUpdateManager.SWAP_TEMPLATE_AXES:
	    this.swapAxes();
	    break;
	}
	microstrategy.eventManager.notifyOrphanBones("ongridstructurechange",
		this.gridInfo);
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrTemplateImpl.prototype.redo = function(D) {
    try {
	var G = D.id;
	var C = this.gridInfo.findUnit(D.elem.dssId);
	switch (G) {
	case mstrUpdateManager.PIVOT_TEMPLATE_UNIT:
	    this.pivot(C.src, parseInt(D.args[3]), parseInt(D.args[4]), 1);
	    break;
	case mstrUpdateManager.PIVOT_TEMPLATE_METRIC:
	    this
		    .pivot(C.src, this.gridInfo.metricsAxis,
			    parseInt(D.args[2]), 1);
	    break;
	case mstrUpdateManager.ADD_TEMPLATE_UNIT:
	    this.add(D.elem.src, parseInt(D.args[1]), parseInt(D.args[2]), 1);
	    break;
	case mstrUpdateManager.ADD_TEMPLATE_METRIC:
	    if (this.gridInfo.hasMetrics) {
		this.add(D.elem, this.gridInfo.metricsAxis,
			parseInt(D.args[1]), 1);
	    } else {
		this.add(D.elem, parseInt(D.args[2]), parseInt(D.args[3]), 1);
	    }
	    break;
	case mstrUpdateManager.ADD_FORM:
	    var A = parseInt(D.args[3]);
	    var F = parseInt(D.args[4]);
	    var E = parseInt(D.args[5]);
	    if (D.cachedArray.pivot) {
		C = this.gridInfo.findUnit(D.elem.parentDssId);
		if (C) {
		    var H = C.attForms.findUnit(D.elem.dssId);
		    if (H) {
			this.pivot(H.src, A, F, E);
		    }
		}
	    } else {
		this.add(D.elem.src, A, F, E);
	    }
	    break;
	case mstrUpdateManager.REMOVE_TEMPLATE_UNIT:
	case mstrUpdateManager.REMOVE_TEMPLATE_METRIC:
	    this.remove(C);
	    break;
	case mstrUpdateManager.REMOVE_FORM:
	    this.remove(D.elem);
	    break;
	case mstrUpdateManager.SWAP_TEMPLATE_AXES:
	    this.swapAxes();
	    break;
	}
	microstrategy.eventManager.notifyOrphanBones("ongridstructurechange",
		this.gridInfo);
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
function mstrTemplateImpl() {
    return this;
}
mstrGraphTemplateImpl.prototype = new mstrTemplateImpl();
mstrGraphTemplateImpl.prototype.onload = function(C, B, A) {
    try {
	mstrTemplateImpl.prototype.onload.call(this, C, B, A);
	this.showAttForms = false;
	return true;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrGraphTemplateImpl.prototype.generatePageBySpan = function(C, D) {
    try {
	var A = mstrTemplateImpl.prototype.generatePageBySpan.call(this, C, D);
	if (A != null && this.parentBone.showGraphDropZones) {
	    A.setAttribute("dg", "TRUE");
	}
	return A;
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return null;
};
mstrGraphTemplateImpl.prototype.adjustPageByMetrics = function(A) {
    try {
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGraphTemplateImpl.prototype.generateTemplate = function() {
    try {
	var B = document
		.getElementById(this.parentBone.zonesTargetId + "_gdz1");
	var A = document
		.getElementById(this.parentBone.zonesTargetId + "_gdz2");
	if (this.parentBone.seriesLayout == "1") {
	    this.renderAxisDropUnits(B, this.gridInfo.colAxis);
	    this.renderAxisDropUnits(A, this.gridInfo.rowAxis);
	} else {
	    this.renderAxisDropUnits(B, this.gridInfo.rowAxis);
	    this.renderAxisDropUnits(A, this.gridInfo.colAxis);
	}
	var C = document
		.getElementById(this.parentBone.zonesTargetId + "_gdz3");
	if (this.gridInfo.metricsAxis == microstrategy.GRIDCELL_AXIS_PAGE_BY) {
	    mstrTemplateImpl.removeAllChildren(C);
	    C.parentNode.style.display = "none";
	} else {
	    this.renderAxisDropUnits(C, this.gridInfo.metricAxis);
	    C.parentNode.style.display = "";
	}
	if (microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION) {
	    this.renderPageBy();
	}
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrGraphTemplateImpl.prototype.renderAxisDropUnits = function(A, D) {
    try {
	mstrTemplateImpl.removeAllChildren(A);
	if (D.size() > 0) {
	    for ( var J = 0; J < D.size(); J++) {
		var M = D.get(J);
		if (!M) {
		    continue;
		}
		if (M.isMetricTemplateUnit
			&& !this.parentBone.renderMetricsZone) {
		    M.src = null;
		    M.isVisible = false;
		    continue;
		}
		var N = document.createElement("span");
		N.appendChild(document.createTextNode(M.alias));
		if (M.isMetricTemplateUnit) {
		    N.setAttribute("mh", "true");
		} else {
		    N.setAttribute(microstrategy.HTMLATTR_DSS_ID, M.dssId);
		    N.setAttribute(microstrategy.HTMLATTR_DSS_TYPE, M.dssType);
		}
		N.setAttribute(microstrategy.HTMLATTR_GRIDCELL_DEPTH, (J + 1));
		N.setAttribute(microstrategy.HTMLATTR_FORM_POS, "1");
		N
			.setAttribute(microstrategy.HTMLATTR_GRIDCELL_AXIS,
				D.axisType);
		N.setAttribute("id", this.parentBone.zonesTargetId + "_"
			+ D.axisType + "_" + (J + 1) + "_1");
		N.setAttribute("dg", "1");
		if (D.axisType == microstrategy.GRIDCELL_AXIS_METRICS) {
		    N.setAttribute(microstrategy.HTMLATTR_SUBOBJTYPE, "MV");
		} else {
		    N.setAttribute(microstrategy.HTMLATTR_SUBOBJTYPE, "ATT");
		}
		if (M.attFormList.forms) {
		    var G, B, I = [];
		    for (G = 0; B = M.attFormList.forms[G]; G++) {
			I
				.push(B
					.join(unescape(mstrUpdateManager.ITEM_SEPARATOR)));
		    }
		    N.setAttribute(microstrategy.HTMLATTR_FORM_LIST, I
			    .join(unescape(UNIT_SEPARATOR)));
		}
		A.appendChild(N);
		if (mstr.utils.ISIE6 || mstr.utils.ISIE7) {
		    var H = document.createElement("img");
		    N.appendChild(H);
		    N.removeChild(H);
		}
		M.src = N;
		if (microstrategy.getContextMenuManager != undefined) {
		    var O = microstrategy.getContextMenuManager("vb_GM");
		    var C = "var bone = microstrategy.getActiveCXBone(); bone.processContextMenus('sct');";
		    var L = "var bone = microstrategy.getActiveCXBone(); bone.processContextMenus('tuce');";
		    var K = "var bone = microstrategy.getActiveCXBone(); bone.processContextMenus('cgs');";
		    var F = O.getMenu();
		    if (microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION
			    && D.axisType != microstrategy.GRIDCELL_AXIS_METRICS) {
			F.addItem(microstrategy.descriptors
				.getDescriptor("4724"), C);
			F
				.addItem(
					microstrategy.descriptors
						.getDescriptor("6152"),
					L,
					"",
					"microstrategy.bone('rwb_viewer').commands.queryState('hasNoTargets') && !microstrategy.bone('rwb_viewer').autoWire");
			F
				.addItem(
					microstrategy.descriptors
						.getDescriptor("7483"),
					K,
					"",
					"microstrategy.bone('rwb_viewer').commands.queryState('hasNoTargets') && microstrategy.bone('rwb_viewer').autoWire");
			F
				.addItem(microstrategy.descriptors
					.getDescriptor("4964"), L, "",
					"!microstrategy.bone('rwb_viewer').commands.queryState('hasNoTargets')");
			F
				.addItem(
					microstrategy.descriptors
						.getDescriptor("6151"),
					"microstrategy.bone('rwb_viewer').commands.exec('removeTargets')",
					"",
					"!microstrategy.bone('rwb_viewer').commands.queryState('hasNoTargets')");
		    }
		    F.registerTrigger(N);
		}
	    }
	} else {
	    A.innerHTML = "<br />&nbsp;<br />";
	}
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
function mstrGraphTemplateImpl() {
    this.inherits = mstrTemplateImpl;
    this.inherits();
    delete this.inherits;
    return this;
}
var oldFormatDrillPathImportance = null;
mstrDrillObj.prototype = new Object();
function mstrDrillObj(A) {
}
function optDrl(E, G, I) {
    if (window.event) {
	window.event.returnValue = false;
    }
    var D = window.localStorage, F = (D.getItem("nlli")) || 0, A = document.URL;
    if (history.pushState) {
	history.pushState({
	    target : A,
	    href : A,
	    index : ++F
	}, A, A);
	D.setItem("nlli", F);
    }
    var B = microstrategy.findBone(G);
    var C = microstrategy.findParentWithTag(G, "td");
    var H = B.gridStructureInfo.getGridCellProps(C);
    return B.drill(H.getCellDrillKey(), E, H.getCellDrillElement(C), I);
}
function Drill(E, B, A, D) {
    var C = microstrategy.findBone(D);
    return C.drill(E, B, A);
}
function rwDrl(E, B, A, F, D) {
    var C = microstrategy.findBone(D);
    return C.drill(E, B, A, F);
}
function storeLocation() {
    var A = document.URL, C = A.split(/[?#]/)[0], B = parseInt(
	    (history.state && history.state.index), 10) || 0;
    history.pushState({
	target : A,
	href : A,
	index : B
    }, C, C);
}
function DCM(D, B, A) {
    storeLocation();
    window.mstrSubmitLink = false;
    var C = microstrategy.getActiveCXBone();
    C.drill(D, B, A);
}
function rwDCM(C, A, D) {
    var B = microstrategy.getActiveCXBone();
    B.drill(C, A, null, D);
}
function graphDCM(B, A) {
    var C = microstrategy.getActiveCXBone();
    var D = microstrategy.findRegisteredChildBone(C.elem, "div",
	    "mstrReportGraphCMImpl");
    D.submitGraphDrill(B, A, null, false);
}
function rwGraphDCM(B, A, E) {
    var C = microstrategy.getActiveCXBone();
    var D = microstrategy.findRegisteredChildBone(C.elem, "div",
	    "mstrReportGraphCMImpl");
    D.submitGraphDrill(B, A, E, false);
}
function moreOptions(D, B, A) {
    var C = microstrategy.getActiveCXBone();
    C.showAdvDrillEditor(D, B, A);
}
function findTargetDrill(A, B) {
    try {
	while (A) {
	    if (A.getAttribute && A.getAttribute(B)) {
		return A;
	    }
	    A = A.parentNode;
	}
	return null;
    } catch (C) {
	return null;
    }
}
function openFormInNewWindow(B) {
    var A = findTargetDrill(B, "method");
    if (A) {
	if (A.iframe) {
	    A.iframe.value = "false";
	}
	A.target = "_blank";
    }
    return true;
}
var mstrQuickThresholds = new Array();
THRESHOLD_TYPE_LOWEST_PERCENT = 1;
THRESHOLD_TYPE_HIGHEST_PERCENT = 2;
THRESHOLD_TYPE_BETWEEN_PERCENT = 3;
THRESHOLD_TYPE_LOWEST = 4;
THRESHOLD_TYPE_HIGHEST = 5;
THRESHOLD_TYPE_BETWEEN = 6;
THRESHOLD_TYPE_VALUE = 7;
REPLACE_TYPE_TEXT = 3;
REPLACE_TYPE_IMAGE = 4;
REPLACE_TYPE_QUICK_SYMBOL = 10;
IMAGE_DIR = "images/quickThresholdImgs/";
function defineQuickThreshold(H, I, D, A, C, F, E, G, B) {
    if (!mstrQuickThresholds[H]) {
	mstrQuickThresholds[H] = new Array();
    }
    mstrQuickThresholds[H][I] = new Object();
    mstrQuickThresholds[H][I].formatProps = D;
    mstrQuickThresholds[H][I].replaceType = A;
    mstrQuickThresholds[H][I].replaceValue = C;
    mstrQuickThresholds[H][I].floor = F;
    mstrQuickThresholds[H][I].ceiling = E;
    mstrQuickThresholds[H][I].thresholdType = G;
    mstrQuickThresholds[H][I].thresholdName = B;
}
defineQuickThreshold(0, 0, "FormattingPatterns!FillColor!255;", "", "", "",
	"20", THRESHOLD_TYPE_LOWEST_PERCENT, "name");
defineQuickThreshold(0, 1, "FormattingPatterns!FillColor!32768;", "", "", "80",
	"", THRESHOLD_TYPE_LOWEST_PERCENT, "name");
defineQuickThreshold(1, 0, "FormattingFont!Color!255;", "", "", "", "20",
	THRESHOLD_TYPE_LOWEST_PERCENT, "name");
defineQuickThreshold(1, 1, "FormattingFont!Color!32768;", "", "", "80", "",
	THRESHOLD_TYPE_LOWEST_PERCENT, "name");
defineQuickThreshold(2, 0, "", REPLACE_TYPE_IMAGE, IMAGE_DIR
	+ "stoplight_indi_red_M.gif", "", "20", THRESHOLD_TYPE_LOWEST_PERCENT,
	"name");
defineQuickThreshold(2, 1, "", REPLACE_TYPE_TEXT, " ", "20", "80",
	THRESHOLD_TYPE_LOWEST_PERCENT, "name");
defineQuickThreshold(2, 2, "", REPLACE_TYPE_IMAGE, IMAGE_DIR
	+ "stoplight_indi_grn_M.gif", "80", "", THRESHOLD_TYPE_LOWEST_PERCENT,
	"name");
defineQuickThreshold(3, 0, "", REPLACE_TYPE_IMAGE, IMAGE_DIR
	+ "stoplight_indi_red_M.gif", "", "20", THRESHOLD_TYPE_LOWEST_PERCENT,
	"name");
defineQuickThreshold(3, 1, "", REPLACE_TYPE_IMAGE, IMAGE_DIR
	+ "stoplight_indi_yellow_M.gif", "20", "80",
	THRESHOLD_TYPE_LOWEST_PERCENT, "name");
defineQuickThreshold(3, 2, "", REPLACE_TYPE_IMAGE, IMAGE_DIR
	+ "stoplight_indi_grn_M.gif", "80", "", THRESHOLD_TYPE_LOWEST_PERCENT,
	"name");
defineQuickThreshold(4, 0, "", REPLACE_TYPE_IMAGE, IMAGE_DIR
	+ "arrow3_reddown_small.gif", "", "20", THRESHOLD_TYPE_LOWEST_PERCENT,
	"name");
defineQuickThreshold(4, 1, "", REPLACE_TYPE_IMAGE, IMAGE_DIR
	+ "arrow2_orange_large.gif", "20", "80", THRESHOLD_TYPE_LOWEST_PERCENT,
	"name");
defineQuickThreshold(4, 2, "", REPLACE_TYPE_IMAGE, IMAGE_DIR
	+ "arrow3_greenup_small.gif", "80", "", THRESHOLD_TYPE_LOWEST_PERCENT,
	"name");
defineQuickThreshold(5, 0, "", REPLACE_TYPE_IMAGE, IMAGE_DIR + "flag2_red.gif",
	"", "20", THRESHOLD_TYPE_LOWEST_PERCENT, "name");
defineQuickThreshold(5, 1, "", REPLACE_TYPE_IMAGE, IMAGE_DIR
	+ "flag2_sunshine.gif", "20", "80", THRESHOLD_TYPE_LOWEST_PERCENT,
	"name");
defineQuickThreshold(5, 2, "", REPLACE_TYPE_IMAGE, IMAGE_DIR
	+ "flag2_green.gif", "80", "", THRESHOLD_TYPE_LOWEST_PERCENT, "name");
defineQuickThreshold(6, 0, "", REPLACE_TYPE_IMAGE, IMAGE_DIR
	+ "rating_poor.gif", "", "20", THRESHOLD_TYPE_LOWEST_PERCENT, "name");
defineQuickThreshold(6, 1, "", REPLACE_TYPE_IMAGE, IMAGE_DIR
	+ "rating_fair.gif", "20", "40", THRESHOLD_TYPE_LOWEST_PERCENT, "name");
defineQuickThreshold(6, 2, "", REPLACE_TYPE_IMAGE, IMAGE_DIR
	+ "rating_good.gif", "40", "60", THRESHOLD_TYPE_LOWEST_PERCENT, "name");
defineQuickThreshold(6, 3, "", REPLACE_TYPE_IMAGE, IMAGE_DIR
	+ "rating_verygood.gif", "60", "80", THRESHOLD_TYPE_LOWEST_PERCENT,
	"name");
defineQuickThreshold(6, 4, "", REPLACE_TYPE_IMAGE, IMAGE_DIR
	+ "rating_excellent.gif", "80", "", THRESHOLD_TYPE_LOWEST_PERCENT,
	"name");
var mstrFormatObject = {
    visibility : [ "FormattingAppearance", "Visible", false,
	    "101,102,105,106,107,52,53,4,8,111" ],
    DisplayStyle : [ "FormattingAppearance", "DisplayStyle", true, "106" ],
    zoom : [ "RWDocumentProperties", "ZoomFactor", false, "all" ],
    borderBottomColor2 : [ "FormattingBorder", "Border3DBottomColor", false,
	    "102,106,107,52,53,111,101,8,t,de" ],
    GraphFormat : [ "FormattingPage", "GraphFormat", true, "all" ],
    FormattingNavigation : {
	Hyperlink : [ "link", true, "102,106", "href" ],
	OpenInNewWindow : [ "newWin", true, "102,106", "nw" ],
	IsHyperlink : [ "isLink", true, "102,106", "isl" ]
    },
    Autowire : [ "FormattingLayout", "Autowire", true, "all" ],
    textDecoration : [ "FormattingFont", "Underline", false,
	    "52,106,107,111,8,208,t,de,df" ],
    SetBadgeToValueOnField : [ "FormattingTransactions",
	    "SetBadgeToValueOnField", true, "106" ],
    MobileDataView : [ "Mobile", "View", true, "all" ],
    EnableHorizontalSwipeToChange : [ "FormattingView",
	    "EnableHorizontalSwipeToChange", true, "8" ],
    topRightCornerRadius : [ "FormattingAppearance", "TopRightCornerRadius",
	    true, "101,8" ],
    BlackAndWhite : [ "FormattingPage", "BlackAndWhite", true, "all" ],
    EmbedFonts : [ "FormattingPage", "EmbedFonts", true, "all" ],
    InitialSlidingInHeight : [ "FormattingView", "InitialSlidingInHeight",
	    true, "8" ],
    AvailableViewModes : [ "FormattingPage", "AvailableViewModes", true, "all" ],
    FormattingPadding : {
	TopPadding : [ "paddingTop", false, "52,106,t,de" ],
	LeftPadding : [ "paddingLeft", false, "52,106,t,de" ],
	LineSpacing : [ "lineHeight", false, "106,t" ],
	RightPadding : [ "paddingRight", false, "52,106,t,de" ],
	BottomPadding : [ "paddingBottom", false, "52,106,t,de" ]
    },
    PDFExportDocumentURL : [ "RWDocumentProperties", "PDFExportDocumentURL",
	    true, "all" ],
    fontWeight : [ "FormattingFont", "Bold", false, "52,106,107,111,8,t,de,df" ],
    CalculateDocWidth : [ "RWDocumentProperties", "CalculateDocWidth", true,
	    "all" ],
    titleBarDisplay : [ "FormattingView", "TitleBarDisplay", true, "52,8" ],
    LayoutWidth : [ "FormattingPage", "Width", true, "all" ],
    IPhoneVisualization : [ "Visualization", "IPhoneVisualization", true, "52" ],
    gridExportOverFlow : [ "FormattingCrosstab", "ExportOverflowMode", true,
	    "52" ],
    SelectedVisualization : [ "Visualization", "SelectedVisualization", true,
	    "52" ],
    gradientYOffset : [ "FormattingPatterns", "GradientYOffset", true,
	    "101,106,107,52,53,4,8,9,111,208" ],
    TOCTitleFontItalic : [ "TableOfContents", "TitleFontItalic", true, "all" ],
    PaperType : [ "FormattingPage", "PaperType", false, "all" ],
    InfoWindowPosition : [ "FormattingView", "InfoWindowPosition", true, "8" ],
    SecondaryDataProviders : [ "FormattingWidget", "SecondaryDataProviders",
	    true, "52,111" ],
    FilterDetailsFormat : [ "FilterDetailsFormatProperties",
	    "FilterDetailsFormat", true, "all" ],
    left : [ "FormattingPosition", "Left", false,
	    "101,102,105,106,107,52,53,8,111" ],
    showOnlyInRepeatingCopies : [ "FormattingAppearance",
	    "ShowOnlyInRepeatingCopies", true,
	    "101,102,105,106,107,52,53,8,111" ],
    paddingBottom : [ "FormattingPadding", "BottomPadding", false,
	    "52,106,t,de" ],
    Blur : [ "FormattingAppearance", "Blur", true, "8" ],
    Orientation : [ "FormattingPage", "Orientation", true, "all" ],
    borderTopColor2 : [ "FormattingBorder", "Border3DTopColor", false,
	    "102,106,107,52,53,111,101,8,t,de" ],
    isLink : [ "FormattingNavigation", "IsHyperlink", true, "102,106" ],
    FilterDetailsFormatProperties : {
	FilterDetailsFormat : [ "FilterDetailsFormat", true, "all" ]
    },
    gridOverFlow : [ "FormattingCrosstab", "OverflowMode", true, "52" ],
    DisplaySelectorDocked : [ "FormattingSelector", "DisplaySelectorDocked",
	    true, "111" ],
    RSLPath : [ "FormattingWidget", "RSLPath", true, "52,111" ],
    listSeparators : {
	"2055" : ";",
	"2064" : ";",
	"2060" : ";",
	"2052" : ",",
	"3082" : ",",
	"1046" : ";",
	"1028" : ",",
	"1036" : ";",
	"1045" : ";",
	"1049" : ";",
	"4108" : ";",
	"1033" : ",",
	"1030" : ";",
	"1031" : ";",
	"1040" : ";",
	"1041" : ",",
	"1042" : ",",
	"1043" : ";",
	"1053" : ";",
	"2057" : ","
    },
    canGrowHorizontal : [ "FormattingSize", "CanGrowHorizontal", true, "4" ],
    fontStyle : [ "FormattingFont", "Italic", false, "52,106,107,111,8,t,de,df" ],
    lockAspectRatio : [ "FormattingSize", "LockAspectRatio", true, "102,106" ],
    FormattingIncrementalFetch : {
	PreLoadAllPanels : [ "PSPreLoadAllPanels", true, "8", "plp" ],
	MaxRows : [ "gridIfMaxRows", true, "52", "gmr" ],
	RowIFMode : [ "gridIfRowMode", true, "52", "gifmd" ],
	EnableIFOnGrid : [ "gridIfEnabled", true, "52", "gif" ]
    },
    SupportedOrientations : [ "FormattingLayout", "SupportedOrientations",
	    true, "all" ],
    APhoneVisualization : [ "Visualization", "APhoneVisualization", true, "52" ],
    textAlign2 : [ "FormattingAlignment", "Horizontal2", false, "52" ],
    FormattingHTML : {
	HTMLType : [ "htmlType", true, "107", "htype" ],
	URL : [ "url", true, "107", "hsrc" ],
	HTMLText : [ "htmlText", true, "107", "htxt" ]
    },
    formatVersion : [ "FormattingAppearance", "FormatVersion", true, "52" ],
    OfflineSubmission : [ "FormattingSelector", "OfflineSubmission", true,
	    "111" ],
    Enable : [ "FormattingWidget", "Enable", true, "52,111" ],
    ViewModeInteractivityLevel : [ "RWDocumentProperties",
	    "ViewModeInteractivityLevel", true, "all" ],
    IPadVisualization : [ "Visualization", "IPadVisualization", true, "52" ],
    topCornersOnly : [ "FormattingAppearance", "TopCornersOnly", true, "101,8" ],
    backgroundColor : [ "FormattingPatterns", "FillColor", false,
	    "101,106,107,52,53,4,8,9,111,208,t,de" ],
    borderLeftStyle : [ "FormattingBorder", "LeftStyle", false,
	    "102,106,107,52,53,111,8,t,de" ],
    UseAsNavBar : [ "FormattingLayout", "UseAsNavBar", true, "8" ],
    ActionForDirectTargetSelectors : [ "FormattingSelector",
	    "ActionForDirectTargetSelectors", true, "111" ],
    ShowFloatingToolbars : [ "RWDocumentProperties", "ShowFloatingToolbars",
	    true, "all" ],
    MarginLeft : [ "FormattingPage", "MarginLeft", true, "all" ],
    TOCTitleFontBold : [ "TableOfContents", "TitleFontBold", true, "all" ],
    height : [ "FormattingSize", "Height", false,
	    "101,102,105,106,107,52,53,4,8,111,4" ],
    PSPreLoadAllPanels : [ "FormattingIncrementalFetch", "PreLoadAllPanels",
	    true, "8" ],
    borderRightColor2 : [ "FormattingBorder", "Border3DRightColor", false,
	    "102,106,107,52,53,111,101,8,t,de" ],
    decodeValue : function(A, H) {
	try {
	    if ((A in mstrFormatObject)
		    && mstrFormatObject[A][mstrFormatObject.USE_VALUE]) {
		return H;
	    }
	    var B = function(J, K) {
		if (K != undefined && (J == null || J.length == 0)) {
		    return K + "px";
		} else {
		    if (J == "auto" || J == "100%") {
			return J;
		    } else {
			return (parseFloat(microstrategy.number.toString(J))
				* microstrategy.DPI_CONVERSION * (microstrategy.ZOOM_FACTOR / 100))
				+ "px";
		    }
		}
	    };
	    var E = function(J, K) {
		if (K != undefined && (J == null || J.length == 0)) {
		    J = K;
		}
		return parseFloat(J) * (microstrategy.ZOOM_FACTOR / 100) + "pt";
	    };
	    var C = function(K, N) {
		if (K == null || K.length == 0) {
		    return (N != undefined) ? N : null;
		}
		if (K == "-1") {
		    return "transparent";
		} else {
		    if (K == "-2") {
			return -2;
		    } else {
			var J = parseInt(K).toString(16);
			for ( var M = 0, L = J.length; M < 6 - L; M++) {
			    J = "0" + J;
			}
			return "#" + J.substring(4) + J.substring(2, 4)
				+ J.substring(0, 2);
		    }
		}
	    };
	    var F = {
		0 : "0pt solid",
		8 : "0pt none",
		3 : "1pt dashed",
		4 : "1pt dotted",
		5 : "1.5pt solid",
		6 : "2.5pt double",
		1 : "1pt solid",
		7 : "0.5pt solid"
	    };
	    var G = function(K) {
		K = F[K] || "";
		if (K == null || K == "") {
		    return "";
		}
		var J = K.indexOf("pt");
		return (K.substring(0, J) * (microstrategy.ZOOM_FACTOR / 100))
			+ K.substring(J);
	    };
	    H = String(H);
	    var I = H.toLowerCase();
	    switch (A) {
	    case "top":
		return B(I);
	    case "left":
		return B(I);
	    case "width":
		return B(I);
	    case "height":
		return B(I);
	    case "oldWidth":
	    case "oldHeight":
	    case "heightMode":
		return I;
	    case "widthMode":
		return I;
	    case "maxHeight":
		return B(I);
	    case "maxWidth":
		return B(I);
	    case "TextOverflow":
		switch (I) {
		case "-1":
		    return "auto";
		case "0":
		    return "hidden";
		}
	    case "visibility":
		switch (I) {
		case "-1":
		    return "visible";
		case "0":
		    return "hidden";
		}
	    case "textAlign":
		switch (I) {
		case "1":
		    return "right";
		case "2":
		    return "center";
		case "6":
		    return "justify";
		default:
		    return "left";
		}
	    case "textAlign2":
		switch (I) {
		case "4":
		    return "right";
		case "3":
		    return "center";
		case "6":
		    return "justify";
		default:
		    return "left";
		}
	    case "verticalAlign":
		switch (I) {
		case "1":
		    return "middle";
		case "2":
		    return "bottom";
		default:
		    return "top";
		}
	    case "verticalAlign2":
		switch (I) {
		case "2":
		    return "middle";
		case "3":
		    return "bottom";
		default:
		    return "top";
		}
	    case "whiteSpace":
		switch (I) {
		case "0":
		    return "nowrap";
		default:
		    return "normal";
		}
	    case "fontSize":
		return E(I);
	    case "color":
		return C(I, "");
	    case "fontWeight":
		switch (I) {
		case "-1":
		    return "bold";
		default:
		    return "normal";
		}
	    case "fontStyle":
		switch (I) {
		case "-1":
		    return "italic";
		default:
		    return "normal";
		}
	    case "textDecoration":
		return (I == null || I.length == 0 || I == "0") ? null
			: "underline";
	    case "textDecoration2":
		return (I == null || I.length == 0 || I == "0") ? null
			: "line-through";
	    case "FontHighlightColor":
		return C(I);
	    case "backgroundColor":
		return C(I, "");
	    case "backgroundStyle":
		if (I == null || I.length == 0) {
		    return null;
		} else {
		    return (I == "1") ? "transparent" : "0";
		}
	    case "gradientColor":
		return C(I);
	    case "selectionColor":
		return C(I);
	    case "BackgroundHighlightColor":
		return C(I);
	    case "borderTopColor2":
		return C(I);
	    case "borderRightColor2":
		return C(I);
	    case "borderBottomColor2":
		return C(I);
	    case "borderLeftColor2":
		return C(I);
	    case "borderTopColor":
		return C(I);
	    case "borderRightColor":
		return C(I);
	    case "borderBottomColor":
		return C(I);
	    case "borderLeftColor":
		return C(I);
	    case "borderTopStyle":
		return G(I);
	    case "borderRightStyle":
		return G(I);
	    case "borderBottomStyle":
		return G(I);
	    case "borderLeftStyle":
		return G(I);
	    case "paddingLeft":
		return E(I);
	    case "paddingRight":
		return E(I);
	    case "paddingTop":
		return E(I);
	    case "paddingBottom":
		return E(I);
	    case "lineHeight":
		return (I == null || I.length == 0 || I == "0" || I == "") ? "normal"
			: parseFloat(I) + "in";
	    case "lineStyle":
		switch (I) {
		case "2":
		    return "dashed";
		case "3":
		    return "dotted";
		case "4":
		    return "double";
		case "0":
		    return "none";
		default:
		    return "solid";
		}
	    case "lineColor":
		return C(I, "");
	    case "lineWeight":
		return E(I);
	    case "orientation":
		switch (I) {
		case "1":
		    return "border-left";
		default:
		    return "border-top";
		}
	    case "PaperType":
		switch (I) {
		case "1":
		    return "2A,46.81,66.18";
		case "2":
		    return "A0,33.11,46.81";
		case "3":
		    return "A1,23.39,33.11";
		case "4":
		    return "A2,16.54,23.39";
		case "5":
		    return "A3,11.69,16.54";
		case "6":
		    return "A4,8.27,11.69";
		case "7":
		    return "A5,5.83,8.27";
		case "8":
		    return "A6,4.13,5.83";
		case "9":
		    return "A7,2.91,4.13";
		case "10":
		    return "A8,2.09,2.91";
		case "11":
		    return "C,17,22";
		case "12":
		    return "D,22,34";
		case "13":
		    return "E,34,44";
		case "14":
		    return "Executive,7.25,10.5";
		case "15":
		    return "F,28,40";
		case "16":
		    return "Ledger,11,17";
		case "17":
		    return "Legal,8.5,14";
		case "18":
		    return "Letter,8.5,11";
		case "19":
		    return "Super A3/B,13,19";
		case "20":
		    return "Folio,8.5,13";
		default:
		    return "Custom";
		}
	    case "zoom":
		return parseFloat(microstrategy.number.toString(I));
	    case "TabColor":
		return C(I, "");
	    }
	} catch (D) {
	    microstrategy.errors.log(D);
	    return H;
	}
    },
    mct : [ "FormattingSelector", "MetricConditionType", true, "111" ],
    maxWidth : [ "FormattingSize", "MaxWidth", false, "4" ],
    lengthMode : [ "FormattingSize", "LengthMode", true, "105" ],
    PromptUserForPagebyExport : [ "RWDocumentProperties",
	    "PromptUserForPagebyExport", true, "all" ],
    whiteSpace : [ "FormattingAlignment", "TextWrap", false, "52,106,107,t,de" ],
    RemoveMissingUnits : [ "AnalyticalEngineProperties", "RemoveMissingUnits",
	    true, "all" ],
    OfflineOnCube : [ "RWDocumentProperties", "OfflineOnCube", true, "all" ],
    TOCLeftIndent : [ "TableOfContents", "LeftIndent", true, "all" ],
    borderLeftColor : [ "FormattingBorder", "LeftColor", false,
	    "102,106,107,52,53,111,8,t,de" ],
    SmartClientDoc : [ "RWDocumentProperties", "SmartClientDoc", true, "all" ],
    Transition : [ "FormattingTransitions", "Transition", true, "8,52" ],
    Scaling : [ "FormattingPage", "Scaling", true, "all" ],
    borderRightColor : [ "FormattingBorder", "RightColor", false,
	    "102,106,107,52,53,111,8,t,de" ],
    zIndex : [ "FormattingOrder", "ZIndex", true,
	    "101,102,105,106,107,52,53,8,111" ],
    ExpandAllPanels : [ "FormattingAppearance", "ExpandAllPanels", true, "8" ],
    FormattingOrder : {
	ZIndex : [ "zIndex", true, "101,102,105,106,107,52,53,8,111" ]
    },
    FormattingSelector : {
	IndependentNodeSelector : [ "IndependentNodeSelector", true, "52" ],
	Orientation : [ "ctlOrientation", true, "111" ],
	MouseOverAction : [ "mouseOverAction", true, "111" ],
	TXNSubmitInOrder : [ "TXNSubmitInOrder", true, "111" ],
	DisplaySelectorDocked : [ "DisplaySelectorDocked", true, "111" ],
	NoSelectionBehavior : [ "NoSelectionBehavior", true, "111", "nsb" ],
	MinSelectionCount : [ "MinSelectionCount", true, "111", "misc" ],
	Style : [ "Style", true, "111" ],
	ActionForDirectTargetSelectors : [ "ActionForDirectTargetSelectors",
		true, "111", "adts" ],
	Multiselect : [ "Multiselect", true, "52,111" ],
	InformationWindowTarget : [ "InformationWindowTarget", true,
		"102,106,111", "ifw" ],
	ShowElementCount : [ "showElementCount", true, "111", "sec" ],
	ItemWidthMode : [ "ItemWidthMode", true, "111" ],
	ExportAsShownOnWeb : [ "ExportAsShownOnWeb", true, "111", "aow" ],
	MaxSelectionCount : [ "MaxSelectionCount", true, "111", "masc" ],
	ShowSummary : [ "ShowSummary", true, "111" ],
	MetricConditionType : [ "mct", true, "111" ],
	OfflineSubmission : [ "OfflineSubmission", true, "111" ],
	SubmitMessage : [ "SubmitMessage", true, "111" ],
	DisplayText : [ "DisplayText", true, "111" ],
	SearchOnServer : [ "SearchOnServer", true, "111", "sos" ],
	Include : [ "Include", true, "111" ],
	DisplayConfirmation : [ "DisplayConfirmation", true, "111" ]
    },
    gridShowRH : [ "FormattingCrosstab", "ShowRowHeaders", true, "52" ],
    MaxSelectionCount : [ "FormattingSelector", "MaxSelectionCount", true,
	    "111" ],
    TARGET : 4,
    name : [ "FormattingAppearance", "Name", true,
	    "101,102,105,106,107,52,53,4,8,111" ],
    textAlign : [ "FormattingAlignment", "Horizontal", false,
	    "106,111,107,t,de" ],
    borderLeftColor2 : [ "FormattingBorder", "Border3DLeftColor", false,
	    "102,106,107,52,53,111,101,8,t,de" ],
    DisplayConfirmation : [ "FormattingSelector", "DisplayConfirmation", true,
	    "111" ],
    TOCBorderColor : [ "TableOfContents", "BorderColor", true, "all" ],
    TXNSubmitInOrder : [ "FormattingSelector", "TXNSubmitInOrder", true, "111" ],
    NonFlashRender : [ "FormattingWidget", "NonFlashRender", true, "52" ],
    VisualizationList : [ "Visualization", "VisualizationList", true, "52" ],
    TOCFontName : [ "TableOfContents", "FontName", true, "all" ],
    TOCTitleFillColor : [ "TableOfContents", "TitleFillColor", true, "all" ],
    UseAsFilterPanel : [ "FormattingLayout", "UseAsFilterPanel", true, "8" ],
    forceNewPage : [ "FormattingSection", "ForceNewPage", true, "4" ],
    color : [ "FormattingFont", "Color", false, "52,106,107,111,8,t,de,df" ],
    RefreshFrequency : [ "Mobile", "RefreshFrequency", true, "all" ],
    windowState : [ "FormattingView", "WindowState", true, "52,111" ],
    TOCTitleFontColor : [ "TableOfContents", "TitleFontColor", true, "all" ],
    gridArea : [ "FormattingCrosstab", "GridAreaPercent", true, "52" ],
    lineHeight : [ "FormattingPadding", "LineSpacing", false, "106,t" ],
    PROP_SET : 0,
    borderRightStyle : [ "FormattingBorder", "RightStyle", false,
	    "102,106,107,52,53,111,8,t,de" ],
    exportOptions : [ "FormattingCrosstab", "ShowExportOptions", true, "52" ],
    CustomProps : [ "Visualization", "CustomProps", true, "52" ],
    FontHighlightColor : [ "FormattingFont", "HighlightColor", false, "106" ],
    ShowTabLeader : [ "TableOfContents", "ShowTabLeader", true, "all" ],
    autoResizeInDesign : [ "FormattingSize", "AutoResizeInDesign", true, "106" ],
    EnableExport : [ "Mobile", "EnableExport", true, "all" ],
    bottomRightCornerRadius : [ "FormattingAppearance",
	    "BottomRightCornerRadius", true, "101,8" ],
    BeforeLayout : [ "TableOfContents", "BeforeLayout", true, "all" ],
    InformationWindowPlacement : [ "FormattingView",
	    "InformationWindowPlacement", true, "8" ],
    orientation : [ "FormattingLine", "LineOrientation", false, "105" ],
    paddingTop : [ "FormattingPadding", "TopPadding", false, "52,106,t,de" ],
    FormattingFont : {
	Name : [ "fontFamily", true, "52,106,107,111,8,t,de,df" ],
	Bold : [ "fontWeight", false, "52,106,107,111,8,t,de,df" ],
	HighlightColor : [ "FontHighlightColor", false, "106", "fhlc" ],
	Underline : [ "textDecoration", false, "52,106,107,111,8,208,t,de,df" ],
	Strikeout : [ "textDecoration2", false, "52,106,107,111,8,208,t,de,df" ],
	Italic : [ "fontStyle", false, "52,106,107,111,8,t,de,df" ],
	Color : [ "color", false, "52,106,107,111,8,t,de,df" ],
	Size : [ "fontSize", false, "52,106,107,111,8,t,de,df" ]
    },
    Visualization : {
	APhoneVisualization : [ "APhoneVisualization", true, "52", "aphv" ],
	IncludeMDProperties : [ "IncludeMDProperties", true, "52" ],
	ATabletVisualization : [ "ATabletVisualization", true, "52", "atv" ],
	IPadVisualization : [ "IPadVisualization", true, "52", "ipadv" ],
	ViewMode : [ "ViewMode", true, "52" ],
	IPhoneVisualization : [ "IPhoneVisualization", true, "52", "iphv" ],
	FileName : [ "FileName", true, "52" ],
	VisualizationsEnabled : [ "VisualizationsEnabled", true, "52" ],
	VisualizationList : [ "VisualizationList", true, "52" ],
	SelectedVisualization : [ "SelectedVisualization", true, "52" ],
	VisProps : [ "VisProps", true, "52" ],
	CustomProps : [ "CustomProps", true, "52" ]
    },
    fontSize : [ "FormattingFont", "Size", false, "52,106,107,111,8,t,de,df" ],
    paddingLeft : [ "FormattingPadding", "LeftPadding", false, "52,106,t,de" ],
    showTitleBar : [ "FormattingView", "ShowTitleBar", true, "52,8,111" ],
    BackgroundHighlightColor : [ "FormattingPatterns", "HighlightColor", false,
	    "8,106" ],
    IgnoreInExport : [ "FormattingAppearance", "IgnoreInExport", true, "8" ],
    xTabView : [ "FormattingUnassigned", "xTabView", true, "52" ],
    oldWidth : [ "FormattingSize", "OldWidth", false, "52" ],
    SectionHorizontalOverflow : [ "FormattingPage",
	    "SectionHorizontalOverflow", true, "all" ],
    EnableCopyForGridCell : [ "Mobile", "EnableCopyForGridCell", true, "all" ],
    SelectorBehavior : [ "RWDocumentProperties", "SelectorBehavior", true,
	    "all" ],
    Multiselect : [ "FormattingSelector", "Multiselect", true, "52,111" ],
    ScalePagesTall : [ "FormattingPage", "ScalePagesTall", true, "all" ],
    ShowBookmarks : [ "FormattingPage", "ShowBookmarks", true, "all" ],
    ExportAsShownOnWeb : [ "FormattingSelector", "ExportAsShownOnWeb", true,
	    "111" ],
    ExcelExportDocumentURL : [ "RWDocumentProperties",
	    "ExcelExportDocumentURL", true, "all" ],
    WatermarkFontItalic : [ "WatermarkProperties", "FontItalic", true, "all" ],
    hideIfEmpty : [ "FormattingSection", "HideIfEmpty", true, "4" ],
    src : [ "FormattingUnassigned", "src", true, "102" ],
    FormattingPicture : {
	PictureAlignment : [ "pictureAlignment", true, "102" ],
	NormalURL : [ "NormalURL", true, "106", "nmurl" ],
	HighlightURL : [ "HighlightURL", true, "106", "hlurl" ],
	PictureMode : [ "pictureMode", true, "102" ]
    },
    ZoomType : [ "RWDocumentProperties", "ZoomType", true, "all" ],
    AnalysisSection : [ "FormattingAnalysis", "AnalysisSection", true, "8,52" ],
    NormalURL : [ "FormattingPicture", "NormalURL", true, "106" ],
    UseAsMasterPanel : [ "FormattingLayout", "UseAsMasterPanel", true, "8" ],
    "VLDB Select" : {
	"MCE Join To Get Data Combination" : [ "RWLevelMCEJoin", true, "all" ]
    },
    FormattingLayout : {
	UseAsMasterPanel : [ "UseAsMasterPanel", true, "8", "uamp" ],
	UseAsTableControl : [ "UseAsTableControl", true, "8", "uatc" ],
	UseAsNavBar : [ "UseAsNavBar", true, "8", "uanb" ],
	UseMasterPageHeaderFooter : [ "TabMPHF", true, "all" ],
	SupportedOrientations : [ "SupportedOrientations", true, "all" ],
	UseAsFilterPanel : [ "UseAsFilterPanel", true, "8", "uafp" ],
	FitPDFContentHeight : [ "FitPDFContentHeight", true, "all" ],
	ResetToFirstPanelWhenTargeted : [ "ResetToFirstPanelWhenTargeted",
		true, "all", "rtfp" ],
	Autowire : [ "Autowire", true, "all" ],
	NavBarLayout : [ "NavBarLayout", true, "8", "nbl" ],
	UseSegments : [ "UseSegments", true, "all" ],
	CtlAutoSubmit : [ "CtlAutoSubmit", true, "8", "cas" ],
	TabColor : [ "TabColor", false, "all" ],
	DisplayPageByBar : [ "DisplayPageByBar", true, "all" ],
	UseAsInfoWindow : [ "UseAsInfoWindow", true, "all" ],
	DisplayRePromptIcon : [ "DisplayRePromptIcon", true, "all" ],
	TableControlDefinition : [ "TableControlDefinition", true, "8", "tcd" ]
    },
    TARGET_VALUE_STYLE : 1,
    TOCTitleFontStrikeout : [ "TableOfContents", "TitleFontStrikeout", true,
	    "all" ],
    WatermarkFontStrikeout : [ "WatermarkProperties", "FontStrikeout", true,
	    "all" ],
    TableControlDefinition : [ "FormattingLayout", "TableControlDefinition",
	    true, "8" ],
    docked : [ "FormattingSection", "DockSection", true, "dsec" ],
    EditableViewMode : [ "FormattingPage", "EditableViewMode", true, "all" ],
    FormattingSection : {
	HideIfEmpty : [ "hideIfEmpty", true, "4", "he" ],
	FitExcelRowHeight : [ "fitExcelRowHeight", true, "4", "ferh" ],
	ForceNewPage : [ "forceNewPage", true, "4", "fnp" ],
	RepeatHorizontally : [ "repeatHorizontally", true, "4", "rpth" ],
	KeepSectionTogether : [ "keepSectionTogether", true, "4", "kst" ],
	RepeatSection : [ "repeatSection", true, "4", "rpts" ],
	ShowInHTMLViewMode : [ "showInHTMLViewMode", true, "4", "shvm" ],
	Expanded : [ "expanded", true, "none" ],
	DockSection : [ "docked", true, "dsec", "docked" ]
    },
    TOCFontUnderline : [ "TableOfContents", "FontUnderline", true, "all" ],
    DocumentThemeColor : [ "Mobile", "DocumentThemeColor", true, "all" ],
    lineColor : [ "FormattingLine", "LineColor", false, "101,105" ],
    FormattingPage : {
	PageWidth : [ "PageWidth", true, "all" ],
	PaperType : [ "PaperType", false, "all" ],
	EditableViewMode : [ "EditableViewMode", true, "all" ],
	GraphQualityDPI : [ "GraphQualityDPI", true, "all" ],
	MarginTop : [ "MarginTop", true, "all" ],
	DefaultGridStyle : [ "DefaultGridStyle", true, "all" ],
	GraphFormat : [ "GraphFormat", true, "all" ],
	ScalePagesTall : [ "ScalePagesTall", true, "all" ],
	MarginLeft : [ "MarginLeft", true, "all" ],
	ShowBookmarks : [ "ShowBookmarks", true, "all" ],
	UsePageWidthAsLayoutWidth : [ "UsePageWidthAsLayoutWidth", true, "all" ],
	ScalePageHeaderFooter : [ "ScalePageHeaderFooter", true, "all" ],
	MarginBottom : [ "MarginBottom", true, "all" ],
	PageHeight : [ "PageHeight", true, "all" ],
	Width : [ "LayoutWidth", true, "all" ],
	IncludeBookmarks : [ "IncludeBookmarks", true, "all" ],
	BlackAndWhite : [ "BlackAndWhite", true, "all" ],
	Orientation : [ "Orientation", true, "all" ],
	EmbedFonts : [ "EmbedFonts", true, "all" ],
	AvailableViewModes : [ "AvailableViewModes", true, "all" ],
	MarginRight : [ "MarginRight", true, "all" ],
	PrintHeaderOn : [ "PrintHeaderOn", true, "all" ],
	UseOneSheetPerLayout : [ "UseOneSheetPerLayout", true, "all" ],
	UseOneSheetPerGroupElement : [ "UseOneSheetPerGroupElement", true,
		"all" ],
	ExpandToFit : [ "ExpandToFit", true, "all" ],
	ScalePagesWide : [ "ScalePagesWide", true, "all" ],
	PrintFooterOn : [ "PrintFooterOn", true, "all" ],
	DefaultViewMode : [ "DefaultViewMode", true, "all" ],
	ScalePercentage : [ "ScalePercentage", true, "all" ],
	Scaling : [ "Scaling", true, "all" ],
	SectionHorizontalOverflow : [ "SectionHorizontalOverflow", true, "all" ]
    },
    DisplayText : [ "FormattingSelector", "DisplayText", true, "111" ],
    ShowTabsForSingleLayout : [ "RWDocumentProperties",
	    "ShowTabsForSingleLayout", true, "all" ],
    CopyMode : [ "FormattingView", "CopyMode", true, "106,52" ],
    pictureAlignment : [ "FormattingPicture", "PictureAlignment", true, "102" ],
    DisplayInPartialScreen : [ "FormattingView", "DisplayInPartialScreen",
	    true, "8" ],
    TOCTitleAlignment : [ "TableOfContents", "TitleAlignment", true, "all" ],
    pictureMode : [ "FormattingPicture", "PictureMode", true, "102" ],
    decimalSeparators : {
	"2055" : ".",
	"2064" : ".",
	"2060" : ",",
	"2052" : ".",
	"3082" : ",",
	"1046" : ",",
	"1028" : ".",
	"1036" : ",",
	"1045" : ",",
	"1049" : ",",
	"4108" : ".",
	"1033" : ".",
	"1030" : ",",
	"1031" : ",",
	"1040" : ",",
	"1041" : ".",
	"1042" : ".",
	"1043" : ",",
	"1053" : ",",
	"2057" : "."
    },
    AnalyticalEngineProperties : {
	TrimEmptySections : [ "TrimNoSectionData", true, "all" ],
	RemoveNullGroups : [ "RemoveNullGroups", true, "all" ],
	SingleSourceGrid : [ "SingleSourceGrid", true, "all" ],
	KeepControlTargetsConsistent : [ "KeepControlTargetsConsistent", true,
		"all" ],
	RemoveMissingUnits : [ "RemoveMissingUnits", true, "all" ]
    },
    InformationWindowTarget : [ "FormattingSelector",
	    "InformationWindowTarget", true, "102,106,111" ],
    backgroundStyle : [ "FormattingPatterns", "FillStyle", false,
	    "101,106,107,52,53,4,8,9,111,208" ],
    lineWeight : [ "FormattingLine", "LineWeight", false, "101,105" ],
    ExpandToFit : [ "FormattingPage", "ExpandToFit", true, "all" ],
    TOCBorderStyle : [ "TableOfContents", "BorderStyle", true, "all" ],
    maxHeight : [ "FormattingSize", "MaxHeight", false, "4" ],
    IsNavigationDocument : [ "RWDocumentProperties", "IsNavigationDocument",
	    true, "all" ],
    PROP_NAME : 1,
    DatasetObjectsVisible : [ "FormattingAnalysis", "DatasetObjectsVisible",
	    true, "4" ],
    CurrencySymbol : [ "FormattingNumber", "CurrencySymbol", true,
	    "100,106,52,t,de" ],
    borderBottomColor : [ "FormattingBorder", "BottomColor", false,
	    "102,106,107,52,53,111,8,t,de" ],
    ATTR_NAME : 3,
    layoutBarStyle : [ "RWDocumentProperties", "layoutBarStyle", true, "all" ],
    AutoFontSize : [ "WatermarkProperties", "AutoFontSize", true, "all" ],
    ImageScale : [ "WatermarkProperties", "ImageScale", true, "all" ],
    heightMode : [ "FormattingSize", "HeightMode", false,
	    "101,102,105,106,107,52,53,111,8" ],
    MarginTop : [ "FormattingPage", "MarginTop", true, "all" ],
    ExecutionFullScreenMode : [ "RWDocumentProperties",
	    "ExecutionFullScreenMode", true, "all" ],
    FormattingCrosstab : {
	ShowExportOptions : [ "exportOptions", true, "52", "seo" ],
	ExportOverflowMode : [ "gridExportOverFlow", true, "52", "xovf", "2" ],
	ShowRowHeaders : [ "gridShowRH", true, "52" ],
	GridAreaPercent : [ "gridArea", true, "52" ],
	ShowColHeaders : [ "gridShowCH", true, "52" ],
	OverflowMode : [ "gridOverFlow", true, "52", "ovf", "2" ],
	Prefetch : [ "quickSwitch", true, "52" ],
	GridPosition : [ "gridPosition", true, "52" ]
    },
    PageHeight : [ "FormattingPage", "PageHeight", true, "all" ],
    Include : [ "FormattingSelector", "Include", true, "111" ],
    CurrencyPosition : [ "FormattingNumber", "CurrencyPosition", true,
	    "100,106,52,t,de" ],
    getAttrNameFromStyle : function(D) {
	try {
	    if (mstrFormatObject[D]) {
		var C = mstrFormatObject[D][mstrFormatObject.PROP_SET];
		var A = mstrFormatObject[D][mstrFormatObject.PROP_NAME];
		if (C && A) {
		    return mstrFormatObject[C][A][mstrFormatObject.ATTR_NAME];
		}
	    }
	} catch (B) {
	    microstrategy.errors.log(err);
	}
	return null;
    },
    EnableTransition : [ "FormattingTransitions", "Enable", true, "8,52" ],
    NoSelectionBehavior : [ "FormattingSelector", "NoSelectionBehavior", true,
	    "111" ],
    FormattingView : {
	DisplayInPartialScreen : [ "DisplayInPartialScreen", true, "8", "dips" ],
	TitleBarDisplay : [ "titleBarDisplay", true, "52,8", "tbd" ],
	ShowTitleBar : [ "showTitleBar", true, "52,8,111", "swt" ],
	InitialSlidingInHeight : [ "InitialSlidingInHeight", true, "8", "isih" ],
	InfoWindowPosition : [ "InfoWindowPosition", true, "8", "iwp" ],
	Title : [ "windowTitle", true, "52,8,9,111", "wt" ],
	WindowState : [ "windowState", true, "52,111", "ws" ],
	StyleForSwitchingPanel : [ "StyleForSwitchingPanel", true, "8", "sfwp" ],
	InitialSlidingInWidth : [ "InitialSlidingInWidth", true, "8", "isiw" ],
	InfoWindowMode : [ "InfoWindowMode", true, "8", "iwm" ],
	TabCloseToDismissInfoWindow : [ "TabCloseToDismissInfoWindow", true,
		"8", "tctdiw" ],
	UseAsInformationWindow : [ "UseAsInformationWindow", true, "8", "uaiw" ],
	EnableHorizontalSwipeToChange : [ "EnableHorizontalSwipeToChange",
		true, "8", "ehstc" ],
	ShowWidgetTitleBar : [ "ShowWidgetTitleBar", true, "52", "swwt" ],
	ShowAsCollapsiblePanel : [ "ShowAsCollapsiblePanel", true, "8", "sacp" ],
	CopyMode : [ "CopyMode", true, "106,52", "mcm" ],
	InformationWindowPlacement : [ "InformationWindowPlacement", true, "8",
		"iwpl" ]
    },
    FormattingUnassigned : {
	xTabView : [ "xTabView", true, "52", "xTabView" ],
	src : [ "src", true, "102", "src" ]
    },
    ShowChangeIndication : [ "FormattingTransactions", "", true, "51,52" ],
    enableGraphTooltips : [ "RWDocumentProperties", "enableGraphTooltips",
	    true, "all" ],
    WatermarkFontSize : [ "WatermarkProperties", "FontSize", true, "all" ],
    UseAsInformationWindow : [ "FormattingView", "UseAsInformationWindow",
	    true, "8" ],
    keepSectionTogether : [ "FormattingSection", "KeepSectionTogether", true,
	    "4" ],
    Format : [ "FormattingNumber", "Format", true, "100,106,52,t,de" ],
    FormattingWidget : {
	WidgetProps : [ "WidgetProps", true, "52,111", "wp" ],
	SecondaryDataProviders : [ "SecondaryDataProviders", true, "52,111" ],
	Enable : [ "Enable", true, "52,111" ],
	RSLPath : [ "RSLPath", true, "52,111" ],
	NonFlashRender : [ "NonFlashRender", true, "52", "nfr", "2" ],
	ClassName : [ "ClassName", true, "52,111", "twc", "2" ],
	IsApp : [ "IsApp", true, "52,111" ],
	DhtmlRenderer : [ "DhtmlRenderer", true, "52", "dr", "2" ]
    },
    DefaultGridStyle : [ "FormattingPage", "DefaultGridStyle", true, "all" ],
    getDecimalSeparator : function(B) {
	try {
	    return mstrFormatObject.decimalSeparators[B];
	} catch (A) {
	    microstrategy.errors.log(A);
	    return ".";
	}
    },
    TOCTitleFontUnderline : [ "TableOfContents", "TitleFontUnderline", true,
	    "all" ],
    RepeatPanelSpacing : [ "FormattingAppearance", "RepeatPanelSpacing", true,
	    "8" ],
    MarginBottom : [ "FormattingPage", "MarginBottom", true, "all" ],
    getPropertySetName : function(A) {
	return mstrFormatObject[A][mstrFormatObject.PROP_SET];
    },
    DropZonesVisible : [ "FormattingAnalysis", "DropZonesVisible", true, "8" ],
    FormattingAlignment : {
	TextDirection : [ "TextDirection", true, "52,106,107,t,de", "td", "3" ],
	Vertical2 : [ "verticalAlign2", false, "52", "vta2", "3" ],
	Vertical : [ "verticalAlign", false, "52,106,107,111,t,de", "vta", "3" ],
	Horizontal2 : [ "textAlign2", false, "52" ],
	Horizontal : [ "textAlign", false, "106,111,107,t,de" ],
	TextWrap : [ "whiteSpace", false, "52,106,107,t,de" ]
    },
    TrimNoSectionData : [ "AnalyticalEngineProperties", "TrimEmptySections",
	    true, "all" ],
    expanded : [ "FormattingSection", "Expanded", true, "none" ],
    ResetToFirstPanelWhenTargeted : [ "FormattingLayout",
	    "ResetToFirstPanelWhenTargeted", true, "all" ],
    Collapsed : [ "FormattingAnalysis", "Collapsed", true, "111" ],
    DefaultPageByExportMode : [ "RWDocumentProperties",
	    "DefaultPageByExportMode", true, "all" ],
    ExportRange : [ "RWDocumentProperties", "ExportRange", true, "all" ],
    topLeftCornerRadius : [ "FormattingAppearance", "TopLeftCornerRadius",
	    true, "101,8" ],
    FormattingAppearance : {
	Transparency : [ "Transparency", true, "8", "trpr" ],
	Blur : [ "Blur", true, "8", "blur" ],
	TopCornersOnly : [ "topCornersOnly", true, "101,8", "tco" ],
	ExpandAllPanels : [ "ExpandAllPanels", true, "8", "ep" ],
	Visible : [ "visibility", false, "101,102,105,106,107,52,53,4,8,111",
		"visible" ],
	FormatVersion : [ "formatVersion", true, "52", "fmtv" ],
	DisplayStyle : [ "DisplayStyle", true, "106", "dpst" ],
	BottomRightCornerRadius : [ "bottomRightCornerRadius", true, "101,8",
		"brcr" ],
	ShowOnlyInRepeatingCopies : [ "showOnlyInRepeatingCopies", true,
		"101,102,105,106,107,52,53,8,111", "sirc" ],
	Name : [ "name", true, "101,102,105,106,107,52,53,4,8,111", "nm" ],
	IgnoreInExport : [ "IgnoreInExport", true, "8", "cone" ],
	DropShadowDepth : [ "dropShadowDepth", true,
		"101,102,105,106,107,53,8,111,52", "dsw", "3" ],
	HasRoundedCorners : [ "hasRoundedCorners", true, "101,8", "rc" ],
	RepeatPanelSpacing : [ "RepeatPanelSpacing", true, "8", "povfs" ],
	Radius : [ "radius", true, "101,8", "rd" ],
	TooltipText : [ "title", true, "101,102,105,106,107,52,53,8,111",
		"title" ],
	TopRightCornerRadius : [ "topRightCornerRadius", true, "101,8", "trcr" ],
	BottomLeftCornerRadius : [ "bottomLeftCornerRadius", true, "101,8",
		"blcr" ],
	TopLeftCornerRadius : [ "topLeftCornerRadius", true, "101,8", "tlcr" ],
	DropShadowEffect : [ "dropShadowEffect", true,
		"101,102,105,106,107,53,8,111,52", "dse", "3" ],
	SplitPanelAcrossPages : [ "SplitPanelAcrossPages", true, "8", "spcp" ]
    },
    ATabletVisualization : [ "Visualization", "ATabletVisualization", true,
	    "52" ],
    FormattingSize : {
	MaxWidth : [ "maxWidth", false, "4", "mw" ],
	TextOverflow : [ "TextOverflow", false, "106,8", "tovf" ],
	AutoResizeInDesign : [ "autoResizeInDesign", true, "106", "ard" ],
	CanShrinkHorizontal : [ "canShrinkHorizontal", true, "4", "csh" ],
	CanShrink : [ "canShrink", true, "4", "cs" ],
	CanGrowHorizontal : [ "canGrowHorizontal", true, "4", "cgh" ],
	OldHeight : [ "oldHeight", false, "52", "oldht", "3" ],
	Height : [ "height", false, "101,102,105,106,107,52,53,4,8,111,4",
		"ht", "3" ],
	LockAspectRatio : [ "lockAspectRatio", true, "102,106" ],
	LengthMode : [ "lengthMode", true, "105" ],
	HeightMode : [ "heightMode", false, "101,102,105,106,107,52,53,111,8",
		"hm" ],
	MaxHeight : [ "maxHeight", false, "4", "mh" ],
	Length : [ "length", true, "105", "cs" ],
	Width : [ "width", false, "101,102,105,106,107,52,53,8,111,4", "wd",
		"3" ],
	OldWidth : [ "oldWidth", false, "52", "oldwd", "3" ],
	WidthMode : [ "widthMode", false, "101,102,105,106,107,52,53,8,111",
		"wm" ],
	CanGrow : [ "canGrow", true, "4", "cg" ]
    },
    lineStyle : [ "FormattingLine", "LineStyle", false, "101,105" ],
    getThousandsSeparator : function(B) {
	try {
	    return mstrFormatObject.thousandsSeparators[B];
	} catch (A) {
	    microstrategy.errors.log(A);
	    return ",";
	}
    },
    selectionStyle : [ "FormattingPatterns", "SelectorSelectionFillStyle",
	    true, "52,111" ],
    FormattingGroup : {
	UseOneSheetPerPage : [ "UseOneSheetPerPage", true, "all" ]
    },
    verticalAlign : [ "FormattingAlignment", "Vertical", false,
	    "52,106,107,111,t,de" ],
    UsePageWidthAsLayoutWidth : [ "FormattingPage",
	    "UsePageWidthAsLayoutWidth", true, "all" ],
    RWLevelMCEJoin : [ "VLDB Select", "MCE Join To Get Data Combination", true,
	    "all" ],
    EnableSwipingToSwitchLayout : [ "Mobile", "EnableSwipingToSwitchLayout",
	    true, "all" ],
    CtlAutoSubmit : [ "FormattingLayout", "CtlAutoSubmit", true, "8" ],
    fontFamily : [ "FormattingFont", "Name", true, "52,106,107,111,8,t,de,df" ],
    DisplayPageByBar : [ "FormattingLayout", "DisplayPageByBar", true, "all" ],
    PreLoadAllPanels : [ "RWDocumentProperties", "PreLoadAllPanels", true,
	    "all" ],
    WatermarkFontBold : [ "WatermarkProperties", "FontBold", true, "all" ],
    layoutBarPosition : [ "RWDocumentProperties", "layoutBarPosition", true,
	    "all" ],
    gridIfMaxRows : [ "FormattingIncrementalFetch", "MaxRows", true, "52" ],
    selectionColor : [ "FormattingPatterns", "SelectorSelectionColor", false,
	    "52,111" ],
    Title : [ "TableOfContents", "Title", true, "all" ],
    paddingRight : [ "FormattingPadding", "RightPadding", false, "52,106,t,de" ],
    DropZonesWidth : [ "FormattingAnalysis", "DropZonesWidth", true, "8" ],
    FilterMode : [ "FormattingAnalysis", "FilterMode", true, "8" ],
    dropShadowDepth : [ "FormattingAppearance", "DropShadowDepth", true,
	    "101,102,105,106,107,53,8,111,52" ],
    gridIfRowMode : [ "FormattingIncrementalFetch", "RowIFMode", true, "52" ],
    APPLIES_TO : 3,
    borderBottomStyle : [ "FormattingBorder", "BottomStyle", false,
	    "102,106,107,52,53,111,8,t,de" ],
    TextOverflow : [ "FormattingSize", "TextOverflow", false, "106,8" ],
    htmlType : [ "FormattingHTML", "HTMLType", true, "107" ],
    verticalAlign2 : [ "FormattingAlignment", "Vertical2", false, "52" ],
    GraphQualityDPI : [ "FormattingPage", "GraphQualityDPI", true, "all" ],
    MinSelectionCount : [ "FormattingSelector", "MinSelectionCount", true,
	    "111" ],
    FormattingPatterns : {
	SelectorSelectionColor : [ "selectionColor", false, "52,111", "ssc" ],
	GradientColor : [ "gradientColor", false,
		"101,106,107,52,53,4,8,9,111,208" ],
	GradientXOffset : [ "gradientXOffset", true,
		"101,106,107,52,53,4,8,9,111,208" ],
	FillColor : [ "backgroundColor", false,
		"101,106,107,52,53,4,8,9,111,208,t,de" ],
	HighlightColor : [ "BackgroundHighlightColor", false, "8,106", "bhlc" ],
	SelectorSelectionFillStyle : [ "selectionStyle", true, "52,111",
		"sstyle" ],
	GradientYOffset : [ "gradientYOffset", true,
		"101,106,107,52,53,4,8,9,111,208" ],
	GradientAngle : [ "gradientAngle", true,
		"101,106,107,52,53,4,8,9,111,208" ],
	FillStyle : [ "backgroundStyle", false,
		"101,106,107,52,53,4,8,9,111,208", "bgstyle", "3" ],
	FillEffect : [ "FillEffect", true, "106", "fe" ]
    },
    canShrink : [ "FormattingSize", "CanShrink", true, "4" ],
    gridIfEnabled : [ "FormattingIncrementalFetch", "EnableIFOnGrid", true,
	    "52" ],
    WatermarkFontUnderline : [ "WatermarkProperties", "FontUnderline", true,
	    "all" ],
    bottomLeftCornerRadius : [ "FormattingAppearance",
	    "BottomLeftCornerRadius", true, "101,8" ],
    gridPosition : [ "FormattingCrosstab", "GridPosition", true, "52" ],
    EnableBookStylePagebyNavigation : [ "Mobile",
	    "EnableBookStylePagebyNavigation", true, "all" ],
    ShowAsCollapsiblePanel : [ "FormattingView", "ShowAsCollapsiblePanel",
	    true, "8" ],
    VisProps : [ "Visualization", "VisProps", true, "52" ],
    NegativeNumbers : [ "FormattingNumber", "NegativeNumbers", true,
	    "100,106,52,t,de" ],
    TOCTitleFontName : [ "TableOfContents", "TitleFontName", true, "all" ],
    quickSwitch : [ "FormattingCrosstab", "Prefetch", true, "52" ],
    ViewMode : [ "Visualization", "ViewMode", true, "52" ],
    width : [ "FormattingSize", "Width", false,
	    "101,102,105,106,107,52,53,8,111,4" ],
    showInHTMLViewMode : [ "FormattingSection", "ShowInHTMLViewMode", true, "4" ],
    MarginRight : [ "FormattingPage", "MarginRight", true, "all" ],
    TARGET_VALUE_ATTR : 2,
    USE_VALUE : 2,
    url : [ "FormattingHTML", "URL", true, "107" ],
    FitPDFContentHeight : [ "FormattingLayout", "FitPDFContentHeight", true,
	    "all" ],
    ExcelGraphFormat : [ "RWDocumentProperties", "ExcelGraphFormat", true,
	    "all" ],
    WatermarkProperties : {
	FontColor : [ "WatermarkFontColor", true, "all" ],
	FontName : [ "WatermarkFontName", true, "all" ],
	AutoFontSize : [ "AutoFontSize", true, "all" ],
	ImageScale : [ "ImageScale", true, "all" ],
	FontScript : [ "WatermarkFontScript", true, "all" ],
	FontBold : [ "WatermarkFontBold", true, "all" ],
	FontSize : [ "WatermarkFontSize", true, "all" ],
	TextOrientation : [ "TextOrientation", true, "all" ],
	ImageSource : [ "ImageSource", true, "all" ],
	FontItalic : [ "WatermarkFontItalic", true, "all" ],
	Text : [ "Text", true, "all" ],
	WatermarkType : [ "WatermarkType", true, "all" ],
	FontStrikeout : [ "WatermarkFontStrikeout", true, "all" ],
	FontUnderline : [ "WatermarkFontUnderline", true, "all" ],
	TextWashout : [ "TextWashout", true, "all" ]
    },
    b3dstyle : [ "FormattingBorder", "Border3DStyle", true,
	    "102,106,107,52,53,111,112,101,8,t,de" ],
    TabCloseToDismissInfoWindow : [ "FormattingView",
	    "TabCloseToDismissInfoWindow", true, "8" ],
    PrintFooterOn : [ "FormattingPage", "PrintFooterOn", true, "all" ],
    ScalePercentage : [ "FormattingPage", "ScalePercentage", true, "all" ],
    Enabled : [ "TableOfContents", "Enabled", true, "all" ],
    thousandsSeparators : {
	"2055" : "'",
	"2064" : "'",
	"2060" : ".",
	"2052" : ",",
	"3082" : ".",
	"1046" : ".",
	"1028" : ",",
	"1036" : " ",
	"1045" : " ",
	"1049" : " ",
	"4108" : "'",
	"1033" : ",",
	"1030" : ".",
	"1031" : ".",
	"1040" : ".",
	"1041" : ",",
	"1042" : ",",
	"1043" : ".",
	"1053" : " ",
	"2057" : ","
    },
    ShowHiddenObjects : [ "RWDocumentProperties", "ShowHiddenObjects", true,
	    "all" ],
    canGrow : [ "FormattingSize", "CanGrow", true, "4" ],
    RemoveNullGroups : [ "AnalyticalEngineProperties", "RemoveNullGroups",
	    true, "all" ],
    RWDocumentProperties : {
	ShowHiddenObjects : [ "ShowHiddenObjects", true, "all" ],
	layoutBarStyle : [ "layoutBarStyle", true, "all" ],
	EmbeddedFonts : [ "EmbeddedFonts", true, "all" ],
	ZoomFactor : [ "zoom", false, "all" ],
	SelectorBehavior : [ "SelectorBehavior", true, "all" ],
	ShowFloatingToolbars : [ "ShowFloatingToolbars", true, "all" ],
	ApplyGBToAllLayouts : [ "ApplyGBToAllLayouts", true, "all" ],
	ShowingBarsTemporarily : [ "ShowingBarsTemporarily", true, "all" ],
	ExcelExportDocumentURL : [ "ExcelExportDocumentURL", true, "all" ],
	ExecutionFullScreenMode : [ "ExecutionFullScreenMode", true, "all" ],
	CtlAutoSubmit : [ "CtlAutoSubmit", true, "all" ],
	ShowTabsForSingleLayout : [ "ShowTabsForSingleLayout", true, "all" ],
	ZoomType : [ "ZoomType", true, "all" ],
	PromptUserForPagebyExport : [ "PromptUserForPagebyExport", true, "all" ],
	PreLoadAllPanels : [ "PreLoadAllPanels", true, "all" ],
	ExcelEmbedImages : [ "ExcelEmbedImages", true, "all" ],
	PreserveTranslations : [ "PreserveTranslations", true, "all" ],
	OfflineOnCube : [ "OfflineOnCube", true, "all" ],
	layoutBarPosition : [ "layoutBarPosition", true, "all" ],
	DocumentVersion : [ "DocumentVersion", true, "all" ],
	PDFExportDocumentURL : [ "PDFExportDocumentURL", true, "all" ],
	CalculateDocWidth : [ "CalculateDocWidth", true, "all" ],
	ExcelGraphFormat : [ "ExcelGraphFormat", true, "all" ],
	enableGraphTooltips : [ "enableGraphTooltips", true, "all" ],
	SmartClientDoc : [ "SmartClientDoc", true, "all" ],
	ViewModeInteractivityLevel : [ "ViewModeInteractivityLevel", true,
		"all" ],
	IsNavigationDocument : [ "IsNavigationDocument", true, "all" ],
	DefaultPageByExportMode : [ "DefaultPageByExportMode", true, "all" ],
	ExportRange : [ "ExportRange", true, "all" ]
    },
    TOCFontBold : [ "TableOfContents", "FontBold", true, "all" ],
    TextDirection : [ "FormattingAlignment", "TextDirection", true,
	    "52,106,107,t,de" ],
    WatermarkFontName : [ "WatermarkProperties", "FontName", true, "all" ],
    getPropertyName : function(A) {
	return mstrFormatObject[A][mstrFormatObject.PROP_NAME];
    },
    windowTitle : [ "FormattingView", "Title", true, "52,8,9,111" ],
    Duration : [ "FormattingTransitions", "Duration", true, "8,52" ],
    top : [ "FormattingPosition", "Top", false,
	    "101,102,105,106,107,52,53,8,111" ],
    EnableCopyForText : [ "Mobile", "EnableCopyForText", true, "all" ],
    WidgetProps : [ "FormattingWidget", "WidgetProps", true, "52,111" ],
    HTML_PROP_NAME : 0,
    TOCFontSize : [ "TableOfContents", "FontSize", true, "all" ],
    Category : [ "FormattingNumber", "Category", true, "100,106,52,t,de" ],
    ShowSummary : [ "FormattingSelector", "ShowSummary", true, "111" ],
    SubmitMessage : [ "FormattingSelector", "SubmitMessage", true, "111" ],
    TOCFontStrikeout : [ "TableOfContents", "FontStrikeout", true, "all" ],
    InfoWindowMode : [ "FormattingView", "InfoWindowMode", true, "8" ],
    showElementCount : [ "FormattingSelector", "ShowElementCount", true, "111" ],
    FileName : [ "Visualization", "FileName", true, "52" ],
    ScalePagesWide : [ "FormattingPage", "ScalePagesWide", true, "all" ],
    getPxFromPt : function(A) {
	return parseFloat(A) * (microstrategy.DPI_CONVERSION / 72);
    },
    UseAsInfoWindow : [ "FormattingLayout", "UseAsInfoWindow", true, "all" ],
    WatermarkFontColor : [ "WatermarkProperties", "FontColor", true, "all" ],
    oldHeight : [ "FormattingSize", "OldHeight", false, "52" ],
    DisplayRePromptIcon : [ "FormattingLayout", "DisplayRePromptIcon", true,
	    "all" ],
    WatermarkFontScript : [ "WatermarkProperties", "FontScript", true, "all" ],
    gradientColor : [ "FormattingPatterns", "GradientColor", false,
	    "101,106,107,52,53,4,8,9,111,208" ],
    mouseOverAction : [ "FormattingSelector", "MouseOverAction", true, "111" ],
    canShrinkHorizontal : [ "FormattingSize", "CanShrinkHorizontal", true, "4" ],
    htmlText : [ "FormattingHTML", "HTMLText", true, "107" ],
    ClassName : [ "FormattingWidget", "ClassName", true, "52,111" ],
    gradientAngle : [ "FormattingPatterns", "GradientAngle", true,
	    "101,106,107,52,53,4,8,9,111,208" ],
    IndependentNodeSelector : [ "FormattingSelector",
	    "IndependentNodeSelector", true, "52" ],
    HTML_USE_VALUE : 1,
    IsApp : [ "FormattingWidget", "IsApp", true, "52,111" ],
    DhtmlRenderer : [ "FormattingWidget", "DhtmlRenderer", true, "52" ],
    encodeValue : function(A, H) {
	try {
	    if ((A in mstrFormatObject)
		    && mstrFormatObject[A][mstrFormatObject.USE_VALUE]) {
		return H;
	    }
	    var B = function(J, K) {
		if (K != undefined && (J == null || J.length == 0)) {
		    return parseInt(K, 10);
		} else {
		    if (J == "auto" || J == "100%") {
			return J;
		    } else {
			return microstrategy.number
				.toLocaleString(parseFloat(I)
					/ (microstrategy.DPI_CONVERSION
						* microstrategy.ZOOM_FACTOR / 100));
		    }
		}
	    };
	    var F = function(J, K) {
		if (K != undefined && (J == null || J.length == 0)) {
		    J = K;
		}
		return parseFloat(microstrategy.number.toString(J, false))
			/ (microstrategy.ZOOM_FACTOR / 100);
	    };
	    var C = function(J, K) {
		if (K != undefined
			&& (J == null || J.length == 0 || J == "undefined")) {
		    J = K;
		}
		if (J == "transparent") {
		    return -1;
		} else {
		    if (J == -2) {
			return -2;
		    } else {
			return parseInt(J.substring(5) + J.substring(3, 5)
				+ J.substring(1, 3), 16);
		    }
		}
	    };
	    var D = function(J, K) {
		return (J != null && J.indexOf(K) > -1) ? "-1" : "0";
	    };
	    var G = function(K) {
		K = K || "";
		if (K != "") {
		    var J = K.indexOf("pt");
		    K = ((K.substring(0, J) / (microstrategy.ZOOM_FACTOR / 100)) + "")
			    .substring(0, Math.min(J, 3))
			    + K.substring(J);
		}
		switch (K) {
		case "0pt solid":
		    return "0";
		case "0pt none":
		    return "8";
		case "1pt dashed":
		    return "3";
		case "1pt dotted":
		    return "4";
		case "1.5pt solid":
		    return "5";
		case "2.5pt double":
		    return "6";
		case "1pt solid":
		    return "1";
		case "0.5pt solid":
		    return "7";
		default:
		    return "-1";
		}
	    };
	    H = String(H);
	    var I = H.toLowerCase();
	    switch (A) {
	    case "top":
		return B(I);
	    case "left":
		return B(I);
	    case "width":
		return B(I);
	    case "height":
		return B(I);
	    case "oldWidth":
	    case "oldHeight":
	    case "heightMode":
		return I;
	    case "widthMode":
		return I;
	    case "maxHeight":
		return B(I);
	    case "maxWidth":
		return B(I);
	    case "TextOverflow":
		switch (I) {
		case "auto":
		    return "-1";
		case "hidden":
		    return "0";
		}
	    case "visibility":
		switch (I) {
		case "visible":
		    return "-1";
		case "hidden":
		    return "0";
		}
	    case "textAlign":
		switch (I) {
		case "right":
		    return "1";
		case "center":
		    return "2";
		case "justify":
		    return "6";
		default:
		    return "0";
		}
	    case "textAlign2":
		switch (I) {
		case "right":
		    return "4";
		case "center":
		    return "3";
		case "justify":
		    return "6";
		default:
		    return "2";
		}
	    case "verticalAlign":
		switch (I) {
		case "middle":
		    return "1";
		case "bottom":
		    return "2";
		default:
		    return "0";
		}
	    case "verticalAlign2":
		switch (I) {
		case "middle":
		    return "2";
		case "bottom":
		    return "3";
		default:
		    return "1";
		}
	    case "whiteSpace":
		switch (I) {
		case "nowrap":
		    return "0";
		default:
		    return "-1";
		}
	    case "fontSize":
		return F(I);
	    case "color":
		return C(I, "#000000");
	    case "fontWeight":
		switch (I) {
		case "bold":
		    return "-1";
		default:
		    return "0";
		}
	    case "fontStyle":
		switch (I) {
		case "italic":
		    return "-1";
		default:
		    return "0";
		}
	    case "textDecoration":
		return D(I, "underline");
	    case "textDecoration2":
		return D(I, "line-through");
	    case "FontHighlightColor":
		return C(I, "#000000");
	    case "backgroundColor":
		if (I && I.indexOf(",") > 0) {
		    I = "#" + I.split(",")[0];
		}
		return C(I, "#FFFFFF");
	    case "backgroundStyle":
		if (I && I.indexOf(",") > 0) {
		    return "2";
		}
		if (I == "gradient") {
		    return "2";
		}
		if (I == "transparent") {
		    return "1";
		} else {
		    return "0";
		}
	    case "gradientColor":
		if (I && I.indexOf(",") > 0) {
		    I = "#" + I.split(",")[1];
		}
		return C(I, "#000000");
	    case "selectionColor":
		return C(I, "#000000");
	    case "BackgroundHighlightColor":
		return C(I, "#000000");
	    case "borderTopColor2":
		return C(I, "#000000");
	    case "borderRightColor2":
		return C(I, "#000000");
	    case "borderBottomColor2":
		return C(I, "#000000");
	    case "borderLeftColor2":
		return C(I, "#000000");
	    case "borderTopColor":
		return C(I, "#000000");
	    case "borderRightColor":
		return C(I, "#000000");
	    case "borderBottomColor":
		return C(I, "#000000");
	    case "borderLeftColor":
		return C(I, "#000000");
	    case "borderTopStyle":
		return G(I);
	    case "borderRightStyle":
		return G(I);
	    case "borderBottomStyle":
		return G(I);
	    case "borderLeftStyle":
		return G(I);
	    case "paddingLeft":
		return F(I);
	    case "paddingRight":
		return F(I);
	    case "paddingTop":
		return F(I);
	    case "paddingBottom":
		return F(I);
	    case "lineHeight":
		return (I == null || I == "0" || I == "normal" || I == "") ? ""
			: parseFloat(I);
	    case "lineStyle":
		switch (I) {
		case "dashed":
		    return "2";
		case "dotted":
		    return "3";
		case "double":
		    return "4";
		case "none":
		    return "0";
		default:
		    return "1";
		}
	    case "lineColor":
		return C(I, "#000000");
	    case "lineWeight":
		return F(I);
	    case "orientation":
		switch (I) {
		case "border-left":
		    return "1";
		default:
		    return "0";
		}
	    case "PaperType":
		switch (I) {
		case "2a,46.81,66.18":
		    return "1";
		case "a0,33.11,46.81":
		    return "2";
		case "a1,23.39,33.11":
		    return "3";
		case "a2,16.54,23.39":
		    return "4";
		case "a3,11.69,16.54":
		    return "5";
		case "a4,8.27,11.69":
		    return "6";
		case "a5,5.83,8.27":
		    return "7";
		case "a6,4.13,5.83":
		    return "8";
		case "a7,2.91,4.13":
		    return "9";
		case "a8,2.09,2.91":
		    return "10";
		case "c,17,22":
		    return "11";
		case "d,22,34":
		    return "12";
		case "e,34,44":
		    return "13";
		case "executive,7.25,10.5":
		    return "14";
		case "f,28,40":
		    return "15";
		case "ledger,11,17":
		    return "16";
		case "legal,8.5,14":
		    return "17";
		case "letter,8.5,11":
		    return "18";
		case "super a3/b,13,19":
		    return "19";
		case "folio,8.5,13":
		    return "20";
		default:
		    return "0";
		}
	    case "zoom":
		return microstrategy.number.toLocaleString(parseFloat(I));
	    case "TabColor":
		return C(I, "#ffffff");
	    case "colWidth":
		return Math.round(parseInt(I)
			/ (microstrategy.DPI_CONVERSION
				* microstrategy.ZOOM_FACTOR / 100)
			* microstrategy.BASE_DPI);
	    }
	} catch (E) {
	    microstrategy.errors.log(E);
	    return H;
	}
    },
    TableOfContents : {
	TitleFontItalic : [ "TOCTitleFontItalic", true, "all" ],
	Enabled : [ "Enabled", true, "all" ],
	FontColor : [ "TOCFontColor", true, "all" ],
	TitleAlignment : [ "TOCTitleAlignment", true, "all" ],
	TitleFontBold : [ "TOCTitleFontBold", true, "all" ],
	BorderWeight : [ "TOCBorderWeight", true, "all" ],
	TitleFontStrikeout : [ "TOCTitleFontStrikeout", true, "all" ],
	UserSeparateStyleForTitle : [ "TOCTitleEnableInherit", true, "all" ],
	FontSize : [ "TOCFontSize", true, "all" ],
	RightIndent : [ "TOCRightIndent", true, "all" ],
	FontItalic : [ "TOCFontItalic", true, "all" ],
	TitleFontUnderline : [ "TOCTitleFontUnderline", true, "all" ],
	ShowTabLeader : [ "ShowTabLeader", true, "all" ],
	FillColor : [ "TOCFillColor", true, "all" ],
	BeforeLayout : [ "BeforeLayout", true, "all" ],
	LeftIndent : [ "TOCLeftIndent", true, "all" ],
	TitleFontSize : [ "TOCTitleFontSize", true, "all" ],
	FontName : [ "TOCFontName", true, "all" ],
	TitleFontColor : [ "TOCTitleFontColor", true, "all" ],
	BorderStyle : [ "TOCBorderStyle", true, "all" ],
	TitleFillStyle : [ "TOCTitleFillStyle", true, "all" ],
	FontBold : [ "TOCFontBold", true, "all" ],
	FillStyle : [ "TOCFillStyle", true, "all" ],
	Title : [ "Title", true, "all" ],
	IncludePageHeaderFooter : [ "IncludePageHeaderFooter", true, "all" ],
	BorderColor : [ "TOCBorderColor", true, "all" ],
	TitleFillColor : [ "TOCTitleFillColor", true, "all" ],
	FontUnderline : [ "TOCFontUnderline", true, "all" ],
	FontStrikeout : [ "TOCFontStrikeout", true, "all" ],
	TitleFontName : [ "TOCTitleFontName", true, "all" ]
    },
    UseOneSheetPerGroupElement : [ "FormattingPage",
	    "UseOneSheetPerGroupElement", true, "all" ],
    DecimalPlaces : [ "FormattingNumber", "DecimalPlaces", true,
	    "100,106,52,t,de" ],
    radius : [ "FormattingAppearance", "Radius", true, "101,8" ],
    locked : [ "FormattingPosition", "Locked", true,
	    "101,102,105,106,107,52,53,8,111" ],
    SplitPanelAcrossPages : [ "FormattingAppearance", "SplitPanelAcrossPages",
	    true, "8" ],
    ctlOrientation : [ "FormattingSelector", "Orientation", true, "111" ],
    link : [ "FormattingNavigation", "Hyperlink", true, "102,106" ],
    FormattingNumber : {
	ThousandSeparator : [ "ThousandSeparator", true, "100,106,52,t,de",
		"nth", "2" ],
	Category : [ "Category", true, "100,106,52,t,de", "nct", "2" ],
	Format : [ "Format", true, "100,106,52,t,de", "nfs", "2" ],
	DecimalPlaces : [ "DecimalPlaces", true, "100,106,52,t,de", "ndp", "2" ],
	CurrencyPosition : [ "CurrencyPosition", true, "100,106,52,t,de",
		"ncp", "2" ],
	CurrencySymbol : [ "CurrencySymbol", true, "100,106,52,t,de", "ncs",
		"2" ],
	NegativeNumbers : [ "NegativeNumbers", true, "100,106,52,t,de", "nnn",
		"2" ]
    },
    UseOneSheetPerPage : [ "FormattingGroup", "UseOneSheetPerPage", true, "all" ],
    repeatHorizontally : [ "FormattingSection", "RepeatHorizontally", true, "4" ],
    title : [ "FormattingAppearance", "TooltipText", true,
	    "101,102,105,106,107,52,53,8,111" ],
    UseSegments : [ "FormattingLayout", "UseSegments", true, "all" ],
    ScalePageHeaderFooter : [ "FormattingPage", "ScalePageHeaderFooter", true,
	    "all" ],
    length : [ "FormattingSize", "Length", true, "105" ],
    EnableZoom : [ "Mobile", "EnableZoom", true, "all" ],
    DatasetsSettings : [ "FormattingAnalysis", "DatasetsSettings", true, "4" ],
    Transparency : [ "FormattingAppearance", "Transparency", true, "8" ],
    TOCRightIndent : [ "TableOfContents", "RightIndent", true, "all" ],
    FormattingPosition : {
	Top : [ "top", false, "101,102,105,106,107,52,53,8,111" ],
	Locked : [ "locked", true, "101,102,105,106,107,52,53,8,111", "lck" ],
	Left : [ "left", false, "101,102,105,106,107,52,53,8,111" ]
    },
    ExcelEmbedImages : [ "RWDocumentProperties", "ExcelEmbedImages", true,
	    "all" ],
    PreserveTranslations : [ "RWDocumentProperties", "PreserveTranslations",
	    true, "all" ],
    gridShowCH : [ "FormattingCrosstab", "ShowColHeaders", true, "52" ],
    UseAsTableControl : [ "FormattingLayout", "UseAsTableControl", true, "8" ],
    DocumentVersion : [ "RWDocumentProperties", "DocumentVersion", true, "all" ],
    TOCBorderWeight : [ "TableOfContents", "BorderWeight", true, "all" ],
    SearchOnServer : [ "FormattingSelector", "SearchOnServer", true, "111" ],
    DefaultViewMode : [ "FormattingPage", "DefaultViewMode", true, "all" ],
    PageWidth : [ "FormattingPage", "PageWidth", true, "all" ],
    TabMPHF : [ "FormattingLayout", "UseMasterPageHeaderFooter", true, "all" ],
    DatasetObjectsWidth : [ "FormattingAnalysis", "DatasetObjectsWidth", true,
	    "4" ],
    borderTopStyle : [ "FormattingBorder", "TopStyle", false,
	    "102,106,107,52,53,111,8,t,de" ],
    FormattingTransactions : {
	"" : [ "ShowChangeIndication", true, "51,52" ],
	SetBadgeToValueOnField : [ "SetBadgeToValueOnField", true, "106" ]
    },
    EmbeddedFonts : [ "RWDocumentProperties", "EmbeddedFonts", true, "all" ],
    Style : [ "FormattingSelector", "Style", true, "111" ],
    b3dweight : [ "FormattingBorder", "Border3DWeight", true,
	    "102,106,107,52,53,111,112,101,8,t,de" ],
    ApplyGBToAllLayouts : [ "RWDocumentProperties", "ApplyGBToAllLayouts",
	    true, "all" ],
    ItemWidthMode : [ "FormattingSelector", "ItemWidthMode", true, "111" ],
    ShowingBarsTemporarily : [ "RWDocumentProperties",
	    "ShowingBarsTemporarily", true, "all" ],
    NavBarLayout : [ "FormattingLayout", "NavBarLayout", true, "8" ],
    TOCFillColor : [ "TableOfContents", "FillColor", true, "all" ],
    VisualizationsEnabled : [ "Visualization", "VisualizationsEnabled", true,
	    "52" ],
    repeatSection : [ "FormattingSection", "RepeatSection", true, "4" ],
    Mobile : {
	EnableCopyForGridCell : [ "EnableCopyForGridCell", true, "all" ],
	EnableCopyForText : [ "EnableCopyForText", true, "all" ],
	View : [ "MobileDataView", true, "all" ],
	EnableSwipingToSwitchLayout : [ "EnableSwipingToSwitchLayout", true,
		"all" ],
	DocumentThemeColor : [ "DocumentThemeColor", true, "all" ],
	EnableExport : [ "EnableExport", true, "all" ],
	RefreshFrequency : [ "RefreshFrequency", true, "all" ],
	EnableZoom : [ "EnableZoom", true, "all" ],
	EnableBookStylePagebyNavigation : [ "EnableBookStylePagebyNavigation",
		true, "all" ]
    },
    TabColor : [ "FormattingLayout", "TabColor", false, "all" ],
    FormattingAnalysis : {
	FilterMode : [ "FilterMode", true, "8" ],
	DropZonesWidth : [ "DropZonesWidth", true, "8" ],
	AnalysisSection : [ "AnalysisSection", true, "8,52" ],
	FilterDisplay : [ "FilterDisplay", true, "8" ],
	DatasetObjectsWidth : [ "DatasetObjectsWidth", true, "4" ],
	Collapsed : [ "Collapsed", true, "111" ],
	DropZonesVisible : [ "DropZonesVisible", true, "8" ],
	DatasetsSettings : [ "DatasetsSettings", true, "4" ],
	DatasetObjectsVisible : [ "DatasetObjectsVisible", true, "4" ]
    },
    IncludeBookmarks : [ "FormattingPage", "IncludeBookmarks", true, "all" ],
    FillEffect : [ "FormattingPatterns", "FillEffect", true, "106" ],
    IncludeMDProperties : [ "Visualization", "IncludeMDProperties", true, "52" ],
    FilterDisplay : [ "FormattingAnalysis", "FilterDisplay", true, "8" ],
    textDecoration2 : [ "FormattingFont", "Strikeout", false,
	    "52,106,107,111,8,208,t,de,df" ],
    dropShadowEffect : [ "FormattingAppearance", "DropShadowEffect", true,
	    "101,102,105,106,107,53,8,111,52" ],
    ImageSource : [ "WatermarkProperties", "ImageSource", true, "all" ],
    IncludePageHeaderFooter : [ "TableOfContents", "IncludePageHeaderFooter",
	    true, "all" ],
    TOCTitleFontSize : [ "TableOfContents", "TitleFontSize", true, "all" ],
    TOCTitleEnableInherit : [ "TableOfContents", "UserSeparateStyleForTitle",
	    true, "all" ],
    fitExcelRowHeight : [ "FormattingSection", "FitExcelRowHeight", true, "4" ],
    ShowWidgetTitleBar : [ "FormattingView", "ShowWidgetTitleBar", true, "52" ],
    FormattingTransitions : {
	Enable : [ "EnableTransition", true, "8,52" ],
	Duration : [ "Duration", true, "8,52", "tdr", "2" ],
	Transition : [ "Transition", true, "8,52", "ttr", "2" ]
    },
    ThousandSeparator : [ "FormattingNumber", "ThousandSeparator", true,
	    "100,106,52,t,de" ],
    FormattingBorder : {
	TopColor : [ "borderTopColor", false, "102,106,107,52,53,111,8,t,de",
		"btc", "3" ],
	BottomStyle : [ "borderBottomStyle", false,
		"102,106,107,52,53,111,8,t,de", "bbs", "3" ],
	Border3DWeight : [ "b3dweight", true,
		"102,106,107,52,53,111,112,101,8,t,de", "b3dweight", "3" ],
	TopStyle : [ "borderTopStyle", false, "102,106,107,52,53,111,8,t,de",
		"bts", "3" ],
	LeftColor : [ "borderLeftColor", false, "102,106,107,52,53,111,8,t,de",
		"blc", "3" ],
	BottomColor : [ "borderBottomColor", false,
		"102,106,107,52,53,111,8,t,de", "bbc", "3" ],
	Border3DRightColor : [ "borderRightColor2", false,
		"102,106,107,52,53,111,101,8,t,de", "b3drc", "3" ],
	RightStyle : [ "borderRightStyle", false,
		"102,106,107,52,53,111,8,t,de", "brs", "3" ],
	Border3DLeftColor : [ "borderLeftColor2", false,
		"102,106,107,52,53,111,101,8,t,de", "b3dlc", "3" ],
	Border3DBottomColor : [ "borderBottomColor2", false,
		"102,106,107,52,53,111,101,8,t,de", "b3dbc", "3" ],
	RightColor : [ "borderRightColor", false,
		"102,106,107,52,53,111,8,t,de", "brc", "3" ],
	Border3DTopColor : [ "borderTopColor2", false,
		"102,106,107,52,53,111,101,8,t,de", "b3dtc", "3" ],
	Border3DStyle : [ "b3dstyle", true,
		"102,106,107,52,53,111,112,101,8,t,de", "b3dstyle", "3" ],
	LeftStyle : [ "borderLeftStyle", false, "102,106,107,52,53,111,8,t,de",
		"bls", "3" ]
    },
    TOCFontColor : [ "TableOfContents", "FontColor", true, "all" ],
    StyleForSwitchingPanel : [ "FormattingView", "StyleForSwitchingPanel",
	    true, "8" ],
    TOCTitleFillStyle : [ "TableOfContents", "TitleFillStyle", true, "all" ],
    newWin : [ "FormattingNavigation", "OpenInNewWindow", true, "102,106" ],
    TOCFillStyle : [ "TableOfContents", "FillStyle", true, "all" ],
    SingleSourceGrid : [ "AnalyticalEngineProperties", "SingleSourceGrid",
	    true, "all" ],
    getListSeparator : function(B) {
	try {
	    return mstrFormatObject.listSeparators[B];
	} catch (A) {
	    microstrategy.errors.log(A);
	    return ",";
	}
    },
    gradientXOffset : [ "FormattingPatterns", "GradientXOffset", true,
	    "101,106,107,52,53,4,8,9,111,208" ],
    isTargetStyleOrAttr : function(E) {
	try {
	    var B = mstrFormatObject.TARGET_VALUE_STYLE;
	    if (!mstrFormatObject[E]) {
		return B;
	    }
	    var D = mstrFormatObject.getPropertySetName(E);
	    var A = mstrFormatObject.getPropertyName(E);
	    if (mstrFormatObject.getAttrNameFromStyle(E) == null
		    || mstrFormatObject.getAttrNameFromStyle(E).length == 0) {
		return B;
	    }
	    B = mstrFormatObject.TARGET_VALUE_ATTR;
	    if (mstrFormatObject[D][A][mstrFormatObject.TARGET]
		    && (parseInt(mstrFormatObject[D][A][mstrFormatObject.TARGET]) & (parseInt(mstrFormatObject.TARGET_VALUE_STYLE) + parseInt(mstrFormatObject.TARGET_VALUE_ATTR))) > 0) {
		B += mstrFormatObject.TARGET_VALUE_STYLE;
	    }
	    return B;
	} catch (C) {
	    microstrategy.errors.log(err);
	}
	return null;
    },
    TextWashout : [ "WatermarkProperties", "TextWashout", true, "all" ],
    widthMode : [ "FormattingSize", "WidthMode", false,
	    "101,102,105,106,107,52,53,8,111" ],
    borderTopColor : [ "FormattingBorder", "TopColor", false,
	    "102,106,107,52,53,111,8,t,de" ],
    FormattingLine : {
	LineStyle : [ "lineStyle", false, "101,105", "ls", "3" ],
	LineWeight : [ "lineWeight", false, "101,105", "lw", "3" ],
	LineOrientation : [ "orientation", false, "105", "or" ],
	LineColor : [ "lineColor", false, "101,105", "lc", "3" ]
    },
    TextOrientation : [ "WatermarkProperties", "TextOrientation", true, "all" ],
    PrintHeaderOn : [ "FormattingPage", "PrintHeaderOn", true, "all" ],
    KeepControlTargetsConsistent : [ "AnalyticalEngineProperties",
	    "KeepControlTargetsConsistent", true, "all" ],
    UseOneSheetPerLayout : [ "FormattingPage", "UseOneSheetPerLayout", true,
	    "all" ],
    Text : [ "WatermarkProperties", "Text", true, "all" ],
    InitialSlidingInWidth : [ "FormattingView", "InitialSlidingInWidth", true,
	    "8" ],
    WatermarkType : [ "WatermarkProperties", "WatermarkType", true, "all" ],
    TOCFontItalic : [ "TableOfContents", "FontItalic", true, "all" ],
    hasRoundedCorners : [ "FormattingAppearance", "HasRoundedCorners", true,
	    "101,8" ],
    HighlightURL : [ "FormattingPicture", "HighlightURL", true, "106" ]
};
mstrRaOutlineModeImplScript = true;
mstrRaOutlineModeImpl.prototype = new Object();
mstrRaOutlineModeImpl.prototype.expandImage = "";
mstrRaOutlineModeImpl.prototype.contractImage = "";
mstrRaOutlineModeImpl.prototype.startRow = 0;
mstrRaOutlineModeImpl.prototype.endRow = 0;
mstrRaOutlineModeImpl.prototype.gridBone = null;
function mstrRaOutlineModeImpl(B, A, C) {
    this.startRow = B;
    this.endRow = A;
    this.expandImage = "../images/expand.gif";
    this.contractImage = "../images/contract.gif";
    this.gridBone = C;
    return this;
}
mstrRaOutlineModeImpl.prototype.showHideRows = function(F) {
    var E = new RaGridCell(microstrategy.findParentWithTag(F, "td"));
    var H = this.findScanScopeStartRow(E);
    var D = 0;
    while (H) {
	var C = new RaGridRow(H);
	if (this.isOutOfScanScope(E, C)
		|| (C.getFirstCellIdOrdinal() == E.gridCellId.iOrdinal && C
			.getFirstCellRaLvl() <= E.iRaElementLevel)) {
	    break;
	}
	C.updateCollapseTime(!E.bExpandable);
	if ((!E.bExpandable && !C.isHidden())
		|| (E.bExpandable && C.isCollapseTimeCleared())) {
	    C.updateDisplayStatus(E.bExpandable);
	    D += (E.bExpandable ? 1 : -1);
	}
	H = H.nextElementSibling;
    }
    if (D != 0) {
	var G = E.gridCellId.iOrdinal - 1;
	var H = E.srcHtmlTableCell.parentNode;
	while (G > 0) {
	    while (H) {
		var C = new RaGridRow(H);
		var A = C.findCellsWithTargetIdOrdinal(G);
		if (A && A.length > 0) {
		    for ( var B = 0; B < A.length; B++) {
			this.updateRowSpan(A[B], D);
		    }
		    break;
		}
		H = H.previousSibling;
	    }
	    G--;
	}
    } else {
	E.hideCollapseExpandIcon();
    }
    E.updateExpdAndImg(this.expandImage, this.contractImage, E.bExpandable);
    this.resize();
};
mstrRaOutlineModeImpl.prototype.findScanScopeStartRow = function(A) {
    var C = A.srcHtmlTableCell.parentNode.nextSibling;
    while (C) {
	var B = new RaGridRow(C).getFirstCellIdOrdinal();
	if (B < A.gridCellId.iOrdinal) {
	    C = null;
	    break;
	}
	if (B == A.gridCellId.iOrdinal) {
	    break;
	}
	C = C.nextSibling;
    }
    return C;
};
mstrRaOutlineModeImpl.prototype.isOutOfScanScope = function(B, A) {
    return A.getFirstCellIdOrdinal() < B.gridCellId.iOrdinal;
};
mstrRaOutlineModeImpl.prototype.updateRowSpan = function(A, C) {
    var B = parseInt(A.getAttribute("rowspan") || "0");
    A.setAttribute("rowspan", B + C);
};
mstrRaOutlineModeImpl.prototype.resize = function() {
    if (this.gridBone && this.gridBone.lockSet && this.gridBone.lockSet.resize) {
	this.gridBone.lockSet.resize(true);
    }
};
function RaGridCell(B) {
    this.srcHtmlTableCell = B;
    var A = B.getAttribute(microstrategy.HTMLATTR_GRIDCELL_ID);
    this.gridCellId = {
	sGridCellId : A,
	iAxis : parseInt(A.split("A")[0]),
	iOrdinal : parseInt(A.split("A")[1])
    };
    this.iRaElementLevel = parseInt(B.firstElementChild
	    .getAttribute(microstrategy.HTMLATTR_RA_LEVEL));
    this.bExpandable = B.firstElementChild.firstElementChild
	    .getAttribute(microstrategy.HTMLATTR_RA_EXPAND) == "1";
}
RaGridCell.prototype.updateExpdAndImg = function(B, C, A) {
    this.srcHtmlTableCell.firstElementChild.firstElementChild.setAttribute(
	    microstrategy.HTMLATTR_RA_EXPAND, A ? "0" : "1");
    this.srcHtmlTableCell.firstElementChild.firstElementChild.setAttribute(
	    "src", A ? C : B);
};
RaGridCell.prototype.hideCollapseExpandIcon = function() {
    this.srcHtmlTableCell.getElementsByTagName("span")[0].style.visibility = "hidden";
};
function RaGridRow(A) {
    this.srcHtmlTableRow = A;
}
RaGridRow.prototype.getFirstCellIdOrdinal = function() {
    var A = this.srcHtmlTableRow.getElementsByTagName("td")[0]
	    .getAttribute(microstrategy.HTMLATTR_GRIDCELL_ID);
    return parseInt(A.split("A")[1]);
};
RaGridRow.prototype.getFirstCellRaLvl = function() {
    return parseInt(this.srcHtmlTableRow.getElementsByTagName("span")[0]
	    .getAttribute(microstrategy.HTMLATTR_RA_LEVEL));
};
RaGridRow.prototype.updateCollapseTime = function(A) {
    var B = parseInt(this.srcHtmlTableRow
	    .getAttribute(microstrategy.HTMLATTR_RA_COLLAPSE_TIME)
	    || "0");
    this.srcHtmlTableRow.setAttribute(microstrategy.HTMLATTR_RA_COLLAPSE_TIME,
	    B + (A ? 1 : -1));
};
RaGridRow.prototype.isHidden = function() {
    return (this.srcHtmlTableRow.style.display == "none");
};
RaGridRow.prototype.isCollapseTimeCleared = function() {
    var A = parseInt(this.srcHtmlTableRow
	    .getAttribute(microstrategy.HTMLATTR_RA_COLLAPSE_TIME)
	    || "0");
    return A <= 0;
};
RaGridRow.prototype.updateDisplayStatus = function(A) {
    this.srcHtmlTableRow.style.display = (A ? "" : "none");
};
RaGridRow.prototype.findCellsWithTargetIdOrdinal = function(A) {
    return microstrategy.findChildrenWithAtt(this.srcHtmlTableRow, "td", "i", 1
	    + "A" + A);
};
mstrTreeImplScript = true;
mstrTreeImpl.prototype = new mstrBoneImpl();
mstrTreeImpl.prototype.path = "";
mstrTreeImpl.prototype.selections = null;
mstrTreeImpl.prototype.onload = function(B) {
    try {
	this.initBone();
	this.elem.onmousedown = new Function("e", "return " + this.path
		+ ".onmousedown(e);");
	this.getSelections();
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrTreeImpl.prototype.onmousedown = function(G) {
    try {
	if (!G) {
	    G = window.event;
	}
	this.getSelections();
	var F = getEventTarget(G);
	if (F) {
	    if (F.tagName.toLowerCase() == "img"
		    || (F.tagName.toLowerCase() == "span")
		    && !F.getAttribute(microstrategy.HTMLATTR_DSS_ID)) {
		F = F.parentNode;
	    }
	    if (this.selections != null) {
		this.selections.clickedSrc = F;
	    }
	    switch (F.tagName.toLowerCase()) {
	    case "span":
		if (this.selections != null
			&& F.getAttribute(microstrategy.HTMLATTR_DSS_ID)) {
		    if (this.selections.isSelected(F)) {
			if (G.ctrlKey) {
			    if (typeof (mstr) != "undefined") {
				this.attachWinListener(this.selections,
					"mouseup", "ondeselect");
			    } else {
				document.onmouseup = new Function("e",
					"return " + this.selections.path
						+ ".ondeselect(e);");
			    }
			}
		    } else {
			if (!G.ctrlKey) {
			    this.selections.clear();
			}
			this.selections.add(F);
		    }
		    if (this.selections.onmousedown) {
			return this.selections.onmousedown(G);
		    }
		}
		break;
	    case "li":
		var H = F.className;
		if (H && (H == "mstrTreeOpen" || H == "mstrTreeClosed")) {
		    var C = microstrategy.findChildWithAtt(F, "span", "oty",
			    "12");
		    var A = C && C.getAttribute("oid"), B = microstrategy
			    .findChildWithAtt(F, "ul", "af", "1");
		    if (B) {
			B.className = "loading";
			var E = this;
			mstr.$XHR
				.request(
					mstrConfig.taskURL,
					{
					    taskId : "getAttributeForms",
					    styleName : "MojoAttributeStyle",
					    attributeID : A,
					    displayedForms : 0
					},
					{
					    success : function(K) {
						var M = K.fms;
						for ( var J = 0; J < M.length; J++) {
						    var L = M[J];
						    if (!L.itf) {
							continue;
						    }
						    var I = document
							    .createElement("li");
						    I.innerHTML = "<nobr><span id="
							    + E._nextId()
							    + " ds="
							    + L.n
							    + " oid="
							    + L.did
							    + " oty="
							    + L.t
							    + " title="
							    + L.n
							    + '><img border=0 align=absmiddle src="../images/formli.png" alt="">&nbsp;'
							    + L.n
							    + "</span></nobr>";
						    B.appendChild(I);
						}
						B.removeAttribute("af");
						B.className = "";
					    }
					});
		    }
		    if (F.className == "mstrTreeOpen") {
			this.collapseNode(F);
		    } else {
			this.expandNode(F);
		    }
		    break;
		}
	    default:
		if (this.selections != null) {
		    this.selections.clear();
		}
	    }
	}
	return false;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrTreeImpl.prototype._nextId = function() {
    var B = this.elem.getAttribute("pfx") || "", A = B
	    + this.elem.getElementsByTagName("span").length;
    return A;
};
mstrTreeImpl.prototype.addNode = function(C, J) {
    var H = this.elem.firstChild;
    if (H) {
	if (microstrategy.findChildWithAtt(H, "span", "oid", C
		.getAttribute("oid"))) {
	    return;
	}
	var A = C.getAttribute("oty") == microstrategy.DSSTYPE_ATTRIBUTE;
	C.id = this._nextId();
	C.className = "mstrTreeStrong";
	C.innerHTML = '<img border="0" align="absmiddle" src="../images/'
		+ (A ? "attributeli.png" : "metricli.png") + '" alt="">&nbsp;'
		+ C.getAttribute("ds");
	var I = document.createElement("li");
	I.className = A ? "mstrTreeClosed" : "";
	var D = document.createElement("nobr");
	D.appendChild(C);
	I.appendChild(D);
	H.appendChild(I);
	if (A) {
	    var B = document.createElement("ul");
	    B.style.display = "none";
	    if (!J) {
		B.setAttribute("af", "1");
	    } else {
		for ( var E = 0; E < J.length; E++) {
		    var G = J[E];
		    var F = document.createElement("li");
		    F.innerHTML = "<nobr><span ds="
			    + G.n
			    + " oid="
			    + G.dssid
			    + " oty="
			    + G.ty
			    + " title="
			    + G.n
			    + '><img border=0 align=absmiddle src="../images/formli.png" alt="">&nbsp;'
			    + G.n + "</span></nobr>";
		    B.appendChild(F);
		}
	    }
	    I.appendChild(B);
	}
    }
};
mstrTreeImpl.prototype.updateAttForms = function() {
    var xhr = this.xhr;
    switch (xhr.readyState) {
    case 4:
	if (xhr.status == 200 && !xhr.cancelled) {
	    var txt = xhr.responseText;
	    if (txt) {
		try {
		    var rsData = eval("(" + txt + ")");
		} catch (ex) {
		}
	    }
	    //console.log(txt);
	} else {
	    if (xhr.status >= 400) {
		alert(xhr.status + " : " + xhr.statusText);
	    }
	}
	break;
    default:
	break;
    }
};
mstrTreeImpl.prototype.collapseNode = function(B) {
    try {
	if (B.tagName.toLowerCase() == "li") {
	    B.className = "mstrTreeClosed";
	    if (B.lastChild && B.lastChild.tagName.toLowerCase() == "ul") {
		B.lastChild.style.display = "none";
	    }
	}
	return true;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrTreeImpl.prototype.expandNode = function(B) {
    try {
	if (B.tagName.toLowerCase() == "li") {
	    B.className = "mstrTreeOpen";
	    if (B.lastChild && B.lastChild.tagName.toLowerCase() == "ul") {
		B.lastChild.style.display = "block";
	    }
	}
	return true;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrTreeImpl.prototype.getSelections = function() {
    try {
	if (this.selections == null && this.parentBone != null
		&& this.parentBone.selections != null) {
	    this.selections = this.parentBone.selections;
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
function mstrTreeImpl(A) {
    this.inherits = mstrBoneImpl;
    this.inherits(A);
    this.inherits = null;
    return this;
}
microstrategy.HTMLATTR_MASKEDOBJECT = "MB";
microstrategy.HTMLATTR_MASKFOR = "MASKFOR";
microstrategy.HTMLATTR_MASKFOR_DELIM = ",";
mstrMaskImpl.prototype = new mstrBoneImpl();
mstrMaskImpl.prototype.elem = null;
mstrMaskImpl.prototype.img = null;
mstrMaskImpl.prototype.borderWidth = 3;
mstrMaskImpl.prototype.onload = function(B) {
    try {
	this.maskedBone = B;
	this.initElem();
	this.img.onmouseover = new Function("this.style.borderWidth = '"
		+ this.borderWidth + "px';");
	this.img.onmouseout = new Function("this.style.borderWidth = '0px';");
	if (this.maskedBone) {
	    this.maskfor = (B.maskFor) ? microstrategy.HTMLATTR_MASKFOR_DELIM
		    + this.maskedBone.maskFor
		    + microstrategy.HTMLATTR_MASKFOR_DELIM : "";
	    this.onmaskedobjectresize();
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrMaskImpl.prototype.onmaskedobjectresize = function(B, A) {
    try {
	if (this.maskedBone && this.maskedBone.maskArea) {
	    var D = 2 * this.borderWidth;
	    B = (B > D ? B : Math
		    .max(7, getObjHeight(this.maskedBone.maskArea)))
		    - D;
	    A = (A > D ? A : Math.max(7, this.maskedBone.maskArea.scrollWidth))
		    - D;
	    this.img.style.height = B + "px";
	    this.img.style.width = A + "px";
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrMaskImpl.prototype.initElem = function() {
    try {
	var C = document.createElement("div");
	C.className = "mstrMask";
	this.elem = C;
	var A = document.createElement("img");
	A.className = "mstrMaskedImage";
	A.src = microstrategy.FOLDER_IMAGES + "1ptrans.gif";
	A.setAttribute(microstrategy.HTMLATTR_OBJTYPE,
		microstrategy.OBJTYPE_MASK);
	if (this.maskedBone) {
	    A.setAttribute(microstrategy.HTMLATTR_MASKEDOBJECT,
		    this.maskedBone.id);
	    A
		    .setAttribute(microstrategy.HTMLATTR_POINTS_TO,
			    this.maskedBone.id);
	}
	this.img = A;
	this.elem.appendChild(this.img);
	if (this.maskedBone.maskArea.childNodes.length > 0) {
	    this.maskedBone.maskArea.insertBefore(this.elem,
		    this.maskedBone.maskArea.firstChild);
	} else {
	    this.maskedBone.maskArea.appendChild(this.elem);
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrMaskImpl.prototype.toggle = function(A, B) {
    try {
	if (!this.elem) {
	    return;
	}
	this.elem.style.display = (A && this.maskfor
		.indexOf(microstrategy.HTMLATTR_MASKFOR_DELIM + B
			+ microstrategy.HTMLATTR_MASKFOR_DELIM) > -1) ? "block"
		: "none";
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
function mstrMaskImpl() {
    return this;
}
mstrReportFrameImplScript = true;
mstrReportFrameImpl.prototype = new mstrBoneImpl();
mstrReportFrameImpl.prototype.onload = function() {
    try {
	this.initBone();
	if (mstrApp !== undefined
		&& (microstrategy.DISPLAY_MODE !== microstrategy.DESIGN_MODE)) {
	    mstrLocalStorage.addScreenshot(mstrApp.getLastMsgRecoveryInfo(),
		    "mstrWebContents");
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrReportFrameImpl.prototype.oneditorclose = function(A) {
    try {
	switch (A) {
	case "rfe_pane":
	case "rle_pane":
	case "vfep_pane":
	    this.adjustFilterButton(true);
	    break;
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrReportFrameImpl.prototype.adjustFilterButton = function(B) {
    try {
	var C = microstrategy.findChildWithAtt(this.elem, "input",
		microstrategy.HTMLATTR_CMD_ID, "toggleFilters");
	if (C == null) {
	    C = microstrategy.findChildWithAtt(document.body, "span",
		    microstrategy.HTMLATTR_CMD_ID, "dmFilters");
	}
	if (C) {
	    if (B) {
		C.className = mstrToolbarImpl.ICON;
		C.setAttribute("open", "0");
	    } else {
		C.className = mstrToolbarImpl.ENABLED;
		C.setAttribute("open", "1");
	    }
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrReportFrameImpl.prototype.toggleFilterViewers = function(E, B) {
    try {
	var F = microstrategy.bone("rfe_pane");
	var A = microstrategy.bone("rle_pane");
	var D = microstrategy.bone("vfep_pane");
	if (B) {
	    this.closeFilterEditor(F, "rfe");
	    this.closeFilterEditor(A, "rle");
	    this.closeFilterEditor(D, "vfep");
	} else {
	    if (!F) {
		microstrategy.toggleEditor("rfe_pane", "rfe", !D);
	    }
	    if (!A) {
		microstrategy.toggleEditor("rle_pane", "rle", !D);
	    }
	    if (!D) {
		microstrategy.toggleEditor("vfep_pane", "vfep");
	    }
	}
	if (B && E != null) {
	    E.value = "[Show Report Filters]";
	    E.setAttribute("open", "0");
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrReportFrameImpl.prototype.closeFilterEditor = function(E, C) {
    try {
	if (E) {
	    E.closeEditor();
	} else {
	    var B = microstrategy.updateManager;
	    if (B) {
		var A = new Array();
		A.push(B.createActionObject(this, mstrUpdateManager.SHOW_BEAN,
			microstrategy.servletName + "."
				+ microstrategy.pageName, [ "5017", "5018" ], [
				"false", C ], []));
		microstrategy.updateManager.add(A, true);
	    }
	}
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
function mstrReportFrameImpl(A) {
    this.inherits = mstrBoneImpl;
    this.inherits(A);
    delete this.inherits;
    return this;
}
mstrPickerImplScript = true;
mstrPickerImpl.prototype = new mstrBoneImpl();
mstrPickerImpl.prototype.pulldownName = "";
mstrPickerImpl.prototype.targetCombodown = "";
mstrPickerImpl.prototype.onload = function() {
    try {
	this.currentPicker = null;
	this.initPulldown();
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrPickerImpl.prototype.initPulldown = function() {
    var C = new Function("e", "return microstrategy.bone('" + this.id
	    + "').togglePicker(e);");
    var B = document.getElementById(this.pulldownName);
    if (!B) {
	return;
    }
    for ( var A = 0; A < B.childNodes.length; A++) {
	if (B.childNodes[A].tagName
		&& B.childNodes[A].tagName.toLowerCase() == "span") {
	    B.childNodes[A].onclick = C;
	}
    }
};
mstrPickerImpl.prototype.execPicker = function(C, F) {
    try {
	var E = true;
	var B = this.getAppliesTo();
	var G = F.getAttribute(microstrategy.HTMLATTR_CMD_VALUE);
	if (!G) {
	    G = C.getAttribute(microstrategy.HTMLATTR_CMD_VALUE);
	}
	var A = F.getAttribute(microstrategy.HTMLATTR_CMD_ID);
	if (!A) {
	    A = C.getAttribute(microstrategy.HTMLATTR_CMD_ID);
	}
	if (B && A && B.commands.queryEnabled(A)) {
	    E = B.commands.exec(A, G);
	}
	return E;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrPickerImpl.prototype.getAppliesTo = function(B) {
    try {
	if (this.appliesTo) {
	    var B = microstrategy.bone(this.appliesTo);
	    return B;
	}
	return null;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrPickerImpl.prototype.togglePicker = function(E) {
    try {
	if (!E) {
	    E = window.event;
	}
	var D = getEventTarget(E);
	var B = "";
	if (D.getAttribute(microstrategy.HTMLATTR_CMD_ID) == null) {
	    this.targetCombodown = findTarget(D, microstrategy.HTMLATTR_CMD_ID);
	    B = findTarget(D, microstrategy.HTMLATTR_CMD_ID).className;
	} else {
	    B = D.className;
	}
	if (D && B.indexOf("disabled") == -1) {
	    var F = D.getAttribute(microstrategy.HTMLATTR_CMD_PICKER);
	    if (!F) {
		F = D.parentNode
			.getAttribute(microstrategy.HTMLATTR_CMD_PICKER);
	    }
	    var A = document.getElementById(F);
	    if (D.getAttribute(microstrategy.HTMLATTR_SUBOBJTYPE) == microstrategy.SUBOBJTYPE_BTN_HANDLE) {
		if (B.indexOf("Selected") == -1) {
		    this.targetCombodown.className = "mstrCombodownSelected";
		}
		dropDown.togglePicker(true, F, D.parentNode, this);
	    } else {
		this.execPicker(A, D);
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return false;
};
mstrPickerImpl.prototype.closePicker = function(B) {
    try {
	dropDown.closePicker(B, this);
	this.targetCombodown.className = "mstrCombodown";
	return true;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrPickerImpl.prototype.ondocumentclick = function(B) {
    try {
	if (!B) {
	    B = window.event;
	}
	if (this.currentPicker) {
	    this.closePicker(B);
	}
    } catch (A) {
	microstrategy.errors.log(A);
	alert(A);
    }
};
mstrPickerImpl.setPickerValues = function(D, F, G) {
    try {
	if (D) {
	    D = "pkr" + D;
	}
	var J = F.getElementsByTagName("span");
	for ( var E = 0, B = J.length; E < B; E++) {
	    var H = J[E];
	    var I = true;
	    if (G) {
		I = microstrategy
			.isValueInFilter(
				G,
				H
					.getAttribute(microstrategy.HTMLATTR_FILTER_VALUE),
				H
					.getAttribute(microstrategy.HTMLATTR_FILTER_COMPARISON));
		var A = H.getAttribute(microstrategy.HTMLATTR_FILTER_TYPE);
		if (!A || A == 0) {
		    H.style.display = (I) ? "block" : "none";
		} else {
		    H.className = (I) ? "" : "disabled";
		}
	    }
	    if (I && H.getAttribute("id") == D) {
		H.className = "selected";
		F.selected = H;
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
function mstrPickerImpl(A) {
    this.inherits = mstrBoneImpl;
    this.inherits(A);
    this.inherits = null;
    return this;
}
mstrRWUnitBoneImplScript = true;
mstrRWUnitBoneImpl.prototype = new mstrBoneImpl();
mstrRWUnitBoneImpl.prototype.toolbar = null;
mstrRWUnitBoneImpl.prototype.hasToolbar = true;
mstrRWUnitBoneImpl.prototype.sibRWUnits = null;
mstrRWUnitBoneImpl.prototype.activeRWUnit = null;
mstrRWUnitBoneImpl.prototype.RWUnitId = null;
mstrRWUnitBoneImpl.prototype.docViewer = null;
mstrRWUnitBoneImpl.prototype.toolbarShown = false;
mstrRWUnitBoneImpl.prototype.boneSelected = false;
mstrRWUnitBoneImpl.prototype.isMouseOver = false;
mstrRWUnitBoneImpl.prototype.showTBSelected = true;
mstrRWUnitBoneImpl.prototype.toolbar_pos_x = null;
mstrRWUnitBoneImpl.prototype.toolbar_pos_y = null;
mstrRWUnitBoneImpl.prototype.toolbarTimer = null;
mstrRWUnitBoneImpl.prototype.isLocked = false;
mstrRWUnitBoneImpl.prototype.TIME_DELAY_SHOW_TOOLBAR = 0;
mstrRWUnitBoneImpl.prototype.TIME_DELAY_SHOW_TOOLBAR_SHORT = 0;
mstrRWUnitBoneImpl.prototype.TIME_DELAY_HIDE_TOOLBAR = 9;
mstrRWUnitBoneImpl.prototype.stickToolbar = false;
mstrRWUnitBoneImpl.prototype.elemTagName = "div";
mstrRWUnitBoneImpl.prototype.onload = function() {
    try {
	mstrBoneImpl.prototype.onload.call(this);
	this.docViewer = microstrategy.bone("rwb_viewer");
	this.activeRWUnit = microstrategy.findAncestor(this.elem);
	if (this.activeRWUnit) {
	    this.RWUnitId = this.activeRWUnit.getAttribute("id");
	}
	this.initToolbar();
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrRWUnitBoneImpl.prototype.initToolbar = function() {
    try {
	if (this.checkToolbarCondition(true)) {
	    this.attachToolbarEvents();
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrRWUnitBoneImpl.prototype.checkToolbarCondition = function(A) {
    try {
	if (this.docViewer == null) {
	    this.getDocViewer();
	}
	if (this.docViewer) {
	    return this.docViewer.isEditableViewModeEplus()
		    && (A || getObjWidth(this.activeRWUnit) != 0 || getObjHeight(this.activeRWUnit) != 0);
	} else {
	    return false;
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrRWUnitBoneImpl.prototype.switchActiveRWUnit = function(C) {
    try {
	if (!C) {
	    return;
	}
	var A = C.split("_");
	this.activeRWUnit = document.getElementsByName(this.RWUnitId)[A[1]];
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrRWUnitBoneImpl.prototype.switchActiveElem = function(C) {
    try {
	var B = microstrategy.findChildWithAtt(this.activeRWUnit,
		this.elemTagName, "id", this.id);
	if (B) {
	    this.elem = B;
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrRWUnitBoneImpl.prototype.getTitleAndClassOfFirstToolbar = function() {
    var A = this.isLocked, B = {};
    B.title = microstrategy.descriptors.getDescriptor(A ? "5604" : "5773");
    B.className = A ? "mstrLocked" : "select";
    return B;
};
mstrRWUnitBoneImpl.prototype.createToolbarBody = function() {
    try {
	var D = document.createElement("div");
	if (this.docViewer.isEditableViewModeEplus()) {
	    var B = document.createElement("div");
	    B.setAttribute("id", "select_icon");
	    B.setAttribute("targetBoneId", this.id);
	    var A = this.getTitleAndClassOfFirstToolbar();
	    B.setAttribute("title", A.title);
	    B.className = A.className;
	    B.onmousedown = new Function("e", "return  microstrategy.bone('"
		    + this.id + "').getDocSelections().onmousedown(e);");
	    D.appendChild(B);
	}
	return D;
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrRWUnitBoneImpl.prototype.createToolbar = function() {
    try {
	var C = this.createToolbarBody();
	C.id = "toolbar_" + this.id;
	C.className = "floatingToolbar";
	C.onmouseover = new Function("e", "return microstrategy.bone('"
		+ this.id + "').onmouseover(e);");
	C.onmouseout = new Function("e", "return microstrategy.bone('"
		+ this.id + "').onmouseout(e);");
	var A = getElementById("floatingToolbars");
	if (A) {
	    A.appendChild(C);
	}
	this.toolbar = C;
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrRWUnitBoneImpl.prototype.computeToolbarPos = function(B) {
    try {
	this.toolbar_pos_x = getObjSumLeft(this.activeRWUnit)
		- getObjSumLeft(this.docViewer.doc.elem) - (bIsIE4 ? 2 : 1);
	this.toolbar_pos_y = this.getObjSumTopScrolled(this.activeRWUnit)
		- this.getObjSumTopScrolled("page")
		- getObjHeight(this.toolbar) + (mstr.utils.ISFF ? 1 : 0);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrRWUnitBoneImpl.prototype.showToolbar = function(A) {
    try {
	if (!this.checkToolbarCondition()) {
	    return;
	}
	this.toolbar = getObj("toolbar_" + this.id);
	if (!this.toolbar) {
	    this.createToolbar();
	}
	this.toolbar.style.display = "block";
	this.computeToolbarPos();
	this.toolbar_pos_x = Math.max(this.toolbar_pos_x, 0);
	this.toolbar_pos_y = Math.max(this.toolbar_pos_y, 0);
	this.toolbar.style.width = this.toolbar.clientWidth + "px";
	moveObjTo(this.toolbar, this.toolbar_pos_x, this.toolbar_pos_y);
	this.toolbarShown = true;
	this.toolbar.setAttribute("shown", 1);
	if (A) {
	    this.stickToolbar = true;
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrRWUnitBoneImpl.prototype.showToolbarWithDelay = function(A) {
    try {
	if (this.toolbarShown) {
	    return null;
	}
	var C = this;
	var D = function() {
	    var E = microstrategy.bone(C.id);
	    if (E && document.getElementById(C.id)) {
		E.showToolbar();
	    }
	};
	return window.setTimeout(D, A);
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrRWUnitBoneImpl.prototype.resetToolbar = function() {
    var A = this.stickToolbar;
    var B = this.toolbarShown;
    if (B) {
	this.stickToolbar = false;
	this.hideToolbar(true);
    }
    if (this.toolbar) {
	this.toolbar.parentNode.removeChild(this.toolbar);
    }
    this.toolbar = null;
    if (B) {
	this.showToolbar(A);
    }
};
mstrRWUnitBoneImpl.prototype.hideToolbar = function(C) {
    try {
	if (this.stickToolbar) {
	    return;
	}
	var A = (C == true || C == "true");
	if (!A
		&& ((this.showTBSelected && this.boneSelected) || this.isMouseOver)) {
	    return;
	}
	if (this.toolbar) {
	    this.toolbar.style.display = "none";
	    this.toolbarShown = false;
	    this.toolbar.setAttribute("shown", 0);
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrRWUnitBoneImpl.prototype.hideToolbarWithDelay = function(A) {
    try {
	if (!this.toolbarShown) {
	    return null;
	}
	return window
		.setTimeout("if (microstrategy.bone('" + this.id
			+ "')) microstrategy.bone('" + this.id
			+ "').hideToolbar();", A);
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrRWUnitBoneImpl.prototype.syncToolbarElem = function(B) {
    try {
	this.switchActiveRWUnit(B);
	this.switchActiveElem(B);
	this.attachToolbarEvents();
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrRWUnitBoneImpl.prototype.syncToolbarPos = function() {
    try {
	this.computeToolbarPos();
	moveObjTo(this.toolbar, this.toolbar_pos_x, this.toolbar_pos_y);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrRWUnitBoneImpl.prototype.attachToolbarEvents = function() {
    try {
	this.sibRWUnits = document.getElementsByName(this.RWUnitId);
	var A = new Function("e", "microstrategy.bone('" + this.id
		+ "').onmouseover(e);");
	var D = new Function("e", "microstrategy.bone('" + this.id
		+ "').onmouseout(e); ");
	for ( var B = 0; B < this.sibRWUnits.length; B++) {
	    this.sibRWUnits[B].onmouseover = A;
	    this.sibRWUnits[B].onmouseout = D;
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrRWUnitBoneImpl.prototype.sibBoneSelected = function() {
    try {
	return false;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrRWUnitBoneImpl.prototype.getObjSumTopScrolled = function(B) {
    try {
	var E = getObj(B);
	var F = 0;
	if (E && (E.getClientRects || E.getBoundingClientRect)) {
	    var A = (self == top) ? 0 : self.screenLeft;
	    if (E.getBoundingClientRect) {
		F = E.getBoundingClientRect().top;
	    } else {
		F = E.getClientRects()[0].top;
	    }
	    F = F - A - 2;
	    F += getDocumentScrollTop();
	    return Math.round(F);
	} else {
	    for ( var C = 0; (E); C++) {
		F += E.offsetTop;
		if (E.offsetParent && E.offsetParent.scrollTop
			&& E.offsetParent.tagName.toLowerCase() != "html") {
		    F -= E.offsetParent.scrollTop;
		}
		E = E.offsetParent;
	    }
	    return parseInt(F);
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return 0;
    }
};
mstrRWUnitBoneImpl.prototype.onboneaftermove = function(A, C) {
    try {
	if (A.indexOf("|" + this.RWUnitId + "|") > -1) {
	    if (this.toolbarShown) {
		if (C) {
		    this.syncToolbarElem(C);
		}
		if (this.toolbarShown) {
		    this.syncToolbarPos();
		}
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrRWUnitBoneImpl.prototype.onboneafterresize = function(B) {
    try {
	if (B.indexOf("|" + this.RWUnitId + "|") > -1) {
	    if (this.toolbarShown) {
		this.syncToolbarPos();
	    }
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrRWUnitBoneImpl.prototype.onboneselected = function(A, C) {
    try {
	if (!A || A.indexOf("|" + this.RWUnitId + "|") > -1) {
	    if (this.showTBSelected && this.checkToolbarCondition()) {
		this.boneSelected = true;
		if (C) {
		    this.switchActiveRWUnit(C);
		}
		if (this.toolbarTimer != null) {
		    window.clearTimeout(this.toolbarTimer);
		}
		this.toolbarTimer = this
			.showToolbarWithDelay(this.TIME_DELAY_SHOW_TOOLBAR_SHORT);
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrRWUnitBoneImpl.prototype.onbonedeselected = function(A) {
    try {
	if (!A || A.indexOf("|" + this.RWUnitId + "|") > -1) {
	    this.boneSelected = false;
	    window.clearTimeout(this.toolbarTimer);
	    this.toolbarTimer = this
		    .hideToolbarWithDelay(this.TIME_DELAY_HIDE_TOOLBAR);
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrRWUnitBoneImpl.prototype.onbonedeleted = function(B) {
    try {
	if (!B || B.indexOf("|" + this.RWUnitId + "|") > -1) {
	    this.boneSelected = false;
	    this.isMouseOver = false;
	    if (this.toolbarShown) {
		this.stickToolbar = false;
		this.hideToolbar();
	    }
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrRWUnitBoneImpl.prototype.onmouseover = function(D) {
    try {
	D = D || window.event;
	stopEventBubbling(D);
	var C = getEventTarget(D);
	if (this.isParentSelected() || !this.checkToolbarCondition()) {
	    return;
	}
	if (this.sibRWUnits && this.sibRWUnits.length > 1) {
	    var A = microstrategy.findAncestorWithAtt(C, "id", this.id);
	    if (A) {
		this.activeRWUnit = microstrategy.findAncestor(A);
	    }
	}
	this.isMouseOver = true;
	if (this.toolbarTimer != null) {
	    window.clearTimeout(this.toolbarTimer);
	}
	this.toolbarTimer = this
		.showToolbarWithDelay(this.TIME_DELAY_SHOW_TOOLBAR);
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrRWUnitBoneImpl.prototype.hideToolbarOnMouseOut = function() {
    try {
	this.isMouseOver = false;
	if ((this.showTBSelected && this.boneSelected)
		|| !this.checkToolbarCondition()) {
	    return;
	}
	window.clearTimeout(this.toolbarTimer);
	this.toolbarTimer = this
		.hideToolbarWithDelay(this.TIME_DELAY_HIDE_TOOLBAR);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrRWUnitBoneImpl.prototype.onmouseout = function(B) {
    try {
	this.hideToolbarOnMouseOut();
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrRWUnitBoneImpl.prototype.isParentSelected = function() {
    try {
	var B = microstrategy.findAncestorBone(this, "mstrPanelStack");
	return (B && B.boneSelected);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrRWUnitBoneImpl.prototype.getDocViewer = function() {
    try {
	return this.docViewer;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrRWUnitBoneImpl.prototype.getDocSelections = function() {
    try {
	if (!this.docViewer) {
	    this.getDocViewer();
	}
	if (this.docViewer && this.docViewer.doc
		&& this.docViewer.doc.selections) {
	    return this.docViewer.doc.selections;
	}
	return null;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
function mstrRWUnitBoneImpl(A) {
    this.inherits = mstrBoneImpl;
    this.inherits(A);
    delete this.inherits;
    return this;
}
mstrUpdateManager.prototype = new Object;
mstrUpdateManager.prototype.id = "bonesUpdateManager";
mstrUpdateManager.prototype.observer = null;
mstrUpdateManager.prototype.actions = {};
mstrUpdateManager.prototype.redoActions = [];
mstrUpdateManager.prototype.undoActions = [];
mstrUpdateManager.prototype.staticActions = [];
mstrUpdateManager.prototype.useIframe = false;
mstrUpdateManager.prototype.newWindow = false;
mstrUpdateManager.prototype.newWindowName = "_blank";
mstrUpdateManager.prototype.extraURL = "";
mstrUpdateManager.prototype.iframeTarget = "frameManager";
mstrUpdateManager.prototype.formAction = "";
mstrUpdateManager.prototype.OPTIMIZE_EVENTS = true;
mstrUpdateManager.prototype.ADD_EVENT_IDS = null;
mstrUpdateManager.prototype.optActions = [];
mstrUpdateManager.prototype.lastPosArray = [];
mstrUpdateManager.prototype.copyActions = {};
mstrUpdateManager.prototype.cachedActionCollection = null;
mstrUpdateManager.prototype.queueActions = false;
mstrUpdateManager.prototype.forceSubmitAfterQueue = false;
mstrUpdateManager.prototype.ctlCurElementsPosition = null;
mstrUpdateManager.prototype.currentPanelPosition = null;
mstrUpdateManager.prototype.hiddenInputs = null;
mstrUpdateManager.prototype.submittedForm = null;
mstrUpdateManager.prototype.submittedXhr = false;
mstrUpdateManager.prototype.newActions = false;
mstrUpdateManager.prototype.sTimeOutID = null;
mstrUpdateManager.prototype.callback = null;
mstrUpdateManager.UNIT_SEPARATOR = ",";
mstrUpdateManager.ITEM_SEPARATOR = ";";
mstrUpdateManager.UPDATE_LATER = "0";
mstrUpdateManager.UPDATE_NOW = "1";
mstrUpdateManager.STATIC_ACTION = -1;
mstrUpdateManager.ARG_KEY_SEPARATOR = "_";
mstrUpdateManager.addEvent = function(A) {
    if (!mstrUpdateManager.actions) {
	mstrUpdateManager.actions = {};
    }
    for ( var B in A) {
	var C = A[B].i;
	mstrUpdateManager[B] = C;
	mstrUpdateManager.actions[C] = {
	    eventID : C,
	    paramName : A[B].n,
	    paramID : A[B].p
	};
    }
    mstrUpdateManager.newActions = true;
};
mstrUpdateManager.prototype.addSingleAction = function(B) {
    try {
	if (!this.cachedActionCollection) {
	    this.cachedActionCollection = [];
	}
	this.cachedActionCollection.push(B);
	this.newActions = true;
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrUpdateManager.prototype.getUseIFrame = function() {
    try {
	return this.useIframe;
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrUpdateManager.prototype.setUseIFrame = function(B) {
    try {
	this.useIframe = B;
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrUpdateManager.prototype.getNewWindowSetting = function() {
    try {
	return this.newWindow;
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrUpdateManager.prototype.setNewWindowSetting = function(B) {
    try {
	this.newWindow = B;
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrUpdateManager.prototype.addActionCollection = function(B) {
    try {
	if (!this.cachedActionCollection) {
	    this.cachedActionCollection = [];
	}
	this.cachedActionCollection = this.cachedActionCollection.concat(B);
	this.newActions = true;
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrUpdateManager.prototype.hasCachedActions = function() {
    try {
	return (this.cachedActionCollection && this.cachedActionCollection.length > 0);
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrUpdateManager.prototype.addCachedActions = function() {
    try {
	if (this.cachedActionCollection) {
	    this.queueActions = false;
	    this.add(this.cachedActionCollection, false);
	    this.cachedActionCollection = null;
	    if (this.forceSubmitAfterQueue) {
		this.flushAndSubmitChanges();
	    }
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrUpdateManager.prototype.killCachedActions = function() {
    try {
	if (this.cachedActionCollection) {
	    this.queueActions = false;
	    this.cachedActionCollection = null;
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrUpdateManager.prototype.add = function(C, A) {
    try {
	if (this.queueActions) {
	    if (C.length) {
		this.addActionCollection(C);
	    } else {
		this.addSingleAction(C);
	    }
	} else {
	    if (A) {
		this.staticActions.push(C);
		this.redoActions.unshift(mstrUpdateManager.STATIC_ACTION);
		this.newActions = true;
	    } else {
		this.clearRedoActions();
		this.undoActions.push(C);
		this.newActions = true;
	    }
	    microstrategy.eventManager.notifyOrphanBones(
		    "onupdatemanagerchange", "add", C);
	    if (this.observer) {
		this.observer.notifyAll("onupdatemanagerchange");
	    }
	}
	return true;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrUpdateManager.prototype.addURL = function(A) {
    try {
	if (A) {
	    if (this.extraURL.length > 0) {
		this.extraURL += "&" + A;
	    } else {
		this.extraURL = A;
	    }
	}
	return true;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrUpdateManager.prototype.replaceURL = function(A, D) {
    try {
	if (this.extraURL.length > 0) {
	    if (this.extraURL.indexOf(A) > -1) {
		var E = this.extraURL
			.substring(0, this.extraURL.indexOf(A) - 2);
		var C = this.extraURL.indexOf("&", this.extraURL.indexOf(A));
		if (E == null || E.length == 0) {
		    E = "";
		} else {
		    E += "&";
		}
		if (C > this.extraURL.indexOf(A)) {
		    this.extraURL = E
			    + this.extraURL.substring(C + 1,
				    this.extraURL.length) + "&" + A + "=" + D;
		} else {
		    this.extraURL = A + "=" + D;
		}
	    } else {
		this.extraURL += "&" + A + "=" + D;
	    }
	} else {
	    this.extraURL = A + "=" + D;
	}
	return true;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrUpdateManager.prototype.processUndoRedo = function(C, D) {
    try {
	while (C.length > 0) {
	    var B = C.pop();
	    D.push(B);
	    if (B != mstrUpdateManager.STATIC_ACTION) {
		return B;
	    }
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return null;
};
mstrUpdateManager.prototype.broadcastUpdate = function() {
    try {
	while (source.length > 0) {
	    var B = source.pop();
	    target.push(B);
	    if (B != mstrUpdateManager.STATIC_ACTION) {
		return B;
		break;
	    }
	}
	return null;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrUpdateManager.prototype.undo = function(C) {
    try {
	var D = false;
	C = C || 1;
	for ( var A = 0; A < C; A++) {
	    var F = this.processUndoRedo(this.undoActions, this.redoActions);
	    if (F) {
		for ( var B = 0; B < F.length; B++) {
		    microstrategy.eventManager.notifyOrphanBones("onundo",
			    new mstrUndoObj(F[B]));
		}
		D = true;
	    }
	}
	if (D) {
	    microstrategy.eventManager.notifyOrphanBones(
		    "onupdatemanagerchange", "undo");
	}
	if (this.observer) {
	    this.observer.notifyAll("onupdatemanagerchange");
	}
	return true;
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrUpdateManager.prototype.redo = function() {
    try {
	var C = this.processUndoRedo(this.redoActions, this.undoActions);
	if (C) {
	    for ( var A = 0; A < C.length; A++) {
		microstrategy.eventManager.notifyOrphanBones("onredo",
			new mstrRedoObj(C[A]));
	    }
	    microstrategy.eventManager.notifyOrphanBones(
		    "onupdatemanagerchange", "redo");
	    if (this.observer) {
		this.observer.notifyAll("onupdatemanagerchange");
	    }
	}
	return true;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrUpdateManager.prototype.getPendingEventsForTask = function(A) {
    var E;
    var J;
    var B = 0;
    var N = [];
    var D = A.split(".");
    var C = D[D.length - 1];
    var F = this.optActions;
    this.optActions = [];
    if (this.OPTIMIZE_EVENTS) {
	for ( var I = 0; I < this.undoActions.length; I++) {
	    var G = this.undoActions[I];
	    if (G == mstrUpdateManager.STATIC_ACTION) {
		G = this.staticActions[B];
		B++;
	    }
	    for ( var M = 0; M < G.length; M++) {
		var H = G[M];
		var K = H.beanPath;
		if (K && K.indexOf(A) == 0) {
		    H.beanPath = K.substring(K.indexOf(C));
		    H.beanPath = microstrategy.servletName + "." + H.beanPath;
		    this.createOptimizedArray(H);
		    G.splice(M, 1);
		    M = M - 1;
		}
	    }
	}
	for ( var I = 0; I < this.optActions.length; I++) {
	    if (this.optActions[I].id != null) {
		N.push(this.createEventForAction(this.optActions[I]));
	    }
	}
	this.postOptimizationCleanup();
    } else {
	for ( var I = 0; I < this.undoActions.length; I++) {
	    var G = this.undoActions[I];
	    if (G == mstrUpdateManager.STATIC_ACTION) {
		G = this.staticActions[B];
		B++;
	    }
	    for ( var M = 0; M < G.length; M++) {
		var H = G[M];
		var K = H.beanPath;
		if (K && K.indexOf(A) == 0) {
		    H.beanPath = K.substring(K.indexOf(C));
		    H.beanPath = microstrategy.servletName + "." + H.beanPath;
		    N.push(this.createEventForAction(H));
		    G.splice(M, 1);
		    M = M - 1;
		}
	    }
	}
    }
    this.optActions = F;
    if (N.length > 0) {
	var L = new mstrSerializer();
	L.addValues(N);
	return L.getState();
    } else {
	return "";
    }
};
mstrUpdateManager.prototype.flushChanges = function(I) {
    try {
	var B;
	var E;
	var A = 0;
	var J = [];
	this.clearRedoActions();
	if (this.extraURL.length > 0) {
	    addURLAsHiddenInputsToForm(I, this.extraURL);
	    this.extraURL = "";
	}
	if (this.OPTIMIZE_EVENTS) {
	    for ( var F = 0; F < this.undoActions.length; F++) {
		var D = this.undoActions[F];
		if (D == mstrUpdateManager.STATIC_ACTION) {
		    D = this.staticActions[A];
		    A++;
		}
		for ( var H = 0; H < D.length; H++) {
		    this.createOptimizedArray(D[H]);
		}
	    }
	    for ( var F = 0; F < this.optActions.length; F++) {
		if (this.optActions[F].id != null) {
		    J.push(this.createEventForAction(this.optActions[F]));
		}
	    }
	    this.postOptimizationCleanup();
	} else {
	    for ( var F = 0; F < this.undoActions.length; F++) {
		var D = this.undoActions[F];
		if (D == mstrUpdateManager.STATIC_ACTION) {
		    D = this.staticActions[A];
		    A++;
		}
		for ( var H = 0; H < D.length; H++) {
		    J.push(this.createEventForAction(D[H]));
		}
	    }
	}
	var G = new mstrSerializer();
	G.addValues(J);
	if (I.getAttribute("hasUpdateChanges") == "true") {
	    updateDynamicInput(I, mstrUpdateManager.multipleEventArgName, G
		    .getState());
	} else {
	    this.submittedForm = I;
	    this.hiddenInputs = [];
	    this.createHiddenInput(I, mstrUpdateManager.multipleEventArgName, G
		    .getState());
	    this.createHiddenInput(I, "evt", mstrUpdateManager.multipleEventID);
	    this
		    .createHiddenInput(I, "src",
			    mstrUpdateManager.multipleEventSrc);
	    this.createHiddenInput(I, mstrUpdateManager.multipleEventID, "1");
	    I.setAttribute("hasUpdateChanges", "true");
	}
	if (this.newWindow) {
	    I.target = this.newWindowName;
	}
	this.newActions = false;
	return true;
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrUpdateManager.prototype.flushChangesAsParams = function(G) {
    try {
	var B;
	var E;
	var A = 0;
	var J = [];
	this.clearRedoActions();
	if (this.extraURL.length > 0) {
	    UpdateHelper.addURLToParams(G, this.extraURL);
	    this.extraURL = "";
	}
	if (this.OPTIMIZE_EVENTS) {
	    for ( var F = 0; F < this.undoActions.length; F++) {
		var D = this.undoActions[F];
		if (D == mstrUpdateManager.STATIC_ACTION) {
		    D = this.staticActions[A];
		    A++;
		}
		for ( var I = 0; I < D.length; I++) {
		    this.createOptimizedArray(D[I]);
		}
	    }
	    for ( var F = 0; F < this.optActions.length; F++) {
		if (this.optActions[F].id != null) {
		    J.push(this.createEventForAction(this.optActions[F]));
		}
	    }
	    this.postOptimizationCleanup();
	} else {
	    for ( var F = 0; F < this.undoActions.length; F++) {
		var D = this.undoActions[F];
		if (D == mstrUpdateManager.STATIC_ACTION) {
		    D = this.staticActions[A];
		    A++;
		}
		for ( var I = 0; I < D.length; I++) {
		    J.push(this.createEventForAction(D[I]));
		}
	    }
	}
	var H = new mstrSerializer();
	H.addValues(J);
	if (G.hasUpdateChanges == "true") {
	    G[mstrUpdateManager.multipleEventArgName] = H.getState();
	} else {
	    this.submittedXhr = true;
	    UpdateHelper.addAdditionalParam(G,
		    mstrUpdateManager.multipleEventArgName, H.getState());
	    UpdateHelper.addAdditionalParam(G, "evt",
		    mstrUpdateManager.multipleEventID);
	    UpdateHelper.addAdditionalParam(G, "src",
		    mstrUpdateManager.multipleEventSrc);
	    UpdateHelper.addAdditionalParam(G,
		    mstrUpdateManager.multipleEventID, "1");
	    G.hasUpdateChanges == "true";
	}
	if (this.newWindow) {
	    G.target = this.newWindowName;
	}
	this.newActions = false;
	return true;
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrUpdateManager.prototype.createHiddenInput = function(D, B, C) {
    var A = createHiddenInput(D, B, C);
    this.hiddenInputs.push(A);
};
mstrUpdateManager.prototype.postOptimizationCleanup = function(A) {
    if (this.fullScreenModePosition) {
	delete this.fullScreenModePosition;
    }
    if (this.lTbarBrowserSettingPosition) {
	delete this.lTbarBrowserSettingPosition;
    }
    if (this.ctlCurElementsPosition) {
	delete this.ctlCurElementsPosition;
    }
    if (this.currentPanelPosition) {
	delete this.currentPanelPosition;
    }
    if (this.widgetPropEdits) {
	delete this.widgetPropEdits;
    }
    this.optActions = [];
    this.lastPosArray = [];
};
mstrUpdateManager.prototype.createEventForAction = function(G) {
    try {
	var A = mstrUpdateManager.actions[G.id];
	var E = new mstrSerializer();
	E.addStr(A.eventID);
	E.addStr(G.beanPath + "." + A.eventID);
	var D = "";
	for ( var C = 0; C < G.newArgs.length; C++) {
	    actionID = G.argID[C];
	    for ( var B = 0; B < A.paramID.length; B++) {
		if (A.paramID[B] == actionID) {
		    if (false) {
			D += "<arg name='" + A.paramName[B] + "' v='"
				+ G.newArgs[C] + "' />";
		    }
		    if (G.argKey == null) {
			E.addStr(A.paramName[B]);
		    } else {
			E.addStr(A.paramName[B]
				+ mstrUpdateManager.ARG_KEY_SEPARATOR
				+ G.argKey);
		    }
		    E.addStr(G.newArgs[C]);
		    break;
		}
	    }
	}
	if (false) {
	    alert(D);
	}
	return E.getState();
    } catch (F) {
	microstrategy.errors.log(F);
	return false;
    }
};
mstrUpdateManager.prototype.flushAndSubmitChanges = function(C, H) {
    this.callback = H || {};
    var B = this, G = this.callback.success, F = this.callback.noRefresh;
    this.callback.success = function(I) {
	if (G) {
	    G(I);
	}
	if (!F && I && I.status == "6") {
	    B.refreshPage();
	}
    };
    try {
	if (useXHR && !C) {
	    mstrMsgBoxImpl.hideMessage(null, "controlSubmitButton");
	    var A = UpdateHelper.createParamsFromURL(this.getFormAction(),
		    this.useIframe && !this.newWindow);
	    this.flushing = true;
	    UpdateHelper.submitRequest(A);
	} else {
	    mstrMsgBoxImpl.hideMessage(null, "controlSubmitButton");
	    var D = createDynamicForm(this.getFormAction());
	    if (this.useIframe && !this.newWindow) {
		addURLAsHiddenInputsToForm(D, "iframe=true");
		D.target = this.iframeTarget;
	    }
	    this.flushing = true;
	    submitForm(D, C);
	}
	return true;
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrUpdateManager.prototype.acknowledgeRequest = function() {
    try {
	this.undoActions = [];
	this.redoActions = [];
	this.staticActions = [];
	this.optActions = [];
	this.lastPosArray = [];
	this.copyActions = {};
	this.newWindow = false;
	microstrategy.eventManager.notifyOrphanBones("onupdatemanagerchange");
	if (this.observer) {
	    this.observer.notifyAll("onupdatemanagerchange");
	}
	var B;
	if (this.submittedForm != null) {
	    for ( var A = 0; A < this.hiddenInputs.length; A++) {
		B = this.hiddenInputs[A];
		try {
		    this.submittedForm.removeChild(B);
		} catch (C) {
		    if ((C && C.code != 8)
			    && (C.number && C.number != -2147024809)) {
			throw (C);
		    }
		}
	    }
	    this.submittedForm.setAttribute("hasUpdateChanges", "false");
	    this.submittedForm = null;
	    this.hiddenInputs = null;
	    this.flushing = false;
	}
	if (this.submittedXhr) {
	    this.submittedXhr = false;
	    this.flushing = false;
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrUpdateManager.prototype.isFlushing = function() {
    return !!this.flushing;
};
mstrUpdateManager.prototype.acknowledgeReloadEnd = function() {
    if (this.observer) {
	this.observer.notifyAll("acknowledgeReloadEnd");
    }
};
mstrUpdateManager.prototype.getFixStateActions = function() {
    try {
	var E = [];
	for ( var B = 0; B < this.staticActions.length; B++) {
	    var D = this.staticActions[B];
	    for ( var A = 0; A < D.length; A++) {
		E.push(D[A]);
	    }
	}
	return E;
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrUpdateManager.prototype.hasChangesToSubmit = function() {
    try {
	return (this.undoActions.length > 0 || this.isRedoStatic() || (this.extraURL != null && this.extraURL.length > 0));
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrUpdateManager.prototype.hasNewChanges = function() {
    try {
	var A = this.newActions;
	this.newActions = false;
	return A;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrUpdateManager.prototype.clearRedoActions = function() {
    try {
	while (this.redoActions.length > 0) {
	    var B = this.redoActions.pop();
	    if (B == mstrUpdateManager.STATIC_ACTION) {
		this.undoActions.push(B);
	    }
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrUpdateManager.prototype.getLastAction = function() {
    try {
	return this.undoActions.pop();
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrUpdateManager.prototype.isRedoStatic = function() {
    try {
	var C = false;
	for ( var A = 0; A < this.redoActions.length; A++) {
	    if (this.redoActions[A] == mstrUpdateManager.STATIC_ACTION) {
		C = true;
		break;
	    }
	}
	return C;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrUpdateManager.prototype.anyNonStatic = function(B) {
    try {
	var A = (B) ? this.redoActions : this.undoActions;
	var E = false;
	for ( var C = 0; C < A.length; C++) {
	    if (A[C] != mstrUpdateManager.STATIC_ACTION) {
		E = true;
		break;
	    }
	}
	return E;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrUpdateManager.prototype.createActionObject = function(C, A, G, H, B, F, J,
	I) {
    try {
	var E = {};
	E.elem = C;
	E.id = A;
	E.beanPath = G;
	E.argID = H;
	E.newArgs = B;
	E.oldArgs = F;
	E.cachedArray = J;
	E.argKey = I;
	if (A == mstrUpdateManager.EDIT_PROPS) {
	    E.formatType = microstrategy.formatType;
	    E.argID.push("2048131");
	    E.newArgs.push(microstrategy.formatType);
	    E.oldArgs.push(microstrategy.formatType);
	}
	return E;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrUpdateManager.prototype.createOptimizedArray = function(G) {
    try {
	var I = G.id;
	if (!this.ADD_EVENT_IDS) {
	    this.ADD_EVENT_IDS = mstrUpdateManager.ADD_TEXT + "|"
		    + mstrUpdateManager.ADD_LINE + "|"
		    + mstrUpdateManager.ADD_SHAPE + "|"
		    + mstrUpdateManager.ADD_TEMPLATE + "|"
		    + mstrUpdateManager.ADD_DATASET_TEMPLATE + "|"
		    + mstrUpdateManager.ADD_IMAGE + "|"
		    + mstrUpdateManager.ADD_HTML_CONTAINER + "|"
		    + mstrUpdateManager.ADD_PANEL_STACK + "|"
		    + mstrUpdateManager.CTRL_ADD + "|";
	}
	var N = (G.elem) ? G.elem.id : null;
	var B = N;
	if (I == mstrUpdateManager.SET_REPORT_PROPERTY_VALUES) {
	    for ( var K = 0; K < G.argID.length; K++) {
		if (G.argID[K] == "4146") {
		    B = N + G.newArgs[K].split("!")[0]
			    + G.newArgs[K].split("!")[1]
			    + G.newArgs[K].split("!")[2];
		    break;
		}
	    }
	}
	var P;
	if (I == mstrUpdateManager.EDIT_PROPS) {
	    for ( var K = 0, D = G.argID.length; K < D; K++) {
		if (G.argID[K] == "2048035") {
		    var J = G.newArgs[K]
			    .split(mstrUpdateManager.UNIT_SEPARATOR);
		    if (J[1] == "FormattingWidget" && J[2] == "WidgetProps") {
			var C = this.widgetPropEdits || {};
			if (J[0] in C) {
			    this.optActions[C[J[0]]].id = null;
			}
			C[J[0]] = this.optActions.length;
			this.widgetPropEdits = C;
		    }
		    break;
		}
	    }
	    this.optActions.push(G);
	} else {
	    if (I == mstrUpdateManager.COPY_TO_CLIPBOARD
		    || I == mstrUpdateManager.CUT_TO_CLIPBOARD) {
		P = G.newArgs[0].split(CLIPBOARD_ITEM_SEPARATOR);
		for ( var K = 0; K < P.length; K++) {
		    this.copyActions[P[K]] = {};
		    this.copyActions[P[K]].position = this.optActions.length;
		    this.copyActions[P[K]].applied = false;
		}
		this.optActions.push(G);
	    } else {
		if (I == mstrUpdateManager.SET_REPORT_PROPERTY_VALUES
			|| I == mstrUpdateManager.EDIT_TEXT
			|| I == mstrUpdateManager.SET_TOPLEFT_POSITION
			|| I == mstrUpdateManager.CHANGE_BONE_PROPERTY) {
		    if (!this.lastPosArray[I]) {
			this.lastPosArray[I] = {};
		    }
		    if (this.copyActions[N]
			    && this.copyActions[N].applied == false) {
			this.copyActions[N].applied = true;
			for (anItem in this.lastPosArray) {
			    delete this.lastPosArray[anItem][B];
			}
			this.lastPosArray[I][B] = {};
			this.lastPosArray[I][B].position = this.optActions.length;
			this.optActions.push(G);
		    } else {
			if (this.lastPosArray[I][B]) {
			    var L = this.lastPosArray[I][B].position;
			    var F = this.optActions[L];
			    var H = mstr.$A.find(F.argID, "2048007");
			    if (H == -1) {
				H = null;
			    }
			    var M = mstr.$A.find(F.argID, "2048007");
			    if (M == -1) {
				H = null;
			    }
			    if (M == H) {
				F.newArgs = G.newArgs;
			    } else {
				this.lastPosArray[I][B].position = this.optActions.length;
				this.optActions.push(G);
			    }
			} else {
			    this.lastPosArray[I][B] = {};
			    this.lastPosArray[I][B].position = this.optActions.length;
			    this.optActions.push(G);
			}
		    }
		} else {
		    if (I == mstrUpdateManager.REMOVE_OBJECT) {
			if (this.copyActions[N]) {
			    for ( var K = this.copyActions[N].position; K < this.optActions.length; K++) {
				if (this.optActions[K].elem
					&& this.optActions[K].elem.id == N) {
				    this.optActions[K].id = null;
				}
			    }
			    delete this.copyActions[N];
			    for (anItem in this.lastPosArray) {
				delete this.lastPosArray[anItem][B];
			    }
			} else {
			    for ( var K = 0; K < this.optActions.length; K++) {
				if (this.optActions[K].elem
					&& this.optActions[K].elem.id == N
					&& !this.ADD_EVENT_IDS.contains(
						this.optActions[K].id, "|")) {
				    this.optActions[K].id = null;
				}
			    }
			}
			this.optActions.push(G);
		    } else {
			if (I == mstrUpdateManager.SWITCH_FULL_SCREEN_MODE) {
			    if (typeof (this.fullScreenModePosition) != "undefined"
				    && this.optActions[this.fullScreenModePosition]
				    && this.optActions[this.fullScreenModePosition].newArgs
				    && this.optActions[this.fullScreenModePosition].id == I) {
				this.optActions[this.fullScreenModePosition].newArgs = G.newArgs;
			    } else {
				this.fullScreenModePosition = this.optActions.length;
				this.optActions.push(G);
			    }
			} else {
			    if (I == mstrUpdateManager.SET_PERMANENT_BROWSER_SETTING) {
				if (G.argID[0] == "5005"
					&& G.newArgs[0] == "lTbar") {
				    if (typeof (this.lTbarBrowserSettingPosition) != "undefined"
					    && this.optActions[this.lTbarBrowserSettingPosition]
					    && this.optActions[this.lTbarBrowserSettingPosition].newArgs) {
					this.optActions[this.lTbarBrowserSettingPosition].newArgs = G.newArgs;
				    } else {
					this.lTbarBrowserSettingPosition = this.optActions.length;
					this.optActions.push(G);
				    }
				} else {
				    this.optActions.push(G);
				}
			    } else {
				if (I == mstrUpdateManager.SET_CUR_CTL_ELEMENTS) {
				    for ( var K = 0; K < G.argID.length; K++) {
					if (G.argID[K] == "2048130") {
					    this.ctlCurElementsPosition = this.ctlCurElementsPosition
						    || {};
					    var A = G.newArgs[K];
					    if (A in this.ctlCurElementsPosition) {
						this.optActions[this.ctlCurElementsPosition[A]].id = null;
					    }
					    this.ctlCurElementsPosition[A] = this.optActions.length;
					    this.optActions.push(G);
					    break;
					}
				    }
				} else {
				    if (I == mstrUpdateManager.SET_CURRENT_PANEL) {
					var O = G.newArgs[0];
					if (!this.currentPanelPosition) {
					    this.currentPanelPosition = {};
					}
					if (typeof (this.currentPanelPosition[O]) != "undefined") {
					    this.optActions
						    .splice(
							    this.currentPanelPosition[O],
							    1);
					}
					this.currentPanelPosition[O] = this.optActions.length;
					this.optActions.push(G);
				    } else {
					this.optActions.push(G);
				    }
				}
			    }
			}
		    }
		}
	    }
	}
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrUpdateManager.prototype.getFormAction = function() {
    if (!this.formAction) {
	this.formAction = microstrategy.servletName;
    }
    return this.formAction;
};
mstrUpdateManager.prototype.setFormAction = function(A) {
    this.formAction = A;
};
mstrUpdateManager.createPropertyEditString = function(C, B, G, A, H) {
    try {
	var F = mstrFormatObject;
	if (!F) {
	    return "";
	}
	if (!A) {
	    G = F.encodeValue(B, G);
	}
	var D = C || "";
	if (D) {
	    D += mstrUpdateManager.UNIT_SEPARATOR;
	}
	return D + (H || F.getPropertySetName(B))
		+ mstrUpdateManager.UNIT_SEPARATOR + F.getPropertyName(B)
		+ mstrUpdateManager.UNIT_SEPARATOR + G
		+ mstrUpdateManager.ITEM_SEPARATOR;
    } catch (E) {
	microstrategy.errors.log(E);
	return "";
    }
};
mstrUpdateManager.prototype.createEditPropsAction = function(F, J, S, I, Q, D,
	A, L, K, R) {
    try {
	var E = (A) ? mstrUpdateManager.UPDATE_NOW
		: mstrUpdateManager.UPDATE_LATER;
	var M = mstrUpdateManager.createPropertyEditString;
	var O = K ? "1" : "0";
	var H = "", C = "";
	for ( var N = 0; N < I.length; N++) {
	    H += M(J, I[N], Q[N], R);
	    if (D && (N in D)) {
		C += M(J, I[N], D[N]);
	    }
	}
	var B = K ? [ "2048018", "2048035", "2048241" ] : [ "2048018",
		"2048035" ], G = K ? [ E, H, O ] : [ E, H ];
	return this.createActionObject(F, mstrUpdateManager.EDIT_PROPS, S, B,
		G, (C && [ E, C ]) || [], L);
    } catch (P) {
	microstrategy.errors.log(err);
	return null;
    }
};
mstrUpdateManager.prototype.findRwbInputOnPageStateForm = function() {
    var C = getObj("pageStateForm");
    var B = C.getElementsByTagName("INPUT");
    for (i = 0, cnt = B.length; i < cnt; i++) {
	var A = B[i];
	if (A.name === "rwb") {
	    return A;
	}
    }
    return null;
};
mstrUpdateManager.prototype.getRWBState = function(A) {
    if (A) {
	var B = this.findRwbInputOnPageStateForm();
	if (B) {
	    return B.value;
	}
    } else {
	if (pageState) {
	    var C = (pageState + "&").match(/rwb=(.*?)\&/);
	    if (C != -1) {
		return C[1];
	    }
	}
    }
    return "";
};
mstrUpdateManager.prototype.setRWStateInForm = function(A) {
    var B = this.findRwbInputOnPageStateForm();
    if (B) {
	B.value = A;
    }
};
mstrUpdateManager.prototype.refreshPage = function() {
    try {
	this.useIframe = false;
	var B = this.createActionObject(null, mstrUpdateManager.PAGE_REFRESH,
		microstrategy.servletName + "." + microstrategy.pageName, [],
		[], [], null);
	this.add([ B ], true);
	this.flushAndSubmitChanges();
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrUpdateManager.prototype.submitPartialUpdate = function(C) {
    try {
	microstrategy.puStatus = 0;
	iframe.notifyParent(true);
	if (!this.partialUpdateModel) {
	    this.partialUpdateModel = new mstr.models.BooleanTaskModel({
		parent : this
	    });
	    mstr.controllers.Factory.add(this.partialUpdateModel);
	    var A = this.partialUpdateModel && this.partialUpdateModel
		    && this.partialUpdateModel.init();
	    if (!("id" in this) || !mstr.$obj(this.id)) {
		mstr.controllers.Factory.add(this);
	    }
	    this.partialUpdateModel.attachEventListener(this, "set_readyState",
		    "handleStateChange");
	}
	C.processorClass = mstr.http.PUProcessor;
	this.partialUpdateModel.execSubmit({
	    params : C,
	    callback : this.callback
	});
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrUpdateManager.prototype.handleStateChange = function(evt) {
    try {
	switch (evt.memo.value) {
	case mstr.Enum.Widget.READYSTATE.TIMEOUT:
	case mstr.Enum.Widget.READYSTATE.ERROR:
	    break;
	case mstr.Enum.Widget.READYSTATE.SUCCESS:
	    var updateResult = evt.src.get("requestContext").response.data;
	    if (updateResult) {
		if (updateResult.status == "2") {
		    iframe.showWaitPage();
		} else {
		    iframe.hideWaitPage();
		}
		UpdateHelper.replaceComponents(updateResult.components);
		document.title = updateResult.title;
		if (updateResult.status == "2") {
		    this.doRedirect(updateResult.redirectURL,
			    updateResult.waitSeconds);
		}
		microstrategy.eventManager
			.executeFunction("microstrategy.eventManager.onreload()");
		if (updateResult.script) {
		    eval(updateResult.script);
		}
		microstrategy.puStatus = 1;
	    } else {
		if (window.document.readyState == "complete") {
		    var sMarkup = evt.src.get("requestContext").response.text;
		    if (bIsIE6 && !bIsIE7) {
			document.write(sMarkup);
		    } else {
			var oNewDoc = window.document.open("text/html");
			if (sMarkup.indexOf("<!DOCTYPE") == -1) {
			    oNewDoc
				    .write('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd " >');
			}
			oNewDoc.write(sMarkup);
			oNewDoc.close();
		    }
		}
	    }
	    delete this.callback;
	    break;
	}
    } catch (err) {
	microstrategy.errors.log(err);
    }
};
mstrUpdateManager.prototype.doRedirect = function(C, A) {
    try {
	this.sTimeOutID = window.setTimeout(
		'microstrategy.updateManager.timedRedirect("' + C + '")',
		A * 1000);
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrUpdateManager.prototype.timedRedirect = function(C) {
    try {
	window.clearTimeout(this.sTimeOutID);
	var A = UpdateHelper.createParamsFromURL(C);
	UpdateHelper.submitRequest(A);
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
function mstrUpdateManager() {
    this.commands = new UpdateManagerCommands(this);
    if (typeof (mstrObserverImpl) != "undefined") {
	this.observer = new mstrObserverImpl();
    }
    return this;
}
if (typeof (microstrategy) != "undefined") {
    microstrategy.updateManager = new mstrUpdateManager();
}
mstrUndoObj.prototype = {};
function mstrUndoObj(A) {
    this.elem = A.elem;
    this.id = A.id;
    this.args = A.oldArgs;
    this.cachedArray = A.cachedArray;
    return this;
}
mstrRedoObj.prototype = {};
function mstrRedoObj(A) {
    this.elem = A.elem;
    this.id = A.id;
    this.args = A.newArgs;
    this.cachedArray = A.cachedArray;
    return this;
}
function UpdateManagerCommands(A) {
    this.queryVisible = function(B) {
	return true;
    };
    /* 배2 */
    //console.log("UpdateManagerCommands");
    this.queryEnabled = function(B) {
	switch (B) {
	case "redo":
	    return A.anyNonStatic(true);
	case "undo":
	    return A.anyNonStatic(false);
	case "apply":
	    return A.hasChangesToSubmit();
	default:
	    return false;
	}
    };
    this.queryState = function(B) {
	return false;
    };
    this.exec = function(B, C) {
	switch (B) {
	case "redo":
	    return A.redo();
	case "undo":
	    return A.undo();
	case "apply":
	    A.add([ A.createActionObject(null, mstrUpdateManager.APPLY_CHANGES,
		    mstrUpdateManager.applyChangesBeanPath, [], [], []) ]);
	    return A.flushAndSubmitChanges();
	default:
	    return false;
	}
    };
    return this;
}
var UpdateHelper = new function() {
};
UpdateHelper.prototype = new Object();
UpdateHelper.createParamsFromURL = function(B, G) {
    var C = {
	method : "post"
    };
    var H = B.indexOf("?") > 0;
    var F = B.indexOf("#") > 0;
    var E = (B.indexOf("iframe=true") > 0 || G);
    var D = ((H) ? B.substring(0, B.indexOf("?")) : B);
    if (F) {
	var A = "";
	B = moveAnchor(B);
	A = B.substring(B.indexOf("#"));
	D = D.replace(A, "") + A;
	B = B.substring(0, B.indexOf("#"));
    }
    D = microstrategy.addJSessionID(D);
    if (H) {
	UpdateHelper.addURLToParams(C, B);
    }
    C.iframe = (E) ? "true" : "false";
    C.action = D;
    return C;
};
UpdateHelper.createParamsFromForm = function(I, J, F, H) {
    var G = getObj(I);
    var C = microstrategy.findChildrenWithAtt(G, [ "INPUT", "SELECT",
	    "TEXTAREA" ], "name");
    var B = {
	action : G.action,
	method : G.method
    };
    if (typeof G.target != undefined) {
	B.target = G.target;
    }
    for ( var D = 0; D < C.length; D++) {
	var A = C[D];
	if (H === true && A.ps === true) {
	    continue;
	}
	if (A.type == "select-multiple" && A.options && A.options.length > 0
		&& A.disabled != true) {
	    for ( var E = 0; E < A.options.length; E++) {
		if (UpdateHelper.shouldSubmit(A.options[E])) {
		    UpdateHelper.addAdditionalParam(B, A.name,
			    A.options[E].value);
		}
	    }
	} else {
	    if (UpdateHelper.shouldSubmit(A)) {
		UpdateHelper.addAdditionalParam(B, A.name, A.value);
	    }
	}
    }
    if (J) {
	B[J] = F;
    }
    return B;
};
UpdateHelper.shouldSubmit = function(A) {
    if (A.disabled == true) {
	return false;
    }
    if (A.type == "submit" || A.type == "button" || A.type == "image"
	    || A.value == "undefined") {
	return false;
    }
    if (A.type == "radio" || A.type == "checkbox") {
	if (!A.getAttribute("agg")) {
	    return A.checked;
	} else {
	    A.value = A.checked ? "true" : "false";
	    return true;
	}
    }
    if (A.tagName.toLowerCase() == "option") {
	return A.selected;
    }
    return true;
};
UpdateHelper.addURLToParams = function(D, F, C) {
    F = F.substring(F.indexOf("?") + 1, F.length);
    var G = F.split("&");
    var I = "";
    var E = "";
    var A = "";
    var H = /\+/g;
    for ( var B = 0; B < G.length; B++) {
	I = G[B].split("=");
	E = I[0];
	A = I[1];
	if (A) {
	    A = decodeURIComponent(A.replace(H, " "));
	}
	if (C) {
	    D[E] = A;
	} else {
	    UpdateHelper.addAdditionalParam(D, E, A);
	}
    }
    return false;
};
UpdateHelper.addAdditionalParam = function(A, B, C) {
    if (A[B] && typeof A[B] != "object") {
	A[B] = [ A[B], C ];
    } else {
	if (A[B] && A[B].push) {
	    A[B].push(C);
	} else {
	    A[B] = C;
	}
    }
};
UpdateHelper.submitRequest = function(H) {
    var N = getObj("pageStateForm");
    var E = null;
    var I = null;
    var G;
    var F;
    var C;
    var O;
    UpdateHelper.appendPageStateToParams(H);
    if (typeof (microstrategy) != "undefined"
	    && typeof (microstrategy.bones.rwb_viewer) != "undefined"
	    && microstrategy.EDIT_MODE == microstrategy.ALLOW_EDIT_MODE) {
	var L = microstrategy.bones.rwb_viewer;
	H.docSelections = L.commands.queryState("selectionsKey");
	L.adjustScrollValues();
	H.viewerScroll = L.dScrollTop + "," + L.dScrollLeft;
	H.isLocked = (L.insertionControlLocked) ? 1 : 0;
	var M = L.doc.currentControlSubtype ? "|" + L.doc.currentControlSubtype
		: "";
	H.currentControl = L.doc.currentControl + M;
    }
    if (typeof (microstrategy) != "undefined"
	    && microstrategy.DISPLAY_MODE == microstrategy.VIEW_MODE
	    && microstrategy.EDIT_MODE == microstrategy.ALLOW_EDIT_MODE) {
	for ( var A in microstrategy.bones) {
	    if (microstrategy.bones[A] != null
		    && microstrategy.bones[A].type == microstrategy.OBJTYPE_GRID) {
		var B = microstrategy.bones[A];
		if (B && B.gridStructureInfo && !B.gridStructureInfo.emptyCase
			&& !B.gridStructureInfo.isEmptyTemplate) {
		    if (B.isGrid) {
			var K = B.commands.queryState("selections");
			if (K) {
			    H[B.id] = K;
			}
		    }
		    if (B.isGraph && A.indexOf("_graph") == -1) {
			H[B.id + "_gs"] = B.commands
				.queryState("graphSelections");
		    }
		}
	    }
	}
    }
    if (H.iframe == "true") {
	microstrategy.updateManager.submitPartialUpdate(H);
    } else {
	var J = UpdateHelper.createFormFromParams(H);
	UpdateHelper.appendPageSizeToParams(J);
	if (mstr.utils.ISSAFARI && J.target == "_blank") {
	    J.action += (J.action.indexOf("?") == -1 ? "?" : "&");
	    J.action += "t=" + new Date().getTime();
	}
	try {
	    microstrategy.submitForm(J);
	} catch (D) {
	    if (J.target != ""
		    && !window.open("", "",
			    "width=1,height=1,left=0,top=0,scrollbars=no")) {
		showMessage({
		    contents : microstrategy.descriptors.getDescriptor("5877"),
		    elements : microstrategy.OK_BUTTON,
		    type : mstrMsgBoxImpl.MSG_WARNING
		});
	    } else {
		microstrategy.errors.log(D);
	    }
	}
    }
    return false;
};
UpdateHelper.createFormFromParams = function(A) {
    var C = document.createElement("FORM");
    C.name = "dynamic_form";
    C.method = A.method;
    delete A.method;
    C.action = A.action;
    delete A.action;
    if (typeof A.target != "undefined") {
	C.target = A.target;
	delete A.target;
    }
    C.setAttribute("hasUpdateChanges", A.hasUpdateChanges == "true");
    for ( var D in A) {
	if (A[D]) {
	    if (typeof A[D] == "object") {
		for ( var B = 0; B < A[D].length; B++) {
		    if (A[D][B]) {
			createHiddenInput(C, D, A[D][B]);
		    }
		}
	    } else {
		createHiddenInput(C, D, A[D]);
	    }
	}
    }
    document.body.insertAdjacentElement("beforeEnd", C);
    return C;
};
UpdateHelper.submitFormThroughXHR = function(B, D) {
    if (D) {
	if (!B) {
	    B = window.event;
	}
	var B = getEventTarget(B);
	if (!B) {
	    return false;
	}
    }
    var F = microstrategy.findAncestorWithTag(B, "FORM");
    var C = B.name;
    var A = B.value;
    if (typeof F == "undefined" || typeof C == "undefined"
	    || typeof A == "undefined") {
	return false;
    }
    var E = UpdateHelper.createParamsFromForm(F, C, A, true);
    UpdateHelper.appendPageStateToParams(E);
    microstrategy.updateManager.submitPartialUpdate(E);
    return false;
};
UpdateHelper.appendPageStateToParams = function(A) {
    var E = getObj("pageStateForm");
    var D = null;
    var B = (typeof (microstrategy) != "undefined") ? microstrategy.updateManager
	    : null;
    var C;
    if (B && B.hasChangesToSubmit()) {
	B.flushChangesAsParams(A);
	UpdateHelper.addEvtOrderToParams(A, mstrUpdateManager.multipleEventID);
    }
    if (E) {
	if (A.method == "get" || A.method == "GET") {
	    UpdateHelper.addURLToParams(A, pageState, true);
	} else {
	    D = E.getElementsByTagName("INPUT");
	    for (C = 0; C < D.length; C++) {
		A[D[C].name] = D[C].value;
	    }
	}
    }
};
UpdateHelper.appendPageSizeToParams = function(A) {
    createHiddenInput(A, "innerWidth", getClientWidth());
    createHiddenInput(A, "innerHeight", getClientHeight());
};
UpdateHelper.submitLink = function(F) {
    var H;
    H = F.href;
    var C;
    C = F.target;
    var G = document.getElementById("cssAnalyzerToolbar");
    var A = (getCookie(ENABLE) == "true") && (G != null);
    if (A) {
	return false;
    }
    window.mstrSubmitLink = true;
    if (C == "frameManager"
	    || (typeof (microstrategy) != "undefined"
		    && microstrategy.updateManager && microstrategy.updateManager
		    .hasChangesToSubmit())) {
	var B = UpdateHelper.createParamsFromURL(H);
	if (C) {
	    B.target = C;
	}
	UpdateHelper.submitRequest(B);
	return false;
    }
    if (typeof (pageState) != "undefined") {
	var D = updateLink(H);
	D = moveAnchor(D);
	var E = null;
	if (bIsIE6 && F.childNodes && (F.childNodes.length == 1)
		&& F.childNodes[0].nodeType == 3) {
	    E = F.innerHTML;
	}
	F.href = D;
	if (bIsIE6 && E != null) {
	    F.innerHTML = E;
	}
	return true;
    } else {
	return true;
    }
};
UpdateHelper.addEvtOrderToParams = function(A, B, C) {
    if (A.evtorder) {
	if (A.evtorder.indexOf(B) < 0) {
	    if (C) {
		A.evtorder = A.evtorder + "," + B;
	    } else {
		A.evtorder = B + "," + A.evtorder;
	    }
	    A[B] = "1";
	}
    } else {
	A.evtorder = B;
	if (A.evt && A.evt.length < 3) {
	    for (j = 0; j < A.evt.length; j++) {
		A[A.evt[j]] = "1";
	    }
	}
    }
};
UpdateHelper.replaceComponents = function(A, G) {
    try {
	if (!G) {
	    iframe.consolidatedStyles = {};
	    iframe.isProcessing = true;
	    if (!bIsW3C) {
		iframe.togglePulldownChildren(document.body, false);
	    }
	}
	var C;
	for (C = 0; C < A.length; C++) {
	    var F = A[C];
	    if (F && F.ISEMPTY != "true") {
		if (F.errBox != "true" || currentModalEditor.length == 0) {
		    UpdateHelper.updateComponent(F, G);
		} else {
		    var E = F.content;
		    if (E.length > 0) {
			showMessage({
			    contents : E,
			    elements : microstrategy.OK_BUTTON,
			    type : mstrMsgBoxImpl.MSG_ERROR
			});
		    }
		}
	    }
	}
	if (!G) {
	    for ( var B in iframe.consolidatedStyles) {
		updateStyleContainer(iframe.consolidatedStyles[B], B);
	    }
	    if (!bIsW3C) {
		iframe.togglePulldownChildren(document.body, true);
	    }
	    iframe.targets = null;
	    microstrategy.loadDynamicJS();
	    microstrategy.registerNewBones();
	}
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
UpdateHelper.updateComponent = function(cB, parentId) {
    try {
	var sReplaceHTML;
	var aScripts = null;
	var j;
	var oParentDiv;
	if (!cB.id) {
	    return;
	}
	if (cB.components && cB.components.length > 1) {
	    UpdateHelper.replaceComponents(cB.components, cB.id);
	    return;
	} else {
	    if (cB.components && cB.components.length == 1) {
		return;
	    }
	}
	if (cB.slid) {
	    var slices = document.getElementsByName(cB.id);
	    if (slices && slices.length > 0) {
		for ( var i = 0, len = slices.length; i < len; i++) {
		    if (slices[i].getAttribute("slid") == cB.slid) {
			oParentDiv = slices[i];
			break;
		    }
		}
	    }
	}
	if (!oParentDiv) {
	    var oParentDivs = document.getElementById(cB.id);
	    if (!oParentDivs && (cB.dialog || cB.css == "1")) {
		iframe.createPlaceHolder(cB.id);
		oParentDivs = document.getElementById(cB.id);
	    }
	    if (oParentDivs) {
		if (oParentDivs.length > 1) {
		    for ( var i = 0; i < oParentDivs.length; i++) {
			if (oParentDivs[i].tagName == "DIV") {
			    oParentDiv = oParentDivs[i];
			    break;
			}
		    }
		} else {
		    oParentDiv = oParentDivs;
		}
	    }
	}
	if (oParentDiv) {
	    var sReplaceHTML = cB.content.replace(/'/g, "'");
	    if (cB.message == "true") {
		showMessage({
		    contents : sReplaceHTML,
		    elements : microstrategy.OK_BUTTON,
		    type : mstrMsgBoxImpl.MSG_WARNING
		});
	    }
	    var scriptArray = [], chartArray = [];
	    var oDivNode = iframe.createElementFromHTML(sReplaceHTML);
	    if (!oDivNode) {
		return;
	    }
	    iframe.extractScript(oDivNode, scriptArray);
	    iframe.extractImage(oDivNode, chartArray);
	    if (cB.errorInfo) {
		var errorHolder = document.getElementById("errorInfo");
		if (errorHolder) {
		    errorHolder.innerHTML += cB.errorInfo;
		}
	    }
	    if (cB.css == "1") {
		var styleId = oDivNode.getAttribute("styleid");
		if (!iframe.consolidatedStyles[styleId]) {
		    iframe.consolidatedStyles[styleId] = [];
		}
		iframe.consolidatedStyles[styleId] = consolidateStyleSheets(
			oDivNode, iframe.consolidatedStyles[styleId], styleId);
	    } else {
		if (oParentDiv.getAttribute(mstrHTMLAttributes.ATTR_MODAL) == "true"
			|| (oParentDiv.popupMask)) {
		    togglePulldowns(oParentDiv, true);
		}
		if (cB.partialUpdate == "true"
			&& oParentDiv.childNodes.length > 1) {
		    oParentDiv.innerHTML = oDivNode.innerHTML;
		} else {
		    if (bIsW3C && !bIsIE8 && !bIsIE9 && !bIsIE10 && !bIsSafari) {
			iframe.setOuterHTML(oParentDiv, oDivNode);
		    } else {
			if (oParentDiv && oDivNode) {
			    if (cB.isFlashVis && bIsIE8) {
				var o = oParentDiv
					.getElementsByTagName("object");
				if (o && o.length > 0) {
				    for ( var i = 0; i < o.length; i++) {
					o[i].parentNode.removeChild(o[i]);
				    }
				}
			    }
			    oParentDiv.parentNode.replaceChild(oDivNode,
				    oParentDiv);
			}
			if (chartArray.length > 0) {
			    for ( var j = 0, cnt = chartArray.length; j < cnt; j++) {
				chartArray[j].src = chartArray[j]
					.getAttribute("dsrc");
			    }
			}
		    }
		}
		for ( var i = 0, len = scriptArray.length; i < len; i++) {
		    eval(scriptArray[i].toString());
		}
	    }
	}
    } catch (err) {
	microstrategy.errors.log(err);
    }
};
mstr.utils.Trees = (function() {
    var D = {};
    D.insertChildNodes = function K(S, R, P, T) {
	if (!S) {
	    return false;
	}
	var O = mstr.$A.len(R);
	if (!O) {
	    return false;
	}
	S.children = mstr.$A.insert(S.children || [], R, P);
	for ( var Q = 0; Q < O; Q++) {
	    R[Q].parent = S;
	    R[Q].treeId = T;
	}
	return true;
    };
    D.removeChildNode = function E(O, Q) {
	var P = this.findChildIndex(O, Q);
	if (P > -1) {
	    return this.removeChildNodeAt(O, P);
	}
	return false;
    };
    D.removeChildNodeAt = function C(O, Q) {
	var P = O && O.children && O.children[Q];
	if (P) {
	    O.children.splice(Q, 1);
	    P.parent = null;
	    P.treeId = null;
	}
	return P;
    };
    D.removeAllChildNodes = function I(Q) {
	if (!Q) {
	    return;
	}
	var S = Q.children, R;
	for ( var P = 0, O = mstr.$A.len(S); P < O; P++) {
	    R = S[P];
	    if (!R) {
		continue;
	    }
	    R.parent = null;
	    R.treeId = null;
	}
	Q.children = [];
	return S;
    };
    D.removeNodeAtPath = function N(P, S) {
	if (!P || (S == null)) {
	    return null;
	}
	var R = P._pathParts(paths[i]);
	if (R.length > 1) {
	    var T = R.pop();
	    var O = P.getNodeAt(R.join(mstr.models.AbstractTreeBase.PATHDELIM));
	    return this.removeChildNodeAt(O, T);
	} else {
	    var Q = P.getRootNode();
	    P.setRootNode(null);
	    return Q;
	}
    };
    D.previousSibling = function M(P) {
	if (P) {
	    var O = this.findChildIndex(P.parent, P);
	    if (O > 0) {
		return P.parent.children[O - 1];
	    }
	}
	return null;
    };
    D.nextSibling = function H(P) {
	if (P) {
	    var O = this.findChildIndex(P.parent, P);
	    if (O > -1) {
		return P.parent.children[O + 1];
	    }
	}
	return null;
    };
    D.findChildIndex = function A(O, P) {
	if (O && P && (P.parent == O) && O.children) {
	    return mstr.$A.find(O.children, P);
	}
	return -1;
    };
    D.find = function B(T, R) {
	if (!T) {
	    return null;
	}
	if (T.value == R) {
	    return T;
	} else {
	    if (T.children) {
		var S = T.children;
		var O = S.length || 0;
		for ( var Q = 0; Q < O; Q++) {
		    var P = this.find(S[Q], R);
		    if (P) {
			return P;
		    }
		}
	    }
	}
	return null;
    };
    D.findByForm = function G(U, S, R) {
	if (!U) {
	    return null;
	}
	if (U.value && U.value[R] == S) {
	    return U;
	} else {
	    if (U.children) {
		var T = U.children;
		var O = T.length || 0;
		for ( var Q = 0; Q < O; Q++) {
		    var P = this.findByForm(T[Q], S, R);
		    if (P) {
			return P;
		    }
		}
	    }
	}
	return null;
    };
    D.findByNodeForm = function L(U, S, R) {
	if (!U) {
	    return null;
	}
	if (U[R] == S) {
	    return U;
	} else {
	    if (U.children) {
		var T = U.children;
		var O = T.length || 0;
		for ( var Q = 0; Q < O; Q++) {
		    var P = this.findByNodeForm(T[Q], S, R);
		    if (P) {
			return P;
		    }
		}
	    }
	}
	return null;
    };
    D.matchByForm = function F(P, R, T, V) {
	var O = mstr.utils.Arrays.len(P), V = (V && (V > -1)) ? V : 0, Q, U;
	for ( var S = V; S < O; S++) {
	    U = P[S];
	    if (R.test(String(U && U.value && U.value[T]))) {
		return S;
	    }
	}
	if (V > 0) {
	    for ( var S = 0; S < V; S++) {
		U = P[S];
		if (R.test(String(U && U.value && U.value[T]))) {
		    return S;
		}
	    }
	}
	return -1;
    };
    D.cloneSubTree = function J(U, P) {
	if (!U) {
	    return null;
	}
	var T = {
	    value : P ? U.value : mstr.$H.clone(U.value)
	};
	var S = U.children;
	var O = mstr.$A.len(S);
	if (O) {
	    T.children = new Array(O);
	    var R;
	    for ( var Q = 0; Q < O; Q++) {
		R = this.cloneSubTree(S[Q], P);
		R && (R.parent = T);
		T.children[Q] = R;
	    }
	}
	return T;
    };
    return D;
})();
mstr.models.AbstractCartBase = (function() {
    mstr.$O.extendsClass(J, mstr.models.BaseModel);
    J.prototype.canAdd = function H(K) {
	var L = this.props.allowedItemFormName;
	if (L != null) {
	    if (this.props.allowedItemFormValues) {
		if (!this.props.allowedItemFormValuesHash) {
		    this.props.allowedItemFormValuesHash = mstr.$A
			    .toHash(this.props.allowedItemFormValues
				    && this.props.allowedItemFormValues
					    .split(","));
		}
		return !!this.props.allowedItemFormValuesHash[K[L]];
	    } else {
		if (this.props.prohibitedItemFormValues) {
		    if (!this.props.prohibitedItemFormValuesHash) {
			this.props.prohibitedItemFormValuesHash = mstr.$A
				.toHash(this.props.prohibitedItemFormValues
					&& this.props.prohibitedItemFormValues
						.split(","));
		    }
		    return !this.props.prohibitedItemFormValuesHash[K[L]];
		}
	    }
	}
	return true;
    };
    J.prototype._hasMetAddMax = function D() {
	var K = Math.max(0, parseInt(this.props.max) || 0);
	if (K) {
	    var M = this.props.selected;
	    var L = M && M.getItems();
	    return (mstr.$A.len(L) >= K);
	}
	return false;
    };
    J.prototype._findAddableItem = function F(L) {
	if (L) {
	    for ( var M = 0, K = L.length; M < K; M++) {
		if (mstr.utils.ListModelHelper.canAdd(this, L[M])) {
		    return L[M];
		}
	    }
	}
	return null;
    };
    J.prototype._addItemsToSelectedModel = function I(M) {
	var N = this.props.selected;
	if (!N) {
	    return;
	}
	var L = N.getSelectedIndices();
	var K = mstr.$A.sortNumericArray(mstr.$A.fromHashKeys(L, true))[0];
	N.insertItemsAt(M, (K != null) ? K : -1);
    };
    J.prototype._getAvailableOriginInfo = function A() {
	var O = this.get("available"), N = O && O.getContainer(), M = N
		&& N.value && N.value.dssid, K = (O && O.get("blockBegin")) || 1, L = (O && O
		.get("searchPattern"))
		|| "";
	return {
	    containerId : M,
	    searchPattern : L,
	    blockBegin : K
	};
    };
    J.prototype._markItemsWithOrigin = function B(U) {
	var R = U && U.length;
	if (!R) {
	    return null;
	}
	var S = this._getAvailableOriginInfo(), T = S.containerId, Q = S.blockBegin, M = S.searchPattern;
	var K = this.props.available, L = K && K.getItems(), O = L
		&& mstr.$A.findByFormMultiple(L, U, "dssid", true), P = O
		&& O.indices || [];
	for ( var N = 0; N < R; N++) {
	    var V = U[N];
	    if (P[N] > -1) {
		V.origin = {
		    containerId : T,
		    searchPattern : M,
		    blockOrdinal : Q + P[N]
		};
	    } else {
		if (!V.origin) {
		    U.origin = {
			containerId : null,
			searchPattern : "",
			blockOrdinal : null
		    };
		}
	    }
	}
	return O;
    };
    J.prototype._computeAllowedAddCount = function E() {
	var M = this.props.selected;
	if (!M) {
	    return 0;
	}
	if (!this.props.allowAddAlways) {
	    var K = Math.max(0, parseInt(this.props.max) || 0);
	    if (K) {
		var L = M.getItems();
		K -= mstr.$A.len(L);
		return Math.max(0, K);
	    }
	}
	return -1;
    };
    J.prototype.updateCommandEnabledRemove = function G() {
	var M = this.props.selected;
	var K = M && M.getSelectedItems();
	var L = !!mstr.$A.len(K);
	this.set("CommandEnabledRemove", L);
    };
    J.prototype.updateCommandEnabledRemoveAll = function C() {
	var L = this.props.selected;
	var K = L && L.getItems();
	var M = !!mstr.$A.len(K);
	this.set("CommandEnabledRemoveAll", M);
    };
    function J(K) {
	mstr.models.BaseModel.apply(this, [ K ]);
    }
    return J;
})();
mstr.models.ListCart = (function() {
    mstr.$O.extendsClass(J, mstr.models.AbstractCartBase);
    J.prototype.init = function T() {
	mstr.models.AbstractCartBase.prototype.init.apply(this);
	this._initAvailableFilteredList();
	this._updateAvailableFilteredItems();
	this.updateCommandEnabledAdd();
	this.updateCommandEnabledAddAll();
	this.updateCommandEnabledRemove();
	this.updateCommandEnabledRemoveAll();
	var W = this.props.available;
	if (W) {
	    W.attachEventListener(this, "set_readyState",
		    "_updateAvailableFilteredItems");
	}
	var V = this.props.availableFiltered;
	if (V) {
	    V.attachEventListener(this, "listadd_items",
		    "onAddRmvItemsFromAvailFilt");
	    V.attachEventListener(this, "listremove_items",
		    "onAddRmvItemsFromAvailFilt");
	    V.attachEventListener(this, "hashadd_selectedIndices",
		    "updateCommandEnabledAdd");
	    V.attachEventListener(this, "hashremove_selectedIndices",
		    "updateCommandEnabledAdd");
	}
	var U = this.props.selected;
	if (U) {
	    U.attachEventListener(this, "listadd_items",
		    "onAddItemsToSelectedModel");
	    U.attachEventListener(this, "listremove_items",
		    "onRemoveItemsFromSelectedModel");
	    U.attachEventListener(this, "hashadd_selectedIndices",
		    "updateCommandEnabledRemove");
	    U.attachEventListener(this, "hashremove_selectedIndices",
		    "updateCommandEnabledRemove");
	}
    };
    J.prototype.onAddRmvItemsFromAvailFilt = function P() {
	this.updateCommandEnabledAdd();
	this.updateCommandEnabledAddAll();
    };
    J.prototype.onAddItemsToSelectedModel = function L() {
	this.updateCommandEnabledRemoveAll();
	var U = Math.max(0, parseInt(this.props.max) || 0);
	if (U) {
	    this.updateCommandEnabledAdd();
	    this.updateCommandEnabledAddAll();
	}
    };
    J.prototype.onRemoveItemsFromSelectedModel = function M() {
	this.updateCommandEnabledRemoveAll();
	this.updateCommandEnabledRemove();
	var U = Math.max(0, parseInt(this.props.max) || 0);
	if (U) {
	    this.updateCommandEnabledAdd();
	    this.updateCommandEnabledAddAll();
	}
    };
    J.prototype._initAvailableFilteredList = function G() {
	var V = this.props.available && this.props.available.props;
	V = mstr.$H.clone(V);
	V.items = [];
	V.id = mstr.controllers.Factory.nextFreeId();
	V.parent = this;
	var U = new mstr.models.ListModel(V);
	if (!U) {
	    return;
	}
	this.props.availableFiltered = U;
	mstr.controllers.Factory.add(U);
	U.init && U.init();
    };
    J.prototype._updateAvailableFilteredItems = function O() {
	var U = this.props.available;
	if (!U) {
	    return;
	}
	if (this.props.keepAvailableSorted !== false) {
	    var V = U.getItems(), d = V && V.length || 0;
	    if (d) {
		var e = this._getAvailableOriginInfo(), h = e.containerId, c = e.blockBegin, W = e.searchPattern;
		for ( var Z = 0; Z < d; Z++) {
		    V[Z].origin = {
			containerId : h,
			searchPattern : W,
			blockOrdinal : c + Z
		    };
		}
	    }
	}
	var g = this.props.availableFiltered;
	if (!g) {
	    return;
	}
	g.set("searchPattern", this._getAvailableOriginInfo().searchPattern
		|| "");
	var X = U.get("readyState");
	g.props.requestContext = U.props.requestContext;
	g.set("readyState", X);
	this.updateCommandEnabledAdd();
	this.updateCommandEnabledAddAll();
	if (X != mstr.Enum.Widget.READYSTATE.IDLE) {
	    return;
	}
	var Y = [].concat(U.getItems());
	if (!this.props.keepAvailableItems) {
	    if (this.props.selected) {
		var l = this.props.selected.getItems();
		var b = g.get("valueForm");
		if (b) {
		    if (this.props.keepAvailableSorted === false) {
			Y = mstr.$A.removeItemsByForm(Y, l, b);
		    } else {
			var a = this._markItemsWithOrigin(l);
			if (a) {
			    Y = mstr.$A.remove(Y, a.indices);
			}
		    }
		} else {
		    Y = mstr.$A.removeItems(Y, l);
		}
	    }
	}
	g.setItems(Y);
	if (Y && Y.length) {
	    g.execCommand("SingleSelect", 0);
	}
    };
    J.prototype.execAdd = function Q() {
	var V = this._computeAllowedAddCount();
	if (!V) {
	    return;
	}
	var Y = this.props.availableFiltered;
	if (!Y) {
	    return;
	}
	var U = Y.getSelectedIndices();
	var a = mstr.$H.len(U);
	if (!a) {
	    return;
	}
	var X = this._findAddableItemsInIndices(mstr.$A
		.sortNumericArray(mstr.$A.fromHashKeys(U, true)), V);
	if (X.count) {
	    this._addItemsToSelectedModel(X.itemsToAdd);
	    if (!this.props.keepAvailableItems) {
		Y.removeItemsAt(X.indicesToAdd);
	    } else {
		var W = Y.indexOfMultiple(X.itemsToAdd);
		if (W && W.foundCount) {
		    var Z = W.indices[W.foundCount - 1];
		    Y.execCommand("SingleSelect", Z + 1);
		}
	    }
	}
    };
    J.prototype.execAddAll = function S() {
	var Y = new Date();
	var U = this._computeAllowedAddCount();
	if (!U) {
	    return;
	}
	var Z = this.props.availableFiltered;
	if (!Z) {
	    return;
	}
	var X = Z.getItems();
	var b = mstr.$A.len(X);
	if (!b) {
	    return;
	}
	var a = new Array(b);
	for ( var W = 0; W < b; W++) {
	    a[W] = W;
	}
	var V = this._findAddableItemsInIndices(a, U);
	if (V.count) {
	    this._addItemsToSelectedModel(V.itemsToAdd);
	    if (!this.props.keepAvailableItems) {
		Z.removeItemsAt(V.indicesToAdd, true);
	    }
	}
    };
    J.prototype.execRemove = function A() {
	var W = this.props.selected;
	if (!W) {
	    return;
	}
	var V = W.getSelectedIndices();
	var Y = mstr.$H.len(V);
	if (!Y) {
	    return;
	}
	var a = mstr.$A.sortNumericArray(mstr.$A.fromHashKeys(V, true));
	var U = W.getItems();
	var Z = new Array(Y);
	for ( var X = 0; X < Y; X++) {
	    Z[X] = U[a[X]];
	}
	W.removeItemsAt(a, true);
	if (!this.props.keepAvailableItems) {
	    this._addItemsToAvailableFilteredModel(Z);
	}
    };
    J.prototype.execRemoveAll = function I() {
	var V = this.props.selected;
	if (!V) {
	    return;
	}
	var U = V.getItems();
	var W = mstr.$A.len(U);
	if (!W) {
	    return;
	}
	if (!this.props.keepAvailableItems) {
	    this._addItemsToAvailableFilteredModel(U.slice(0, W));
	}
	V.removeItemsAtRanges([ {
	    min : 0,
	    max : W - 1
	} ], true);
    };
    J.prototype.updateCommandEnabledAdd = function K() {
	var V = true;
	if (!this.props.allowAddAlways && this._hasMetAddMax()) {
	    V = false;
	} else {
	    var U = this.props.availableFiltered;
	    if (!U || !this._findAddableItem(U.getSelectedItems())
		    || U.get("readyState") == mstr.Enum.Widget.READYSTATE.ERROR) {
		V = false;
	    }
	}
	this.set("CommandEnabledAdd", V);
    };
    J.prototype.updateCommandEnabledAddAll = function C() {
	var U = true;
	if (!this.props.allowAddAlways && this._hasMetAddMax()) {
	    U = false;
	} else {
	    var V = this.props.availableFiltered;
	    if (!V || !this._findAddableItem(V.getItems())
		    || V.get("readyState") == mstr.Enum.Widget.READYSTATE.ERROR) {
		U = false;
	    }
	}
	this.set("CommandEnabledAddAll", U);
    };
    J.prototype._addItemsToAvailableFilteredModel = function D(Y) {
	var a = this.props.availableFiltered;
	if (!a) {
	    return;
	}
	if (this.props.keepAvailableSorted === false) {
	    this._insertItemsIntoAvailableFiltered(Y, -1);
	} else {
	    var V = this._groupByOrigin(Y), b = null;
	    for ( var W in V) {
		var e = V[W], c = e && e.sort(J.ordinalSorter), X = c
			&& this._contiguousOrdinals(c);
		for ( var d in X) {
		    var Z = X[d], U = this
			    ._computeInsertionIndexForAvailableFiltered(Z);
		    if (b == null) {
			b = U > -1 ? U : (a.props.items || []).length;
			a.execCommand("ClearSelect");
		    }
		    this._insertItemsIntoAvailableFiltered(Z, U);
		    this.execCommand("Select", mstr.utils.Hash.fromRanges([ {
			min : U,
			max : U + Z.length - 1
		    } ]));
		}
	    }
	    a.set("leadIndex", b);
	}
    };
    J.prototype._contiguousOrdinals = function F(Y) {
	var V = {}, b = null, Z = null;
	for ( var W = 0, X = Y && Y.length || 0; W < X; W++) {
	    var c = Y[W], a = c && c.origin, U = a && a.blockOrdinal;
	    if (b != null && (Z == U - 1)) {
		V[b].push(c);
	    } else {
		b = U;
		if (V[b]) {
		    V[b].push(c);
		} else {
		    V[b] = [ c ];
		}
	    }
	    Z = U;
	}
	return V;
    };
    J.prototype._groupByOrigin = function B(a) {
	var U = {};
	for ( var W = 0, Y = a && a.length || 0; W < Y; W++) {
	    var c = a[W], b = c && c.origin, Z = b && b.containerId || "null", d = b
		    && b.searchPattern || "", V = Z + "-" + d, X = U[V];
	    if (!X) {
		X = U[V] = [];
	    }
	    X.push(c);
	}
	return U;
    };
    J.ordinalSorter = function N(V, U) {
	var X = V && V.origin, Z = X && X.blockOrdinal, W = U && U.origin, Y = W
		&& W.blockOrdinal;
	if (Z != null && Y != null) {
	    return Z - Y;
	} else {
	    if (Z != null) {
		return -1;
	    } else {
		if (Y != null) {
		    return 1;
		} else {
		    return 0;
		}
	    }
	}
    };
    J.prototype._computeInsertionIndexForAvailableFiltered = function H(g) {
	var V = g && g[0], l = V && V.origin, c = l && l.containerId, m = l
		&& l.searchPattern, e = l && l.blockOrdinal;
	if (!V) {
	    return -1;
	}
	var d = this.props.availableFiltered, Y = d && d.getItems(), b = this
		._getAvailableOriginInfo(), U = b.containerId, h = b.searchPattern;
	var X = -1;
	if (U && U == c && h == m) {
	    for ( var Z = 0, a = Y && Y.length || 0; Z < a; Z++) {
		var W = Y[Z];
		if (W.origin && W.origin.containerId == c
			&& W.origin.searchPattern == m) {
		    if (W.origin.blockOrdinal > e) {
			X = Z;
			break;
		    }
		} else {
		    X = Z;
		    break;
		}
	    }
	}
	return X;
    };
    J.prototype._insertItemsIntoAvailableFiltered = function E(U, V) {
	var X = this.props.availableFiltered;
	if (!X) {
	    return;
	}
	X.insertItemsAt(U, V);
	var Y = {}, Z = (V > -1) ? V : mstr.$A.len(X.getItems()), W = mstr.$A
		.len(U);
	for (i = 0; i < W; i++) {
	    Y[Z + i] = true;
	}
	X.execCommand("Select", Y);
	X.set("leadIndex", Z);
    };
    J.prototype._findAddableItemsInIndices = function R(d, W) {
	var l = {
	    indicesToAdd : [],
	    itemsToAdd : [],
	    count : 0
	};
	var a = this.props.availableFiltered;
	var b = a && a.getItems();
	if (!b) {
	    return l;
	}
	var U = this.props.selected;
	if (!U) {
	    return l;
	}
	var e = U.get("valueForm");
	var V = null;
	for ( var X = 0, Z = mstr.$A.len(d); X < Z; X++) {
	    var Y = d[X];
	    var g = b[Y];
	    if (mstr.utils.ListModelHelper.canAdd(this, g)) {
		var c = false;
		if (e) {
		    if (!V) {
			V = mstr.utils.Hash.generateItemArrayLookup(U
				.getItems(), e);
		    }
		    var h = g[e];
		    c = (V[h] != null);
		} else {
		    c = (U.indexOfItem(g) > -1);
		}
		if (!c) {
		    l.indicesToAdd[l.count] = Y;
		    l.itemsToAdd[l.count] = g;
		    l.count++;
		    if (l.count == W) {
			break;
		    }
		}
	    }
	}
	return l;
    };
    function J(U) {
	mstr.models.AbstractCartBase.apply(this, [ U ]);
    }
    return J;
})();
mstr.models.AbstractTreeBase = (function() {
    mstr.$O.extendsClass(P, mstr.models.BaseModel);
    P.NEXT_NODE_ID = 0;
    P.PATHDELIM = "/";
    P.prototype.getNodeAt = function I(u) {
	var t = this._pathParts(u);
	switch (t.length) {
	case 0:
	    return null;
	case 1:
	    return this.props.rootNode;
	default:
	    var s = this.props.rootNode;
	    var q = t.length;
	    for ( var r = 1; r < q; r++) {
		s = s.children && s.children[t[r]];
		if (!s) {
		    break;
		}
	    }
	    return s;
	}
    };
    P.prototype.getNodePath = function h(q, s) {
	var r = this.getNodePathIndices(q, s);
	if (r && r.join) {
	    return r.join(P.PATHDELIM);
	}
    };
    P.prototype.getNodePathIndices = function o(r, t) {
	if (!r) {
	    return null;
	}
	if (!t) {
	    t = this.props.rootNode;
	}
	var s = [];
	while (r) {
	    var q = r.parent ? mstr.utils.Trees.findChildIndex(r.parent, r) : 0;
	    if (q > -1) {
		s.push(q);
		r = r.parent;
	    } else {
		break;
	    }
	}
	return s.reverse();
    };
    P.prototype._silentInsertNodesAt = function J(s, x) {
	var r = mstr.$A.len(s);
	if (!r || x == null) {
	    return false;
	}
	var u = this._pathParts(x);
	if (u.length > 1) {
	    var y = u.pop();
	    var q = this.getNodeAt(u.join(P.PATHDELIM));
	    if (!mstr.utils.Trees.insertChildNodes(q, s, y, this.getId())) {
		return false;
	    }
	} else {
	    r = 1;
	    s = [ s[0] ];
	    this.props.rootNode = s[0];
	    s[0].parent = null;
	}
	for ( var t = 0; t < r; t++) {
	    this._validateNodeId(s[t]);
	}
	return true;
    };
    P.prototype._silentRemoveNode = function g(q) {
	if (!q) {
	    return false;
	}
	if (q.parent) {
	    return mstr.utils.Trees.removeChildNode(q.parent, q);
	} else {
	    if (q == this.props.rootNode) {
		this.props.rootNode = null;
		q.treeId = null;
		return true;
	    }
	}
	return false;
    };
    P.prototype.getSelectedNodes = function c() {
	return this.props.selections;
    };
    P.prototype.getSelectedNode = function F() {
	return mstr.$H.firstItem(this.props.selections);
    };
    P.prototype._isSingleFilterNode = function b(r) {
	var q = r && r.value;
	if (q && (q.stp == 256 || q.tp == 1)) {
	    var s = r.parent && r.parent.value;
	    if (s && s.filters && s.filters.length == 1) {
		return true;
	    }
	}
	return false;
    };
    P.prototype.getViewableSelectedItems = function L() {
	var r = [];
	var q = this.props.selections;
	for ( var t in q) {
	    var s = q[t];
	    if (s && s.value) {
		if (this._isSingleFilterNode(s)) {
		    r.push(s.parent.value);
		} else {
		    r.push(s.value);
		}
	    }
	}
	return r;
    };
    P.prototype.getSelectedItems = function R() {
	var r = [];
	var q = this.props.selections;
	for ( var t in q) {
	    var s = q[t];
	    if (s && s.value) {
		r.push(s.value);
	    }
	}
	return r;
    };
    P.prototype.getSelectedItem = function C() {
	var q = this.props.selections, r;
	for ( var s in q) {
	    r = q[s];
	    if (r && r.value) {
		return r.value;
	    }
	}
	return null;
    };
    P.prototype.getSelectedPaths = function W(s) {
	var q = this.props.selections;
	var u, t = 0, r = [];
	for ( var x in q) {
	    u = q[x];
	    if (u) {
		r[t] = this.getNodePath(u);
		t++;
	    }
	}
	if (t > 1 && s) {
	    r = this._sortPaths(r);
	}
	return r;
    };
    P.prototype.setSelectedPaths = function E(t) {
	var q = mstr.$A.len(t);
	var r = new Array(q);
	for ( var s = 0; s < q; s++) {
	    r[s] = this.getNodeAt(t[s]);
	}
	return this.execSelect(r);
    };
    P.prototype._selectNodes = function G(r) {
	var q = mstr.$A.len(r);
	if (q) {
	    var u = {};
	    for ( var s = 0; s < q; s++) {
		var t = r[s];
		if (!t) {
		    continue;
		}
		this._validateNodeId(t);
		u[t.id] = t;
	    }
	    return this.hashadd("selections", u);
	}
	return false;
    };
    P.prototype._unselectNodes = function Y(r) {
	var q = mstr.$A.len(r);
	if (q) {
	    var u = {};
	    for ( var s = 0; s < q; s++) {
		var t = r[s];
		if (!t || !t.id) {
		    continue;
		}
		u[t.id] = true;
	    }
	    return this.hashremove("selections", u);
	}
	return false;
    };
    P.prototype._isNodeSelected = function d(q) {
	if (q && q.id) {
	    var r = this.props.selections;
	    return !!(r && r[q.id]);
	}
	return false;
    };
    P.prototype._hasMultiSelections = function S() {
	return !!mstr.utils.Hash.lenGreaterThan(this.props.selections, 1);
    };
    P.prototype.execClearSelect = function n() {
	var q = mstr.$H.clone(this.props.selections);
	this.hashremove("selections", q);
	this.props.anchorNode = null;
    };
    P.prototype.execSelect = function Q(q) {
	this.execClearSelect();
	this.props.anchorNode = q && q[0];
	return this._selectNodes(q);
    };
    P.prototype.execSingleSelect = function N(q) {
	if (this._isNodeSelected(q) && !this._hasMultiSelections()) {
	    return false;
	}
	return this.execSelect([ q ]);
    };
    P.prototype.execEditNode = function A(q) {
	this.set("editNode", q);
	return !!q;
    };
    P.prototype.find = function D(r, q) {
	return mstr.utils.Trees.find(r, q);
    };
    P.prototype.findByNodeId = function a(q) {
	return mstr.utils.Trees.findByNodeForm(this.props.rootNode, q, "id");
    };
    P.prototype.findByForm = function Z(s, r, q) {
	return mstr.utils.Trees.findByForm(s, r, q);
    };
    P.prototype.pathOfItem = function U(s) {
	var q = this.props.valueForm;
	if (q != null) {
	    return this.pathOfValue(s && s[q]);
	} else {
	    var r = this.find(this.props.rootNode, s);
	    return r ? this.getNodePath(r) : null;
	}
    };
    P.prototype.pathOfValue = function T(s) {
	var q = this.props.valueForm;
	if (q != null) {
	    var r = this.findByForm(this.props.rootNode, s, q);
	    return r ? this.getNodePath(r) : null;
	}
	return null;
    };
    P.prototype._pathParts = function O(t) {
	var s = [];
	if (t) {
	    s = t && t.split(P.PATHDELIM);
	    for ( var r = 0, q = s.length; r < q; r++) {
		s[r] = parseInt(s[r]);
	    }
	}
	return s;
    };
    P.prototype._validateNodeId = function B(s) {
	if (s) {
	    if (!s.id) {
		s.id = this.props.id + "_" + P.NEXT_NODE_ID++;
	    }
	    s.treeId = this.props.id;
	    if (s.children) {
		var t = s.children;
		for ( var r = 0, q = mstr.$A.len(t); r < q; r++) {
		    this._validateNodeId(t[r]);
		}
	    }
	}
    };
    P.prototype._unflattenNodes = function l(r) {
	var q = mstr.$A.len(r);
	if (!q) {
	    return;
	}
	for ( var s = 0; s < q; s++) {
	    this._silentInsertNodesAt([ {
		value : r[s].value
	    } ], r[s].path);
	}
    };
    P.prototype._sortPaths = function V(u) {
	var q = mstr.$A.len(u);
	if (!q) {
	    return [];
	}
	var t = new Array(q);
	for ( var s = 0; s < q; s++) {
	    t[s] = {
		originalIndex : s,
		pathIndices : this._pathParts(u[s])
	    };
	}
	t = t.sort(P._pathListSorter);
	var r = new Array(q);
	for ( var s = 0; s < q; s++) {
	    r[s] = u[t[s].originalIndex];
	}
	return r;
    };
    P._pathListSorter = function M(r, q) {
	return mstr.models.AbstractTreeBase._comparePathIndices(r
		&& r.pathIndices, q && q.pathIndices);
    };
    P._comparePathIndices = function e(t, s) {
	var q = Math.max(t && t.length, s && s.length);
	if (q && t && s) {
	    for ( var r = 0; r < q; r++) {
		if ((t[r] == null) && (s[r] != null)) {
		    return -1;
		} else {
		    if ((t[r] != null) && (s[r] == null)) {
			return 1;
		    } else {
			if (t[r] < s[r]) {
			    return -1;
			} else {
			    if (t[r] > s[r]) {
				return 1;
			    }
			}
		    }
		}
	    }
	}
	return 0;
    };
    P.prototype.clone = function m() {
	var r = mstr.$H.clone(this.props);
	r.id = mstr.controllers.Factory.nextFreeId();
	if (r.rootNode) {
	    r.rootNode = mstr.utils.Trees.cloneSubTree(r.rootNode);
	}
	r.selections = {};
	var q = mstr.controllers.Factory.create(r);
	if (!q) {
	    return null;
	}
	mstr.controllers.Factory.add(q);
	q.init && q.init();
	q.setSelectedPaths(this.getSelectedPaths());
	return q;
    };
    P.prototype.init = function K() {
	mstr.models.BaseModel.prototype.init.apply(this);
	this._initRoot();
	this._initSelectedPathList(this.props.selectedPathList);
    };
    P.prototype._initRoot = function H() {
	var q = this.props.rootNode;
	if (q) {
	    this._validateNodeId(q);
	} else {
	    if (this.props.flattenedNodes) {
		this._unflattenNodes(this.props.flattenedNodes);
	    }
	}
    };
    P.prototype._initSelectedPathList = function X(x) {
	if (!x) {
	    return;
	}
	var u = x.split(",");
	var q = u.length;
	var r = [];
	var t;
	for ( var s = 0; s < q; s++) {
	    t = this.getNodeAt(u[s]);
	    if (t) {
		r.push(t);
	    }
	}
	this.execSelect(r);
    };
    function P(q) {
	mstr.models.BaseModel.apply(this, [ q ]);
	if (!this.props.selections) {
	    this.props.selections = {};
	}
    }
    return P;
})();
mstr.models.TreeModel = (function() {
    mstr.$O.extendsClass(l, mstr.models.AbstractTreeBase);
    l.prototype.getRootNode = function U() {
	return this.props.rootNode;
    };
    l.prototype.setRootNode = function h(y) {
	var z = this.props.rootNode;
	if (z == y) {
	    return true;
	}
	if (z) {
	    if (!this.removeNodesAt([ "0" ])) {
		return false;
	    }
	}
	if (y) {
	    return this.insertNodesAt([ y ], "0");
	} else {
	    return !!z;
	}
    };
    l.prototype.insertNodesAt = function X(y, z) {
	if (this._silentInsertNodesAt(y, z)) {
	    this.raiseEvent("insertNodes", {
		nodes : y,
		at : z,
		count : y.length
	    });
	    return true;
	}
	return false;
    };
    l.prototype.removeNodesAt = function D(AE, AA) {
	var y = mstr.$A.len(AE);
	if (!y) {
	    return false;
	}
	if (!AA) {
	    AE = this._sortPaths(AE);
	}
	var z = [], AC, AD;
	for ( var AB = y - 1; AB > -1; AB--) {
	    AD = AE[AB];
	    AC = this.getNodeAt(AD);
	    if (this._silentRemoveNode(AC)) {
		z.push(AD);
	    }
	}
	if (z.length) {
	    this.raiseEvent("removeNodes", {
		at : z
	    });
	    return true;
	}
	return false;
    };
    l.prototype.removeAllChildNodes = function O(AB) {
	if (!AB) {
	    return false;
	}
	var y = mstr.$A.len(AB.children);
	if (!y) {
	    return false;
	}
	if (mstr.utils.Trees.removeAllChildNodes(AB)) {
	    var AC = this.getNodePath(AB);
	    var AD = new Array(y);
	    var z = 0;
	    for ( var AA = y - 1; AA > -1; AA--) {
		AD[z] = AC + mstr.models.AbstractTreeBase.PATHDELIM + AA;
		z++;
	    }
	    this.raiseEvent("removeNodes", {
		at : AD
	    });
	    return true;
	}
	return false;
    };
    l.prototype.execToggleSelect = function E(z) {
	if (!z) {
	    return false;
	}
	if (this._isNodeSelected(z)) {
	    return this._unselectNodes([ z ]);
	} else {
	    var y = mstr.$H.firstItem(this.props.selections);
	    if (y && y.parent == z.parent) {
		this.props.anchorNode = z;
		return this._selectNodes([ z ]);
	    } else {
		return this.execSingleSelect(z);
	    }
	}
    };
    l.prototype.execRangeSelect = function x(AA) {
	var z = this.props.anchorNode;
	var y = this._buildNodeRange(AA, z);
	if (mstr.$A.len(y)) {
	    var AB = this.execSelect(y);
	    this.props.anchorNode = z;
	    return AB;
	} else {
	    return this.execSingleSelect(AA);
	}
    };
    l.prototype.execSelectString = function c(AA) {
	if (!AA) {
	    return false;
	}
	var AC = this.firstSelectionByIndex(), AB = AC && AC.node
		&& AC.node.parent && AC.node.parent.children;
	if (!AB) {
	    return false;
	}
	var z = new RegExp("^" + AA, "i"), y = mstr.utils.Trees.matchByForm(AB,
		z, "n", AC.childIndex + 1);
	return (y > -1) && this.execSingleSelect(AB[y]);
    };
    l.prototype.firstSelectionByIndex = function r() {
	var z = this.props.selections;
	node = mstr.$H.firstItem(z), childIndex = mstr.utils.Trees
		.findChildIndex(node && node.parent, node);
	if ((childIndex > -1) && mstr.$H.lenGreaterThan(z, 1)) {
	    var AA = node.parent, AB = AA && AA.children;
	    for ( var y = 0; y < childIndex; y++) {
		if (z[AB[y].id]) {
		    childIndex = y;
		    break;
		}
	    }
	}
	return {
	    node : node,
	    childIndex : childIndex
	};
    };
    l.prototype.lastSelectionByIndex = function S() {
	var z = this.props.selections;
	node = mstr.$H.firstItem(z), childIndex = mstr.utils.Trees
		.findChildIndex(node && node.parent, node);
	if ((childIndex > -1) && mstr.$H.lenGreaterThan(z, 1)) {
	    var AA = node.parent, AB = AA && AA.children;
	    for ( var y = mstr.$A.len(AB) - 1; y > childIndex; y--) {
		if (z[AB[y].id]) {
		    childIndex = y;
		    break;
		}
	    }
	}
	return {
	    node : node,
	    childIndex : childIndex
	};
    };
    l.prototype._buildNodeRange = function V(AI, AH) {
	if (AI && AH && AI.parent && AI.parent == AH.parent) {
	    var y = [], AA = AI.parent, AF = AA.children, AE = mstr.utils.Trees
		    .findChildIndex(AA, AI), AD = mstr.utils.Trees
		    .findChildIndex(AA, AH), z = Math.min(AE, AD), AG = Math
		    .max(AE, AD);
	    var AB;
	    for ( var AC = z; AC <= AG; AC++) {
		AB = AF[AC];
		if (AB) {
		    y.push(AB);
		}
	    }
	    return y;
	}
	return null;
    };
    l.prototype.importListModel = function I(AK, AN) {
	if (!AK) {
	    return;
	}
	var y = [ "dataSourcesXML", "objectType", "elementSearchRequired",
		"hierarchical", "searchMatchCase", "searchMatchCaseAvailable" ];
	for ( var AE = 0, AB = y.length; AE < AB; AE++) {
	    this.props[y[AE]] = AK.get(y[AE]);
	}
	var AL = AK.props && AK.props.tree && AK.props.tree.getRootNode(), AF;
	var AO = AK.getContainerTree();
	var AC = AO && AO.getRootNode();
	if (AC) {
	    AF = AO.getSelectedNode();
	    if (AF) {
		y = [ "blockBegin", "blockCount", "totalSize", "readyState",
			"searchXML", "leafElements" ];
		for ( var AE = 0, AB = y.length; AE < AB; AE++) {
		    AF[y[AE]] = AK.get(y[AE]);
		}
		AF.drillPaths = AK.get("rmc") && AK.get("rmc").getItems();
		if (AN) {
		    AF.autoExpand = true;
		}
	    }
	}
	if (AL) {
	    var AI = AF || AC;
	    if (AI) {
		mstr.utils.Trees.insertChildNodes(AI, [ AL ], 0, this.getId());
	    } else {
		AC = AL;
	    }
	}
	if (AC) {
	    this.setRootNode(AC);
	    this.execCommand("SingleSelect", AF);
	}
	var AJ = AK.getItems();
	var AH = mstr.$A.len(AJ);
	if (!AH) {
	    return;
	}
	var AD = new Array(AH);
	for ( var AE = 0; AE < AH; AE++) {
	    AD[AE] = {
		value : AJ[AE]
	    };
	}
	var AM = null;
	if (this.getRootNode()) {
	    AM = this.getNodePath(this.getSelectedNode());
	    if (AM != null) {
		AM += mstr.models.AbstractTreeBase.PATHDELIM;
	    }
	} else {
	    if (AH == 1) {
		AM = "";
	    } else {
		this.setRootNode({
		    value : null
		});
		AM = "0" + mstr.models.AbstractTreeBase.PATHDELIM;
	    }
	}
	if (AM != null) {
	    this.insertNodesAt(AD, AM + "0");
	    var AA = [];
	    var z = AK.getSelectedIndices();
	    if (z) {
		for ( var AG in z) {
		    AA.push(AD[parseInt(AG)]);
		}
	    } else {
		AA.push(AD[0]);
	    }
	    this.execCommand("Select", AA);
	}
    };
    l.prototype.execFetchBlock = function K(z, y) {
	if (!y) {
	    y = this.props.editNode;
	}
	if (!y || !z) {
	    return;
	}
	return this.fetchBlock(y, z, y.searchPattern);
    };
    l.prototype.execFetchFirst = function L(y) {
	return this.execFetchBlock(1, y);
    };
    l.prototype.execFetchPrevious = function s(y) {
	return this.execFetchBlock(this._computePreviousBlockBegin(y), y);
    };
    l.prototype.execFetchNext = function m(y) {
	return this.execFetchBlock(this._computeNextBlockBegin(y), y);
    };
    l.prototype.execFetchLast = function C(y) {
	return this.execFetchBlock(this._computeLastBlockBegin(y), y);
    };
    l.prototype.queryEnabledFetchFirst = function a(z) {
	if (z) {
	    var y = z.totalSize;
	    var AA = z.blockCount;
	    return (y > 0) && (AA > 0) && (z.blockBegin > 1);
	}
	return false;
    };
    l.prototype.queryEnabledFetchPrevious = function n(z) {
	if (z) {
	    var y = z.blockBegin;
	    return (y > 1) && (this._computePreviousBlockBegin(z) < y);
	}
	return false;
    };
    l.prototype.queryEnabledFetchNext = function M(y) {
	return this._computeNextBlockBegin(y) > 0;
    };
    l.prototype.queryEnabledFetchLast = function b(z) {
	if (z) {
	    var y = z.blockBegin;
	    return y > 0 && (this._computeLastBlockBegin(z) > y);
	}
	return false;
    };
    l.prototype.queryEnabledFetchBlock = function Y(z) {
	if (!z || !z.value) {
	    z = this.props.editNode;
	}
	if (z) {
	    var AA = z.blockCount;
	    var y = z.totalSize;
	    return (z.readyState == mstr.Enum.Widget.READYSTATE.IDLE)
		    && (AA > 0) && (y > 0) && (AA < y);
	}
	return (!z);
    };
    l.prototype._computePreviousBlockBegin = function G(z) {
	if (z) {
	    var y = z.totalSize;
	    var AA = z.blockCount;
	    if (y > 0 && AA > 0) {
		return Math.max(1, z.blockBegin - AA);
	    }
	}
	return -1;
    };
    l.prototype._computeNextBlockBegin = function e(z) {
	if (z) {
	    var y = z.totalSize;
	    var AA = z.blockCount;
	    if (y > 0 && AA > 0) {
		if (z.blockBegin + AA <= y) {
		    return z.blockBegin + AA;
		}
	    }
	}
	return -1;
    };
    l.prototype._computeLastBlockBegin = function d(z) {
	if (z) {
	    var y = z.totalSize;
	    var AA = z.blockCount;
	    if (y > 0 && AA > 0) {
		var AB = y % AA;
		if (AB == 0) {
		    AB = AA;
		}
		return y - AB + 1;
	    }
	}
	return -1;
    };
    l.prototype.getFetchBlockModel = function t() {
	var y = this.props.fetchBlockModel;
	if (!y) {
	    y = new mstr.models.ConstantPromptAnswer({
		parent : this,
		dataType : mstr.Enum.Nodes.DATATYPE.INTEGER
	    });
	    if (!y) {
		return null;
	    }
	    mstr.controllers.Factory.add(y);
	    y.init && y.init();
	    this.props.fetchBlockModel = y;
	}
	var AA = this.props.editNode;
	if (!AA) {
	    return null;
	}
	var z = parseInt(AA.totalSize) || 0;
	y.set("min", Math.min(1, z));
	y.set("max", z);
	y.set("valueString", parseInt(AA.blockBegin) || "");
	return y;
    };
    l.prototype.getNodeBrowseType = function N(AB, AC, z, y) {
	if (AC == null) {
	    AC = true;
	}
	if (z == null) {
	    z = true;
	}
	if (y == null) {
	    y = true;
	}
	if (!AC && !z && !y) {
	    return null;
	}
	var AA = AB && AB.value;
	if (!AA) {
	    return null;
	}
	if (AA.locked) {
	    return null;
	}
	switch (parseInt(AA.tp)) {
	case mstr.Enum.MSTRFolderItem.TYPE.PROJECT:
	    return null;
	case mstr.Enum.MSTRFolderItem.TYPE.FOLDER:
	    return AC ? "BrowseFolder" : null;
	    break;
	default:
	    if (!y && !z) {
		return null;
	    }
	    if (AB.isWithinHierarchy == null) {
		AB.isWithinHierarchy = mstr.utils.ListViewHelper
			.isWithinHierarchy(AB);
	    }
	    if (AB.isWithinHierarchy) {
		return y ? "BrowseHierarchyItem" : null;
	    } else {
		if (z) {
		    if (parseInt(AB.value.tp) == mstr.Enum.MSTRFolderItem.TYPE.ATTRIBUTE) {
			return "BrowseAttribute";
		    }
		}
	    }
	    break;
	}
    };
    l.prototype.fetchBlock = function B(AL, AE, AJ) {
	var AB = function(AT, AU, AR) {
	    var AS = {
		value : AU,
		autoExpand : true
	    };
	    this.insertNodesAt([ AS ], this.getNodePath(AT)
		    + mstr.models.AbstractTreeBase.PATHDELIM + "0");
	    this.setNodeReadyState(AT, mstr.Enum.Widget.READYSTATE.IDLE);
	    AT.totalSize = AR;
	    AT.blockCount = AR;
	    AT.blockBegin = 1;
	    AT.leafElements = false;
	    return AS;
	};
	switch (this.getNodeBrowseType(AL)) {
	case "BrowseFolder":
	    return this.browseFolderBlock(AL.value.dssid, AE, AJ, AL);
	    break;
	case "BrowseAttribute":
	    return this.browseAttributeBlock(AL.value.dssid, AE, AJ, AL);
	    break;
	case "BrowseHierarchyItem":
	    var AK = this._buildHierarchyPathForNode(AL);
	    var AD = [], AC = 0, AF = AL
		    && (AL.parent && AL.parent.drillPaths || AL.value
			    && AL.value.filters);
	    for ( var AM = 0, AN = mstr.$A.len(AF); AM < AN; AM++) {
		if (AF[AM]
			&& (AF[AM]["drillDir"] == "down" || AF[AM]["tp"] == "1")) {
		    AD.push(AF[AM]);
		    AC++;
		}
	    }
	    if ((AC > 1 && !AJ) || ((AC == 1) && AD[0]["locked"])) {
		var AH = [];
		for ( var AM = 0; AM < AC; AM++) {
		    AH.push({
			value : AD[AM]
		    });
		}
		this.insertNodesAt(AH, this.getNodePath(AL)
			+ mstr.models.AbstractTreeBase.PATHDELIM + "0");
		this.setNodeReadyState(AL, mstr.Enum.Widget.READYSTATE.IDLE);
		AL.totalSize = AC;
		AL.blockCount = AC;
		AL.blockBegin = 1;
		AL.leafElements = false;
	    } else {
		var AG = AC > 0 && AD[0]["tp"] == "1" && AJ;
		var z = this.canAutoExpandOnDrill() || AG;
		if (z && (AC == 1 || AG)
			&& (!AD[0]["locked"] || AF[AM]["tp"] == "1")) {
		    AK += (AD[0].tp == "1" ? l.ELE_FILTER_ATT_DELIM
			    : l.HIERARCHY_PATHDELIM)
			    + encodeBrowsePathElement(AD[0][this.props.valueForm]);
		    AL = AB.call(this, AL, AD[0], AC);
		    if (AL.value.tp == "12" && AL.value.filters
			    && AL.value.filters.length == 1) {
			var AA = AL.value.filters[0];
			AK += (AA.tp == "1" ? l.ELE_FILTER_ATT_DELIM
				: l.HIERARCHY_PATHDELIM)
				+ encodeBrowsePathElement(AA[this.props.valueForm]);
			AL = AB.call(this, AL, AA, 1);
		    }
		}
		if (!AJ && this.props.elementSearchRequired) {
		    var AP = AL && AL.value, AQ = parseInt(AP.tp);
		    if (AQ == mstr.Enum.MSTRFolderItem.TYPE.ATTRIBUTE
			    || AQ == mstr.Enum.MSTRFolderItem.TYPE.FILTER) {
			var AO = AL.parent, AI = AO && AO.value, y = AI
				&& AI.tp;
			nparpartp = AO && AO.parent && AO.parent.value
				&& AO.parent.value.tp;
			if ((AQ == mstr.Enum.MSTRFolderItem.TYPE.ATTRIBUTE
				&& y == mstr.Enum.MSTRFolderItem.TYPE.HIERARCHY && !mstr.$A
				.len(AP.filters))
				|| (AQ == mstr.Enum.MSTRFolderItem.TYPE.FILTER
					&& y == mstr.Enum.MSTRFolderItem.TYPE.ATTRIBUTE && nparpartp == mstr.Enum.MSTRFolderItem.TYPE.HIERARCHY)) {
			    AL.elementSearchRequired = true;
			    this.setNodeReadyState(AL,
				    mstr.Enum.Widget.READYSTATE.ERROR);
			    return true;
			}
		    }
		}
		return this.browseHierarchyBlock(AK, AE, AJ, {
		    commandId : "BrowseHierarchyItem",
		    node : AL,
		    searchPattern : AJ
		});
	    }
	    break;
	}
	return false;
    };
    l.prototype.browseFolderBlock = function g(z, AC, AE, AB) {
	if (!AB || !AC || AC < 0) {
	    return false;
	}
	var AD = "", AF = AB;
	while (AF && !AD) {
	    AD = AF.searchXML;
	    AF = AF.parent;
	}
	if (!AD) {
	    AD = "";
	}
	if (!z && !AD) {
	    return false;
	}
	var y, AA;
	if (AE != null && AE != "") {
	    y = new mstr.http.MetadataSearchRequestInputs(z || "", AC,
		    mstr.utils.ListViewHelper
			    .getFetchBlockForTask("searchMetadata"),
		    AB.totalSize || 0, this.props.objectType || "", AD, AE,
		    this.props.dataSourcesXML);
	    AA = {
		commandId : "Search",
		searchPattern : AE,
		node : AB
	    };
	} else {
	    y = new mstr.http.BrowseFolderRequestInputs(z || "", AC,
		    mstr.utils.ListViewHelper
			    .getFetchBlockForTask("searchMetadata"),
		    AB.totalSize || 0, this.props.hierarchical,
		    this.props.objectType || "", AD, this.props.dataSourcesXML);
	    AA = {
		commandId : "BrowseFolder",
		node : AB
	    };
	}
	this.submitRequest(y, AA);
	return true;
    };
    l.prototype.browseAttributeBlock = function Z(AC, AB, AD, AA) {
	if (!AA || !AC || !AB || AB < 0) {
	    return false;
	}
	if (AD == null) {
	    AD = "";
	}
	var y = new mstr.http.BrowseAttributeRequestInputs(AC, AB,
		mstr.utils.ListViewHelper
			.getFetchBlockForTask("browseElements"),
		AA.totalSize || 0, false, AD,
		this.props.searchMatchCaseAvailable
			&& this.props.searchMatchCase, AA.filterXML
			|| (AA.parent && AA.parent.filterXML) || "",
		this.props.dataSourcesXML || "");
	var z = {
	    commandId : "BrowseAttribute",
	    searchPattern : AD,
	    node : AA
	};
	this.submitRequest(y, z);
	return true;
    };
    l.prototype.browseHierarchyBlock = function A(AC, AA, AB, z) {
	if (!AA || AA < 0) {
	    return false;
	}
	if (AB == null) {
	    AB = "";
	}
	var y = new mstr.http.DataExploreRequestInputs(AC, AB,
		this.props.searchMatchCaseAvailable
			&& this.props.searchMatchCase, AA,
		mstr.utils.ListViewHelper
			.getFetchBlockForTask("browseHierarchy"),
		this.props.dataSourcesXML || "");
	this.submitRequest(y, z);
	return true;
    };
    l.prototype.canAutoExpandOnDrill = function Q() {
	var y = this.props.autoExpandOnDrill;
	return (y === false || y === true) ? y
		: mstr.Settings.DataExplorer.AUTOEXPANDONDRILL;
    };
    l.HIERARCHY_PATHDELIM = "~";
    l.ELE_FILTER_ATT_DELIM = ",";
    l.prototype._buildHierarchyPathForNode = function J(AB) {
	var AC = [], y = this.props.valueForm, AA, AD, z;
	while (AB) {
	    if (AB.hierarchyPath != null) {
		if (z
			&& AB.value
			&& parseInt(AB.value.tp) == mstr.Enum.MSTRFolderItem.TYPE.ATTRIBUTE) {
		    AC.unshift((AB.hierarchyPath) + l.ELE_FILTER_ATT_DELIM
			    + encodeBrowsePathElement(z[y]));
		    z = null;
		} else {
		    AC.unshift((AB.hierarchyPath));
		}
		break;
	    } else {
		AA = AB.value;
		if (!AA) {
		    break;
		}
		AD = parseInt(AA.tp);
		switch (AD) {
		case mstr.Enum.MSTRFolderItem.TYPE.ATTRIBUTE:
		    if (z) {
			AC.unshift(encodeBrowsePathElement(AA[y])
				+ l.ELE_FILTER_ATT_DELIM
				+ encodeBrowsePathElement(z[y]));
			z = null;
			break;
		    }
		case mstr.Enum.MSTRFolderItem.TYPE.HIERARCHY:
		case mstr.Enum.MSTRFolderItem.TYPE.ELEMENT:
		    AC.unshift(encodeBrowsePathElement(AA[y]));
		    z = null;
		    break;
		case mstr.Enum.MSTRFolderItem.TYPE.FILTER:
		    z = AA;
		    break;
		case mstr.Enum.MSTRFolderItem.TYPE.PROJECT:
		case mstr.Enum.MSTRFolderItem.TYPE.FOLDER:
		default:
		    AD = null;
		    AB = null;
		    z = null;
		    break;
		}
	    }
	    if (AD == mstr.Enum.MSTRFolderItem.TYPE.HIERARCHY) {
		break;
	    }
	    AB = AB && AB.parent;
	}
	return AC.join(l.HIERARCHY_PATHDELIM);
    };
    l.prototype.onRequestCallback = function W(AA) {
	var y = this.props.requestContext;
	if (!AA || !y || (y.id != AA.id)) {
	    return;
	}
	var AB = mstr.models.AbstractTreeBase.prototype.onRequestCallback
		.apply(this, [ AA ]);
	var z = y.memo && y.memo.node;
	if (z) {
	    this.setNodeReadyState(z, AA.readyState);
	}
	return AB;
    };
    l.prototype.setNodeReadyState = function F(AA, y) {
	if (AA) {
	    var z = AA.readyState;
	    if (parseInt(z) != parseInt(y)) {
		AA.readyState = y;
		this.raiseEvent("set_nodeReadyState", {
		    name : "readyState",
		    node : AA,
		    value : y,
		    valueWas : z
		});
		return true;
	    }
	}
	return false;
    };
    l.prototype.loadRequestResponse = function o() {
	var AH = this.props.requestContext;
	var AB = AH && AH.memo && AH.memo.node;
	if (!AB) {
	    this.set("readyState", mstr.Enum.Widget.READYSTATE.ERROR);
	    return;
	}
	var AJ = AH.response;
	if (!AJ || !AJ.data) {
	    this.setNodeReadyState(AB, mstr.Enum.Widget.READYSTATE.ERROR);
	    this.set("readyState", mstr.Enum.Widget.READYSTATE.ERROR);
	    return;
	}
	var AC = AJ.data;
	var AK = AC.props && AC.props.tree && AC.props.tree.getRootNode();
	if (!AB.value.did && !AB.value.dssid && this.getRootNode() == AB) {
	    var AG = this.props.hierarchical;
	    this.importListModel(AC, true);
	    if (AG && !this.props.hierarchical) {
		this.props.hierarchical = AG;
	    }
	} else {
	    if (AK) {
		AB = AB.parent;
		this.removeAllChildNodes(AB);
		AB.children = [ AK ];
		AK.parent = AB;
		this.insertNodesAt([ AK ], this.getNodePath(AB)
			+ mstr.models.AbstractTreeBase.PATHDELIM + "0");
		this.execSingleSelect(AB);
	    } else {
		var AL = [ "totalSize", "blockCount", "blockBegin",
			"leafElements" ];
		for ( var AD = 0; AD < AL.length; AD++) {
		    AB[AL[AD]] = AC.get(AL[AD]);
		}
		AB.searchPattern = AH.memo.searchPattern;
		AB.drillPaths = AC.get("rmc") && AC.get("rmc").getItems();
		this.removeAllChildNodes(AB);
		var AI = AC.getItems();
		var AF = mstr.$A.len(AI);
		if (AF) {
		    var y = AB
			    && AB.isWithinHierarchy
			    && (AB.value && AB.value.tp == mstr.Enum.MSTRFolderItem.TYPE.ATTRIBUTE);
		    var z = new Array(AF);
		    for ( var AD = 0; AD < AF; AD++) {
			z[AD] = {
			    value : AI[AD]
			};
			if (y
				&& AI[AD]
				&& AI[AD].tp == mstr.Enum.MSTRFolderItem.TYPE.FILTER) {
			    if (AB.value && !AB.value.filters) {
				AB.value.filters = [];
			    }
			    var AA = AB.value && AB.value.filters;
			    if (AA
				    && (mstr.utils.Arrays.findByForm(AA,
					    AI[AD][this.props.valueForm],
					    this.props.valueForm) < 0)) {
				AB.value.filters[AB.value.filters.length] = AI[AD];
			    }
			}
		    }
		    this.insertNodesAt(z, this.getNodePath(AB)
			    + mstr.models.AbstractTreeBase.PATHDELIM + "0");
		}
		var AE = this.getSelectedNode();
		if (AE && AE.parent) {
		    this.execSingleSelect(AE);
		} else {
		    this.execClearSelect();
		}
	    }
	}
	this.props.requestContext = {};
	this.setNodeReadyState(AB, mstr.Enum.Widget.READYSTATE.IDLE);
	this.set("readyState", mstr.Enum.Widget.READYSTATE.IDLE);
    };
    l.prototype.cancelRequest = function q(AB) {
	var z = this.props.requestContext;
	var AA = z && z.memo && z.memo.node;
	if (AA
		&& (AA.readyState == mstr.Enum.Widget.READYSTATE.WAITING || AA.readyState == mstr.Enum.Widget.READYSTATE.SUCCESS)) {
	    this.setNodeReadyState(AA, mstr.Enum.Widget.READYSTATE.CANCELLED);
	}
	var y = mstr.models.AbstractTreeBase.prototype.cancelRequest.apply(
		this, [ AB ]);
	return y;
    };
    l.prototype.execSearch = function T(y) {
	return this.execSearchNode({
	    node : this.getSelectedNode(),
	    searchPattern : y
	});
    };
    l.prototype.execSearchNode = function u(AD) {
	var AE = AD && AD.node, AF = AD && AD.searchPattern;
	if (!AE) {
	    return false;
	}
	var z = this.props.searchResultsNode;
	if (z && z.parent) {
	    this.removeNodesAt([ this.getNodePath(z) ]);
	}
	var AB = this.props.searchResultsNode = this._createSearchResultsNode(
		AE, AF);
	if (AB) {
	    var AA = this.props.rootNode;
	    if (!AA) {
		return null;
	    }
	    var y = mstr.$A.len(AA.children);
	    this.insertNodesAt([ AB ], "0"
		    + mstr.models.AbstractTreeBase.PATHDELIM + y);
	    var AC = AB.children[0];
	    if (AC.children && AC.children.length) {
		AC = AC.children[0];
	    }
	    this.fetchBlock(AC, 1, AF);
	    this.execSingleSelect(AC);
	    return true;
	}
	return false;
    };
    l.prototype._createSearchResultsNode = function H(AD, AC) {
	var AA = mstr.$H.clone(AD);
	AA.value = mstr.$H.clone(AD.value);
	var AB = "", AE = AA;
	while (AE && !AB) {
	    AB = AE.searchXML;
	    AE = AE.parent;
	}
	if (!AB) {
	    AB = "";
	}
	AA.parent = null;
	AA.children = [];
	AA.id = null;
	AA.readyState = mstr.Enum.Widget.READYSTATE.WAITING;
	AA.isWithinHierarchy = mstr.utils.ListViewHelper.isWithinHierarchy(AD);
	if (AA.isWithinHierarchy) {
	    AA.hierarchyPath = this._buildHierarchyPathForNode(AD);
	    if (AA.value && AA.value.tp == mstr.Enum.MSTRFolderItem.TYPE.FILTER
		    && AD.parent) {
		var y = mstr.$H.clone(AD.parent);
		y.value = mstr.$H.clone(AD.parent.value);
		y.parent = null;
		y.children = [ AA ];
		y.id = null;
		y.hierarchyPath = this._buildHierarchyPathForNode(AD.parent);
		AA.parent = y;
		AA = y;
	    }
	}
	var z = {
	    value : {
		icon : "f",
		tp : -1,
		n : (microstrategy.descriptors.getDescriptor("538")) + " " + AC,
		dssid : null
	    },
	    searchXML : AB
	};
	z.children = [ AA ];
	AA.parent = z;
	return z;
    };
    l.prototype._updateCommandEnabledSearch = function R() {
	var y = false;
	var z = false;
	var AB = this.props.selections;
	if (!mstr.$H.lenGreaterThan(AB, 1) && !mstr.$H.isEmpty(AB)) {
	    var AA = mstr.$H.firstItem(AB);
	    switch (AA && AA.value && parseInt(AA.value.tp)) {
	    case mstr.Enum.MSTRFolderItem.TYPE.FOLDER:
		z = false;
		y = true;
		break;
	    case mstr.Enum.MSTRFolderItem.TYPE.ATTRIBUTE:
		if (AA.value.locked) {
		    z = y = false;
		} else {
		    if (mstr.utils.ListViewHelper.isWithinHierarchy(AA)) {
			z = y = true;
		    } else {
			z = y = false;
		    }
		}
		break;
	    case mstr.Enum.MSTRFolderItem.TYPE.FILTER:
		y = mstr.utils.ListViewHelper.isWithinHierarchy(AA);
		z = y;
		break;
	    }
	}
	this.set("CommandEnabledSearch", y);
	this.set("searchMatchCaseAvailable", z);
    };
    l.prototype.on_hashadd_selections = l.prototype.on_hashremove_selections = function P(
	    y) {
	if (y && y.src == this) {
	    this._updateCommandEnabledSearch();
	}
    };
    function l(y) {
	mstr.models.AbstractTreeBase.apply(this, [ y ]);
    }
    return l;
})();
mstr.behaviors.FetchControl = (function() {
    var E = {};
    E.fireFetchCommand = function B(J, I, M) {
	var K = mstr.$obj(J);
	var H = K && K.getModel();
	var L = K.get("targetView");
	if (!L && K.get("targetViewPath")) {
	    K.props.targetView = L = mstr.controllers.Factory.getPath(K
		    .get("targetViewPath"), K);
	}
	if (L && L.restoreFocus) {
	    L.restoreFocus();
	}
	if (H && H.queryCommandEnabled(I)) {
	    H.execCommand(I, M);
	}
    };
    E.on_set_enabled = function A(O, L, R) {
	var M = O.props.enabled;
	var Q = R.rows[0].cells;
	M = O.props.enabledCaption = M && L
		&& L.queryCommandEnabled("FetchBlock");
	var P = Q[2].childNodes[0];
	P.disabled = !M;
	var I = [ "FetchFirst", "FetchPrevious", null, "FetchNext", "FetchLast" ], K = [
		"fetchFirst", "fetchPrevious", null, "fetchNext", "fetchLast" ];
	for ( var J = 0; J < I.length; J++) {
	    if (!I[J]) {
		continue;
	    }
	    var H = M && L && L.queryCommandEnabled(I[J]);
	    var N = K[J] + (H ? "" : "Disabled");
	    mstr.utils.Dom.setBGIconClass(Q[J].firstChild, N);
	    Q[J].firstChild.style.cursor = H ? "pointer" : "";
	}
    };
    E.on_set_visible = function D(H, I, J) {
	E.update_css_display(H, J);
	if (H.props.visible) {
	    this.updateCaption(H, I, J);
	}
    };
    E.update_css_display = function F(H, M) {
	var L = H.props, K = L.visible, J = L.needsFetch;
	mstr.behaviors.Generic.set_css_display(M, "table", "none",
		!!K !== false);
	var I = M.rows[0].cells;
	mstr.behaviors.Generic.set_css_display(I[0].firstChild, "block",
		"none", !!J !== false);
	mstr.behaviors.Generic.set_css_display(I[1].firstChild, "block",
		"none", !!J !== false);
	mstr.behaviors.Generic.set_css_display(I[3].firstChild, "block",
		"none", !!J !== false);
	mstr.behaviors.Generic.set_css_display(I[4].firstChild, "block",
		"none", !!J !== false);
    };
    E.on_model_set_readyState = function C(H, I, J) {
	if (I && I.get("readyState") == mstr.Enum.Widget.READYSTATE.IDLE) {
	    this.updateCaption(H, I, J);
	}
    };
    E.updateCaption = function G(L, I, P) {
	var O = L.props.descriptors.noItems, H = false;
	if (I) {
	    var M = parseInt(I.props.blockBegin) || 0;
	    var K = parseInt(I.props.blockCount) || 0;
	    var Q = parseInt(I.props.totalSize) || 0;
	    if (Q && M) {
		var J = (K > 0) ? Math.min(M + K - 1, Q) : Q;
		O = microstrategy.descriptors.getDescriptor("117");
		O = O.replace(/####/, Q).replace(/###/, J).replace(/##/, M);
		H = (M > 1) || (K < Q);
	    }
	}
	var N = P.rows[0].cells[2].childNodes[0];
	N.innerHTML = O;
	L.props.needsFetch = H;
	E.update_css_display(L, P);
    };
    E.on_mousedown = function(H) {
	var I = mstr.$obj(H);
	if (I && I.props.enabled) {
	    I.execCommand("OpenPopup", {
		popup : mstr.$obj("FetchBlockPopup1")
	    });
	}
	return true;
    };
    return E;
})();
mstr.behaviors.TreeView = (function() {
    var C = {};
    C.isTargetTextbox = function E(H, F) {
	var G = mstr.utils.Events.target(H, F);
	return !!(G && G.type == "text");
    };
    C.redirectFocus = function A(H, G, F) {
	if (!this.isTargetTextbox(H, G)) {
	    try {
		document.getElementById(F + "TabStop").focus();
	    } catch (I) {
	    }
	}
	return true;
    };
    C.onmouseupRootParent = function(H, G, F) {
	if (mstr.utils.ISFF || !this.isTargetTextbox(H, G)) {
	    mstr.behaviors.Generic.clearBrowserHighlights(G);
	}
	this.redirectFocus(H, G, F);
	return true;
    };
    C.onmousedownRootParent = function(H, G, F) {
	this.onmousedown(H, G, F);
	this.redirectFocus(H, G, F);
	return true;
    };
    C.onmousedown = function D(L, J, O) {
	var P = new mstr.lang.Event(L, J);
	var I = P.ctrl(), R = P.shift();
	if (I || R) {
	    mstr.utils.Dom.clearBrowserHighlights(J);
	}
	var M = mstr.$obj(O);
	if (!M || !M.fireCommands) {
	    return true;
	}
	var K = {
	    nodeId : null,
	    ctrl : I,
	    shift : R,
	    x : P.x + 3,
	    y : P.y + 3
	};
	var H = P.target();
	var Q = mstr.utils.Dom.findAncestor(H, "mstrTreeNodeInfo", null,
		M.props[mstr.$W.ELEMENT], true);
	if (Q) {
	    K.nodeId = Q.mstrTreeNodeInfo;
	    K.elNode = Q;
	    var N = mstr.utils.ListViewHelper.getItemRenderer(M);
	    K.expandState = N && N.getNodeExpandState
		    && N.getNodeExpandState(Q);
	    var G = mstr.utils.Dom.findAncestor(H, "mstrTreeNodePart", null, Q,
		    true);
	    K.elNodePart = G;
	    K.part = G && !G.disabled ? G.mstrTreeNodePart : null;
	    var F = mstr.utils.Dom.findAncestor(H, "mstrPopupInfo", null, Q,
		    true);
	    K.popup = F && !F.disabled ? F.mstrPopupInfo : null;
	}
	M.fireCommands(null, K);
	return true;
    };
    C.ondblclick = function B(J, H, G) {
	var I = mstr.$obj(G);
	if (!I || !I.fireCommands) {
	    return true;
	}
	var F = I.props.cmdsDblClick;
	if (!F) {
	    return true;
	}
	I.fireCommands(F, null);
	return true;
    };
    return C;
})();
mstr.behaviors.ExpandableTreeView = (function() {
    var R = {};
    R.renderNode = function B(g, c, n, W) {
	if (!W || !W.node) {
	    return null;
	}
	var Y = (g.props.cssPrefix || "") + (g.props.itemCSSPrefix || ""), Z = W.node, e = Z.value;
	var l = false;
	if (!Z.parent && g.props.hideRootNodeTypes && e && e.tp) {
	    var b = mstr.$A
		    .toHash(String(g.props.hideRootNodeTypes).split(","));
	    l = !!b[e.tp];
	}
	var X = this.generateNodeElement(Z, g.props.document, Y, l);
	var m = g && g.getExtraNodeCssClass && g.getExtraNodeCssClass(Z) || "";
	if (m) {
	    X.className = X.className + " " + m;
	}
	var V;
	if (l || mstr.$A.len(Z.children)) {
	    V = 1;
	} else {
	    if (Z.autoExpand) {
		V = 1;
	    } else {
		switch (parseInt(Z.readyState)) {
		case mstr.Enum.Widget.READYSTATE.WAITING:
		case mstr.Enum.Widget.READYSTATE.SUCCESS:
		    V = 1;
		    break;
		default:
		    V = W.browseType ? 0 : 2;
		    break;
		}
	    }
	}
	this._renderNodeExpandState(X, V, g.props.allowExpandCollapse,
		g.props.autoCollapse && (Z.parent));
	var h = W.node.parent;
	this._renderNodePosition(X, !h || (h.children[0] == W.node), !h
		|| (h.children[h.children.length - 1] == W.node), !h);
	if (c && c._isNodeSelected(Z)) {
	    this._renderNodeValueState(g, X, true);
	}
	var a = Z.readyState;
	if (a != null) {
	    this._renderNodeReadyState(g, c, Z, X);
	}
	var d = this.findLocationForNode(W.treeRootParent,
		c._pathParts(W.path), Y);
	mstr.utils.Dom.insertNode(X, d.parent, d.before);
	return X;
    };
    R.scrollToNode = function D(e, a, l, V) {
	if (!V) {
	    return;
	}
	if (V.paddingLeft == null) {
	    V.paddingLeft = 0;
	}
	if (V.paddingRight == null) {
	    V.paddingRight = 35;
	}
	if (V.paddingTop == null) {
	    V.paddingTop = 0;
	}
	if (V.paddingBottom == null) {
	    V.paddingBottom = 35;
	}
	var Y = V.treeRootParent.parentNode;
	if (!Y) {
	    return;
	}
	if (!V.el) {
	    var c = this.findLocationForNode(V.treeRootParent, a
		    ._pathParts(V.path));
	    V.el = c && c.before;
	}
	if (!V.el) {
	    return;
	}
	var g = (mstr.utils.ISIE4 && !mstr.utils.ISIE8PLUS) ? mstr.utils.BoxModel
		.getElementSumOffsetLeft(V.el, Y)
		: mstr.utils.BoxModel
			.getElementSumOffsetLeftAccurately(V.el, Y);
	var d = (mstr.utils.ISIE4 && !mstr.utils.ISIE8PLUS) ? mstr.utils.BoxModel
		.getElementSumOffsetTop(V.el, Y)
		: mstr.utils.BoxModel.getElementSumOffsetTopAccurately(V.el, Y);
	var b = {
	    x : null,
	    y : null
	};
	var Z = Y.clientWidth;
	var X = Y.scrollLeft;
	if (g < X + V.paddingLeft) {
	    b.x = g + V.paddingLeft;
	} else {
	    if (g > X + Z - V.paddingRight) {
		b.x = Math.max(g - Z + V.paddingRight, 0);
	    }
	}
	var h = Y.clientHeight;
	var W = Y.scrollTop;
	if (d < W + V.paddingTop) {
	    b.y = d;
	} else {
	    if (d > W + h - V.paddingBottom) {
		b.y = Math.max(d - h + V.paddingBottom, 0);
	    }
	}
	if (b.x != null || b.y != null) {
	    mstr.utils.Animations.scroll(Y, b.x, b.y);
	}
    };
    R.markNodePosition = function N(V, W, a, X) {
	var Z = this
		.findLocationForNode(X.treeRootParent, W._pathParts(X.path));
	if (!Z || !Z.before) {
	    return;
	}
	var Y = X.node.parent;
	this._renderNodePosition(Z.before, !Y || (Y.children[0] == X.node), !Y
		|| (Y.children[Y.children.length - 1] == X.node), !Y);
    };
    R._renderNodePosition = function A(W, Y, Z, V) {
	var a = "", X = "no-repeat";
	if (!V) {
	    if (Z) {
		a = "treeViewChildConnectorLast";
	    } else {
		a = "treeViewChildConnector";
		X = "repeat-y";
	    }
	}
	if (a) {
	    mstr.utils.Dom.setBGIconClass(W, a);
	}
	"";
	W.style.backgroundRepeat = X;
    };
    R.markNodeReadyState = function I(V, W, a, X) {
	if (W && X && X.node && X.treeRootParent) {
	    var Y = W.getNodePath(X.node);
	    var Z = this.findLocationForNode(X.treeRootParent, W._pathParts(Y));
	    if (!Z || !Z.before) {
		return;
	    }
	    this._renderNodeReadyState(V, W, X.node, Z.before);
	}
    };
    R._renderNodeReadyState = function F(n, e, b, X) {
	if (!b) {
	    return;
	}
	var Y = X.childNodes[1];
	var o = Y.childNodes[0], c = Y.childNodes[1], a = Y.childNodes[2], q = Y.childNodes[3];
	if (!o) {
	    var h = Y.className;
	    o = Y.ownerDocument.createElement("div");
	    Y.appendChild(o);
	    o.className = h.replace("LongDisplay", "Fetch");
	    c = Y.ownerDocument.createElement("div");
	    Y.appendChild(c);
	    c.className = h.replace("LongDisplay", "Msg");
	    var a = Y.ownerDocument.createElement("div");
	    Y.appendChild(a);
	    a.className = h.replace("LongDisplay", "ChildrenContainer");
	    q = doc.createElement("div");
	    Y.appendChild(q);
	    q.className = h.replace("LongDisplay", "FetchBottom");
	}
	var d = parseInt(b.readyState);
	if (d == mstr.Enum.Widget.READYSTATE.IDLE) {
	    this._updateFetchControls(n, e, b, o);
	    this._updateFetchControls(n, e, b, q);
	}
	var Z = null, V = null;
	var g = n.props.descriptors;
	switch (d) {
	case mstr.Enum.Widget.READYSTATE.ERROR:
	    if (b.elementSearchRequired) {
		Z = n.props.descriptors.searchRequiredText
			+ '<br><input type="text" class="mstrTreeViewSearch" onkeypress="mstr.behaviors.ExpandableTreeView.onSearchKeyPress(arguments[0], self, \''
			+ n.props.id
			+ "' ,this.value, '"
			+ b.id
			+ '\' )" /><img src="../style/mstr/images/tbSearchEnabled.gif" align="absmiddle" title="" alt="Search"  onclick="mstr.behaviors.ExpandableTreeView.onClickSearchBtn(\''
			+ n.props.id + "' ,this.previousSibling.value, '"
			+ b.id + "' )\" />";
	    } else {
		var l = e && e.props.requestContext, m = l && l.response, W = m
			&& m.errorMessage, Z = g && g.errorText;
		if (W) {
		    Z = Z + ' <a href="javascript:void(0)" onclick="alert(\''
			    + W.replace(/'/g, "\\'").replace(/[\r\n]/g, "")
			    + "');return false;\">" + (g && g.errorDetailsText)
			    + "</a>";
		}
	    }
	    V = "exclamRed.gif";
	    break;
	case mstr.Enum.Widget.READYSTATE.WAITING:
	    Z = g && g.waitingText;
	    V = "treeLoading.gif";
	    break;
	case mstr.Enum.Widget.READYSTATE.SUCCESS:
	    Z = g && g.loadingText;
	    V = "treeLoading.gif";
	    break;
	case mstr.Enum.Widget.READYSTATE.CANCELLED:
	    Z = g && g.requestCancelledText;
	    V = "exclamRed.gif";
	    break;
	case mstr.Enum.Widget.READYSTATE.TIMEOUT:
	    Z = g && g.requestTimeOutText;
	    V = "exclamRed.gif";
	    break;
	default:
	    break;
	}
	c.style.display = Z ? "block" : "none";
	if (Z) {
	    c.innerHTML = Z;
	}
	c.style.backgroundImage = V ? "url(../style/mstr/images/" + V + ")"
		: "";
    };
    R.onSearchKeyPress = function Q(Y, W, V, X, Z) {
	Y = Y || W.event;
	if (Y.keyCode == 13) {
	    this.onClickSearchBtn(V, X, Z);
	    return false;
	}
	return true;
    };
    R.onClickSearchBtn = function C(W, a, c) {
	var X = mstr.$obj(W), b = X && X.props, V = b && b.cmdsSearch;
	if (X && V && a) {
	    var Y = b.model, Z = Y
		    && mstr.utils.Trees.findByNodeForm(Y.props.rootNode, c,
			    "id");
	    if (Z) {
		X.fireCommands(V, {
		    node : Z,
		    searchPattern : a
		});
	    }
	}
	return true;
    };
    R._updateFetchControls = function E(d, Z, n, h) {
	if (!n) {
	    return;
	}
	if (!h.childNodes[0]) {
	    this._buildFetchControls(d, h);
	    if (!h.childNodes[0]) {
		return;
	    }
	}
	var l = (n.blockCount > 0 && n.totalSize > n.blockCount);
	if (l) {
	    h.style.display = "block";
	    var Y = h.childNodes[0].rows[0].cells;
	    var m = [ "FetchFirst", "FetchPrevious", null, "FetchNext",
		    "FetchLast" ];
	    var o = [ "fetchFirst", "fetchPrevious", null, "fetchNext",
		    "fetchLast" ];
	    var X = [ "fetchFirstDisabled", "fetchPreviousDisabled", null,
		    "fetchNextDisabled", "fetchLastDisabled" ];
	    var V, W;
	    for ( var q = 0; q < m.length; q++) {
		if (!m[q]) {
		    continue;
		}
		W = Y[q].childNodes[0];
		V = !!(Z && Z.queryCommandEnabled(m[q], n));
		W.disabled = !V;
		mstr.utils.Dom.setBGIconClass(W, (V ? o[q] : X[q]));
		W.style.cursor = V ? "pointer" : "default";
	    }
	    var a = Y[2].childNodes[0];
	    a.disabled = !(Z && Z.queryCommandEnabled("FetchBlock", n));
	    var t = d.props.descriptors.noItems;
	    if (Z && n) {
		var x = parseInt(n.blockBegin) || 0;
		var u = parseInt(n.blockCount) || 0;
		var g = parseInt(n.totalSize) || 0;
		if (g && x) {
		    var r = (u > 0) ? Math.min(x + u - 1, g) : g;
		    t = d.props.descriptors.incrementalFetchSeparator;
		    t = t.replace(/##/, x).replace(/###/, r).replace(/####/, g);
		}
	    }
	    a.innerHTML = t;
	} else {
	    h.style.display = "none";
	}
    };
    R._buildFetchControls = function J(V, Y) {
	var X = '<table cellspacing="0" cellpadding="0" class="{@cssPrefix}TreeViewFetchControl"><tr><td><div class="{@cssPrefix}{@cssClass}FetchButton" mstrTreeNodePart="FetchFirst" >&nbsp;</div></td><td><div class="{@cssPrefix}{@cssClass}FetchButton" mstrTreeNodePart="FetchPrevious" >&nbsp;</div></td><td><div class="{@cssPrefix}{@cssClass}FetchControlText"  onmouseover="if (!this.disabled) this.className += \'Hover\'"  onmouseout="this.className = this.className.replace(/Hover/,\'\')" > </div></td><td><div class="{@cssPrefix}{@cssClass}FetchButton" mstrTreeNodePart="FetchNext" >&nbsp;</div></td><td><div class="{@cssPrefix}{@cssClass}FetchButton" mstrTreeNodePart="FetchLast" >&nbsp;</div></td></tr></table>';
	X = X.replace(/\{\@cssPrefix\}/gm, V.props.cssPrefix || "");
	X = X.replace(/\{\@cssClass\}/gm, V.props.cssClass || "");
	Y.innerHTML = X;
	var W = Y.childNodes[0].rows[0].cells;
	W[0].childNodes[0].mstrTreeNodePart = "FetchFirst";
	W[1].childNodes[0].mstrTreeNodePart = "FetchPrevious";
	W[2].childNodes[0].mstrPopupInfo = "FetchBlockPopup1";
	W[3].childNodes[0].mstrTreeNodePart = "FetchNext";
	W[4].childNodes[0].mstrTreeNodePart = "FetchLast";
    };
    R.markNodeExpandState = function G(V, W, Z, X) {
	if (!X) {
	    return;
	}
	if (!X.el) {
	    if (X.path == null) {
		X.path = X.node && W && W.getNodePath(X.node);
	    }
	    var Y = this.findLocationForNode(X.treeRootParent, W
		    ._pathParts(X.path));
	    if (!Y || !Y.before) {
		return;
	    }
	    X.el = Y.before;
	}
	this._renderNodeExpandState(X.el, X.state, V.props.allowExpandCollapse);
	if (X.scroll) {
	    if (X.state == 1) {
		this.scrollToNode(V, W, Z, {
		    el : X.el,
		    paddingBottom : 70,
		    treeRootParent : V.props.treeRootParent
		});
	    }
	}
    };
    R.getNodeExpandState = function P(W) {
	var V = W && W.childNodes[0] && W.childNodes[0].childNodes[0];
	var X = V && V.className;
	if (X) {
	    if (/Opened/.test(X)) {
		return 1;
	    } else {
		if (/Closed/.test(X)) {
		    return 0;
		} else {
		    if (/Leaf/.test(X)) {
			return 2;
		    }
		}
	    }
	}
	return 2;
    };
    R._renderNodeExpandState = function O(Z, b, a, Y) {
	var W = "", c = "";
	b = (b == 1 && Y) ? 0 : b;
	switch (b) {
	case 1:
	    W = "treeNodeOpenedOrphan";
	    c = "block";
	    break;
	case 0:
	    W = "treeNodeClosedOrphan";
	    c = "none";
	    break;
	case 2:
	    W = "treeLeafOrphan";
	    Z.onclick = null;
	    c = "none";
	    break;
	default:
	    W = "treeNodeClosedOrphan";
	    c = "none";
	    break;
	}
	if (!a) {
	    W = "treeLeafOrphan";
	    Z.onclick = null;
	}
	var V = Z && Z.childNodes[0] && Z.childNodes[0].childNodes[0];
	if (V) {
	    mstr.utils.Dom.setBGIconClass(V, W);
	}
	var X = Z && Z.childNodes[1];
	if (X) {
	    X.style.display = c;
	}
    };
    R.markNodeAsSelected = function T(V, W, Z, X) {
	var Y = this
		.findLocationForNode(X.treeRootParent, W._pathParts(X.path));
	if (!Y || !Y.before) {
	    return;
	}
	this._renderNodeValueState(V, Y.before, true);
    };
    R.markNodeAsUnselected = function K(V, W, Z, X) {
	var Y = this
		.findLocationForNode(X.treeRootParent, W._pathParts(X.path));
	if (!Y || !Y.before) {
	    return;
	}
	this._renderNodeValueState(V, Y.before, false);
    };
    R._renderNodeValueState = function S(V, W, X) {
	W.childNodes[0].childNodes[1].className = X ? "Selected" : "";
    };
    R.removeNode = function L(V, W, Z, X) {
	if (!V) {
	    return;
	}
	var Y = this.findLocationForNode(V.props.treeRootParent, W
		._pathParts(X.path));
	if (!Y || !Y.parent || !Y.before) {
	    return;
	}
	Y.parent.removeChild(Y.before);
    };
    R.generateNodeElement = function U(b, m, a, n) {
	var e = b && b.value;
	if (!e) {
	    return null;
	}
	var X = m.createElement("div");
	X.className = a + "Node";
	var V = m.createElement("div");
	X.appendChild(V);
	V.className = a + "NodeShortDisplay";
	V.mstrTreeNodePart = "value";
	if (n) {
	    V.style.display = "none";
	}
	V.onmouseover = this.hover;
	V.onmouseout = this.unhover;
	var e = b.value;
	var g = e.icon;
	if (e.locked) {
	    g += "_locked";
	}
	if (g) {
	    mstr.utils.Dom.setBGIconClass(V, g);
	}
	var Z = m.createElement("img");
	V.appendChild(Z);
	Z.className = a + "NodeConnector";
	Z.align = "absmiddle";
	Z.src = "../images/1ptrans.gif";
	mstr.utils.Dom.setBGIconClass(Z, "treeLeafLast");
	Z.mstrTreeNodePart = "connector";
	if (n) {
	    Z.style.display = "none";
	}
	var h = m.createElement("span");
	V.appendChild(h);
	h.appendChild(m.createTextNode(e.n));
	var d = e.desc;
	V.title = (d != null && d != "") ? e.n + ". " + d : e.n;
	var W = m.createElement("div");
	X.appendChild(W);
	W.className = a + "NodeLongDisplay";
	if (n) {
	    W.style.marginLeft = "0px";
	}
	var l = m.createElement("div");
	W.appendChild(l);
	l.className = a + "NodeFetch";
	if (n) {
	    l.style.backgroundImage = "none";
	}
	var c = m.createElement("div");
	W.appendChild(c);
	c.className = a + "NodeMsg";
	var Y = m.createElement("div");
	W.appendChild(Y);
	Y.className = a + "NodeChildrenContainer";
	var o = m.createElement("div");
	W.appendChild(o);
	o.className = a + "NodeFetchBottom";
	if (n) {
	    o.style.backgroundImage = "none";
	}
	return X;
    };
    R.hover = function(V) {
	this.childNodes[1].className += "Hover";
    };
    R.unhover = function(W) {
	var V = this.childNodes[1];
	V.className = V.className.replace(/Hover/, "");
    };
    R.findLocationForNode = function M(b, d, W) {
	var c = b && b.ownerDocument;
	if (!c) {
	    return;
	}
	var Y = {};
	Y.parent = b;
	Y.before = b.childNodes[0];
	for ( var X = 1, a = d.length; X < a; X++) {
	    if (!Y.before) {
		break;
	    }
	    var Z = d[X];
	    var V = Y.before.childNodes[1].childNodes[2];
	    Y.parent = V;
	    Y.before = V.childNodes[Z];
	}
	return Y;
    };
    R.on_model_set_readyState = function H(Y, e, r) {
	var W = Y && Y.get("readyState");
	if (W == null) {
	    W = mstr.Enum.Widget.READYSTATE.IDLE;
	}
	r.childNodes[0].childNodes[1].style.cursor = (W == mstr.Enum.Widget.READYSTATE.WAITING) ? "wait"
		: "default";
	switch (W) {
	case mstr.Enum.Widget.READYSTATE.WAITING:
	    var g = mstr.$obj(r.id);
	    if (!g) {
		return;
	    }
	    var c = g.getInsertionPoint();
	    if (!c) {
		return;
	    }
	    var n = c.substr(0, c.lastIndexOf(mstr.util.Trees.PATH_DELIM));
	    var d = g.getNodeAt(n);
	    if (!d) {
		return;
	    }
	    try {
		var s = mstr.behaviors.ExpandableTreeView.findElementByPath
			.apply(r, [ n, false ]);
		var b = r.childNodes[0].childNodes[1];
		var X = s.elChild;
		mstr.util.BoxModel.scrollToElement(b, X);
	    } catch (h) {
		mstr.debug("Inside mstr.layouts.ExpandableTreeView: "
			+ h.message);
	    }
	    var m = g.getBlockInfoForRequest(g.getRequestId(), d);
	    var Z;
	    if (m) {
		if (m.blockBegin && m.blockEnd > 0) {
		    Z = " " + String(m.blockBegin) + " to "
			    + String(m.blockEnd);
		} else {
		    Z = " all blocks";
		}
	    }
	    var t = "leafLast";
	    if (d
		    && g.getFetchState(d) == mstr.features.net.BrowseableTreeNodes.FETCHEDSOME) {
		t = "leaf";
	    }
	    var l = [];
	    var o = r.ownerDocument.createTextNode("Loading " + Z
		    + "...\xA0\xA0");
	    l.push(o);
	    var a = r.ownerDocument.createElement("a");
	    l.push(a);
	    var q = function() {
		mstr.$obj(r.id).execCommand(mstr.Cmd.CANCELREQUEST);
	    };
	    a.onclick = q;
	    a.href = "javascript:void(0)";
	    a.appendChild(r.ownerDocument.createTextNode("Cancel"));
	    mstr.behaviors.ExpandableTreeView.addSpecialNodeAtInsertionPoint
		    .apply(r, [ t, "wait", l ]);
	    a = null;
	    break;
	case mstr.Enum.Widget.READYSTATE.ERROR:
	    var V = r.ownerDocument.createTextNode("{@errorText}");
	    mstr.behaviors.ExpandableTreeView.replaceSpecialNodeAtInsertionPointWithRetryRemove
		    .apply(r, [ V ]);
	    break;
	case mstr.Enum.Widget.READYSTATE.TIMEOUT:
	    var V = r.ownerDocument.createTextNode("Timeout");
	    mstr.behaviors.ExpandableTreeView.replaceSpecialNodeAtInsertionPointWithRetryRemove
		    .apply(r, [ V ]);
	    break;
	case mstr.Enum.Widget.READYSTATE.CANCELLED:
	    mstr.behaviors.ExpandableTreeView.removeSpecialNodeAtInsertionPoint
		    .apply(r, []);
	    break;
	case mstr.Enum.Widget.READYSTATE.SUCCESS:
	    mstr.behaviors.ExpandableTreeView.removeSpecialNodeAtInsertionPoint
		    .apply(r, []);
	    mstr.behaviors.ExpandableTreeView.addFetchControl.apply(r, []);
	    break;
	}
    };
    return R;
})();
mstr.views.TreeView = (function() {
    mstr.$O.extendsClass(W, mstr.views.BaseView);
    W.prototype._attachLayoutHandlers = function P() {
	mstr.views.BaseView.prototype._attachLayoutHandlers.apply(this);
	var b = this.props.model;
	if (b && b.attachEventListener) {
	    b.attachEventListener(this, "insertNodes", "onInsertNodes");
	    b.attachEventListener(this, "removeNodes", "onRemoveNodes");
	    b.attachEventListener(this, "set_nodeReadyState",
		    "onSetNodeReadyState");
	    b
		    .attachEventListener(this, "hashadd_selections",
			    "onAddSelections");
	    b.attachEventListener(this, "hashremove_selections",
		    "onRemoveSelections");
	}
    };
    W.prototype._detachLayoutHandlers = function Y() {
	mstr.views.BaseView.prototype._detachLayoutHandlers.apply(this);
	var b = this.props.model;
	if (b && b.attachEventListener) {
	    b.detachEventListener(this, "insertNodes");
	    b.detachEventListener(this, "removeNodes");
	    b.detachEventListener(this, "hashadd_selections");
	    b.detachEventListener(this, "hashremove_selections");
	}
    };
    W.prototype.onInsertNodes = function V(q) {
	var c = q && q.memo && q.memo.at;
	var l = q && q.memo && q.memo.count;
	var b = q && q.memo && q.memo.nodes;
	if (!l || !b || (c == null)) {
	    return;
	}
	var d = this.props.model, n = mstr.utils.ListViewHelper
		.getItemRenderer(this);
	if (!d || !n) {
	    return;
	}
	var g = d._pathParts(c);
	var e = g.pop();
	if (!this.props.allowExpandCollapse) {
	    var o = b[0] && b[0].parent;
	    if (o) {
		n.markNodeExpandState
			&& n
				.markNodeExpandState(
					this,
					d,
					this.props.element,
					{
					    node : o,
					    path : g
						    .join(mstr.models.AbstractTreeBase.PATHDELIM),
					    state : 1,
					    treeRootParent : this.props.treeRootParent
					});
	    }
	}
	var r;
	for ( var h = 0; h < l; h++) {
	    r = g.concat([ e + h ])
		    .join(mstr.models.AbstractTreeBase.PATHDELIM);
	    this.renderSubTree(b[h], n, r);
	}
    };
    W.prototype.onRemoveNodes = function D(e) {
	var n = e && e.memo && e.memo.at;
	var c = mstr.$A.len(n);
	if (!c) {
	    return;
	}
	var g = this, b = this.props.model, d = this.props[mstr.$W.ELEMENT], l = mstr.utils.ListViewHelper
		.getItemRenderer(this);
	if (!b || !l) {
	    return;
	}
	for ( var h = 0, c = mstr.$A.len(n); h < c; h++) {
	    l.removeNode(g, b, d, {
		path : n[h]
	    });
	}
    };
    W.prototype.onSetNodeReadyState = function Q(b) {
	var c = b && b.memo && b.memo.node;
	if (!c) {
	    return;
	}
	var d = mstr.utils.ListViewHelper.getItemRenderer(this);
	if (!d || !d.markNodeReadyState) {
	    return;
	}
	d.markNodeReadyState(this, this.props.model, this.props.element, {
	    node : c,
	    treeRootParent : this.props.treeRootParent
	});
    };
    W.prototype.onAddSelections = function a(c) {
	this._toggleSelections(c.memo.at, "markNodeAsSelected");
	var e = mstr.utils.ListViewHelper.getItemRenderer(this);
	if (e && e.scrollToNode) {
	    var d = mstr.$H.firstItem(c.memo.at);
	    var b = this.props.model;
	    e.scrollToNode(this, b, this.props.element, {
		path : b.getNodePath(d),
		node : d,
		treeRootParent : this.props.treeRootParent
	    });
	}
    };
    W.prototype.onRemoveSelections = function N(b) {
	this._toggleSelections(b.memo.at, "markNodeAsUnselected");
    };
    W.prototype._toggleSelections = function G(e, d) {
	if (!e) {
	    return;
	}
	var l = mstr.utils.ListViewHelper.getItemRenderer(this);
	var c = this, b = this.props.model, h = this.props[mstr.$W.ELEMENT], g = this.props.treeRootParent;
	if (!b) {
	    return;
	}
	for ( var n in e) {
	    l[d](c, b, h, {
		path : b.getNodePath(e[n]),
		node : e[n],
		treeRootParent : g
	    });
	}
    };
    W.prototype.render = function F() {
	mstr.views.BaseView.prototype.render.apply(this);
	var d = this.execLayoutHandler("treeRootParent");
	this.props.treeRootParent = d;
	var b = this.getModel();
	var c = b && b.getRootNode();
	if (c && (c.value.dssid || mstr.$A.len(c.children))) {
	    this.renderSubTree(c, mstr.utils.ListViewHelper
		    .getItemRenderer(this), "0", this.props.model,
		    this.props.element, d);
	}
	mstr.timers.renderStop = new Date();
	mstr.timers.render = mstr.timers.renderStop - mstr.timers.renderStart;
    };
    W.prototype.renderSubTree = function T(c, l, h, e, m, d) {
	this.renderNode(c, l, h, e, m, d);
	for ( var g = 0, b = mstr.$A.len(c.children); g < b; g++) {
	    this.renderSubTree(c.children[g], l, h
		    + mstr.models.AbstractTreeBase.PATHDELIM + g, e, m, d);
	}
    };
    W.prototype.renderNodesAt = function B(r, n) {
	var e = this.props.model, g = this.props[mstr.$W.ELEMENT], q = this.props.treeRootParent, o = mstr.utils.ListViewHelper
		.getItemRenderer(this);
	if (!e || !o) {
	    return;
	}
	var b = e.getNodeAt(r);
	var s = e._pathParts(r);
	var c = s.pop();
	var l = (s.length) ? b.parent : null;
	for ( var h = 0; h < n; h++) {
	    var d = l ? l.children[c + h] : e.getRootNode();
	    if (d) {
		this.renderNode(d, o, s.join(".") + (c + h), e, g, q);
	    }
	}
    };
    W.prototype.renderNode = function M(e, h, g, c, m, b) {
	if (!e) {
	    return;
	}
	if (!c) {
	    c = this.props.model;
	}
	if (!g) {
	    g = c.getNodePath(e);
	}
	if (!m) {
	    m = this.props.element;
	}
	if (!b) {
	    b = this.props.treeRootParent;
	}
	var l = null;
	if (!e.parent || !e.parent.leafElements) {
	    l = c
		    && c.getNodeBrowseType(e, this.props.allowBrowseFolder,
			    this.props.allowBrowseAttribute,
			    this.props.allowBrowseHierarchy);
	}
	var d = h.renderNode(this, c, m, {
	    path : g,
	    node : e,
	    browseType : l,
	    treeRootParent : b
	});
	d.mstrTreeNodeInfo = e.id;
    };
    W.prototype.execClickTreeNode = function I(g) {
	var b = this.props.model;
	if (!b) {
	    return false;
	}
	var c = g && g.nodeId && b.findByNodeId(g.nodeId);
	if (!c) {
	    return false;
	}
	switch (g.part) {
	case "connector":
	    var d;
	    switch (g.expandState) {
	    case 2:
		d = null;
		break;
	    case 1:
		d = 0;
		break;
	    case 0:
		d = 1;
		break;
	    }
	    if (d != null) {
		var e = mstr.utils.ListViewHelper.getItemRenderer(this);
		if (!e) {
		    return;
		}
		e.markNodeExpandState(this, this.props.model,
			this.props.element, {
			    el : g.elNode,
			    state : d,
			    scroll : true
			});
	    }
	    return false;
	    break;
	case "value":
	    return this._clickTreeNodeValue(c, g);
	    break;
	}
	return false;
    };
    W.prototype._clickTreeNodeValue = function Z(e, g) {
	var c = this.props.model;
	if (!c) {
	    return false;
	}
	var d = !!this.props.multiSelect;
	if (e) {
	    var b = null;
	    if (g.ctrl && d) {
		b = "ToggleSelect";
	    } else {
		if (g.shift && d) {
		    b = "RangeSelect";
		} else {
		    b = "SingleSelect";
		}
	    }
	    c.execCommand(b, e);
	    return true;
	} else {
	    if (d) {
		c.execCommand("ClearSelect");
	    }
	    return false;
	}
    };
    W.prototype.execBrowseTreeNode = function R(g) {
	var b = this.props.model;
	var e = b && b.findByNodeId(g.nodeId);
	if (!e) {
	    return false;
	}
	if (g.popup) {
	    var c = mstr.$obj(g.popup);
	    if (c) {
		if (b.execCommand("EditNode", e)) {
		    return this.execCommand("OpenPopup", {
			popup : c,
			x : g.x,
			y : g.y,
			orientation : 1
		    });
		}
	    }
	} else {
	    if (g.part == "connector" && g.expandState == 0) {
		var d = mstr.Enum.Widget.READYSTATE;
		switch (e.readyState) {
		case null:
		case undefined:
		case d.CANCELLED:
		case d.ERROR:
		    if (!mstr.$A.len(e.children)) {
			return b.execCommand("FetchFirst", e);
		    }
		}
	    } else {
		if (/Fetch/.test(g.part)) {
		    return b.execCommand(g.part, e);
		}
	    }
	}
	return false;
    };
    W.prototype.execSearch = function C(l) {
	var d = this.props.model;
	var h = d && d.getSelectedNode();
	if (!h) {
	    return false;
	}
	var c = this.props.searchResultsNode;
	if (c) {
	    d.removeNodesAt([ this.getNodePath(c) ]);
	}
	var g = this.props.searchResultsNode = this._createSearchResultsNode(h,
		l);
	if (g) {
	    var e = d.get("rootNode");
	    if (!e) {
		return null;
	    }
	    var b = mstr.$A.len(e.children);
	    this.insertNodesAt([ searchFolderNode ], "0"
		    + mstr.models.AbstractTreeBase.PATHDELIM + b);
	    d.fetchBlock(g.children[0], 1, l);
	}
	return true;
    };
    W.prototype._createSearchResultsNode = function S(g, e) {
	var d = mstr.$H.clone(g);
	d.value = mstr.$H.clone(g.value);
	d.parent = null;
	d.children = [];
	d.id = null;
	d.isWithinHierarchy = mstr.utils.ListViewHelper.isWithinHierarchy(g);
	if (d.isWithinHierarchy) {
	    var b = this.props.model;
	    d.hierarchyPath = b && b._buildHierarchyPathForNode(g);
	}
	var c = {
	    value : {
		icon : "f",
		tp : -1,
		n : (this.props.descriptors.searchResultsCaption || "Search for:")
			+ " " + e,
		dssid : null
	    }
	};
	c.children = [ d ];
	d.parent = c;
	return c;
    };
    W.prototype.onkeypress = function K(h, d) {
	var c = this.getModel();
	if (!c) {
	    return true;
	}
	var g = mstr.utils.Events.keyChar(h, d), b = (g == String
		.fromCharCode(9));
	if (mstr.Enum.REGEXP_RESERVED_CHARS[g]) {
	    g = "\\" + g;
	}
	c.execCommand("SelectString", g);
	if (!b) {
	    mstr.utils.Events.cancel(h, d);
	}
	return b;
    };
    W.prototype.onkeydown = function A(h, c) {
	var b = this.getModel();
	if (!b) {
	    return true;
	}
	var g = mstr.utils.Events.keyCode(h, c), d = mstr.utils.Events
		.shiftKey(h, c);
	switch (g) {
	case 38:
	    this.execSelectPrevious(d);
	    mstr.utils.Events.cancel(h, c);
	    return false;
	case 40:
	    this.execSelectNext(d);
	    mstr.utils.Events.cancel(h, c);
	    return false;
	case 37:
	    this.execSelectParent();
	    mstr.utils.Events.cancel(h, c);
	    return false;
	case 39:
	    this.execSelectChild();
	    mstr.utils.Events.cancel(h, c);
	    return false;
	default:
	    return true;
	}
    };
    W.prototype.execSelectPrevious = function U() {
	var b = this.getModel(), c = b && b.firstSelectionByIndex();
	if (c && c.node) {
	    if (c.childIndex > 0) {
		return b.execCommand("SingleSelect",
			c.node.parent.children[c.childIndex - 1]);
	    } else {
		if (c.node.parent) {
		    return b.execCommand("SingleSelect", c.node.parent);
		}
	    }
	}
	return false;
    };
    W.prototype.execSelectNext = function H() {
	var b = this.getModel(), d = b && b.lastSelectionByIndex();
	if (d && d.node) {
	    if ((this.getNodeExpandState(d.node) == 1) && d.node.children
		    && d.node.children[0]) {
		return b.execCommand("SingleSelect", d.node.children[0]);
	    } else {
		if ((d.childIndex > -1) && d.node.parent
			&& d.node.parent.children
			&& d.node.parent.children[d.childIndex + 1]) {
		    return b.execCommand("SingleSelect",
			    d.node.parent.children[d.childIndex + 1]);
		} else {
		    if (d.parent) {
			var c = mstr.utils.Trees.nextSibling(d.node.parent);
			if (c) {
			    return b.execCommand("SingleSelect", c);
			}
		    }
		}
	    }
	}
	return false;
    };
    W.prototype.execSelectParent = function E() {
	var b = this.getModel(), c = b && b.getSelectedNodes(), d = b
		&& b.getSelectedNode();
	if (d && mstr.$H.lenGreaterThan(c, 1)) {
	    if (d.parent) {
		return b.execCommand("SingleSelect", d.parent);
	    }
	} else {
	    if (d) {
		if (this.getNodeExpandState(d) == 1) {
		    this.setNodeExpandState(d, 0);
		} else {
		    if (d.parent) {
			return b.execCommand("SingleSelect", d.parent);
		    }
		}
	    }
	}
	return false;
    };
    W.prototype.execSelectChild = function L() {
	var b = this.getModel(), c = b && b.getSelectedNodes(), d = b
		&& b.getSelectedNode();
	if (d && !mstr.$H.lenGreaterThan(c, 1)) {
	    switch (this.getNodeExpandState(d)) {
	    case 0:
		this.setNodeExpandState(d, 1);
		if (d.readyState == null) {
		    if (!mstr.$A.len(d.children)) {
			return b.execCommand("FetchFirst", d);
		    }
		}
		break;
	    case 1:
	    default:
		if (d.children && d.children[0]) {
		    return b.execCommand("SingleSelect", d.children[0]);
		}
		break;
	    }
	}
	return false;
    };
    W.prototype.getNodeExpandState = function O(d) {
	var c = mstr.utils.ListViewHelper.getItemRenderer(this), b = this
		.getModel();
	if (b && c && c.findLocationForNode && c.getNodeExpandState) {
	    var e = c.findLocationForNode(this.props.treeRootParent, b
		    .getNodePathIndices(d));
	    if (e && e.before) {
		return c.getNodeExpandState(e.before);
	    }
	}
    };
    W.prototype.setNodeExpandState = function J(d, e) {
	var c = mstr.utils.ListViewHelper.getItemRenderer(this), b = this
		.getModel();
	if (b && c && c.markNodeExpandState && c.findLocationForNode) {
	    var g = c.findLocationForNode(this.props.treeRootParent, b
		    .getNodePathIndices(d));
	    return c.markNodeExpandState(this, b, this.props.element, {
		el : g.before,
		state : e,
		scroll : true
	    });
	}
    };
    W.prototype.getExtraNodeCssClass = function X(e) {
	var d = "", c = this.props.singleFilterCssClass, b = e && e.value;
	if (c && (b && (b.stp == 256 || b.tp == 1))) {
	    var g = e.parent && e.parent.value;
	    if (g && g.filters && g.filters.length == 1) {
		d = c;
	    }
	}
	return d;
    };
    function W(b) {
	mstr.views.BaseView.apply(this, [ b ]);
    }
    return W;
})();
mstr.Enum.ColorPickerFlags = {
    NO_COLOR : 1,
    MORE_COLORS : 2,
    GRADIENT_COLORS : 4,
    USER_COLORS : 8,
    GRAPH_GRADIENTS : 16,
    AUTOMATIC : 32
};
mstr.Enum.AttrFormSelector = {
    AUTOMATIC : 1,
    CUSTOM : 4,
    DEFAULT_SORT : 1
};
mstr.bones = {};
mstr.bones.editors = {};
mstr.bones.editors.Map = {};
mstr.controllers.ExportTypes = (function() {
    var B = {};
    B.exportSet = [ {
	c : "Excel",
	d : "4",
	n : "3958",
	f : "web-export-to-excel;enable-export"
    }, {
	c : "PDF",
	d : "3",
	n : "1877",
	f : "web-export-to-pdf;enable-pdf;document-html-view-mode"
    }, {
	c : "HTML",
	d : "-1",
	n : "3957",
	f : "web-export-to-html;enable-html-export;document-html-view-mode"
    }, {
	c : "Flash",
	d : "7",
	n : "14513",
	f : "rw-flash-view-mode-enabled;web-export-to-flash;enable-flash"
    } ];
    B.getExportModes = function A() {
	var C = {
	    items : [],
	    value : ""
	};
	for ( var E in this.exportSet) {
	    var D = this.exportSet[E];
	    if (mstr.behaviors.featureResolver.resolveFeatSet(D.f)) {
		C.items.push({
		    dssid : D.d,
		    n : microstrategy.descriptors.getDescriptor(D.n),
		    cssClass : "ToolbarList x" + D.c
		});
	    }
	}
	C.value = C.items[0] ? C.items[0].dssid : "";
	return C;
    };
    return B;
})();
mstr.controllers.ZoomFactors = (function() {
    var C = {};
    var A;
    C.getZoomFactors = function B(E, J, K) {
	if (!A) {
	    A = {
		items : [ {
		    n : "400%",
		    dssid : "400"
		}, {
		    n : "300%",
		    dssid : "300"
		}, {
		    n : "200%",
		    dssid : "200"
		}, {
		    n : "150%",
		    dssid : "150"
		}, {
		    n : "125%",
		    dssid : "125"
		}, {
		    n : "100%",
		    dssid : "100"
		}, {
		    n : "75%",
		    dssid : "75"
		}, {
		    n : "50%",
		    dssid : "50"
		}, {
		    n : "25%",
		    dssid : "25"
		}, {
		    n : microstrategy.descriptors.getDescriptor("4809"),
		    dssid : "Width"
		}, {
		    n : microstrategy.descriptors.getDescriptor("4808"),
		    dssid : "Page"
		} ]
	    };
	}
	if (typeof (J) == "undefined") {
	    return A;
	}
	if (K && E != microstrategy.ZOOM_STATIC) {
	    A.value = (E == microstrategy.ZOOM_FIT_WIDTH) ? "Width" : "Page";
	    return A;
	}
	var H = [ {
	    n : J + "%",
	    dssid : J
	} ];
	var F = A.items;
	var D = 0, I;
	for (; D < F.length - 2; D++) {
	    I = parseInt(F[D].dssid);
	    if (I == J) {
		A.value = J;
		return A;
	    }
	    if (I < J) {
		break;
	    }
	}
	var G = {};
	G.items = mstr.$A.insert(A.items, H, D);
	G.value = J;
	return G;
    };
    return C;
})();
mstr.models.ChangeTrackingModel = (function() {
    mstr.$O.extendsClass(G, mstr.models.BaseModel);
    G.prototype.init = function B() {
	mstr.models.BaseModel.prototype.init.apply(this);
	for ( var I in this.props) {
	    var H = this.props[I];
	    if (H instanceof mstr.models.ListModel) {
		H.attachEventListener(this, "hashadd_selectedIndices",
			"onHashAdd");
		H.attachEventListener(this, "hashremove_selectedIndices",
			"onHashRemove");
		H.set("propName", I);
	    }
	}
    };
    G.prototype.set = function F(J, I) {
	var H = mstr.models.BaseModel.prototype.set.apply(this, [ J, I ]);
	if (H) {
	    this.changedProps[J] = I;
	}
	return H;
    };
    G.prototype.onHashAdd = function E(H) {
	var I = H.src.get("propName");
	this._updateChangedProp(I);
    };
    G.prototype.onHashRemove = function A(H) {
	var I = H.src.get("propName");
	this._updateChangedProp(I);
    };
    G.prototype._updateChangedProp = function C(K) {
	var J = this.get(K);
	var M = J.get("valueForm");
	var L = J.getSelectedItems();
	var H = "";
	for ( var I = 0; I < L.length; I++) {
	    H += L[I][M] + "|";
	}
	if (H.charAt(H.length - 1) == "|") {
	    H = H.substring(0, H.length - 1);
	}
	this.changedProps[K] = H;
    };
    G.prototype.getChanges = function D() {
	return this.changedProps;
    };
    function G(H) {
	mstr.models.BaseModel.apply(this, [ H ]);
	this.changedProps = {};
    }
    return G;
})();
mstr.models.ChangeTrackingModelManager = (function() {
    mstr.$O.extendsClass(A, mstr.models.BaseModel);
    A.prototype.getChangesAsString = function C(G) {
	var O = "";
	var L;
	var N;
	var H;
	if (!G) {
	    G = UNIT_SEPARATOR;
	}
	for ( var F in this.props) {
	    var E = this.props[F];
	    N = "";
	    if (E instanceof mstr.models.ChangeTrackingModel) {
		L = M.getChanges();
		for ( var K in L) {
		    H = L[K];
		    if (isNaN(H)) {
			H = '"' + H + '"';
		    }
		    N += K + "=" + L[K] + G;
		}
		N = N.substring(0, N.length - 1);
		O += N + G;
	    } else {
		if (E instanceof mstr.models.ListModel) {
		    var J = E.props.items;
		    for ( var I = 0; I < J.length; I++) {
			var M = J[I];
			N = "";
			if (M instanceof mstr.models.ChangeTrackingModel) {
			    L = M.getChanges();
			    for ( var K in L) {
				H = L[K];
				if (isNaN(H)) {
				    H = '"' + H + '"';
				}
				N += K + "=" + H + G;
			    }
			    if (N.charAt(N.length - 1) == G) {
				N = N.substring(0, N.length - 1);
			    }
			    if (N.length > 0) {
				O += N + G;
			    }
			}
		    }
		}
	    }
	}
	if (O.charAt(O.length - 1) == G) {
	    O = O.substring(0, O.length - 1);
	}
	return O;
    };
    A.prototype.execSubmitChanges = function B(E) {
    };
    A.prototype.execCancelChanges = function D() {
    };
    function A(E) {
	mstr.models.BaseModel.apply(this, [ E ]);
    }
    return A;
})();
mstr.models.FilterDetailsEditor = (function() {
    mstr.$O.extendsClass(E, mstr.models.ChangeTrackingModelManager);
    E.prototype.PROPERTY_SET_NAME = "FilterDetailsFormatProperties";
    E.prototype.PROPERTY_NAME = "FilterDetailsFormat";
    E.prototype.getChangesAsString = function D(G) {
	var J = mstr.models.ChangeTrackingModelManager.prototype.getChangesAsString
		.apply(this, [ G ]);
	J = this.updateRelatedProperties(J);
	if (!J || J.length == 0) {
	    return J;
	}
	if (!G) {
	    G = UNIT_SEPARATOR;
	}
	var I = this.props.oldValue || "";
	var F;
	var H;
	var M;
	var N;
	var P;
	var O = '\\s*\\b[A-Za-z]+\\b\\s*=\\s*([0-9]+|"[^"]*")\\s*';
	var L = J.split(G);
	for ( var K = 0; K < L.length; K++) {
	    M = L[K].indexOf("=");
	    if (M == -1) {
		continue;
	    }
	    F = L[K].substring(0, M);
	    H = L[K].substring(M + 1);
	    if (F == "isComplex") {
		continue;
	    }
	    if (isNaN(H)) {
		H = H.substring(1, H.length - 1);
		if (H.indexOf("\\") >= 0) {
		    H = H.replace("\\", "\\\\");
		}
		if (H.indexOf('"') >= 0) {
		    H = H.replace('"', '\\",');
		}
		H = '"' + H + '"';
	    }
	    N = I.indexOf(F);
	    if (N >= 0) {
		P = I.substring(N);
		P = P.match(O);
		if (P) {
		    if (H != "-1" && H != "") {
			I = I.replace(P[0], L[K]);
		    } else {
			I = I.replace(P[0], "");
		    }
		}
	    } else {
		if (H != "-1") {
		    I += "," + L[K];
		}
	    }
	}
	if (I.charAt(0) == ",") {
	    I = I.substring(1);
	}
	if (I.charAt(I.length - 1) == ",") {
	    I = I.substring(0, I.length - 1);
	}
	return I;
    };
    E.prototype.execSubmitChanges = function B(H) {
	var J = this.getChangesAsString(H);
	var G = microstrategy.updateManager;
	if (microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION) {
	    var L = microstrategy.getViewerBone().doc;
	    var F = [];
	    if (L) {
		if (!this.props.objId) {
		    L.processRWDocProperty(this.PROPERTY_NAME, J);
		} else {
		    var K = mstrUpdateManager.createPropertyEditString(
			    this.props.objId, this.PROPERTY_NAME, J);
		    F.push(G.createActionObject(null,
			    mstrUpdateManager.EDIT_PROPS,
			    L.parentBone.beanPath, [ "2048018", "2048035" ], [
				    mstrUpdateManager.UPDATE_NOW, K ], []));
		    F.push(G.createActionObject(null,
			    mstrUpdateManager.APPLY_CHANGES,
			    L.parentBone.beanPath, [ "2048018", "2048035" ], [
				    mstrUpdateManager.UPDATE_NOW, K ], []));
		    G.add(F);
		    G.flushAndSubmitChanges();
		}
	    }
	} else {
	    var I = microstrategy.bone("UniqueReportID");
	    var F = new Array();
	    I.setReportProp(this.PROPERTY_SET_NAME, this.PROPERTY_NAME, J, F);
	    G.add(F);
	    G.flushAndSubmitChanges();
	}
	return true;
    };
    E.prototype.updateRelatedProperties = function C(F) {
	var G = F.replace(" ", "");
	if (G.indexOf("SBLT=-1") >= 0) {
	    F += UNIT_SEPARATOR + "CDLT=";
	}
	return F;
    };
    E.prototype.execCancelChanges = function A() {
	return true;
    };
    function E(F) {
	mstr.models.ChangeTrackingModelManager.apply(this, [ F ]);
    }
    return E;
})();
mstr.models.TaskModel = (function() {
    mstr.$O.extendsClass(A, mstr.models.BaseModel);
    A.prototype.execFetchBlock = function C(G, F, E) {
	var D = this.props.requestContext;
	if (D && D.id) {
	    this.cancelRequest(D.id);
	    this.set("readyState", mstr.Enum.Widget.READYSTATE.CANCELLED);
	}
	this.waitingElement = F;
	this.submitRequest(G, E);
    };
    A.prototype.loadRequestResponse = function B() {
	var D = this.props.requestContext;
	var F = D && D.response;
	if (!F || !F.data) {
	    if (this.get("readyState") != mstr.Enum.Widget.READYSTATE.WAITING) {
		this.set("readyState", mstr.Enum.Widget.READYSTATE.ERROR);
	    }
	    return;
	}
	var G = F.data;
	this.set("models", G.get("models"));
	this.set("views", G.get("views"));
	var E = G.get("views")[0];
	E.set("element", this.waitingElement);
	E.set("document", this.waitingElement.ownerDocument);
	this.set("renderableView", E);
	this.set("readyState", mstr.Enum.Widget.READYSTATE.IDLE);
	this.props.requestContext = {};
    };
    function A(D) {
	mstr.models.BaseModel.apply(this, [ D ]);
    }
    return A;
})();
mstr.models.SelectDataSetModel = (function() {
    mstr.$O.extendsClass(C, mstr.models.ListModel);
    C.prototype.setItems = function B(I) {
	for ( var J = 0; J < I.length; J++) {
	    if (I[J].tp === microstrategy.DSSTYPE_FOLDER) {
		I[J].did = I[J].dssid;
	    } else {
		I[J].did = I[J].did || I[J].dssid;
	    }
	}
	mstr.models.ListModel.prototype.setItems.apply(this, [ I ]);
    };
    C.prototype.execSelectDataset = function H() {
	var I = this.getSelectedItems();
	if (I == null) {
	    return false;
	}
	var K = this.get("oldDSID");
	var L = this.get("ReplaceAllDS");
	var J = (K && (K.length > 0)) || L;
	this.get("opener").handleDatasetExplorer({
	    items : I,
	    formatting : this.get("addWithFormatting"),
	    oldDSID : K,
	    oldDSType : this.get("oldDSType"),
	    ReplaceAllDS : L
	});
	return true;
    };
    C.prototype._showWarningMessage = function G(I) {
	showMessage({
	    contents : microstrategy.descriptors.getDescriptor(I),
	    elements : microstrategy.OK_BUTTON,
	    type : mstrMsgBoxImpl.MSG_WARNING
	});
	document.getElementById(currentModalEditor[0]).style.zIndex = 9999;
    };
    C.prototype._updateCommandEnabledSelectDataset = function F() {
	this.set("CommandEnabledSelectDataset",
		(this.getSelectedItem() != null));
    };
    C.prototype.on_hashadd_selectedIndices = function A(I) {
	mstr.models.ListModel.prototype.on_hashadd_selectedIndices.apply(this,
		[ I ]);
	if (I && I.src == this) {
	    this._updateCommandEnabledSelectDataset();
	}
    };
    C.prototype.on_hashremove_selectedIndices = function D(I) {
	mstr.models.ListModel.prototype.on_hashremove_selectedIndices.apply(
		this, [ I ]);
	if (I && I.src == this) {
	    this._updateCommandEnabledSelectDataset();
	}
    };
    C.prototype.execOpenImportData = function E() {
	var I = this, J = function J(K) {
	    if (!K || !K.length) {
		return false;
	    }
	    I.get("opener").handleDatasetExplorer({
		items : K,
		oldDSID : I.get("oldDSID"),
		oldDSType : I.get("oldDSType"),
		ReplaceAllDS : I.get("ReplaceAllDS")
	    });
	    return true;
	};
	microstrategy.openDataImport({
	    AnalysisId : microstrategy.bone("rwb_viewer").messageID,
	    callback : J
	});
    };
    function C(I) {
	mstr.models.ListModel.apply(this, [ I ]);
	this._updateCommandEnabledSelectDataset();
    }
    return C;
})();
mstr.models.AnnotationModel = (function() {
    mstr.$O.extendsClass(F, mstr.models.BaseModel);
    F.ADDITION_MAX_LENGTH = 32000;
    F.NOTES_MAX_LENGTH = 65535;
    F.prototype.execSetMode = function H(I) {
	this.set("mode", I);
    };
    F.prototype.loadRequestResponse = function B() {
	var I = this.props.requestContext;
	var J = I && I.response;
	if (!J || !J.data) {
	    this.set("readyState", mstr.Enum.Widget.READYSTATE.ERROR);
	    return;
	}
	var K = J.data;
	if (I.memo.command == "fetch" || I.memo.command == "add"
		|| I.memo.command == "save") {
	    this.set("value", decode(K.annotation));
	}
	this.props.requestContext = {};
	this.set("readyState", mstr.Enum.Widget.READYSTATE.IDLE);
    };
    F.prototype.execSave = function C() {
	var I = new mstr.http.SaveAnnotationsInputs(this.get("objectID"), this
		.get("objectType"), this.get("value").substring(0,
		F.NOTES_MAX_LENGTH - this.get("postfixLen")), 0);
	this.submitRequest(I, {
	    command : "save"
	});
	return true;
    };
    F.prototype.execAdd = function E(I) {
	var J = new mstr.http.SaveAnnotationsInputs(this.get("objectID"), this
		.get("objectType"), I.substring(0, F.ADDITION_MAX_LENGTH
		- this.get("addition").get("prefixLen")
		- this.get("addition").get("postfixLen")), 1);
	this.submitRequest(J, {
	    command : "add"
	});
	return true;
    };
    F.prototype.execFetch = function D() {
	var I = new mstr.http.GetAnnotationsInput(this.get("objectID"), this
		.get("objectType"), "GetAnnotationsStyle");
	this.submitRequest(I, {
	    command : "fetch"
	});
	return true;
    };
    F.prototype.updateValue = function A(I) {
	if (I != this.get("value")) {
	    this.set("CommandEnabledValidateEdit", true);
	}
    };
    F.prototype.execValidateEdit = function G(I) {
	return true;
    };
    function F(I) {
	if (I.value) {
	    I.value = decode(I.value);
	}
	mstr.models.BaseModel.apply(this, [ I ]);
	this.set("CommandEnabledValidateEdit", false);
    }
    return F;
})();
mstr.models.AnnotationAddArea = (function() {
    mstr.$O.extendsClass(B, mstr.models.BaseModel);
    B.prototype.execClear = function A() {
	this.set("value", "");
	return true;
    };
    B.prototype.execValidateAdd = function C(E, F) {
	return true;
    };
    B.prototype.updateValue = function D(E) {
	this.set("CommandEnabledValidateAdd", true);
    };
    function B(E) {
	mstr.models.BaseModel.apply(this, [ E ]);
	this.set("CommandEnabledValidateAdd", false);
    }
    return B;
})();
mstr.models.NotesIconModel = (function() {
    mstr.$O.extendsClass(B, mstr.models.BaseModel);
    B.prototype.loadRequestResponse = function A() {
	var D = this.props.requestContext;
	var E = D && D.response;
	if (!E || !E.data) {
	    this.set("readyState", mstr.Enum.Widget.READYSTATE.ERROR);
	    return;
	}
	var F = E.data;
	this.set("hasAnnotation", F.hasAnnotation);
	this.props.requestContext = {};
	this.set("readyState", mstr.Enum.Widget.READYSTATE.IDLE);
    };
    B.prototype.execCheck = function C() {
	this.set("hasAnnotation", false);
	var D = new mstr.http.GetAnnotationsInput(this.get("objectID"), this
		.get("objectType"), "CheckAnnotationsStyle");
	this.submitRequest(D, {});
	return true;
    };
    function B(D) {
	mstr.models.BaseModel.apply(this, [ D ]);
    }
    return B;
})();
mstr.models.ColorPicker = (function() {
    mstr.$O.extendsClass(C, mstr.models.ListModel);
    C.prototype.init = function B() {
	mstr.models.ListModel.prototype.init.apply(this);
	var G = this.getItems() && this.getItems()[0];
	if (G) {
	    this.set("hasColor", G[this.get("valueForm")] != "transparent");
	}
    };
    C.prototype.on_hashadd_selectedIndices = function E(G) {
	mstr.models.ListModel.prototype.on_hashadd_selectedIndices.apply(this,
		[ G ]);
	var I = this.getSelectedItem();
	if (I) {
	    var H = this.set("actualColor", I[this.get("valueForm")]);
	}
    };
    C.prototype.execSelectValue = function D(G) {
	if (G == null || G == "") {
	    G = "#000000";
	}
	var H = parseInt(G, 10);
	if (!isNaN(H) && H < 0) {
	    G = "#000000";
	}
	if (G != "transparent" && G != "automatic") {
	    G = G.toUpperCase();
	}
	if (mstr.models.ListModel.prototype.execSelectValue.apply(this, [ G ])) {
	    return true;
	}
	this.set("actualColor", G);
	this.execClearSelect();
	this.raiseEvent("hashremove_selectedIndices", {
	    name : "selectedIndices",
	    at : {}
	});
	return true;
    };
    C.prototype.set = function A(H, G) {
	if (H == "actualColor" && this.props.enableReselect
		&& this.props[H] == G) {
	    this.raiseEvent("set_" + H, {
		name : H,
		value : G,
		valueWas : G
	    });
	    return true;
	} else {
	    return mstr.models.ListModel.prototype.set.apply(this, arguments);
	}
    };
    C.prototype.execInsertCustomColor = function F(Q) {
	if (!Q || !this.getItems() || !this.getItems()[0]) {
	    return;
	}
	var K = this.get("valueForm");
	var J = mstr.$H.clone(this.getItems()[0]);
	J[K] = Q;
	if (K != "n") {
	    J.n = microstrategy.descriptors.getDescriptor("2133") + " " + Q;
	}
	var L = -1;
	var R = mstr.$A.len(this.props.items);
	var P = this.get("maxSize");
	if (P > -1 && P <= R) {
	    L = 0;
	    var I = {
		min : P - 1,
		max : R - 1
	    };
	    this.removeItemsAtRanges([ I ], true);
	}
	this.execSingleSelect(this.insertItemsAt([ J ], L));
	this.set("hasColor", true);
	var M = microstrategy && microstrategy.updateManager;
	if (M) {
	    var G = "";
	    var O = "";
	    var N = this.getItems();
	    for ( var H = 0; H < 8; H++) {
		if (N[H][K] == "transparent") {
		    break;
		}
		G += O + N[H][K];
		O = ",";
	    }
	    M.add([ M.createActionObject(null,
		    mstrUpdateManager.SET_PREFERENCE, mstr.$obj("mstrPageInfo")
			    .get("beanPath"), [ "5003", "5004" ], [
			    "userPalette", G ], [], null) ], true);
	}
    };
    function C(G) {
	mstr.models.ListModel.apply(this, [ G ]);
    }
    return C;
})();
mstr.models.AdvancedColorPicker = (function() {
    mstr.$O.extendsClass(C, mstr.models.BaseModel);
    C.monitoredFields = [ "color", "rootColor", "hex", "r", "g", "b", "h", "s",
	    "v" ];
    C.prototype.init = function I() {
	mstr.models.BaseModel.prototype.init.apply(this);
	for ( var J = 0; J < 9; J++) {
	    this["on_set_" + C.monitoredFields[J]] = this.synchFields;
	}
	this.get("basicColors").attachEventListener(this, "set_actualColor",
		"synchFields");
	this.getTarget() && this.initFromTarget();
    };
    C.prototype.getTarget = function A() {
	return this.get("targetPath") ? mstr.controllers.Factory.getPath(this
		.get("targetPath"), this) : null;
    };
    C.prototype.initFromTarget = function B() {
	if (!this.getTarget()) {
	    return;
	}
	this.set("color", this.getTarget().getCurrentColor());
	this.set("activeControlId", this.getTarget().getActiveControlId());
    };
    C.prototype.execUpdateTarget = function E() {
	if (!this.getTarget()) {
	    return;
	}
	this.getTarget().exec("advColorPicker",
		this.get("activeControlId") + "|" + this.get("color"));
    };
    C.prototype.set = function H(M, K) {
	mstr.models.BaseModel.prototype.set.apply(this, [ M, K ]);
	if (M == "opener") {
	    var J = K && K.getModel && K.getModel();
	    if (!J) {
		return;
	    }
	    var L = J.get("actualColor");
	    if (L) {
		L = L.split(",")[0];
		if (L == "transparent") {
		    L = "#ffffff";
		} else {
		    if (L.charAt(0) != "#") {
			L = "#" + L;
		    }
		}
		this.set("color", L);
	    }
	    mstr.$obj("mstrPageInfo").get("userPalette").attachEventListener(
		    this, "set_actualColor", "synchFields");
	}
	if (M == "targetPath") {
	    this.getTarget() && this.initFromTarget();
	    mstr.$obj("mstrPageInfo").get("userPalette").attachEventListener(
		    this, "set_actualColor", "synchFields");
	}
    };
    C.prototype.synchFields = function F(J) {
	if (this.synchronizing) {
	    return;
	}
	switch (J.name) {
	case "set_color":
	    this.synchronizing = true;
	    var M = J.memo.value;
	    this.set("hex", M.substr(1));
	    var L = mstr.utils.Color.hex2rgb(M);
	    this.set("r", L[0]);
	    this.set("g", L[1]);
	    this.set("b", L[2]);
	    var K = mstr.utils.Color.rgb2hsv(L[0], L[1], L[2]);
	    this.set("h", K[0]);
	    this.set("s", K[1]);
	    this.set("v", K[2]);
	    this.set("rootColor", "#"
		    + mstr.utils.Color.hsv2hex(K[0], 100, 100));
	    this.synchronizing = false;
	    break;
	case "set_hex":
	    this.set("color", "#" + (this.get("hex") || "000000"));
	    break;
	case "set_r":
	case "set_g":
	case "set_b":
	    this.set("color", "#"
		    + mstr.utils.Color.rgb2hex(this.get("r"), this.get("g"),
			    this.get("b")));
	    break;
	case "set_h":
	case "set_s":
	case "set_v":
	    this.set("color", "#"
		    + mstr.utils.Color.hsv2hex(this.get("h"), this.get("s"),
			    this.get("v")));
	    break;
	case "set_actualColor":
	    var M = J.src.get("actualColor");
	    if (M != "transparent") {
		this.set("color", M);
	    }
	    break;
	}
    };
    C.prototype.execDetachUserPalette = function G(J) {
	mstr.$obj("mstrPageInfo").get("userPalette").detachEventListener(this,
		"set_actualColor");
    };
    C.prototype.execAddUserColor = function D(J) {
	var L = this.get("color");
	if (this.get("basicColors").indexOfValue(L) != -1) {
	    return;
	}
	var K = mstr && mstr.$obj("mstrPageInfo")
		&& mstr.$obj("mstrPageInfo").get("userPalette");
	if (!K || K.indexOfValue(L) != -1) {
	    return;
	}
	K.execInsertCustomColor(L);
    };
    function C(J) {
	mstr.models.BaseModel.apply(this, [ J ]);
    }
    return C;
})();
mstr.models.GradientEditor = (function() {
    mstr.$O.extendsClass(B, mstr.models.BaseModel);
    B.prototype.init = function D() {
	mstr.models.BaseModel.prototype.init.apply(this);
	this["on_set_gradient"] = this.gradientChange;
	this.get("color1").attachEventListener(this, "set_actualColor",
		"gradientChange");
	this.get("color2").attachEventListener(this, "set_actualColor",
		"gradientChange");
	this.get("gradientType").attachEventListener(this,
		"hashadd_selectedIndices", "gradientChange");
	this.get("variants").attachEventListener(this,
		"hashadd_selectedIndices", "gradientChange");
    };
    B.prototype.set = function A(I, G) {
	mstr.models.BaseModel.prototype.set.apply(this, [ I, G ]);
	if (I == "opener") {
	    var F = G && G.getModel && G.getModel();
	    if (!F) {
		return;
	    }
	    var H = F.get("actualColor");
	    if (H && H.indexOf(",") > -1) {
		this.set("gradient", H);
	    } else {
		H = (H && H != "transparent") ? H.substr(1) : "000000";
		this.set("gradient", H + ",ffffff,14,0,0,0");
	    }
	}
    };
    B.prototype.gradientChange = function C(Q) {
	if (this.changingGradient) {
	    return;
	}
	switch (Q.name) {
	case "set_gradient":
	    this.changingGradient = true;
	    var I = Q.memo.value.split(",");
	    this.get("color1").execSelectValue("#" + I[0]);
	    this.get("color2").execSelectValue("#" + I[1]);
	    var K, J, G;
	    var L = I.slice(2).join(",");
	    var F = this.get("variantsCache");
	    var P = F.length + 1;
	    for (J = 0, G = F.length; J < G; J++) {
		var H = F[J];
		var S = H.indexOfValue(L);
		if (S != -1) {
		    P = J + 1;
		    K = H;
		    break;
		}
	    }
	    this.get("gradientType").execSelectValue(P);
	    if (P == gradientUtil.GRADIENTSHADING_STYLE_CUSTOM) {
		this.customGradientInit(L);
	    }
	    if (K) {
		var R = mstr.utils.Hash.deepClone(K.getItems());
		for (J = 0, G = R.length; J < G; J++) {
		    R[J].dssid = I[0] + "," + I[1] + "," + R[J].dssid;
		}
		var N = this.get("variants");
		N.setItems(R);
		N.execSelectValue(Q.memo.value);
	    }
	    this.changingGradient = false;
	    break;
	case "set_actualColor":
	case "hashadd_selectedIndices":
	    if (Q.src == this.get("variants")) {
		this.changingGradient = true;
		this.set("gradient", this.get("variants")
			.getSelectedItemValue());
		this.changingGradient = false;
	    } else {
		var L = this.get("color1").get("actualColor").substr(1) + ",";
		L += this.get("color2").get("actualColor").substr(1) + ",";
		var M = this.get("gradientType").getSelectedIndex();
		var O = this.get("variantsCache");
		if (!O[M]) {
		    return;
		}
		L += O[M].getSelectedItemValue();
		this.set("gradient", L);
	    }
	    break;
	}
    };
    B.prototype.customGradientInit = function E(F) {
    };
    function B(F) {
	mstr.models.BaseModel.apply(this, [ F ]);
    }
    return B;
})();
mstr.models.GraphGradientEditor = (function() {
    mstr.$O.extendsClass(E, mstr.models.GradientEditor);
    E.prototype.init = function B() {
	mstr.models.GradientEditor.prototype.init.apply(this);
	this.get("transitionType").attachEventListener(this,
		"hashadd_selectedIndices", "customGradientChange");
	this.attachEventListener(this, "set_angle", "customGradientChange");
	this.attachEventListener(this, "set_xOffset", "customGradientChange");
	this.attachEventListener(this, "set_yOffset", "customGradientChange");
    };
    E.prototype.customGradientChange = function D(F) {
	var G = this.get("color1").get("actualColor").substr(1) + ",";
	G += this.get("color2").get("actualColor").substr(1) + ",";
	G += this.get("transitionType").getSelectedItemValue() + ",";
	G += this.get("angle") + "," + this.get("xOffset") + ","
		+ this.get("yOffset");
	this.changingGradient = true;
	this.set("gradient", G);
	this.changingGradient = false;
    };
    E.prototype.customGradientInit = function A(F) {
	var G = F.split(",");
	if (G.length == 4) {
	    this.get("transitionType").execSelectValue(G[0]);
	    this.set("angle", G[1]);
	    this.set("xOffset", G[2]);
	    this.set("yOffset", G[3]);
	}
    };
    E.prototype.gradientChange = function C(F) {
	if (this.changingGradient) {
	    return;
	}
	if (this.get("gradientType").getSelectedItemValue() == gradientUtil.GRADIENTSHADING_STYLE_CUSTOM) {
	    this.customGradientChange(null);
	    return;
	}
	mstr.models.GradientEditor.prototype.gradientChange.apply(this,
		arguments);
    };
    function E(F) {
	mstr.models.GradientEditor.apply(this, [ F ]);
    }
    return E;
})();
mstr.models.Validator = (function() {
    mstr.$O.extendsClass(A, mstr.models.BaseModel);
    A.prototype.setValidationStatus = function B(E) {
	var D = this.get("parent");
	if (!D) {
	    return true;
	}
	if (E.length == 0) {
	    D.set("validationStatus", {
		statusCode : mstr.Enum.Validation.STATUSCODE.VALID,
		message : "",
		bubble : true
	    });
	    return true;
	}
	var C = this.get("errMessage") || E;
	D.set("validationStatus", {
	    statusCode : mstr.Enum.Validation.STATUSCODE.INVALID_ANSWERS,
	    message : C,
	    bubble : true
	});
	return false;
    };
    function A(C) {
	mstr.models.BaseModel.apply(this, [ C ]);
    }
    return A;
})();
mstr.models.FieldValidator = (function() {
    mstr.$O.extendsClass(C, mstr.models.Validator);
    C.EXCEPTION_DELIMITER = ";";
    C.prototype.intRegExp = /(^-?\d\d*$)/;
    C.prototype.validate = function B(M) {
	var E = "", J = this.props.descriptors;
	var K = false, F;
	if (this.get("exceptions")) {
	    F = mstr.utils.String.trimDelimited(C.EXCEPTION_DELIMITER
		    + this.get("exceptions") + C.EXCEPTION_DELIMITER,
		    C.EXCEPTION_DELIMITER);
	    if (F.indexOf(mstr.utils.String.trimDelimited(C.EXCEPTION_DELIMITER
		    + M + C.EXCEPTION_DELIMITER, C.EXCEPTION_DELIMITER)) != -1) {
		K = true;
	    }
	    if (K) {
		return this.setValidationStatus(E);
	    }
	}
	var I = (M == null || (typeof (M) == "string" && M.length == 0));
	if (this.get("required") && I) {
	    E = J.errRequired;
	}
	if (E.length == 0 && !I) {
	    var G = rangeErr = regErr = 0;
	    var Q = "";
	    var L = this.get("max");
	    var H = this.get("min");
	    if (L == "x") {
		L = null;
	    }
	    if (H == "x") {
		H = null;
	    }
	    var P = this._resolveComparisonFields("lessThan");
	    var O = this._resolveComparisonFields("greaterThan");
	    var N = this.get("regEx");
	    var D = this.get("type");
	    if (H && L || H && P || L && O || P && O) {
		Q = J.errMinMax;
	    } else {
		if (H || O) {
		    Q = J.errMinOrGreater;
		} else {
		    if (L || P) {
			Q = J.errMaxOrLess;
		    } else {
			if (N) {
			    Q = J.errRegEx;
			} else {
			    if (D) {
				Q = J.errType;
			    }
			}
		    }
		}
	    }
	    switch (D) {
	    case mstr.Enum.Nodes.DATATYPE.INTEGER:
		if ((!this.intRegExp.test(M) && !this.snRegExp.test(M))
			|| parseInt(M, 10) != parseFloat(M)) {
		    Q = Q.replace("#", J.errTypeInt);
		    G = 1;
		}
		break;
	    case mstr.Enum.Nodes.DATATYPE.FLOAT:
		if (!this.floatRegExp.test(M) && !this.snRegExp.test(M)) {
		    Q = Q.replace("#", J.errTypeNum);
		    G = 1;
		}
		break;
	    }
	    if (!G) {
		Q = Q.replace("# ", "");
	    }
	    if ((L || H) && mstr.utils.Math.inNumericRange(M, H, L)) {
		rangeErr = 1;
	    }
	    if (H) {
		Q = Q.replace("##", H);
	    }
	    if (L) {
		Q = Q.replace("###", L);
	    }
	    if (!isNaN(P)) {
		if (M > P || G) {
		    rangeErr = 1;
		}
		Q = Q.replace("###", P);
	    }
	    if (!isNaN(O)) {
		if (M < O || G) {
		    rangeErr = 1;
		}
		Q = Q.replace("##", O);
	    }
	    if (N && !(new RegExp(N, "g").test(M))) {
		regErr = 1;
	    }
	    if (G || rangeErr || regErr) {
		E = Q;
	    }
	}
	return this.setValidationStatus(E);
    };
    C.prototype._resolveComparisonFields = function A(K) {
	var G = this.get(K);
	if (!G) {
	    return NaN;
	}
	var J = 0;
	var D, F, E;
	var I = G.split("|");
	if (I[0]) {
	    var H = I[0].split(";");
	    for (F = 0, E = H.length; F < E; F++) {
		D = mstr.$path(H[F], this.get("parent"));
		J += parseFloat(D, 10);
	    }
	}
	if (I[1]) {
	    var L = I[1].split(";");
	    for (F = 0, E = L.length; F < E; F++) {
		D = mstr.$path(L[F], this.get("parent"));
		J -= parseFloat(D, 10);
	    }
	}
	return J;
    };
    function C(D) {
	mstr.models.Validator.apply(this, [ D ]);
	var E = mstr.controllers.Factory.getPath("userInfo/decimalSeparator",
		mstr.$obj("mstrPageInfo"));
	this.floatRegExp = new RegExp("(^-?\\d\\d*\\" + E
		+ "\\d*$)|(^-?\\d\\d*\\" + E
		+ "?\\d*e(\\+|-)\\d+$)|(^-?\\d\\d*$)|(^-?\\" + E + "\\d\\d*$)");
	this.snRegExp = new RegExp("^-?[1-9](\\" + E + "\\d+)?[Ee]([+-]?\\d+)$");
    }
    return C;
})();
mstr.models.ListValidator = (function() {
    mstr.$O.extendsClass(B, mstr.models.Validator);
    B.prototype.validate = function A(D, E) {
	var C = this.get("parent").getModel();
	if (this.get("required") && D == "ToggleSelect") {
	    var F = [];
	    if (C.getSelectedIndices()[E] && C.getSelectedItems().length == 1) {
		F = [ microstrategy.descriptors.getDescriptor("6076") ];
	    }
	    return this.setValidationStatus(F);
	}
	return true;
    };
    function B(C) {
	mstr.models.Validator.apply(this, [ C ]);
    }
    return B;
})();
mstr.models.RibbonToolbarModel = (function() {
    mstr.$O.extendsClass(D, mstr.models.ListModel);
    D.prototype.init = function B() {
	microstrategy.bones[this.getId()] = this;
	mstr.models.ListModel.prototype.init.apply(this, []);
	if (microstrategy.pageScreenMode == microstrategy.PAGE_FULL_SCREEN_MODE) {
	    this.set("selectedToolbar", 0);
	}
	this.selectToolbar();
    };
    D.prototype.onreload = function A() {
	var R = this.getSelectedItem();
	var P = this.getItems();
	for ( var N = 0, K = P.length; N < K; N++) {
	    var L = P[N];
	    var M = L.visibleFeatures;
	    var J = L.enabledFeatures;
	    var Q = mstr.behaviors.featureResolver.resolveFeatSet(M, true);
	    var O = mstr.behaviors.featureResolver.resolveFeatSet(J, true);
	    if (Q && !L.visible) {
		this.get("toolbarModels").getItems()[N]
			.execSynchronizeControls();
	    }
	    L.visible = Q;
	}
	if (!R.visible || !O) {
	    this.execSelectValue(0);
	}
	this.raiseEvent("featuresChanged");
    };
    D.prototype.onload = function C() {
	this.onreload();
    };
    D.prototype.selectToolbar = function H() {
	this.set("initializing", true);
	if (!this.execSelectValue(this.get("selectedToolbar"))) {
	    var J = 0;
	    while (!this.execSelectValue(J)) {
		J++;
	    }
	}
	this.set("initializing", false);
    };
    D.prototype.execSingleSelect = function G(L) {
	mstr.controllers.EventManager.notifyWindowListeners({
	    name : "closeMenus"
	});
	if (this.props.items[L].enabledFeatures) {
	    if (!mstr.behaviors.featureResolver
		    .resolveFeatSet(this.props.items[L].enabledFeatures)) {
		return false;
	    }
	}
	mstr.models.ListModel.prototype.execSingleSelect.call(this, L);
	if ((mstrUpdateManager.SET_REPORT_SELECTED_RIBBON || mstrUpdateManager.SET_RW_SELECTED_RIBBON)
		&& !this.get("initializing")) {
	    var K = microstrategy.updateManager;
	    if (!this.action) {
		this.action = K.createActionObject(null,
			mstrUpdateManager.SET_REPORT_SELECTED_RIBBON
				|| mstrUpdateManager.SET_RW_SELECTED_RIBBON,
			this.get("beanPath").replace("mstrWeb",
				microstrategy.servletName), [ "120005" ], [],
			[], null);
		K.add([ this.action ], true);
	    }
	    this.action.newArgs = [ this.getSelectedItemValue() ];
	}
	var J = this.get("toolbarModels");
	J.execSingleSelect(L);
	if (J.getSelectedItem().get("requestToolbar")) {
	    this.requestToolbar(L);
	}
	return true;
    };
    D.prototype.requestToolbar = function I(K) {
	var J = this.props.requestContext;
	if (J && J.id) {
	    this.cancelRequest(J.id);
	}
	var L = new mstr.http.LoadToolbarInput();
	L.params.viewer = this.get("targetPath");
	L.params.toolbarName = this.getItems()[K]["toolbarName"];
	L.params.ribbonListName = this.get("ribbonListName");
	this.submitRequest(L, {
	    index : K
	});
    };
    D.prototype.on_set_readyState = function F(J) {
	if (J.memo.value == mstr.Enum.Widget.READYSTATE.ERROR) {
	    microstrategy.handleTaskModelError(J);
	}
	mstr.models.ListModel.prototype.on_set_readyState.apply(J);
    };
    D.prototype.loadRequestResponse = function E() {
	var M = this.props.requestContext;
	var N = M && M.response;
	if (!N || !N.data) {
	    return;
	}
	var K = N.data.props.n;
	var R = this.get("toolbarModels");
	var O = R.getItems();
	var Q = M.memo.index;
	var S = K.getItems();
	for ( var L = 0, J = S.length; L < J; L++) {
	    if (S[L].set) {
		S[L].set("parent", O[Q]);
	    }
	}
	var P = K.get("targetPath");
	if (P) {
	    O[Q].set("targetPath", P);
	}
	O[Q].setItems(S);
	O[Q].set("requestToolbar", false);
	this.props.requestContext = {};
    };
    function D(J) {
	mstr.models.ListModel.apply(this, [ J ]);
    }
    return D;
})();
mstr.models.Toolbar = (function() {
    mstr.$O.extendsClass(C, mstr.models.ListModel);
    C.prototype.queueStatus = {};
    C.prototype.init = function G(J) {
	if (!this.props.targetPath) {
	    var N = this.getAncestorByProperty("targetPath", true);
	    if (N) {
		this.props.targetPath = N.get("targetPath");
	    }
	}
	if (this.props.targetPath) {
	    var K = this.get("items");
	    for ( var M = 0, L = K.length; M < L; M++) {
		if (!K[M].targetPath) {
		    mstr.controllers.Factory.safeset(K[M], "targetPath",
			    this.props.targetPath);
		}
	    }
	}
	mstr.models.ListModel.prototype.init.apply(this, arguments);
    };
    C.prototype.clearQueuedValues = function B(K, J) {
	if (!this.queue) {
	    return;
	}
	var L = this.queue[K];
	if (!L) {
	    return;
	}
	if (J) {
	    delete L[J];
	    if (mstr.utils.Hash.isEmpty(L)) {
		delete this.queue[K];
	    }
	} else {
	    delete this.queue[K];
	}
	this.set("CommandEnabledSubmitQueue", !this
		.get("CommandEnabledSubmitQueue"));
    };
    C.prototype.queueValue = function E(M, K, L) {
	var J = this.queue || {};
	var N = J[M] || {};
	N[K] = L;
	J[M] = N;
	this.queue = J;
	this.set("CommandEnabledSubmitQueue", !this
		.get("CommandEnabledSubmitQueue"));
    };
    C.prototype.execSubmitQueue = function F(K) {
	if (!this.isQueueStatusValid(K)) {
	    return;
	}
	var L = mstr.controllers.Factory.getPath(this.get("targetPath"), this);
	var J = L && L.commands && L.commands.exec(K, this.queue[K]);
	this.clearQueuedValues(K);
    };
    C.prototype.queryCommandEnabled = function A(K, J) {
	if (K == "SubmitQueue" && J && J[0]) {
	    return this.isQueueStatusValid(J[0]);
	} else {
	    return mstr.models.BaseModel.prototype.queryCommandEnabled.apply(
		    this, arguments);
	}
    };
    C.prototype.setQueueValidationStatus = function D(K, J) {
	this.queueStatus[K] = J;
	this.set("CommandEnabledSubmitQueue", !this
		.get("CommandEnabledSubmitQueue"));
    };
    C.prototype.isQueueStatusValid = function I(J) {
	return this.queue
		&& this.queue[J]
		&& !(this.queueStatus[J] > mstr.Enum.Validation.STATUSCODE.VALID);
    };
    C.prototype.execSynchronizeControls = function H() {
	var J = this.getItems();
	for ( var L = 0, K = J.length; L < K; L++) {
	    var M = J[L].get && J[L].get("toolbarHelper");
	    if (M) {
		M.synchronizeControl();
	    }
	}
    };
    function C(J) {
	mstr.models.ListModel.apply(this, [ J ]);
    }
    return C;
})();
mstr.models.TextBoxModel = (function() {
    mstr.$O.extendsClass(A, mstr.models.BaseModel);
    A.prototype.submitParentQueue = function B() {
	var C = this.props && this.props.parent
		&& this.props.parent.execSubmitQueue;
	if (C && this.props.queueGroup) {
	    this.props.parent.execSubmitQueue(this.props.queueGroup);
	}
    };
    function A(C) {
	mstr.models.BaseModel.apply(this, [ C ]);
    }
    return A;
})();
mstr.models.ToolbarControlHelper = (function() {
    mstr.$O.extendsClass(TCH, mstr.models.BaseModel);
    TCH.prototype.init = function TCH_init(excludedProps) {
	mstr.models.BaseModel.prototype.init.apply(this, arguments);
	var path = this.get("parent").get("targetPath");
	if (!path) {
	    return;
	}
	this.set("targetPath", path);
	var that = this;
	var fn = function() {
	    that.synchronizeControl();
	};
	var methods = this.get("parent").get("listenerMethods").split(",");
	for ( var i = 0, cnt = methods.length; i < cnt; i++) {
	    this[methods[i]] = fn;
	}
	if (this.get("targetPath") && !this.getTarget()) {
	    this.synchronizeControl();
	    var h = window.setInterval(function() {
		if (that.attachToTarget()) {
		    window.clearInterval(h);
		}
	    }, 100);
	    return;
	}
	this.attachToTarget();
    };
    TCH.prototype.attachToTarget = function TCH_attachToTarget() {
	var target = this.getTarget();
	if (!target) {
	    return false;
	}
	this.synchronizeControl();
	var zz = target.observer && target.observer.register(this.get("id"));
	return true;
    };
    TCH.prototype.getCmdId = function() {
	var parent = this.get("parent");
	return parent && parent.get("cmdid");
    };
    TCH.prototype.getTarget = function() {
	return mstr.controllers.Factory.getPath(this.get("targetPath"), this);
    };
    TCH.prototype.synchronizeControl = function TCH_synchronizeControl() {
	var target = this.getTarget();
	var cmdId = this.getCmdId();
	var b = this.get("visible");
	var parent = this.get("parent");
	var vFeatures = parent.get("visibleFeatures");
	if (vFeatures) {
	    b = mstr.behaviors.featureResolver.resolveFeatSet(vFeatures);
	}
	if ((cmdId && target) && (!vFeatures || b)) {
	    b = target.commands.queryVisible(cmdId);
	}
	this.set("visible", b);
	if (!b) {
	    return false;
	}
	b = this.get("enabled");
	var eFeatures = parent.get("enabledFeatures");
	if (eFeatures) {
	    b = mstr.behaviors.featureResolver.resolveFeatSet(eFeatures);
	} else {
	    if (cmdId && target) {
		b = target.commands.queryEnabled(cmdId);
	    }
	}
	this.set("enabled", b);
	return b;
    };
    TCH.prototype._getCustomizationInfo = function TCH__getCustomizationInfo(n) {
	return this.get("parent").get(n);
    };
    TCH.prototype.processCustomizations = function TCH_processCustomizations() {
	var ext = this._getCustomizationInfo("extra-url");
	if (ext) {
	    microstrategy.updateManager.addURL(ext);
	}
	var js = this._getCustomizationInfo("on-click");
	if (js) {
	    eval(js);
	}
	this.execHyperlink(this._getCustomizationInfo("link"), ext);
	this.execEvent(this._getCustomizationInfo("event"), ext);
    };
    TCH.prototype.execHyperlink = function TCH_execHyperlink(link, extraUrl) {
	if (!link) {
	    return;
	}
	var h = link.href;
	if (!h) {
	    return;
	}
	var p = link.params;
	if (link["append-state"] || p) {
	    if (!(/\?$/.test(h))) {
		h += "?";
	    }
	    if (link["append-state"]) {
		h = updateLink(h);
	    }
	    h = this._parameterizeUrl(h, p);
	}
	if (extraUrl) {
	    h += "&" + extraUrl;
	}
	var t = this._resolveTarget(link);
	window.open(h, t);
    };
    TCH.prototype.execEvent = function TCH_execEvent(evt, extraUrl) {
	if (!evt) {
	    return;
	}
	var p = this.getAncestorByProperty("evtInfo");
	if (!p) {
	    p = this.getAncestorByProperty("ribbonId");
	    p = mstr.$obj(p.get("ribbonId")).getAncestorByProperty("evtInfo",
		    true);
	}
	var h = p && p.get("evtInfo").get(evt["action-id"]);
	if (!h) {
	    return;
	}
	if (evt.iframe) {
	    h += "&iframe=true";
	}
	var t = this._resolveTarget(evt);
	if (evt["append-state"]) {
	    submitLink({
		href : h,
		target : t
	    });
	} else {
	    if (extraUrl) {
		h += "&" + extraUrl;
	    }
	    window.open(h, t);
	}
    };
    TCH.prototype._parameterizeUrl = function TCH__parameterizeUrl(h, p) {
	if (!p) {
	    return h;
	}
	var delim = (/\?$/.test(h)) ? "" : "&";
	var parent = this.get("parent");
	for ( var i = 0, cnt = p.length; i < cnt; i++) {
	    var v = mstr.controllers.Factory.getPath(p[i].value, parent);
	    v = (v != undefined) ? v : p[i].value;
	    h += delim + escape(p[i].n) + "=" + escape(v);
	    delim = "&";
	}
	return h;
    };
    TCH.prototype._resolveTarget = function TCH__resolveTarget(info) {
	var t = "_self";
	if (info.target) {
	    t = info.target;
	} else {
	    if (info.iframe) {
		t = "frameManager";
	    } else {
		if (info["use-window-open"]) {
		    t = "_blank";
		}
	    }
	}
	return t;
    };
    function TCH(props) {
	mstr.models.BaseModel.apply(this, [ props ]);
    }
    return TCH;
})();
mstr.models.ToolbarButtonHelper = (function() {
    mstr.$O.extendsClass(B, mstr.models.ToolbarControlHelper);
    B.prototype.execPressed = function A() {
	var D = this.getCmdId();
	if (D) {
	    var E = this.getTarget();
	    var C = E && E.commands && E.commands.exec(D);
	}
	this.processCustomizations();
    };
    function B(C) {
	mstr.models.ToolbarControlHelper.apply(this, [ C ]);
    }
    return B;
})();
mstr.models.ToolbarDualStateButtonHelper = (function() {
    mstr.$O.extendsClass(C, mstr.models.ToolbarButtonHelper);
    C.prototype.synchronizeControl = function A() {
	if (!mstr.models.ToolbarButtonHelper.prototype.synchronizeControl
		.apply(this, arguments)) {
	    return false;
	}
	var D = this.getTarget();
	this.get("parent").set("state",
		D && D.commands.queryState(this.getCmdId()));
    };
    C.prototype.execPressed = function B() {
	var F = this.get("parent");
	var H = !F.get("state");
	F.set("state", H);
	var E = this.getCmdId();
	if (E) {
	    var G = this.getTarget();
	    var D = G && G.commands && G.commands.exec(E, H);
	}
	this.processCustomizations();
    };
    function C(D) {
	mstr.models.ToolbarButtonHelper.apply(this, [ D ]);
    }
    return C;
})();
mstr.models.ToolbarListHelper = (function() {
    mstr.$O.extendsClass(B, mstr.models.ToolbarControlHelper);
    B.prototype.init = function F(H) {
	mstr.models.ToolbarControlHelper.prototype.init.apply(this, arguments);
	var I = this.get("parent");
	I.attachEventListener(this, "hashadd_selectedIndices", "updateTarget");
    };
    B.prototype._getCustomizationInfo = function A(J) {
	var I = this.get("parent");
	var H = I && I.getSelectedItem();
	return (H && mstr.controllers.Factory.safeget(H, J)) || I.get(J);
    };
    B.prototype.updateTarget = function C(J) {
	if (this.get("synchronizing")) {
	    return;
	}
	var M = this.get("parent");
	var K = M.getSelectedItem();
	if (!K) {
	    return;
	}
	var I = this.getCmdId();
	if (I) {
	    var L = this.getTarget();
	    var H = L.commands && L.commands.exec(I, K[M.get("valueForm")]);
	}
	this.processCustomizations();
    };
    B.prototype.synchronizeControl = function G() {
	if (!mstr.models.ToolbarControlHelper.prototype.synchronizeControl
		.apply(this, arguments)) {
	    return false;
	}
	var J = this.getTarget();
	var I = J && J.commands.queryState(this.getCmdId());
	if (!I) {
	    return true;
	}
	this.set("synchronizing", true);
	this.checkItemFeatures();
	var H = (mstr.$A.isArray(I)) ? "execSelectValues" : "execSelectValue";
	var K = this.get("parent")[H](I);
	if (!K) {
	    this.get("parent").execClearSelect();
	}
	this.set("synchronizing", false);
	return true;
    };
    B.prototype.checkItemFeatures = function E() {
	if (this.get("noFeatures")) {
	    return;
	}
	var K, J;
	var M = this.get("parent");
	var N = this.get("cachedItems");
	if (!N) {
	    var I = M.getItems();
	    var H = false;
	    for (K = 0, J = I.length; K < J; K++) {
		if (I[K]["visibleFeatures"]) {
		    H = true;
		    break;
		}
	    }
	    if (H) {
		N = mstr.utils.Hash.deepClone(M.getItems());
		this.set("cachedItems", N);
	    } else {
		this.set("noFeatures", true);
		return;
	    }
	}
	N = mstr.utils.Hash.deepClone(N);
	for (K = N.length - 1; K >= 0; K--) {
	    var L = N[K]["visibleFeatures"];
	    if (!L) {
		continue;
	    }
	    if (!mstr.behaviors.featureResolver.resolveFeatSet(L)) {
		N.splice(K, 1);
	    }
	}
	M.setItems(N);
    };
    B.prototype.pickerButtonPushed = function D() {
	if (this.get("parent").get("updateOnClick")) {
	    this.updateTarget();
	    this.synchronizeControl();
	    return true;
	} else {
	    return false;
	}
    };
    function B(H) {
	mstr.models.ToolbarControlHelper.apply(this, [ H ]);
    }
    return B;
})();
mstr.models.ToolbarCheckListHelper = (function() {
    mstr.$O.extendsClass(G, mstr.models.ToolbarListHelper);
    G.prototype.init = function D(H) {
	mstr.models.ToolbarListHelper.prototype.init.apply(this, arguments);
	var I = this.get("parent");
	I
		.attachEventListener(this, "hashremove_selectedIndices",
			"cacheAction");
	I.attachEventListener(this, "hashadd_selectedIndices", "cacheAction");
    };
    G.prototype.cacheAction = function B(H) {
	if (this.get("synchronizing")) {
	    return;
	}
	var I = this._killUpdateTimeout();
	I.push(this._packageValue(mstr.utils.Arrays.fromHashKeys(H.memo.at,
		true), (H.name == "hashadd_selectedIndices")));
	this._setUpdateTimeout(I);
    };
    G.prototype.updateTarget = function F() {
	if (this.get("synchronizing")) {
	    return;
	}
	var J = this.get("parent").get("lastSelection");
	var K = this.get("updateCache")
		|| [ this._packageValue(J ? [ J ] : [], true) ];
	this.set("updateCache", null);
	var I = this.getCmdId();
	if (I) {
	    var L = this.getTarget();
	    var H = L.commands && L.commands.exec(I, K);
	}
    };
    G.prototype._packageValue = function C(O, H) {
	H = !!H;
	var N = this.get("parent");
	var K = N.getItems();
	var I = N.get("valueForm");
	var J = [];
	for ( var M = 0, L = O.length; M < L; M++) {
	    J.push(K[O[M]][I]);
	}
	return {
	    cl : H,
	    v : J
	};
    };
    G.prototype._killUpdateTimeout = function A() {
	if (this.get("updateHandle")) {
	    window.clearTimeout(this.get("updateHandle"));
	    this.set("updateHandle", null);
	    if (!!!this.get("discardQueue")) {
		return this.get("updateCache");
	    }
	}
	return [];
    };
    G.prototype._setUpdateTimeout = function E(H) {
	this.set("updateCache", H);
	this.set("updateHandle", window.setTimeout('mstr.$obj("' + this.getId()
		+ '").updateTarget();', 0));
    };
    function G(H) {
	mstr.models.ToolbarListHelper.apply(this, [ H ]);
    }
    return G;
})();
mstr.models.ToolbarDynamicListHelper = (function() {
    mstr.$O.extendsClass(A, mstr.models.ToolbarListHelper);
    A.prototype.synchronizeControl = function B() {
	if (!mstr.models.ToolbarControlHelper.prototype.synchronizeControl
		.apply(this, arguments)) {
	    return false;
	}
	var D = this.getTarget();
	var C = D.commands.queryState(this.getCmdId());
	this.set("synchronizing", true);
	this.get("parent").setItems(C.items);
	var E = this.get("parent").execSelectValue(C.value);
	if (!E) {
	    this.get("parent").execClearSelect();
	}
	this.set("synchronizing", false);
	return true;
    };
    function A(C) {
	mstr.models.ToolbarListHelper.apply(this, [ C ]);
    }
    return A;
})();
mstr.models.ToolbarColorPickerHelper = (function() {
    mstr.$O.extendsClass(D, mstr.models.ToolbarControlHelper);
    D.prototype.init = function C(F) {
	mstr.models.ToolbarControlHelper.prototype.init.apply(this, arguments);
	var G = this.get("parent");
	G.attachEventListener(this, "set_actualColor", "updateTarget");
    };
    D.prototype.updateTarget = function B(F) {
	if (this.get("synchronizing")) {
	    return;
	}
	var G = F.memo.value;
	this.get("parent").set("lastColor", G);
	this.getTarget().commands.exec(this.getCmdId(), G);
    };
    D.prototype.synchronizeControl = function A() {
	if (!mstr.models.ToolbarControlHelper.prototype.synchronizeControl
		.apply(this, arguments)) {
	    return;
	}
	var G = this.getTarget();
	var F = G.commands.queryState(this.getCmdId());
	this.set("synchronizing", true);
	this.get("parent").execSelectValue(F);
	this.set("synchronizing", false);
	F = G.commands.queryState(this.getCmdId() + "_vf");
	if (F != "") {
	    this.get("parent").set("popup|viewFlags", F);
	}
    };
    D.prototype.pickerButtonPushed = function E() {
	var G = this.get("parent");
	var F = G.get("lastColor");
	if (F) {
	    G.set("actualColor", F);
	    this.synchronizeControl();
	}
	return true;
    };
    function D(F) {
	mstr.models.ToolbarControlHelper.apply(this, [ F ]);
    }
    return D;
})();
mstr.models.ToolbarTextBoxHelper = (function() {
    mstr.$O.extendsClass(D, mstr.models.ToolbarControlHelper);
    D.prototype.init = function A() {
	mstr.models.ToolbarControlHelper.prototype.init.apply(this, arguments);
	var E = this.get("parent");
	E.attachEventListener(this, "set_value", "queueValue");
    };
    D.prototype.queueValue = function C(E) {
	if (this.get("synchronizing")) {
	    return;
	}
	var F = E.memo.value;
	var G = this.get("parent");
	var H = G.get("parent");
	H.queueValue(G.get("queueGroup"), this.getCmdId(), F);
    };
    D.prototype.synchronizeControl = function B() {
	var E = this.get("parent");
	E.get("parent").clearQueuedValues(E.get("queueGroup"), this.getCmdId());
	var F = "";
	if (mstr.models.ToolbarControlHelper.prototype.synchronizeControl
		.apply(this, arguments)) {
	    var G = this.getTarget();
	    F = G.commands.queryState(this.getCmdId()) || "";
	}
	this.set("synchronizing", true);
	this.get("parent").set("value", F);
	this.set("synchronizing", false);
    };
    function D(E) {
	mstr.models.ToolbarControlHelper.apply(this, [ E ]);
    }
    return D;
})();
mstr.models.ToolbarButtonModel = (function() {
    mstr.$O.extendsClass(A, mstr.models.BaseModel);
    A.prototype.DEFAULTS = {
	tooltip : "",
	enabled : true,
	visible : true
    };
    function A(B) {
	mstr.models.BaseModel.apply(this, [ B ]);
    }
    return A;
})();
mstr.models.BlockContainer = (function() {
    mstr.$O.extendsClass(B, mstr.models.BaseModel);
    B.prototype.init = function A() {
	mstr.models.BaseModel.prototype.init.call(this, [ "models", "views" ]);
	var D, G, F, C;
	var E = this.props[mstr.$W.DOCUMENT];
	G = this.props.models;
	for (D = 0; G && G.length && D < G.length; D++) {
	    F = G[D][mstr.$W.SCRIPTCLASS]
		    && mstr.controllers.Factory.registerJSON(G[D], E);
	    if (F) {
		G[D] = F;
		C = F.props && (F.props[mstr.$W.PARENT] = this);
		C = F.init && F.init();
	    }
	}
	G = this.props.views;
	for (D = 0; G && G.length && D < G.length; D++) {
	    F = G[D][mstr.$W.SCRIPTCLASS]
		    && mstr.controllers.Factory.registerJSON(G[D], E);
	    if (F) {
		G[D] = F;
		C = F.props && (F.props[mstr.$W.PARENT] = this);
		C = F.init && F.init();
	    }
	}
    };
    function B(C) {
	mstr.models.BaseModel.apply(this, [ C ]);
    }
    return B;
})();
mstr.models.InsertLayoutEditor = (function() {
    mstr.$O.extendsClass(D, mstr.models.BaseModel);
    D.prototype.init = function C() {
	this.props.existingLayouts.styleName = "WidgetFolderStyle";
	mstr.models.BaseModel.prototype.init.call(this, [ "models", "views" ]);
	var H = [ "tabList", "newDashboardLayouts", "newDocumentLayouts",
		"existingLayouts" ];
	for ( var G = 0; G < 4; G++) {
	    var F = this.get(H[G]);
	    F.attachEventListener(this, "hashadd_selectedIndices",
		    "updateCommandEnabledSubmitModel");
	    F.attachEventListener(this, "hashremove_selectedIndices",
		    "updateCommandEnabledSubmitModel");
	}
    };
    D.prototype.updateCommandEnabledSubmitModel = function A() {
	this
		.set("CommandEnabledSubmitModel",
			(this._getSelectedItem() != null));
    };
    D.prototype.execSubmitModel = function B() {
	var H = this._getSelectedItem();
	if (!H) {
	    return false;
	}
	var I = mstr.$obj(this.props.boneId);
	if (I) {
	    I.commands.exec("unloadDocViewer");
	}
	var G = this.get("tabList").getSelectedIndex() != 2 ? "1" : "0";
	var F = microstrategy.updateManager;
	F.add([ F.createActionObject(null, mstrUpdateManager.RW_IMPORT_DOC,
		mstr.$obj("mstrPageInfo").get("beanPath"), [ "2048001",
			"2048175" ], [ H.dssid, G ]) ]);
	F.flushAndSubmitChanges();
	return true;
    };
    D.prototype._getSelectedItem = function E() {
	var F = this.get("tabList").getSelectedIndex();
	if (F == NaN || F == -1) {
	    return null;
	}
	if (F == 0) {
	    p = "newDashboardLayouts";
	} else {
	    if (F == 1) {
		p = "newDocumentLayouts";
	    } else {
		if (F == 2) {
		    p = "existingLayouts";
		}
	    }
	}
	return this.get(p).getSelectedItem();
    };
    function D(F) {
	mstr.models.BaseModel.apply(this, [ F ]);
    }
    return D;
})();
mstr.models.ContextMenuModel = (function() {
    mstr.$O.extendsClass(CMM, mstr.models.BaseModel);
    CMM.prototype.execPopulate = function CMM_execPopulate() {
	if (this.gridMenuItemsMap[this.getGridKey()] == null) {
	    var ondemandMenusRequestInputs = null;
	    ondemandMenusRequestInputs = new mstr.http.OndemandContextMenuInputs(
		    this.getGridKey());
	    this.submitRequest(ondemandMenusRequestInputs, {});
	} else {
	    this.raiseEvent("set_menu_ready", null);
	}
    };
    CMM.prototype.clearMenuItems = function CMM_clearMenuItems(gridKey) {
	this.gridMenuItemsMap[gridKey] = null;
	this.submittedGridKeys[gridKey] = null;
    };
    CMM.prototype.submitRequest = function CMM_submitRequest(reqInputs, memo) {
	this.raiseEvent("set_menu_processing", null);
	if (this.submittedGridKeys[this.getGridKey()] == null) {
	    var id = mstr.models.BaseModel.prototype.submitRequest.apply(this,
		    [ reqInputs, memo ]);
	    this.submittedGridKeys[this.getGridKey()] = id;
	}
    };
    CMM.prototype.setGridKey = function CMM_setGridKey(key) {
	this.gridKey = key;
    };
    CMM.prototype.getGridKey = function CMM_getGridKey() {
	return this.gridKey;
    };
    CMM.prototype.setCurrentDynamicMenuKey = function CMM_setCurrentDynamicMenuKey(
	    key) {
	this.currentDynamicMenuKey = key;
    };
    CMM.prototype.getCurrentDynamicMenuKey = function CMM_getCurrentDynamicMenuKey() {
	return this.currentDynamicMenuKey;
    };
    CMM.prototype.onRequestCallback = function CMM_onRequestCallback(req) {
	mstr.models.BaseModel.prototype.onRequestCallback.apply(this, [ req ]);
	switch (this.props.readyState) {
	case mstr.Enum.Widget.READYSTATE.ERROR:
	    this.raiseEvent("set_hide_menu_processing", null);
	    this.submittedGridKeys[this.getGridKey()] = null;
	    break;
	}
    };
    CMM.prototype.loadRequestResponse = function CMM_loadRequestResponse() {
	var ctxt = this.props.requestContext;
	var data = ctxt && ctxt.response && ctxt.response.data;
	if (!data) {
	    this.set("readyState", mstr.Enum.Widget.READYSTATE.ERROR);
	    this.submittedGridKeys[this.getGridKey()] = null;
	    return;
	}
	if (data.dynamicMenus && data.menuItems) {
	    var dyn_avItems = eval(data.dynamicMenus);
	    var gridKey = this.getGridKey();
	    for ( var i = 0; i < dyn_avItems.length; i++) {
		var dynamicMenuKey = dyn_avItems[i][0];
		this.dynamicMenusMap[gridKey + dynamicMenuKey] = dyn_avItems[i][1];
	    }
	    this.gridMenuItemsMap[gridKey] = eval(data.menuItems);
	}
	this.props.requestContext = {};
	this.set("readyState", mstr.Enum.Widget.READYSTATE.IDLE);
	this.raiseEvent("set_hide_menu_processing", null);
	this.raiseEvent("set_menu_ready", null);
    };
    CMM.prototype.getMenuItems = function CMM_getMenuItems() {
	return this.gridMenuItemsMap[this.getGridKey()];
    };
    CMM.prototype.getCurrentMenuItemIndices = function() {
	var hashKey = this.getGridKey() + this.getCurrentDynamicMenuKey();
	return this.dynamicMenusMap[hashKey] || null;
    };
    function CMM(props) {
	mstr.models.BaseModel.apply(this, [ props ]);
	this.gridMenuItemsMap = [];
	this.dynamicMenusMap = [];
	this.currentDynamicMenuKey = null;
	this.gridKey = null;
	this.submittedGridKeys = [];
    }
    return CMM;
})();
mstr.models.ToolbarPickerListModel = (function() {
    mstr.$O.extendsClass(C, mstr.models.ListModel);
    C.prototype.on_hashadd_selectedIndices = function B(E) {
	this._storeLastSelection(E);
	mstr.models.ListModel.prototype.on_hashadd_selectedIndices.apply(this,
		arguments);
    };
    C.prototype.on_hashremove_selectedIndices = function A(E) {
	this._storeLastSelection(E);
	mstr.models.ListModel.prototype.on_hashremove_selectedIndices.apply(
		this, arguments);
    };
    C.prototype._storeLastSelection = function D(E) {
	var F = this.get("toolbarHelper");
	if (!F || !F.get || F.get("synchronizing")) {
	    return;
	}
	this.set("lastSelection", mstr.utils.Hash.firstKey(E.memo.at));
    };
    function C(E) {
	mstr.models.ListModel.apply(this, [ E ]);
    }
    return C;
})();
mstr.models.ToolbarBorderListModel = (function() {
    mstr.$O.extendsClass(B, mstr.models.ToolbarPickerListModel);
    B.prototype.execToggleSelect = function A(C) {
	var F = this.props.selectedIndices;
	if (F[C]) {
	    if (C < 2) {
		return false;
	    } else {
		if (F[0]) {
		    this.execRemoveSelect(0);
		}
	    }
	    this.execRemoveSelect(C);
	    if (!F[2] && !F[3] && !F[4] && !F[5]) {
		C = 1;
		this.execAddSelect(C);
	    }
	} else {
	    if (C == 1) {
		this.execClearSelect();
	    } else {
		if (F[1]) {
		    this.execRemoveSelect(1);
		}
		if (C == 0) {
		    for ( var D = 2; D < 6; D++) {
			if (!F[D]) {
			    this.execAddSelect(D);
			}
		    }
		} else {
		    var E = mstr.utils.Hash.clone(F);
		    E[C] = true;
		    if (E[2] && E[3] && E[4] && E[5]) {
			this.execAddSelect(0);
		    }
		}
	    }
	    this.execAddSelect(C);
	}
	this.set("leadIndex", C);
	return true;
    };
    function B(C) {
	mstr.models.ToolbarPickerListModel.apply(this, [ C ]);
    }
    return B;
})();
mstr.behaviors.TriStateCheckBox = (function() {
    var B = {};
    B._DISABLED = "Disabled";
    B._INTERMEDIATE = "Intermediate";
    B._ON = "On";
    B._OFF = "Off";
    B.on_set_enabled = function D(F, G, J) {
	var H = J.childNodes[0].childNodes[0].childNodes[0].childNodes[0].childNodes[0];
	var E = J.childNodes[0].childNodes[0].childNodes[0].childNodes[1].childNodes[0];
	var I = F.props.cssPrefix + F.props.cssClass;
	if (F.props.enabled == false) {
	    H.className = I + this._DISABLED;
	    E.className = I + "Caption" + this._DISABLED;
	    return;
	} else {
	    this.setTriState(F, G, J);
	}
    };
    B.on_model_hashadd_selectedIndices = function C(E, F, G) {
	if (E.get("enabled")) {
	    this.setTriState(E, F, G);
	}
    };
    B.setTriState = function A(H, I, L) {
	var J = L.childNodes[0].childNodes[0].childNodes[0].childNodes[0].childNodes[0];
	var G = L.childNodes[0].childNodes[0].childNodes[0].childNodes[1].childNodes[0];
	var K = H.props.cssPrefix + H.props.cssClass;
	var E = I.getSelectedIndex();
	var F = I.props.items[E].cssClass;
	switch (E) {
	case 0:
	    J.className = K + (F || this._INTERMEDIATE);
	    break;
	case 1:
	    J.className = K + (F || this._ON);
	    G.className = K + "Caption" + (F || this._ON);
	    break;
	case 2:
	    J.className = K + (F || this._OFF);
	    G.className = K + "Caption" + (F || this._OFF);
	    break;
	}
    };
    return B;
})();
mstr.behaviors.ToolbarPickerButton = (function() {
    var C = mstr.$H.clone(mstr.behaviors.Pulldown);
    C.on_set_enabled = function B(F, H, J) {
	var G = !!F.props.enabled;
	J.disabled = !G;
	var I = "0px", E = "0px";
	if (!G) {
	    I = "20px";
	    E = "22px";
	}
	var D = J.childNodes[1].rows[0].cells[1].firstChild.childNodes[3];
	D.style.height = I;
	D.style.width = E;
    };
    C.pickerButtonPushed = function A(E) {
	var F = mstr.$obj(E);
	if (!F.get("enabled")) {
	    return;
	}
	var D = F.getModel();
	var G = D.get("toolbarHelper");
	if (G && G.pickerButtonPushed && !G.pickerButtonPushed()) {
	    mstr.behaviors.ToolbarPickerButton.onmousedown(E);
	}
    };
    return C;
})();
mstr.behaviors.ColorPickerPopup = (function() {
    var A = {
	elements : {
	    0 : mstr.Enum.ColorPickerFlags.NO_COLOR,
	    1 : mstr.Enum.ColorPickerFlags.AUTOMATIC,
	    3 : mstr.Enum.ColorPickerFlags.USER_COLORS,
	    4 : mstr.Enum.ColorPickerFlags.MORE_COLORS,
	    5 : mstr.Enum.ColorPickerFlags.GRADIENT_COLORS,
	    6 : mstr.Enum.ColorPickerFlags.GRAPH_GRADIENTS
	}
    };
    A.resolveViewFlags = function B(D) {
	var C = D.props.viewFlags;
	for ( var E in A.elements) {
	    if (!!(C & A.elements[E])) {
		D._showChildViewAtPath("children/" + E);
	    } else {
		mstr.controllers.Factory.safeset(D.props.children[E],
			"visible", false);
	    }
	}
    };
    return A;
})();
mstr.itemrenderers.FastTileView = (function() {
    var B = mstr.$H.clone(mstr.itemrenderers.FastListView);
    B.renderListItem = function A(L, F, P, D, C) {
	var R = D.item;
	var U = L.props[mstr.$W.DOCUMENT];
	var J = (L.props.cssPrefix || "") + (L.props.itemCSSPrefix || "");
	if ("enabled" in R && !R.enabled) {
	    J += "Disabled";
	}
	var G = U.createElement("div");
	if (R.cssClass) {
	    G.className = R.cssClass + " " + J;
	} else {
	    G.className = J;
	}
	if (R.cssText) {
	    G.style.cssText = R.cssText;
	}
	if (R.desc != null && R.desc != "") {
	    G.title = R.n + ". " + R.desc;
	} else {
	    G.title = R.n || "";
	}
	var V = U.createElement("div");
	G.appendChild(V);
	V.className = J + "Name";
	if (L.props.showDescriptions && R.desc) {
	    var O = U.createElement("div");
	    G.appendChild(O);
	    O.className = J + "Desc";
	    O.appendChild(U.createTextNode(R.desc));
	} else {
	    var O = null;
	}
	if (L.props.itemCSSPrefix != "TileViewItem") {
	    var T = U.createTextNode(R.n || "");
	    var S = D.browseCommand;
	    if (S && !R.locked) {
		var K = U.createElement("a");
		V.appendChild(K);
		K.appendChild(T);
		K.href = "javascript:void(0)";
		S = null;
	    } else {
		V.appendChild(T);
	    }
	}
	if (L.props.showIcons && !C) {
	    var Q = R.icon;
	    if (R.locked) {
		Q += "_locked";
	    }
	    var H = U.createElement("div");
	    H.className = "mstrTileViewImgContainer";
	    V.appendChild(H);
	    var I;
	    if (!Q) {
		var N = microstrategy.bones.ribbon_graphToolbar.block.get(
			"major").getSelectedItems();
		if (N) {
		    var E = mstr.Settings.Scheme.LARGEPREVIEWS[N[0].icon];
		    I = E + "_" + R.dssid;
		    H.className += " " + E + "_subtype";
		}
	    } else {
		I = mstr.Settings.Scheme.LARGEPREVIEWS[Q];
	    }
	    if (I) {
		if (I.substr(0, 5) == "graph" && Q) {
		    H.className += " graphBgImg";
		}
		H.className += " " + I;
		if (L.props.itemCSSPrefix != "TileViewItem") {
		    V.style.paddingLeft = "23px";
		    if (O) {
			O.style.paddingLeft = "23px";
		    }
		}
	    } else {
		if (Q) {
		    H.className += " " + Q;
		    if (L.props.itemCSSPrefix != "TileViewItem") {
			V.style.paddingLeft = "23px";
			if (O) {
			    O.style.paddingLeft = "23px";
			}
		    }
		}
	    }
	    var M = U.createElement("div");
	    M.className = J + "NameImg";
	    H.appendChild(M);
	    M.onmouseover = this.hover;
	    M.onmouseout = this.unhover;
	}
	return G;
    };
    return B;
})();
mstr.itemrenderers.PreviewPickerView = (function() {
    var A = mstr.$H.clone(mstr.itemrenderers.ListPulldownView);
    A.renderListItem = function(B, D, I, E) {
	var C = mstr.itemrenderers.FastTileView
		.renderListItem(B, D, I, E, true);
	var H = this._getContentContainer(I);
	mstr.utils.Dom.clearChild(H, 0);
	H.appendChild(C);
	H.title = C.title || "";
	if (mstr.utils.ISIE4) {
	    var F = H.style, G = F.width;
	    if (G == null) {
		G = "";
	    }
	    F.width = "1px";
	    F.width = G;
	}
    };
    return A;
})();
mstr.itemrenderers.ColorPickerView = (function() {
    var A = mstr.$H.clone(mstr.itemrenderers.ListPulldownView);
    A.renderListItem = function(B, C, E, D) {
	this._renderItem(B, C, E, D.item);
    };
    A.renderEmpty = function(C, D, H, E) {
	var G = D && D.get("actualColor");
	if (G) {
	    var B = D.get("valueForm");
	    var F = {};
	    F[B] = G;
	    if (B != "n") {
		F.n = microstrategy.descriptors.getDescriptor("2133") + " " + G;
	    }
	    this._renderItem(C, D, H, F);
	} else {
	    mstr.itemrenderers.ListPulldownView.renderEmpty(C, D, H, E);
	}
    };
    A._renderItem = function(E, C, J, I) {
	var F = E.props[mstr.$W.DOCUMENT];
	var D = (E.props.cssPrefix || "") + (E.props.itemCSSPrefix || "");
	var B = F.createElement("div");
	B.className = D + "ColorItem";
	var G = I[C.get("valueForm")];
	if (G != null && G.indexOf(",") > -1) {
	    mstr.itemrenderers.GradientItem.renderGradientItem(B, G, 80, 12);
	} else {
	    if (G != "#"
		    && (!(bIsIE6 || bIsIE7 || bIsIE8 || bIsIE9) || G != "0")) {
		B.style.backgroundColor = (G != "automatic") ? G
			: "transparent";
	    }
	    if (I.n) {
		B.setAttribute("title", I.n);
	    }
	    if (G.toLowerCase() == "transparent"
		    || G.toLowerCase() == "automatic") {
		B.style.border = "1px dashed #999999";
	    }
	}
	var H = this._getContentContainer(J);
	mstr.utils.Dom.clearChild(H, 0);
	H.appendChild(B);
    };
    return A;
})();
mstr.itemrenderers.ColorPickerListView = (function() {
    var C = mstr.$H.clone(mstr.itemrenderers.ListView);
    C.renderListItem = function(I, E, M, D) {
	var L = D.item;
	var K = I.props[mstr.$W.DOCUMENT];
	var G = (I.props.cssPrefix || "") + (I.props.itemCSSPrefix || "");
	var H = (L.dssid == "transparent");
	if (!I.props.renderTransparent && H) {
	    return null;
	}
	var F = (L.dssid == "automatic");
	if (!I.props.renderAutomatic && F) {
	    return null;
	}
	if (L.dssid.indexOf(",") > -1) {
	    return null;
	}
	var J = K.createElement("span");
	J.className = G + I.props.itemCssClass;
	J.style.backgroundColor = L.dssid;
	J.setAttribute("title", L.n);
	J.onmouseover = this.hover;
	J.onmouseout = this.unhover;
	if (H) {
	    J.style.cursor = "default";
	}
	this._insertElementForIndex(I, M, D.at, J);
	return J;
    };
    C.on_set_visible = function B(D, G, I) {
	var H = D.props.visible;
	if (H) {
	    var F = mstr.$obj("mstrPageInfo")
		    && mstr.$obj("mstrPageInfo").get("userPalette");
	    if (F) {
		if (G && G.getSelectedItem()) {
		    F.execClearSelect();
		} else {
		    var E = G && G.get("actualColor");
		    if (E) {
			F.execSelectValue(E.toUpperCase());
		    }
		}
	    }
	}
	mstr.behaviors.Generic.set_css_display(I, "block", "none",
		D.props.visible);
    };
    C.hover = function A() {
	this.className += "Hover";
    };
    C.unhover = function A() {
	this.className = this.className.replace(/Hover/, "");
    };
    return C;
})();
mstr.itemrenderers.GradientItem = (function() {
    var A = {};
    A.renderGradientItem = function(B, O, G, N) {
	var L = O.split(",");
	var K = mstr.utils.Color.hex2rgb(L[0]);
	var J = mstr.utils.Color.hex2rgb(L[1]);
	var T = gradientUtil.GRADIENTSHADING_STYLE_CUSTOM;
	var F = 1;
	var C = L[2];
	var Q = parseInt(L[3], 10);
	var E = parseInt(L[4], 10);
	var D = parseInt(L[5], 10);
	if (C == "9") {
	    T = gradientUtil.GRADIENTSHADING_STYLE_FROMCENTER;
	    F = 3;
	} else {
	    if (C == "10") {
		if (E == 50) {
		    T = gradientUtil.GRADIENTSHADING_STYLE_FROMCENTER;
		    if (Q == 45) {
			F = 2;
		    }
		} else {
		    T = gradientUtil.GRADIENTSHADING_STYLE_FROMCORNER;
		    if (E + D == 200) {
			F = 3;
		    } else {
			if (E + D == 100) {
			    F = (E == 100) ? 2 : 4;
			}
		    }
		}
	    } else {
		if (Q == 0 || Q == 90) {
		    T = (Q == 0) ? gradientUtil.GRADIENTSHADING_STYLE_HORIZONTAL
			    : gradientUtil.GRADIENTSHADING_STYLE_VERTICAL;
		} else {
		    T = (Q == 135) ? gradientUtil.GRADIENTSHADING_STYLE_DIAGONALUP
			    : gradientUtil.GRADIENTSHADING_STYLE_DIAGONALDOWN;
		}
		var P = (Q == 0) ? E : D;
		if (P == 100) {
		    F = 2;
		} else {
		    if (P == 50) {
			F = 3;
		    }
		}
	    }
	}
	var R = (G / gradientUtil.PIXEL_WIDTH) * (N / gradientUtil.PIXEL_WIDTH);
	for ( var M = 0; M < R; M++) {
	    var I = document.createElement("div");
	    I.className = "pixel";
	    var S = gradientUtil.getColorPercent(gradientUtil.getXCoordinate(M,
		    G), gradientUtil.getYCoordinate(M, N), F, G, T);
	    var H = parseInt(S * (J[0] - K[0])) + K[0];
	    var O = parseInt(S * (J[1] - K[1])) + K[1];
	    var U = parseInt(S * (J[2] - K[2])) + K[2];
	    I.style.backgroundColor = "rgb(" + H + ", " + O + ", " + U + ")";
	    B.appendChild(I);
	}
    };
    return A;
})();
mstr.itemrenderers.GradientListView = (function() {
    var A = mstr.$H.clone(mstr.itemrenderers.ListView);
    A.renderListItem = function(I, F, M, D) {
	var L = D.item;
	var K = I.props[mstr.$W.DOCUMENT];
	var G = (I.props.cssPrefix || "") + (I.props.itemCSSPrefix || "");
	var J = K.createElement("span");
	J.className = G;
	J.setAttribute("title", mstr.itemrenderers.GradientListView
		._buildTooltip(L.dssid, L.flashOnly));
	mstr.itemrenderers.GradientItem.renderGradientItem(J, L.dssid, 50, 50);
	var H = document.createElement("span");
	var C = I.props;
	H.className = C.cssPrefix + C.cssClass + "ItemContainer";
	var E = document.createElement("span");
	E.innerHTML = L.flashOnly ? microstrategy.descriptors
		.getDescriptor("4875") : "&nbsp;";
	E.style.paddingLeft = "5px";
	H.appendChild(E);
	H.appendChild(J);
	J = H;
	this._insertElementForIndex(I, M, D.at, J);
	return J;
    };
    A._buildTooltip = function B(E, D) {
	var F = E.split(",");
	var C = microstrategy.descriptors.getDescriptor("4883") + " ";
	if (F[2] == "9") {
	    C += microstrategy.descriptors.getDescriptor("4889");
	} else {
	    if (F[2] == "10") {
		C += microstrategy.descriptors.getDescriptor("4862");
	    } else {
		C += microstrategy.descriptors.getDescriptor("4888");
	    }
	}
	C += "; " + microstrategy.descriptors.getDescriptor("4884") + " "
		+ F[3] + "; " + microstrategy.descriptors.getDescriptor("4885")
		+ " " + F[5] + "; "
		+ microstrategy.descriptors.getDescriptor("4886") + " " + F[4];
	if (D) {
	    C += "; " + microstrategy.descriptors.getDescriptor("4875");
	}
	return C;
    };
    return A;
})();
mstr.itemrenderers.ToolbarRadioButtons = (function() {
    var B = mstr.$H.clone(mstr.itemrenderers.ListView);
    B.renderListItem = function(G, E, L, D) {
	var J = D.item;
	var I = G.props[mstr.$W.DOCUMENT];
	var F = (G.props.cssPrefix || "") + (G.props.itemCSSPrefix || "");
	var H = I.createElement("a");
	H.className = F;
	H.setAttribute("title", J.n);
	var K = I.createElement("span");
	if (J.id) {
	    K.setAttribute("id", J.id);
	}
	K.setAttribute("align", "absmiddle");
	K.onmouseover = function() {
	    mstr.itemrenderers.ToolbarRadioButtons.markListItemAsSelected(G, E,
		    L, D);
	};
	K.onmouseout = function() {
	    mstr.itemrenderers.ToolbarRadioButtons.markListItemAsUnselected(G,
		    E, L, D);
	};
	H.appendChild(K);
	this._insertElementForIndex(G, L, D.at, H);
	return H;
    };
    B.markListItemAsSelected = function C(D, E, H, F) {
	var G = this._findElementForIndex(D, H, F.at);
	if (G) {
	    G.className += " on";
	}
    };
    B.markListItemAsUnselected = function A(D, E, H, F) {
	var G = this._findElementForIndex(D, H, F.at);
	if (G) {
	    G.className = G.className.replace(" on", "");
	}
    };
    return B;
})();
mstr.itemrenderers.ToolbarPickerButton = (function() {
    var A = mstr.$H.clone(mstr.itemrenderers.ListPulldownView);
    A.renderListItem = function(C, D, F, E) {
	if (C.get("showLastSelection")) {
	    var B = D.get("lastSelection");
	    if (!isNaN(B)) {
		E.item = D.getItems()[D.get("lastSelection")];
	    } else {
		return;
	    }
	}
	mstr.itemrenderers.ListPulldownView.renderListItem.apply(this, [ C, D,
		F, E ]);
	this._updatePickerButton(C, F);
    };
    A.renderMultipleItems = function(B, C, E, D) {
	this.renderListItem(B, C, E, D);
    };
    A._updatePickerButton = function(B, H) {
	var F = B.getModel().get("tooltip");
	var E = this._getContentContainer(H);
	var G = [ E ];
	if (B.get("useDynamicBtnImg")) {
	    if (E.firstChild.nodeType == 3) {
		E.innerHTML = "";
	    } else {
		E.replaceChild(E.firstChild.cloneNode(false), E.firstChild);
		G.push(E.firstChild);
	    }
	} else {
	    E.removeChild(E.firstChild);
	}
	if (F) {
	    for ( var D = 0, C = G.length; D < C; D++) {
		G[D].setAttribute("title", F);
	    }
	}
    };
    A.renderEmpty = function(B, C, E, D) {
    };
    A._getContentContainer = function(B) {
	return B.childNodes[1].rows[0].cells[1].firstChild.childNodes[1];
    };
    return A;
})();
mstr.itemrenderers.VerticalTileList = (function() {
    var A = mstr.$H.clone(mstr.itemrenderers.ListView);
    A.renderListItem = function(F, D, K, B) {
	var H = B.item;
	var G = F.props[mstr.$W.DOCUMENT];
	var E = (F.props.cssPrefix || "") + (F.props.itemCSSPrefix || "");
	var C = G.createElement("div");
	C.className = E;
	C.setAttribute("id", "vt_" + H.dssid);
	if (F.props.showDescriptions && H.desc) {
	    C.setAttribute("title", H.desc);
	}
	if (F.props.showIcons) {
	    var J = G.createElement("div");
	    J.className = E + "Img";
	    C.appendChild(J);
	}
	var I = G.createElement("div");
	I.className = E + "Txt";
	I.innerHTML = H.n;
	C.appendChild(I);
	this._insertElementForIndex(F, K, B.at, C);
	return C;
    };
    return A;
})();
mstr.itemrenderers.FontList = (function() {
    var E = {};
    E.renderListItem = function A(F, G, J, H) {
	var I = mstr.itemrenderers.FastListView.renderListItem.apply(this, [ F,
		G, J, H ]);
	I.style.fontFamily = H.item[G.get("valueForm")];
	return I;
    };
    E.hover = function(F) {
	this.className += "Hover";
    };
    E.unhover = function(F) {
	this.className = this.className.replace(/Hover/, "");
    };
    E.markListItemAsSelected = function C(F, G, I, H) {
	mstr.itemrenderers.FastListView.markListItemAsSelected.apply(this, [ F,
		G, I, H ]);
    };
    E.markListItemAsUnselected = function B(F, G, I, H) {
	mstr.itemrenderers.FastListView.markListItemAsUnselected.apply(this, [
		F, G, I, H ]);
    };
    E.on_set_leadIndex = function D(F, G, H) {
	mstr.itemrenderers.FastListView.on_set_leadIndex.apply(this,
		[ F, G, H ]);
    };
    return E;
})();
mstr.itemrenderers.TabTreeList = (function() {
    var G = {};
    var E = function(K) {
	var J = mstr.utils.ListViewHelper.getItemRenderer(this);
	J
		&& J.on_target_object_change(this, this.getModel(), this
			.get("element"), {
		    item : K.src,
		    at : this.getModel().indexOfItem(K.src)
		});
    };
    G.on_target_object_change = function F(P, M, S, K) {
	var Q = K.item;
	var L = mstr.itemrenderers.TabTreeList.findElementFromIndex(P, M, S, K);
	var O = Q.get(Q.get("visibleField"));
	L.style.display = (O) ? "block" : "none";
	var J = Q.get("categoryText");
	var N = P.props.categoryElems;
	if (N && N[J]) {
	    var R = N[J]["visibleElems"];
	    R += Q.get(Q.get("visibleField")) ? 1 : -1;
	    N[J]["visibleElems"] = R;
	    N[J]["elem"].style.display = (R == 0) ? "none" : "block";
	}
    };
    G.renderListItem = function I(Q, N, W, L) {
	var a = Q.props.document;
	var P = (Q.props.cssPrefix || "") + (Q.props.cssClass || "");
	var V = Q.get("scrollArea").childNodes[0];
	var R = N.getItems();
	var X = L.item;
	var T = X.get("categoryText");
	var O = null;
	var U = N.get("valueForm");
	var Z = Q.props.categoryElems;
	if (!Z) {
	    Z = [];
	    Q.props.categoryElems = Z;
	}
	if (L.at == 0 || T != R[L.at - 1].get("categoryText")) {
	    O = a.createElement("div");
	    O.className = P + "TabTreeItemCategory";
	    O.appendChild(a.createTextNode(T));
	    V.appendChild(O);
	    var S = X[U];
	    if (S == null && X.get) {
		S = X.get(U);
	    }
	    O.mstrListItemInfo = Q.getId() + "/" + (S || "") + "/"
		    + L.browseCommand;
	    Z[T] = {
		elem : O,
		visibleElems : 0
	    };
	    O.style.display = "none";
	}
	var J = X.get("titleField"), b = X.get("titleText"), Y = a
		.createElement("div");
	if (J != null) {
	    b = X.get(J);
	    Q._notifyTitleChanged = function() {
		b = X.get(J);
		Y.innerHTML = "";
		Y.appendChild(a.createTextNode(b));
	    };
	    X.attachEventListener(Q, "set_" + J, "_notifyTitleChanged");
	}
	Y.className = P + "TabTreeItem";
	V.appendChild(Y);
	Y.onmouseover = this.hover;
	Y.onmouseout = this.unhover;
	Y.appendChild(a.createTextNode(b));
	var K = X.get("visibleField");
	var M = false;
	if (K != null) {
	    M = X.get(K);
	    if (!Q._notifyItemRenderer) {
		Q._notifyItemRenderer = E;
	    }
	    X.attachEventListener(Q, "set_" + K, "_notifyItemRenderer");
	} else {
	    M = X.get("visible");
	}
	Y.style.display = M ? "block" : "none";
	if (M) {
	    Z[T]["elem"].style.display = "block";
	    Z[T]["visibleElems"]++;
	}
	return Y;
    };
    G.markListItemAsSelected = function H(J, K, O, L) {
	var M = mstr.itemrenderers.TabTreeList.findElementFromIndex(J, K, O, L);
	if (!M) {
	    return;
	}
	var N = M.className;
	if (/Hover/.test(N)) {
	    N = N.replace(/Hover/, "SelectedHover");
	} else {
	    N += "Selected";
	}
	M.className = N;
    };
    G.markListItemAsUnselected = function B(J, K, N, L) {
	var M = mstr.itemrenderers.TabTreeList.findElementFromIndex(J, K, N, L);
	if (M) {
	    M.className = M.className.replace(/Selected/, "");
	}
    };
    G.hover = function C() {
	this.className += "Hover";
    };
    G.unhover = function D(J) {
	this.className = this.className.replace(/Hover/, "");
    };
    G.findElementFromIndex = function A(Q, N, S, K) {
	var O = parseInt(K.at);
	if (isNaN(O) || O < 0) {
	    return null;
	}
	var P = N.getItems();
	var R = 0;
	var M = "";
	for ( var L = 0; L <= O; L++) {
	    var J = P[L].get("categoryText");
	    if (J != M) {
		R++;
	    }
	    M = J;
	}
	return Q.get("scrollArea").childNodes[0].childNodes[O + R];
    };
    return G;
})();
mstr.behaviors.FontPreview = (function() {
    var A = {};
    A.on_set_enabled = function(C, B) {
	if (B) {
	    C.className = C.className.replace("Disabled", "");
	} else {
	    if (C.className.indexOf("Disabled") == -1) {
		C.className += "Disabled";
	    }
	}
    };
    A.on_model_set_prop = function(K, B, H, E) {
	var I = E && E.get(H.get(B));
	if (I instanceof mstr.models.ColorPicker) {
	    I = I.get("actualColor");
	} else {
	    if (I instanceof mstr.models.ListModel) {
		var J = I.getSelectedItem();
		var F = I.get("valueForm");
		I = (J && J[F]) || (B == "fontFamily" && "Arial")
			|| (B == "fontSize" && "10") || I.getItems()[0][F];
	    }
	}
	if (isNaN(I) && !I) {
	    return;
	}
	var D = K.childNodes[1];
	if (B == "boldItalic") {
	    D.style.fontWeight = (I == 1 || I == 3) ? "bold" : "normal";
	    D.style.fontStyle = (I == 2 || I == 3) ? "italic" : "normal";
	} else {
	    switch (B) {
	    case "fontSize":
		I += "pt";
		break;
	    case "textUnderline":
	    case "textStrikeout":
		B = "textDecoration";
		var C = E.get(H.get("textUnderline"));
		var G = E.get(H.get("textStrikeout"));
		if (!C && !G) {
		    I = "none";
		} else {
		    I = (C) ? "underline" : "";
		    I += (G) ? " line-through" : "";
		}
		break;
	    case "fontColor":
		B = "color";
		D.style.backgroundColor = mstr.utils.Color.getContrastingColor(
			I, [ "#ffffff", "#000000" ]);
		break;
	    }
	    D.style[B] = I;
	}
    };
    return A;
})();
mstr.behaviors.ImagePreview = (function() {
    var B = {};
    B.on_set_src = function(Q, J, E) {
	if (Q.intervalHandle) {
	    window.clearInterval(Q.intervalHandle);
	}
	mstr.$D.clearChilds(Q);
	var G = E.get(J.get("valueField"));
	if (!G || G.length == 0) {
	    return;
	}
	if (G !== "") {
	    var S = document.getElementById("imgUrl_txt");
	    if (S) {
		var I = microstrategy.getViewerBone().doc.prevSelectedId, D = document
			.getElementById(I), K = Number(D.getAttribute("ut")), M = mstrmojo.string;
		switch (K) {
		case mstr.Enum.IMAGE_URL_TYPE.DUMMY_URL:
		    S.value = "";
		    return;
		case mstr.Enum.IMAGE_URL_TYPE.TASK_URL:
		    S.value = decodeURIComponent(D.getAttribute("n"));
		    break;
		case mstr.Enum.IMAGE_URL_TYPE.BLOB_URL:
		case mstr.Enum.IMAGE_URL_TYPE.IMAGE_NAME:
		    G = Q.blobURL;
		    S.value = Q.imgName;
		    break;
		}
	    }
	}
	if (mstr.utils.ISFF) {
	    var L = G.split("?");
	    if (L.length > 1) {
		L[0] = L[0].replace(/\\/g, "/");
		G = L.join("?");
	    } else {
		G = L[0].replace(/\\/g, "/");
	    }
	}
	var T = J.get("document").createElement("img");
	T.style.visibility = "hidden";
	T.src = G;
	var C = J.get(mstr.Props.Widget.ELEMENT);
	var N = mstr.utils.BoxModel.getElementInnerWidth(C), R = mstr.utils.BoxModel
		.getElementInnerHeight(C);
	if (!N || !R) {
	    N = parseInt(mstr.utils.CSS.getStyleValue(C, "width"));
	    R = parseInt(mstr.utils.CSS.getStyleValue(C, "height"));
	}
	N = Math.max(N - 6, 0);
	R = Math.max(R - 6, 0);
	var H = N / R;
	var F = new Date();
	var O = false;
	Q.intervalHandle = window.setInterval(function() {
	    var X = (T.readyState == "complete" || T.complete);
	    var W = (new Date() - F >= 5000);
	    var V = mstr.utils.BoxModel.getElementOuterWidth(T);
	    var Y = mstr.utils.BoxModel.getElementOuterHeight(T);
	    var U = mstr.utils.ISIE4 ? (T.readyState == "loading") : (V && Y);
	    if (X || W || O || U) {
		window.clearInterval(Q.intervalHandle);
		(U || X) && P();
	    }
	    T.style.visibility = "visible";
	}, 100);
	var P = function() {
	    var U = mstr.utils.BoxModel.getElementOuterWidth(T);
	    var V = mstr.utils.BoxModel.getElementOuterHeight(T);
	    var W = U / V;
	    if (V > R || U > N) {
		if (W > H) {
		    U = N;
		    V = (N / W);
		} else {
		    V = R;
		    U = V * W;
		}
		T.style.width = U + "px";
		T.style.height = V + "px";
	    }
	    T.style.marginTop = Math.abs(((R - V) / 2)) + 3 + "px";
	};
	T.onload = P;
	T.onerror = function() {
	    O = true;
	    P();
	};
	Q.appendChild(T);
    };
    B.on_set_visible = function A(E, G, C, D) {
	mstr.behaviors.Generic.set_css_display(E, G, C, D);
	if (!mstr.utils.ISIE4) {
	    return;
	}
	var F = E.getElementsByTagName("img");
	if (F[0]) {
	    F[0].style.visibility = (!!D) ? "visible" : "hidden";
	}
    };
    return B;
})();
mstr.behaviors.Tab = (function() {
    var A = {};
    A.on_set_visible = function(H, B, C) {
	var F = !!B.props.visible;
	var D = H.style;
	D.display = F ? "block" : "none";
	D.visibility = F ? "inherit" : "hidden";
	var E = (B.get("helpTopic") == null ? "" : B.get("helpTopic"));
	var G = B.props[mstr.$W.PARENT];
	while (G && !(G instanceof mstr.views.FloatingEditor)) {
	    G = G.props[mstr.$W.PARENT];
	}
	if (G && (G instanceof mstr.views.FloatingEditor)) {
	    G.set("helpTopic", E);
	}
    };
    return A;
})();
mstr.itemrenderers.TabbedToolbarView = (function() {
    var C = mstr.$H.clone(mstr.itemrenderers.ListView);
    C.markListItemAsUnselected = function B(D, E, H, F) {
	var G = this._findElementForIndex(D, H, F.at);
	if (!G) {
	    return;
	}
	G.className = G.className.replace(/SelectedHover/, "");
	G.className = G.className.replace(/Selected/, "");
	G.className = G.className.replace(/pinned/, "");
    };
    C.markListItemAsSelected = function A(D, E, I, F) {
	var G = this._findElementForIndex(D, I, F.at);
	if (!G) {
	    return;
	}
	var H = G.className;
	if (/Selected/.test(H)) {
	    H = H.replace(/Selected/, "");
	}
	if (/Hover/.test(H)) {
	    H = H.replace(/Hover/, "SelectedHover");
	} else {
	    H += "Selected";
	}
	if (E.get("items")[F.at]["pinned"]) {
	    H = "pinned " + H;
	} else {
	    if (/pinned/.test(H)) {
		H = H.replace(/pinned/, "");
	    }
	}
	G.className = H;
    };
    C.renderListItem = function(N, J, Q, D) {
	var F = mstr.itemrenderers.FastListView.renderListItem(N, J, Q, D);
	F.title = "";
	var P = document.createElement("table");
	var R = P.insertRow(0);
	var H = R.insertCell(0);
	H.className = "left";
	var G = R.insertCell(1);
	var M = R.insertCell(2);
	var E = F.childNodes[0];
	G.appendChild(E);
	G.className = E.className;
	E.className = "";
	G.onmousedown = function(S) {
	    mstr.behaviors.ListView.onmousedown(S || window.event, self, N
		    .get("id"));
	};
	var I = false;
	var O, K;
	if ((O = J.get("items")[D.at]) && (feats = O.enabledFeatures)) {
	    I = !mstr.behaviors.featureResolver.resolveFeatSet(feats);
	}
	if (D.item.menuModel) {
	    M.className = "right menu";
	    var L = function(S) {
		S = S || window.event;
		mstr.behaviors.ToolbarListView.displayMenu(S, N, J, D, P);
	    };
	    M.onmouseover = L;
	    M.onmousedown = L;
	    if (I) {
		G.onmousedown = L;
	    }
	    M = null;
	} else {
	    M.className = "right";
	    if (I) {
		F.onmouseover = null;
		F.onmouseout = null;
	    }
	}
	G = null;
	F.appendChild(P);
	P.cellSpacing = 0;
	this._insertElementForIndex(N, Q, D.at, F);
	F.style.display = (D.item.visible) ? "block" : "none";
	return F;
    };
    C.hover = function(D) {
	mstr.itemrenderers.FastListView.hover.apply(this, arguments);
    };
    C.unhover = function(D) {
	mstr.itemrenderers.FastListView.unhover.apply(this, arguments);
    };
    return C;
})();
mstr.behaviors.ToolbarListView = (function() {
    var C = {};
    C.displayMenu = function B(Q, N, K, G, R) {
	if (!mstr.controllers.Factory
		.getPath(N.getModel().get("targetPath"), N)
		|| !mstr.behaviors.ToolbarListView.shouldProcessEvt(Q, K)) {
	    return;
	}
	if (G && G.item) {
	    var D = G.item.menuStyle ? G.item.menuStyle : K.props.menuStyle;
	    var L = G.item.menuModel;
	    var P = G.item.layouts;
	}
	if (!D) {
	    return;
	}
	var H = mstr.$obj(mstr.behaviors.FloatingMenu.getMenuId({
	    modelName : L,
	    layouts : P
	}));
	if (H && H.get("visible")) {
	    if (Q.type === "mousedown") {
		H.execCloseMenu();
	    }
	    return;
	}
	var J = N.get("menus") || {};
	for ( var F in J) {
	    if (F !== D) {
		var I = mstr.$obj(F);
		if (I && I.get && I.get("visible")) {
		    I.execCloseMenu();
		}
	    }
	}
	J[mstr.behaviors.FloatingMenu.getMenuId({
	    modelName : L,
	    layouts : P
	})] = true;
	N.set("menus", J);
	var E = R.parentNode;
	N.set("openerEl", E);
	mstr.behaviors.FloatingMenu.toggleOpenerHoverEffect(N, true);
	var O = mstr.utils.BoxModel.getElementSumOffsetLeft(R);
	var M = mstr.utils.BoxModel.getElementSumOffsetTop(R)
		+ mstr.utils.BoxModel.getElementOuterHeight(R);
	O += getDocumentScrollLeft();
	M += getDocumentScrollTop();
	mstr.behaviors.FloatingMenu
		.displayMenu(N, O, M, D, L, P, document.body);
    };
    C.shouldProcessEvt = function A(D, E) {
	return (!mstr.behaviors.featureResolver.featAvailable(E
		.get("featurePopMenus")) || D.type !== "mouseover");
    };
    return C;
})();
mstr.behaviors.ToolbarButton = (function() {
    var A = {};
    A.setButtonClassName = function(C, F) {
	var E = C.get("cssPrefix") + C.get("cssClass");
	var B = C.get("extraCssClass");
	if (B) {
	    E += " " + B;
	}
	var D = C.get("enabled");
	if (!D) {
	    E += " disabled";
	}
	if (C.getModel().get("state") || (F && D)) {
	    E += " on";
	}
	C.get("element").className = E;
    };
    return A;
})();
mstr.behaviors.FloatingMenu = (function() {
    var C = {};
    C.displayMenu = function(J, K, I, E, H, L, F) {
	if (J.get("requestingMenu")) {
	    return;
	}
	microstrategy.setJLSCXMenuOpen(true);
	var D = {
	    cssText : "top:" + I + "px;left:" + K + "px;z-index:"
		    + mstr.views.FloatingMenuBook.prototype.getZIndex() + ";",
	    showing : J.get("mOverOpen") ? false : true,
	    viewer : J.getModel().get("targetPath"),
	    modelName : H,
	    ribbonId : J.getModel().get("id")
	};
	if (L) {
	    D.layouts = L;
	}
	var G = microstrategy.getBlockEditorFromCache(this.getMenuId(D), null,
		D, J, F);
	if (G) {
	    return;
	}
	mstr.behaviors.FloatingMenu.showProgressIndicator(J, K, I, F);
	J.set("requestingMenu", true);
	microstrategy.openBlockLoaderEditor(this.getMenuId(D), E, null, D, J, {
	    scope : this,
	    method : this.menuDisplayed
	}, F);
    };
    C.getMenuId = function(D) {
	var E = D.layouts ? D.layouts.replace(/[.,\/]/g, "") : "";
	return D.modelName + "_" + E;
    };
    C.menuDisplayed = function(D) {
	var F = D.src.get("requestContext");
	var E = F && F.memo && F.memo.opener;
	if (E) {
	    this.killProgressIndicator(E);
	}
	var G = D && D.memo && D.memo.name;
	if (G == "readyState") {
	    if (D.memo.value == mstr.Enum.Widget.READYSTATE.ERROR
		    || D.memo.value == mstr.Enum.Widget.READYSTATE.CANCELLED) {
		mstr.behaviors.FloatingMenu.toggleOpenerHoverEffect(E, false);
	    }
	}
    };
    C.showProgressIndicator = function(F, E, H, D) {
	var G = {
	    pn : D,
	    handle : window
		    .setTimeout(
			    function() {
				var K = F.get("element").ownerDocument;
				var J = K.createElement("table");
				J.className = "select-free mstrFloatingMenu mstrFloatingMenuProgress";
				J.style.top = H + "px";
				J.style.left = E + "px";
				var L = J.insertRow(-1).insertCell(-1);
				L
					.appendChild(K
						.createTextNode(microstrategy.descriptors
							.getDescriptor("2901")));
				var I = G.pn || K.body;
				I.appendChild(J);
				G.indicator = J;
			    }, 3000)
	};
	F.set("progressIndicator", G);
	D = null;
    };
    C.killProgressIndicator = function(D) {
	var E = D && D.get("progressIndicator");
	if (!E) {
	    return;
	}
	var F = E.indicator;
	if (!F) {
	    window.clearTimeout(E.handle);
	} else {
	    if (F.parentNode) {
		F.parentNode.removeChild(F);
	    }
	}
	D.set("progressIndicator", null);
	D.set("requestingMenu", false);
    };
    C.toggleOpenerHoverEffect = function A(D, G) {
	var F = D && D.get && D.get("openerEl");
	if (!F) {
	    return;
	}
	var E = mstr.utils.ListViewHelper.getItemRenderer(D);
	if (G) {
	    if (E && E.hover) {
		E.hover.call(F);
	    }
	    F.ignoreMouseEvents = true;
	} else {
	    F.ignoreMouseEvents = false;
	    if (E && E.unhover) {
		E.unhover.call(F);
	    }
	}
    };
    C.adjustMenuPosition = function B(K) {
	if (K.get("useFixedPosition")) {
	    return;
	}
	var G = K.get("element");
	var E = G.parentNode;
	var N = K.get("document");
	var L = parseInt(G.style.left, 10);
	var J = parseInt(G.style.top, 10);
	var O = mstr.utils.BoxModel.getElementOuterWidth(G);
	var I = mstr.utils.BoxModel.getElementOuterHeight(G);
	var H = 0;
	var F = 0;
	var P = 0;
	var M = 0;
	if (E == N.body) {
	    P = getDocumentScrollLeft();
	    M = getDocumentScrollTop();
	    H = mstr.utils.BoxModel.getBrowserWindowWidth(N) + P;
	    F = mstr.utils.BoxModel.getBrowserWindowHeight(N) + M;
	} else {
	    P = E.scrollLeft;
	    M = E.scrollTop;
	    H = mstr.utils.BoxModel.getElementInnerWidth(E) + P;
	    F = mstr.utils.BoxModel.getElementInnerHeight(E) + M;
	}
	if (L + O > H) {
	    var D = L;
	    if (K.get("opener").get) {
		D -= O;
		D -= mstr.utils.BoxModel.getElementOuterWidth(K.get("opener")
			.get("element"));
	    } else {
		D = H - O;
	    }
	    G.style.left = Math.max(D, P) + "px";
	}
	if (J + I > F) {
	    G.style.top = Math.max(F - I, M) + "px";
	}
    };
    C.onmouseout = function(E) {
	var D = mstr.$obj(E);
	if (D.get && D.get("hasToClose")) {
	    if (D.timeout) {
		clearTimeout(D.timeout);
	    }
	    D.timeout = setTimeout("mstr.$obj('" + D.get("id")
		    + "').set('visible',false);", 2000);
	}
    };
    C.onmouseover = function(E) {
	var D = mstr.$obj(E);
	if (D.timeout) {
	    clearTimeout(D.timeout);
	}
    };
    return C;
})();
mstr.behaviors.MenuOption = (function() {
    var A = {};
    A.onmouseover = function D(F) {
	var G = F.get("parent");
	G = G && G.get("opener");
	if (G && G.get) {
	    G = G.get("menuCloserTO");
	    clearTimeout(G);
	}
	if (F.get("cmds") == "OpenSubMenu") {
	    var H = F.get("menuCloserTO");
	    if (H) {
		clearTimeout(H);
	    }
	    H = window.setTimeout(function() {
		F.set("mOverOpen", true);
		mstr.behaviors.MenuOption.fireCommands(F, null);
	    }, 250);
	    F.set("menuOpenerTO", H);
	}
    };
    A.onmouseout = function E(F) {
	if (F.get("cmds") != "OpenSubMenu") {
	    return;
	}
	var G = F.get("menuOpenerTO");
	if (G) {
	    clearTimeout(G);
	}
	G = window.setTimeout(function() {
	    F.execCloseSubMenu();
	}, 350);
	F.set("menuCloserTO", G);
    };
    A.fireCommands = function C(G, F) {
	
	//console.log("A.fireCommands");
	if (!G.get("enabled")) {
	    return;
	}
	G.fireCommands();
	if (!G.getModel().get("menuModel")) {
	    G.get("parent").execCloseMenu();
	}
    };
    A.updateCSS = function B(G, H) {
	var J = G.get("cssPrefix");
	var F = G.get("cssClass");
	F += G.get("extraCssClass") ? " " + G.get("extraCssClass") : "";
	var I = "";
	if (!G.get("enabled")) {
	    I = " disabled";
	}
	if (G.props.pressed || (G.props.model && G.props.model.props.state)) {
	    I += " pressed";
	}
	if (H && G.get("enabled")) {
	    I += " hover";
	}
	G.get("element").className = J + F + I;
    };
    return A;
})();
mstr.behaviors.FieldSet = (function() {
    var A = {};
    A.set_fieldSet_enabled = function B(H, E) {
	if (!E) {
	    var G = H.childNodes[1];
	    var C = G && G.lastChild;
	    if (C && C.id && C.id.substring(0, 12) == "fieldSetMask") {
		C.style.display = "block";
	    } else {
		H.style.position = "relative";
		G.style.position = "relative";
		var C = document.createElement("div");
		C.setAttribute("id", "fieldSetMask_" + H.getAttribute("id"));
		var D = C.style;
		D.top = "0px";
		D.left = "0px";
		D.width = "100%";
		D.height = "100%";
		D.position = "absolute";
		D.background = "transparent url(images/1ptrans.gif) repeat";
		G.appendChild(C);
	    }
	    if (mstr.utils.ISFF || mstr.utils.ISWK || mstr.utils.ISIE10
		    || mstr.utils.ISW3CIE) {
		C.style.opacity = "0.8";
		C.style.backgroundColor = "#fafafa";
	    } else {
		G.style.filter = "progid:DXImageTransform.Microsoft.Alpha(opacity=30)";
		if (mstr.utils.ISIE6) {
		    window.setTimeout(function F() {
			C.style.height = G.offsetHeight;
		    }, 0);
		}
	    }
	} else {
	    var G = H.childNodes[1];
	    var C = G && G.lastChild;
	    if (C && C.id && C.id.substring(0, 12) == "fieldSetMask") {
		C.style.display = "none";
		if (mstr.utils.ISFF || mstr.utils.ISWK || mstr.utils.ISIE10
			|| mstr.utils.ISW3CIE) {
		    G.style.opacity = "1";
		} else {
		    G.style.filter = "";
		}
	    }
	}
    };
    return A;
})();
mstr.http.SaveAnnotationsInputs = (function() {
    function A(E, C, B, D) {
	this.params = {
	    taskId : "setAnnotations",
	    objectID : E,
	    objectType : C,
	    annotation : B,
	    isAppend : (typeof (D) != "undefined") ? D : 0,
	    locale : mstr.Settings.Locale.ID
	};
    }
    return A;
})();
mstr.http.GetAnnotationsInput = (function() {
    function B(F, C, D, E) {
	this.params = {
	    taskId : "getAnnotations",
	    objectID : F,
	    objectType : C,
	    locale : mstr.Settings.Locale.ID,
	    counter : A++
	};
	if (D) {
	    this.params.styleName = D;
	} else {
	    this.params.styleName = "AnnotationsStyle";
	}
	if (typeof (E) != "undefined") {
	    this.params.juil = E;
	}
    }
    var A = 0;
    return B;
})();
mstr.http.PingServer = (function() {
    function A() {
	this.params = {
	    taskId : "keepSessionAlive"
	};
    }
    return A;
})();
mstr.http.BlockLoaderInput = (function() {
    function A(B) {
	this.params = {
	    taskId : "loadBlocks",
	    styleName : B,
	    juil : true
	};
    }
    return A;
})();
mstr.http.LoadToolbarInput = (function() {
    function A() {
	this.params = {
	    taskId : "loadToolbar",
	    juil : true
	};
    }
    return A;
})();
mstr.http.FolderBlockLoaderInput = (function() {
    function A(B, C) {
	this.params = {
	    taskId : "folderBrowse",
	    styleName : B,
	    juil : true
	};
	mstr.utils.Hash.overwrite(this.params, C);
    }
    return A;
})();
mstr.http.RwBlockLoaderInput = (function() {
    function A(C, E, B) {
	this.params = {
	    taskId : "loadDocBlocks",
	    styleName : C,
	    juil : true
	};
	if (pageState) {
	    var D = (pageState + "&").match(/rwb=(.*?)\&/);
	    if (D != -1) {
		this.params[E] = D[1];
	    }
	}
    }
    return A;
})();
mstr.http.ReportBlockLoaderInput = (function() {
    function A(C, E, B) {
	this.params = {
	    taskId : "loadReportBlocks",
	    styleName : C,
	    juil : true
	};
	if (pageState) {
	    var D = pageState.match(/rb=[^\&]*/);
	    D = D[0].replace("rb=", "");
	    if (D != -1) {
		this.params[E] = D;
	    }
	}
    }
    return A;
})();
mstr.http.GetGridFormats = (function() {
    function A(B, C) {
	this.params = {
	    taskId : "getDocGridFormat",
	    juil : true,
	    docGridKey : B,
	    msgID : C
	};
    }
    return A;
})();
mstr.http.GetRWGraphProperties = (function() {
    function A(B, C) {
	this.params = {
	    taskId : "getRWGraphProperties",
	    juil : true,
	    docGridKey : B,
	    msgID : C
	};
    }
    return A;
})();
mstr.http.GetReportGraphProperties = (function() {
    function A(B, C) {
	this.params = {
	    taskId : "getReportGraphProperties",
	    juil : true,
	    stateID : C,
	    msgID : B
	};
    }
    return A;
})();
mstr.http.OndemandContextMenuInputs = (function() {
    A.prototype.setDrillParams = function B(C) {
	var D = microstrategy.findBone(microstrategy.activeCXMenu);
	var F = false;
	if (microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION) {
	    F = true;
	}
	if (F) {
	    this.params = {
		taskId : "ReportOndemandDrill",
		juil : true,
		styleName : "OndemandContextMenusStyle",
		ondemandDrillMinimalXML : true
	    };
	    if (pageState) {
		var E = pageState.match(/rb=(.*?)(\&|$)/);
		if (E != -1) {
		    this.params.rb = E[1];
		}
	    }
	} else {
	    this.params = {
		taskId : "RWOnDemandDrill",
		juil : true,
		styleName : "OndemandContextMenusStyle",
		viewMode : D && D.effectiveView || 1,
		usePartDisplay : 1,
		docGridKey : C,
		isQuickSwitchEnabled : D && D.quickSwitchCurrent || false
	    };
	    if (pageState) {
		var E = pageState.match(/rwb=(.*?)(\&|$)/);
		if (E != -1) {
		    this.params.rwb = E[1];
		}
	    }
	}
    };
    function A(C) {
	this.setDrillParams(C);
    }
    return A;
})();
mstr.views.BaseView.prototype.taskModelCallback = function BV_taskModelCallback(
	B) {
    switch (B.name) {
    case "set_readyState":
	this.set("readyState", B.memo.value);
	if (B.memo.value == mstr.Enum.Widget.READYSTATE.IDLE) {
	    var A = this.taskModel.get("models")
		    && this.taskModel.get("models")[0];
	    if (A) {
		A.set("opener", this);
	    }
	    var C = this.taskModel.get("views")[0];
	    if (C) {
		C.set("opener", this);
		C.render();
	    }
	}
	break;
    }
};
mstr.views.BaseView.prototype.execOpenModalPopup = function BV_execOpenModalPopup(
	B, A, D) {
    self.supressWaitPage = true;
    A = A || {};
    D = D || {};
    var C, G;
    var I = mstr.$obj(B);
    if (I) {
	var F = I.getModel();
	if (F) {
	    for (C in D) {
		mstr.controllers.Factory.setPath(C, F, D[C], false);
	    }
	    F.set("opener", this);
	}
	for (C in A) {
	    mstr.controllers.Factory.setPath(C, I, A[C], false);
	}
	I.set("opener", this);
	I.set("visible", true);
    } else {
	var H = document.createElement("textarea");
	H.setAttribute("id", B);
	H.className = "mstrJSON";
	this.get(mstr.$W.DOCUMENT).body.appendChild(H);
	var J = new mstr.http.BlockLoaderInput(B);
	for (C in D) {
	    J.params[C] = D[C];
	}
	for (C in A) {
	    J.params[C] = A[C];
	}
	if (!this.taskModel) {
	    this.taskModel = new mstr.models.TaskModel({
		parent : this
	    });
	    mstr.controllers.Factory.add(this.taskModel);
	    var E = this.taskModel && this.taskModel.init
		    && this.taskModel.init();
	    this.taskModel.attachEventListener(this, "set_readyState",
		    "taskModelCallback");
	}
	this.set("readyState", mstr.Enum.Widget.READYSTATE.WAITING);
	this.taskModel.execFetchBlock(J, H);
    }
    window.setTimeout("self.supressWaitPage = false;", 10);
};
mstr.views.FastTileView = (function() {
    mstr.$O.extendsClass(F, mstr.views.FastListView);
    F.DEFAULT_LIST_ITEM_HEIGHT = 75;
    F.DEFAULT_LIST_ITEM_WIDTH = 76;
    F.prototype._computeVisibleItemsRange = function E() {
	var H = mstr.views.FastListView.prototype._computeVisibleItemsRange
		.apply(this);
	if (H) {
	    var I = Math.max(parseInt(this.props.itemsPerRow) || 1, 1);
	    H.min = H.min * I;
	    H.max = (H.max + 1) * I - 1;
	}
	return H;
    };
    F.prototype._updateItemsContainerDimensions = function D() {
	mstr.views.FastListView.prototype._updateItemsContainerDimensions
		.apply(this);
	this._updateItemsContainerWidth();
    };
    F.prototype._updateItemsContainerHeight = function C() {
	var K = this.props.listItemsContainer;
	if (!K) {
	    return;
	}
	var L = mstr.utils.ListViewHelper.getItemRenderer(this);
	var J = F.DEFAULT_LIST_ITEM_HEIGHT;
	if (J) {
	    var I = this.getModel();
	    var H = mstr.$A.len(I && I.getItems && I.getItems()), N = Math.max(
		    parseInt(this.props.itemsPerRow) || 1, 1), M = parseInt(H
		    / N);
	    if (H % N) {
		M++;
	    }
	    J = J * M;
	}
	if (J) {
	    K.style.height = J + "px";
	} else {
	    K.style.height = mstr.utils.ISIE4 ? "1px" : "auto";
	}
	if (mstr.utils.ISIE4) {
	    K.style.overflow = J ? "visible" : "hidden";
	}
    };
    F.prototype._updateItemsContainerWidth = function G() {
	var J = this.props.listItemsContainer;
	if (!J) {
	    return;
	}
	var I = this.getModel();
	var H = mstr.$A.len(I && I.getItems && I.getItems()), L = Math.max(
		parseInt(this.props.itemsPerRow) || 1, 1);
	J.style.width = (F.DEFAULT_LIST_ITEM_WIDTH * Math.min(H, L)) + "px";
	var K = parseInt(H / L);
	if (mstr.utils.ISW3C
		&& (K * F.DEFAULT_LIST_ITEM_WIDTH > parseInt(this.props.height))) {
	    J.style.width = (parseInt(J.style.width) + SCROLLBAR_SIZE) + "px";
	}
    };
    F.prototype._adjustWhiteSpaceAboveItem = function B(H, I) {
	return;
    };
    F.prototype._adjustWhiteSpaceBelowItem = function A(H, I) {
	return;
    };
    function F(H) {
	mstr.views.FastListView.apply(this, [ H ]);
    }
    return F;
})();
mstr.views.TabTreeListView = (function() {
    mstr.$O.extendsClass(A, mstr.views.ListView);
    A.prototype.execClickListItem = function B(J) {
	var C = this.props.model;
	var F = C.indexOfValue(J.valueForm);
	if (F != -1) {
	    var E = C.getItems();
	    var I = E[F];
	    var D = I && I.get && I.get("visibleField");
	    if (D) {
		if (!I.get(D)) {
		    for ( var H = F, G = E.length; H < G; H++) {
			D = E[H].get("visibleField");
			if (!D || E[H].get(D)) {
			    J.valueForm = E[H].getId();
			    break;
			}
		    }
		}
	    }
	}
	return mstr.views.ListView.prototype.execClickListItem.apply(this,
		[ J ]);
    };
    function A(C) {
	mstr.views.ListView.apply(this, [ C ]);
    }
    return A;
})();
mstr.views.AnnotationView = (function() {
    mstr.$O.extendsClass(G, mstr.views.BaseView);
    G.prototype.execResize = function F() {
	this.resize();
	return true;
    };
    G.prototype.resize = function D(I, H) {
	if (H == null) {
	    H = mstr.utils.BoxModel
		    .getElementOuterHeight(this.props[mstr.$W.ELEMENT]);
	} else {
	    this.props[mstr.$W.ELEMENT].style.height = Math.max(H - 26, 0)
		    + "px";
	}
	if (I == null) {
	    I = mstr.utils.BoxModel
		    .getElementOuterWidth(this.props[mstr.$W.ELEMENT]);
	} else {
	    this.props[mstr.$W.ELEMENT].style.width = Math.max(I - 26, 0)
		    + "px";
	}
	this.nonEditableArea = this.nonEditableArea
		|| document.getElementById("nonEditableArea");
	this.editableArea = this.editableArea
		|| document.getElementById("editableArea");
	this.addArea = this.addArea || document.getElementById("addArea");
	this.editButtons = this.editButtons
		|| document.getElementById("editButtons");
	this.scratchPad = this.scratchPad
		|| document.getElementById("scratchPad");
	if (this.editableArea && this.nonEditableArea) {
	    if (this.scratchPad) {
		this.scratchPad.style.width = Math.max(
			parseInt(this.props[mstr.$W.ELEMENT].style.width), 0)
			+ "px";
	    }
	    this.editableArea.style.height = Math.max(
		    parseInt(this.props[mstr.$W.ELEMENT].style.height)
			    - mstr.utils.BoxModel
				    .getElementOuterHeight(this.addArea)
			    - mstr.utils.BoxModel
				    .getElementOuterHeight(this.editButtons)
			    - 10, 0)
		    + "px";
	    this.editableArea.style.width = Math.max(
		    parseInt(this.props[mstr.$W.ELEMENT].style.width), 0)
		    + "px";
	    this.nonEditableArea.style.height = this.editableArea.style.height;
	    this.nonEditableArea.style.width = Math.max(
		    parseInt(this.props[mstr.$W.ELEMENT].style.width), 0)
		    + "px";
	}
    };
    G.prototype.execUpdate = function B(H) {
	if (H == "true") {
	    this.addArea = this.addArea || document.getElementById("addArea");
	    this.getModel().get("addition").set("value",
		    this.addArea.firstChild.value);
	} else {
	    this.editableArea = this.editableArea
		    || document.getElementById("editableArea");
	    this.getModel().set("value", this.editableArea.value);
	}
    };
    G.prototype.execValidateAdd = function E(H, I) {
	if (!H || H.length == 0) {
	    this.execConfirm(microstrategy.descriptors.getDescriptor("6156"));
	    return false;
	} else {
	    if ((H.length + this.getModel().get("addition").get("prefixLen") + this
		    .getModel().get("addition").get("postfixLen")) > mstr.models.AnnotationModel.ADDITION_MAX_LENGTH) {
		return this
			.execConfirm("*Additional notes cannot be longer than ## characters. The note you are adding will be truncated if you proceed.*"
				.replace(
					/##/,
					mstr.models.AnnotationModel.ADDITION_MAX_LENGTH));
	    } else {
		if (this.getModel().get("value")
			&& ((this.getModel().get("value").length + H.length) > mstr.models.AnnotationModel.NOTES_MAX_LENGTH)) {
		    return this
			    .execConfirm("*Notes cannot be longer than ## characters. The note you are editing will be truncated if you proceed.*"
				    .replace(
					    /##/,
					    mstr.models.AnnotationModel.NOTES_MAX_LENGTH));
		}
	    }
	}
	return true;
    };
    G.prototype.execValidateEdit = function C(H) {
	if ((H.length + this.getModel().get("postfixLen")) > mstr.models.AnnotationModel.NOTES_MAX_LENGTH) {
	    return this
		    .execConfirm("*Notes cannot be longer than ## characters. The note you are editing will be truncated if you proceed.*"
			    .replace(
				    /##/,
				    mstr.models.AnnotationModel.NOTES_MAX_LENGTH));
	}
	return true;
    };
    G.prototype.setEditCursor = function A() {
	if (this.editableArea) {
	    this.editableArea.focus();
	    if (mstr.utils.ISW3C) {
		this.editableArea.scrollTop = this.editableArea.scrollHeight;
	    } else {
		var H = this.editableArea.createTextRange();
		H.collapse(false);
		H.select();
	    }
	}
    };
    function G(H) {
	mstr.views.BaseView.apply(this, [ H ]);
    }
    return G;
})();
mstr.views.Slider = (function() {
    mstr.$O.extendsClass(S, mstr.views.BaseView);
    S.prototype._getThumb = function S__getThumb() {
	var el = this.get(mstr.Props.Widget.ELEMENT);
	return el && el.lastChild.firstChild;
    };
    S.prototype._getTooltip = function S__getTooltip() {
	var el = this.get(mstr.Props.Widget.ELEMENT);
	return el && el.lastChild.lastChild;
    };
    S.prototype.init = function S_init() {
	mstr.views.BaseView.prototype.init.apply(this, arguments);
	var m = this.getModel();
	if (m && m.attachEventListener) {
	    m.attachEventListener(this, "set_" + this.get("xField"),
		    "schedule_thumb_move");
	    m.attachEventListener(this, "set_" + this.get("yField"),
		    "schedule_thumb_move");
	}
    };
    S.prototype.render = function S_render() {
	mstr.views.BaseView.prototype.render.apply(this, arguments);
	this.schedule_thumb_move(null, true);
	if (!this.get("dnd")) {
	    return null;
	}
	var el = this.get("element").lastChild;
	var thumb = this._getThumb();
	var props = {
	    view : this
	};
	var f1, f2;
	var o = this.get("orientation");
	if (o == "h" || o == "b") {
	    f1 = function() {
		return Math
			.round(mstr.utils.BoxModel.getElementSumOffsetLeft(el)
				- (mstr.utils.BoxModel
					.getElementOuterWidth(thumb) / 2));
	    };
	    props.xMin = f1;
	    props.xMax = function() {
		return f1() + mstr.utils.BoxModel.getElementInnerWidth(el);
	    };
	} else {
	    f1 = function() {
		return mstr.utils.BoxModel.getElementSumOffsetLeft(el);
	    };
	    props.xMin = f1;
	    props.xMax = f1;
	}
	if (o == "v" || o == "b") {
	    f2 = function() {
		return Math
			.round(mstr.utils.BoxModel.getElementSumOffsetTop(el)
				- (mstr.utils.BoxModel
					.getElementOuterHeight(thumb) / 2));
	    };
	    props.yMin = f2;
	    props.yMax = function() {
		return f2() + mstr.utils.BoxModel.getElementInnerHeight(el);
	    };
	} else {
	    f2 = function() {
		return mstr.utils.BoxModel.getElementSumOffsetTop(el);
	    };
	    props.yMin = f2;
	    props.yMax = f2;
	}
	this.set("dz", new mstr.models.dnd.DragZone(props, {
	    findTarget : function(view, e) {
		var t = mstr.utils.Dom.findAncestor(e.target(), "className",
			thumb.className);
		return (t && t == thumb) ? t : null;
	    },
	    startDrag : function(view) {
		if (!view.get("dndGhost")) {
		    thumb.style.visibility = "hidden";
		}
		var origClickJump = !!view.get("enableClickJumps");
		if (!origClickJump) {
		    view.set("enableClickJumps", true);
		}
	    },
	    drag : function(view, l, t) {
		l = l
			+ Math.round(mstr.utils.BoxModel
				.getElementOuterWidth(thumb) / 2);
		t = t
			+ Math.round(mstr.utils.BoxModel
				.getElementOuterHeight(thumb) / 2);
		view.repositionThumb({
		    x : l,
		    y : t
		}, 1);
	    },
	    endDrag : function(view, l, t) {
		var origClickJump = !!view.get("enableClickJumps");
		if (!origClickJump) {
		    view.set("enableClickJumps", true);
		}
		var origAnimation = !!view.get("animate");
		if (origAnimation) {
		    view.set("animate", false);
		}
		l = l
			+ Math.round(mstr.utils.BoxModel
				.getElementOuterWidth(thumb) / 2);
		t = t
			+ Math.round(mstr.utils.BoxModel
				.getElementOuterHeight(thumb) / 2);
		view.repositionThumb({
		    x : l,
		    y : t
		}, 1);
		if (!origClickJump) {
		    view.set("enableClickJumps", false);
		}
		if (origAnimation) {
		    view.set("animate", true);
		}
		if (!view.get("dndGhost")) {
		    thumb.style.visibility = "visible";
		}
	    }
	}));
	return null;
    };
    S.prototype.on_click = function S_on_click(e, hWin) {
	if (!this.get("enabled")
		|| (!this.get("xField") && !this.get("yField"))) {
	    return;
	}
	e = e || window.event;
	if ((e.target || e.srcElement).tagName != "DIV") {
	    return;
	}
	var evt = new mstr.lang.Event(e, hWin, this);
	var el = this.get(mstr.Props.Widget.ELEMENT).lastChild;
	var h = parseInt(this.get("height"), 10);
	var offset = (mstr.utils.ISW3C) ? (mstr.utils.BoxModel
		.getElementOuterHeight(el) - h) / 2 : 4;
	this.repositionThumb(evt, offset);
    };
    S.prototype.repositionThumb = function S_repositionThumb(evt, offset) {
	var x, y;
	var h = parseInt(this.get("height"), 10);
	var w = parseInt(this.get("width"), 10);
	var el = this.get(mstr.Props.Widget.ELEMENT).lastChild;
	var or = this.get("orientation");
	var og = this.get("origin");
	if (or == "h" || or == "b") {
	    x = evt.x - mstr.utils.BoxModel.getElementSumOffsetLeft(el)
		    - offset;
	    if (og == 2 || og == 6) {
		x = NaN;
	    } else {
		if (og == 3 || og == 4 || og == 5) {
		    x = w - x;
		}
	    }
	}
	if (or == "v" || or == "b") {
	    y = evt.y - mstr.utils.BoxModel.getElementSumOffsetTop(el) - offset;
	    if (og == 4 || og == 8) {
		y = NaN;
	    } else {
		if (og == 5 || og == 6 || og == 7) {
		    y = h - y;
		}
	    }
	}
	var info = {
	    x : {
		n : x,
		d : w
	    },
	    y : {
		n : y,
		d : h
	    }
	};
	var m = this.getModel();
	for ( var id in info) {
	    if (!isNaN(info[id]["n"])) {
		var f = this.get(id + "Field");
		if (!f) {
		    continue;
		}
		var min = this.get(id + "Min");
		var max = this.get(id + "Max");
		var v = Math
			.round(((info[id]["n"] / info[id]["d"]) * (max - min))
				+ min);
		if (this.get("enableClickJumps")) {
		    m.set(f, v);
		} else {
		    var ov = m.get(f);
		    v = (ov < v) ? ov++ : ov--;
		    m.set(f, ov);
		}
	    }
	}
	if (!isNaN(x)) {
	    var thumb = this._getThumb();
	    thumb.style.left = (x
		    - Math.round(mstr.utils.BoxModel
			    .getElementOuterWidth(thumb) / 2) - (mstr.utils.ISIE6
		    || mstr.utils.ISIE7 ? 1 : 0))
		    + "px";
	}
	this.showTooltip(true);
    };
    S.prototype._buildTooltipText = function S__buildTooltipText() {
	var tf = this.get("tooltipFunction");
	if (tf) {
	    eval("var f =" + tf);
	}
	var s = "";
	var m = this.getModel();
	var or = this.get("orientation");
	if (this.get("xField") && (or == "h" || or == "b")) {
	    s += (tf) ? f(m.get(this.get("xField")))
		    : microstrategy.descriptors.getDescriptor("4891").replace(
			    "##", m.get(this.get("xField"))).replace("###",
			    this.get("xMax"));
	}
	if (this.get("yField") && (or == "v" || or == "b")) {
	    if (s.length > 0) {
		s += "<br />";
	    }
	    s += (tf) ? f(m.get(this.get("yField")))
		    : microstrategy.descriptors.getDescriptor("4891").replace(
			    "##", m.get(this.get("yField"))).replace("###",
			    this.get("yMax"));
	}
	return s;
    };
    S.prototype._moveTooltip = function S__moveTooltip() {
	if (!this.get("showTooltip")) {
	    return;
	}
	var el = this.get(mstr.Props.Widget.ELEMENT);
	var tooltip = this._getTooltip();
	if (!tooltip) {
	    return;
	}
	var or = this.get("orientation");
	tooltip.lastChild.innerHTML = this._buildTooltipText();
	var x, y;
	var h = mstr.utils.BoxModel.getElementOuterHeight(tooltip);
	var w = mstr.utils.BoxModel.getElementOuterWidth(tooltip);
	var thumb = this._getThumb();
	var tt = mstr.utils.BoxModel.getElementSumOffsetTop(thumb)
		- mstr.utils.BoxModel.getElementSumOffsetTop(el.lastChild);
	var tl = mstr.utils.BoxModel.getElementSumOffsetLeft(thumb)
		- mstr.utils.BoxModel.getElementSumOffsetLeft(el.lastChild);
	var th = mstr.utils.BoxModel.getElementOuterHeight(thumb);
	var tw = mstr.utils.BoxModel.getElementOuterWidth(thumb);
	switch (or) {
	case "h":
	    x = Math.round(tl + (tw / 2) - (w / 2));
	    y = Math.round(tt - h - 1);
	    break;
	case "v":
	    x = Math.round(tl + tw + 1);
	    y = Math.round(tt + (th / 2) - (h / 2));
	    break;
	case "b":
	    x = Math.round(tl + tw + 1);
	    y = Math.round(tt - h - 1);
	    break;
	}
	tooltip.style.left = x + "px";
	tooltip.style.top = y + "px";
    };
    S.prototype.showTooltip = function S_showTooltip(show) {
	if (!this.get("showTooltip")) {
	    return;
	}
	var tooltip = this._getTooltip();
	if (!tooltip) {
	    return;
	}
	if (this.get("enabled") && show) {
	    tooltip.style.display = "inline";
	    tooltip.style.visibility = "visible";
	    this._moveTooltip();
	} else {
	    tooltip.style.visibility = "hidden";
	}
    };
    S.prototype.schedule_thumb_move = function S_schedule_thumb_move(evt,
	    noAnimation) {
	if (!isNaN(this.get("animationTimeout"))) {
	    self.clearTimeout(this.get("animationTimeout"));
	    this.set("animationTimeout", null);
	}
	var thumb = this._getThumb();
	var og = "|" + this.get("origin") + "|";
	var tempT = thumb.cloneNode(true);
	tempT.style.display = "block";
	tempT.style.position = "absolute";
	tempT.style.left = "3000px";
	tempT.style.top = "2000px";
	tempT = document.body.appendChild(tempT);
	var info = {
	    x : {
		d : parseInt(this.get("width"), 10),
		i : "|2|6|",
		o : "|3|4|5|",
		t : mstr.utils.BoxModel.getElementOuterWidth(tempT) / 2,
		v : NaN
	    },
	    y : {
		d : parseInt(this.get("height"), 10),
		i : "|4|8|",
		o : "|5|6|7|",
		t : mstr.utils.BoxModel.getElementOuterHeight(tempT) / 2,
		v : NaN
	    }
	};
	document.body.removeChild(tempT);
	var model = this.getModel();
	for ( var id in info) {
	    var f = this.get(id + "Field");
	    if (!f) {
		continue;
	    }
	    var min = this.get(id + "Min");
	    var n = (model.get(f) - min) / (this.get(id + "Max") - min);
	    if (info[id]["i"].indexOf(og) > -1) {
		n = NaN;
	    } else {
		if (info[id]["o"].indexOf(og) > -1) {
		    n = 1 - n;
		}
	    }
	    info[id]["v"] = Math.round(n * info[id]["d"] - info[id]["t"]);
	}
	var x = info.x["v"] || null;
	var y = info.y["v"] || null;
	if (noAnimation || !this.get("animate")
		|| this.get("animationStep") <= 1) {
	    if (x && !isNaN(x)) {
		thumb.style.left = x + "px";
	    }
	    if (y && !isNaN(y)) {
		thumb.style.top = y + "px";
	    }
	} else {
	    this.props.animationTimeout = self.setTimeout("mstr.$obj('"
		    + this.get("id") + "').move_thumb(" + x + ", " + y + ")",
		    10);
	}
	this._moveTooltip();
    };
    S.prototype.move_thumb = function S_move_thumb(x, y) {
	var thumb = this._getThumb();
	if (thumb) {
	    mstr.utils.Animations.move(thumb, x, y, this.get("animationStep"));
	    this.set("animationTimeout", null);
	}
    };
    S.prototype.after_set_enabled = function S_after_set_enabled(evt) {
	var thumb = this._getThumb();
	if (thumb) {
	    thumb.style.display = (this.get("enabled")) ? "inline" : "none";
	}
    };
    function S(props) {
	mstr.views.BaseView.apply(this, [ props ]);
    }
    return S;
})();
mstr.views.FontFormatter = (function() {
    mstr.$O.extendsClass(A, mstr.views.BaseView);
    A.pathMap = {
	nameModelPath : {
	    p : "children/0/children/0",
	    f : "fontFamily",
	    vp : "parent/parent/model/"
	},
	styleModelPath : {
	    p : "children/1/children/0/children/0",
	    f : "boldItalic",
	    vp : "parent/model/"
	},
	sizeModelPath : {
	    p : "children/1/children/0/children/1",
	    f : "fontSize",
	    vp : "parent/model/"
	},
	underlineField : {
	    p : "children/0/children/1/children/0",
	    f : "textUnderline",
	    vp : "parent/model/"
	},
	strikeoutField : {
	    p : "children/0/children/1/children/1",
	    f : "textStrikeout",
	    vp : "parent/model/"
	},
	colorModelPath : {
	    p : "children/1/children/1",
	    f : "fontColor",
	    vp : "parent/model/"
	}
    };
    A.prototype.init = function B() {
	var E = this;
	var D = function(G) {
	    var H = G.name.split("_").pop();
	    E._updateViewProperties(H);
	};
	for ( var F in mstr.views.FontFormatter.pathMap) {
	    this._updateViewProperties(F);
	    this["after_set_" + F] = D;
	}
	mstr.views.BaseView.prototype.init.apply(this);
    };
    A.prototype._updateViewProperties = function C(J) {
	var E = mstr.$path(mstr.views.FontFormatter.pathMap[J].p, this);
	var H = this.get(J);
	if (J.indexOf("Field") > -1) {
	    mstr.controllers.Factory.safeset(E, "valueField", H);
	} else {
	    var G = mstr.views.FontFormatter.pathMap[J].vp + H;
	    mstr.controllers.Factory.safeset(E, "modelPath", G);
	}
	var D = this.get("enabledField");
	if (D) {
	    var F = mstr.views.FontFormatter.pathMap[J].vp + D;
	    mstr.controllers.Factory.safeset(E, "enabledField", F);
	}
	var I = mstr.$path("children/1/children/2", this);
	mstr.controllers.Factory.safeset(I,
		mstr.views.FontFormatter.pathMap[J].f, H);
    };
    function A(D) {
	mstr.views.BaseView.apply(this, [ D ]);
    }
    return A;
})();
mstr.views.ToolbarListView = (function() {
    mstr.$O.extendsClass(A, mstr.views.ListView);
    A.prototype.init = function C() {
	mstr.views.ListView.prototype.init.apply(this);
	this.getModel().attachEventListener(this, "featuresChanged", "render");
    };
    A.prototype.render = function B() {
	if (!this.props.model.get("items")[1]
		&& !this.props.model.get("items")[0]["menuModel"]
		&& mstr.utils.Hash.isEmpty(this.props.rightIcons)) {
	    var E = " mstrNoTabs";
	    if (document.body.className.indexOf(E) == -1) {
		document.body.className += E;
	    }
	    return;
	}
	mstr.views.ListView.prototype.render.call(this, []);
	var I = this.get("rightIcons"), D = this.props.scrollArea, J = D
		&& D.firstChild;
	if (!J || !I) {
	    return;
	}
	for ( var G = 0, F = I.length; G < F; G++) {
	    var H = I[G];
	    if (H.get) {
		J.appendChild(H.get(mstr.$W.ELEMENT));
	    } else {
		H = mstr.controllers.Factory.registerJSON(I[G],
			this.props[mstr.$W.DOCUMENT]);
		H.set("parent", this);
		H.init();
		H.set(mstr.$W.ELEMENT, J.appendChild(document
			.createElement("div")));
	    }
	    H.render();
	    I[G] = H;
	}
    };
    function A(D) {
	mstr.views.ListView.apply(this, [ D ]);
    }
    return A;
})();
mstr.views.FloatingMenuOption = (function() {
    mstr.$O.extendsClass(C, mstr.views.BaseView);
    C.prototype.execOpenSubMenu = function B() {
	var G = this.getModel().get("style");
	var E = this.getModel().get("menuModel");
	var I = this.getModel().get("layouts");
	if (!G) {
	    G = this.props.parent.props.model.props.styleName;
	}
	if (!G || !E) {
	    return;
	}
	this.get("parent").execCloseSubMenus();
	var F = this.get("element");
	var H = this.get("parent").get("element");
	var D = parseInt(H.style.left, 10)
		+ mstr.utils.BoxModel.getElementOuterWidth(H) - 12;
	var J = parseInt(H.style.top, 10)
		+ mstr.utils.BoxModel.getElementSumOffsetTop(F)
		- mstr.utils.BoxModel.getElementSumOffsetTop(H);
	mstr.behaviors.FloatingMenu.displayMenu(this, D, J, G, E, I,
		H.parentNode);
    };
    C.prototype.execCloseSubMenu = function A() {
	if (!this.getModel().get("menuModel")) {
	    return;
	}
	var E = mstr.$obj(mstr.behaviors.FloatingMenu.getMenuId({
	    layouts : this.getModel().get("layouts"),
	    modelName : this.getModel().get("menuModel")
	}));
	var D = E && E.execCloseMenu();
    };
    function C(D) {
	mstr.views.BaseView.apply(this, [ D ]);
    }
    return C;
})();
mstr.views.ToolbarButton = (function() {
    mstr.$O.extendsClass(B, mstr.views.BaseView);
    B.prototype._attachLayoutHandlers = function C() {
	mstr.views.BaseView.prototype._attachLayoutHandlers.apply(this, []);
	var D = this.props.model;
	if (!D) {
	    return;
	}
	D.attachEventListener(this, "set_showPressed", "set_pressed");
    };
    B.prototype.set_pressed = function A(D) {
	this.set("pressed", D.memo.value);
    };
    function B(D) {
	mstr.views.BaseView.apply(this, [ D ]);
    }
    return B;
})();
mstr.views.LastUpdateView = (function() {
    mstr.$O.extendsClass(B, mstr.views.BaseView);
    B.prototype.render = function A() {
	var D = mstr.$path(mstr.$path("parent/model/targetPath", this), this);
	if (!D) {
	    return;
	}
	mstr.views.BaseView.prototype.render.apply(this, arguments);
	var C = this.get(mstr.$W.ELEMENT);
	if (D.lastUpdate) {
	    C.innerHTML = D.lastUpdate;
	}
	C.className = this.get("cssPrefix") + this.get("cssClass");
    };
    function B(C) {
	mstr.views.BaseView.apply(this, [ C ]);
    }
    return B;
})();
mstr.views.Toolbar = (function() {
    mstr.$O.extendsClass(C, mstr.views.ViewBook);
    C.prototype.render = function E() {
	mstr.views.ViewBook.prototype.render.apply(this);
	this.checkAllSeparators();
	var G = this.get("views");
	for ( var I = 0, H = G.length; I < H; I++) {
	    var J = G[I];
	    if (!(J.get("ge"))) {
		var F = J.attachEventListener
			&& J.attachEventListener(this, "set_visible",
				"checkSeparators");
	    }
	}
    };
    C.prototype.checkAllSeparators = function B() {
	var F = this.get("views");
	var J = false;
	var I;
	for ( var H = 0, G = F.length; H < G; H++) {
	    I = F[H].get("ge");
	    if (!this.renderFirstSeparator && F[H].get("visible") && !J) {
		J = true;
		if (I) {
		    F[H].set("visible", false);
		    continue;
		}
	    }
	    if (I && H + 1 < G) {
		this.checkSeparators({
		    src : F[H + 1]
		});
	    }
	}
    };
    C.prototype.checkSeparators = function D(G) {
	var F = this.get("views");
	var H = mstr.$A.find(F, G.src);
	var K = G.src.get("visible");
	var J, M, I;
	var L;
	for (M = H - 1; M >= 0; M--) {
	    J = F[M];
	    if (J.get("ge")) {
		L = M;
		break;
	    }
	}
	for (M = L + 1, I = F.length; M < I; M++) {
	    J = F[M];
	    if (J.get("ge")) {
		F[L].set("visible", false);
		break;
	    }
	    if (J.get("visible")) {
		F[L].set("visible", true);
		break;
	    }
	}
	if (M == F.length && !this.renderLastSeparator) {
	    F[L].set("visible", false);
	}
    };
    C.prototype.after_set_childValidationStatus = function A(H) {
	var F = H.memo;
	var I = mstr.$obj(F.id).getModel().get("queueGroup");
	this.childValidationStatus = this.childValidationStatus || {};
	var J = this.childValidationStatus[I] = this.childValidationStatus[I]
		|| {};
	var G = this.get("model");
	if (F.code == mstr.Enum.Validation.STATUSCODE.VALID) {
	    if (F.id in J) {
		delete J[F.id];
		if (mstr.utils.Hash.isEmpty(J)) {
		    G.setQueueValidationStatus(I,
			    mstr.Enum.Validation.STATUSCODE.VALID);
		}
	    }
	} else {
	    if (mstr.utils.Hash.isEmpty(J)) {
		G.setQueueValidationStatus(I,
			mstr.Enum.Validation.STATUSCODE.INVALID_ANSWERS);
	    }
	    J[F.id] = F.code;
	}
    };
    function C(F) {
	this.renderFirstSeparator = true;
	this.renderLastSeparator = true;
	mstr.views.ViewBook.apply(this, [ F ]);
    }
    return C;
})();
mstr.views.ClickableMessage = (function() {
    mstr.$O.extendsClass(B, mstr.views.BaseView);
    B.prototype.showMessage = function D() {
	showMessage({
	    contents : this.get("dlgText"),
	    elements : microstrategy.OK_BUTTON + microstrategy.CANCEL_BUTTON,
	    zIndex : 1001,
	    okEval : 'mstr.$obj("' + this.get("id") + '").handleOK()',
	    type : mstrMsgBoxImpl.MSG_WARNING
	});
    };
    B.prototype.handleOK = function C() {
    };
    B.prototype.render = function A() {
	mstr.views.BaseView.prototype.render.apply(this, arguments);
	var H = this.get("element");
	var F = this.get("msgText");
	var G = F.match(/##(.*)##/);
	if (G && G.length > 0) {
	    var E = "<span style='text-decoration:underline;cursor:pointer' onclick='mstr.$obj(\""
		    + this.get("id")
		    + "\").showMessage();'>"
		    + G[1]
		    + "</span>";
	    F = F.replace(/##.*##/, E);
	    H.innerHTML = F;
	}
    };
    function B(E) {
	mstr.views.BaseView.apply(this, [ E ]);
    }
    return B;
})();
mstr.views.TooltipText = (function() {
    mstr.$O.extendsClass(A, mstr.views.BaseView);
    A.prototype.render = function B() {
	mstr.views.BaseView.prototype.render.apply(this, arguments);
	var C = this.get("element");
	model = this.getModel();
	currAttr = model.getSelectedItemValue();
	attrName = currAttr.split("|")[2];
	abbr = attrName;
	if (attrName.length > 20) {
	    abbr = attrName.substring(0, 17) + "...";
	}
	C.innerHTML = "<div style='margin-top:6px;' title='" + attrName + "'>"
		+ abbr + ":</div>";
    };
    function A(C) {
	mstr.views.BaseView.apply(this, [ C ]);
    }
    return A;
})();
mstr.views.DisableAutowireMessage = (function() {
    mstr.$O.extendsClass(B, mstr.views.ClickableMessage);
    B.prototype.handleOK = function A() {
	microstrategy.getViewerBone().commands.exec("disableAutowire");
	this.get("parent").getModel().set("Autowire", false);
    };
    function B(C) {
	mstr.views.BaseView.apply(this, [ C ]);
    }
    return B;
})();
mstr.views.FloatingMenuBook = (function() {
    mstr.$O.extendsClass(D, mstr.views.Toolbar);
    D.prototype.zIndex = 1000;
    D.prototype.getZIndex = function I() {
	return this.zIndex++;
    };
    D.prototype.init = function A() {
	mstr.views.Toolbar.prototype.init.apply(this);
	mstr.controllers.EventManager.attachWindowEventListener(this,
		"mousedown", "documentClick");
	mstr.controllers.EventManager.attachWindowEventListener(this,
		"closeMenus", "documentClick");
    };
    D.prototype.after_set_visible = function G(J) {
	if (this.props.visible) {
	    mstr.behaviors.FloatingMenu.adjustMenuPosition(this);
	} else {
	    mstr.behaviors.FloatingMenu.toggleOpenerHoverEffect(
		    this.props.opener, false);
	}
    };
    D.prototype.render = function B() {
	mstr.views.Toolbar.prototype.render.apply(this);
	mstr.utils.Dom.insertPopupMask(this.get("element"), this
		.execLayoutHandler("maskContainer"));
	var J = this.get("opener");
	if (J && J.get && J.get("visible") === false) {
	    this.execCloseMenu();
	} else {
	    mstr.behaviors.FloatingMenu.adjustMenuPosition(this);
	}
    };
    D.prototype.documentClick = function F(J) {
	if (this.props.visible === false) {
	    return;
	}
	if (this.props.showing) {
	    this.set("showing", false);
	    return;
	}
	var K = J && J.target && J.target();
	if (K && K.tagName && K.tagName.toLowerCase() == "html") {
	    return;
	}
	if (((!K && J.name == "closeMenus") || !mstr.utils.Dom.containsElement(
		this.props.element, K, true))
		&& !(this.props.opener.props && mstr.utils.Dom.containsElement(
			this.props.opener.props.element, K, true))
		&& !this.isSubMenu(K)) {
	    this.execCloseMenu();
	}
    };
    D.prototype.isSubMenu = function E(N) {
	var K = N, J, L, M, O;
	while (K) {
	    O = (K.getAttribute && K.getAttribute("blockId")) || K.id;
	    if (O) {
		J = mstr.$obj(O);
		if (J && J.props) {
		    M = M || (J.props.cmds);
		    L = J.props.opener;
		    L = L && L.props.element;
		    if (L) {
			return M == "OpenSubMenu"
				&& mstr.utils.Dom.containsElement(
					this.props.element, L, true);
		    }
		}
	    }
	    K = K.parentNode;
	}
	return false;
    };
    D.prototype.isSubMenu = function E(N) {
	var K = N, J, L, M, O;
	while (K) {
	    O = (K.getAttribute && K.getAttribute("blockId")) || K.id;
	    if (O) {
		J = mstr.$obj(O);
		if (J && J.props) {
		    M = M || (J.props.cmds);
		    L = J.props.opener;
		    L = L && L.props.element;
		    if (L) {
			return M == "OpenSubMenu"
				&& mstr.utils.Dom.containsElement(
					this.props.element, L, true);
		    }
		}
	    }
	    K = K.parentNode;
	}
	return false;
    };
    D.prototype.execCloseMenu = function H() {
	if (this.props.visible === false) {
	    return;
	}
	if (!(this.props.opener instanceof mstr.views.FloatingMenuOption)) {
	    microstrategy.setJLSCXMenuOpen(false);
	}
	this.set("visible", false);
	this.set("cssText", "left:-2000px;top:-2000px");
    };
    D.prototype.execCloseSubMenus = function C() {
	if (!this.props.views) {
	    return;
	}
	for ( var L = 0, K = this.props.views.length; L < K; L++) {
	    var M = this.props.views[L];
	    var J = M.execCloseSubMenu && M.execCloseSubMenu();
	}
    };
    function D(J) {
	mstr.views.Toolbar.apply(this, [ J ]);
	this.renderLastSeparator = false;
	this.renderFirstSeparator = false;
    }
    return D;
})();
mstr.views.ContextMenuProcessingView = (function() {
    mstr.$O.extendsClass(A, mstr.views.BaseView);
    A.prototype.setModel = function(B) {
	mstr.views.BaseView.prototype.setModel.apply(this, [ B ]);
	B.attachEventListener(this, "set_menu_ready", "on_menu_ready");
	B
		.attachEventListener(this, "set_menu_processing",
			"on_menu_processing");
	B.attachEventListener(this, "set_hide_menu_processing",
		"on_hide_menu_processing");
    };
    A.prototype.on_menu_processing = function() {
	addProcessingMenuItem(this.getMenuLevel());
    };
    A.prototype.on_hide_menu_processing = function() {
	removeProcessingMenuItem(this.getMenuLevel());
    };
    A.prototype.on_menu_ready = function() {
	var C = this.getModel().getMenuItems();
	var B = this.getModel().getCurrentMenuItemIndices();
	if (C != null && B != null) {
	    addDynamicMenus(this.getMenuLevel(), C, B);
	}
    };
    A.prototype.setMenuLevel = function(B) {
	this.iMenu = B;
    };
    A.prototype.getMenuLevel = function() {
	return this.iMenu;
    };
    function A(B) {
	mstr.views.BaseView.apply(this, [ B ]);
    }
    return A;
})();
mstr.views.ToolbarColorPickerButton = (function() {
    mstr.$O.extendsClass(A, mstr.views.Pulldown);
    A.prototype._attachLayoutHandlers = function D() {
	mstr.views.Pulldown.prototype._attachLayoutHandlers.apply(this);
	var E = this.props.model;
	if (E && E.attachEventListener) {
	    E.attachEventListener(this, "set_lastColor", "lastColorChanged");
	}
	this.lastColorChanged();
    };
    A.prototype._detachLayoutHandlers = function B() {
	mstr.views.Pulldown.prototype._detachLayoutHandlers.apply(this);
	var E = this.props.model;
	if (E && E.detachEventListener) {
	    E.detachEventListener(this, "set_lastColor");
	}
    };
    A.prototype.lastColorChanged = function C() {
	var F = this.getModel();
	var H = F.get("lastColor");
	H = (H.indexOf(",") > -1) ? H.split(",")[0] : H;
	var E = mstr.utils.ListViewHelper.getItemRenderer(this);
	var G = E._getContentContainer(this.props[mstr.$W.ELEMENT]);
	if (/^#[0-9a-f]{6}$/i.test(H)) {
	    G.style.backgroundColor = H;
	}
    };
    function A(E) {
	mstr.views.Pulldown.apply(this, [ E ]);
    }
    return A;
})();
mstr.bones.editors.BoneTranslator = (function() {
    mstr.$O.extendsClass(P, mstr.models.BaseModel);
    P.prototype.translating = false;
    P.prototype._createNewModel = function H(Y) {
	var X = Y.scriptClass;
	if (!X || !mstr.models[X]) {
	    return null;
	}
	var W = new mstr.models[X](Y);
	if (!W) {
	    return null;
	}
	mstr.controllers.Factory.add(W);
	var V = W.init && W.init();
	return W;
    };
    P.prototype._initializeDynamicModel = function Q(V, W, Y) {
	this._setDynamicModelValues(V, W, Y);
	this.props[V] = W;
	this._setModelChangeEventListeners(W, V);
	this.dynamicModels = this.dynamicModels || [];
	this.dynamicModels.push({
	    dm : W,
	    p : V,
	    s : Y
	});
	if (V === "EditSelectorTargets" && Y === "availableTemplates") {
	    var a = this.get("EditSelectorSource"), Z = a
		    && a.getSelectedItem() && a.getSelectedItem().olap, X = a
		    && a.getSelectedItem(), b = X && X.de && X.sty != 12033;
	    if (Z) {
		this._setDynamicModelValues("EditSelectorTargetsNoPlaceholder",
			W, "availableTemplatesNoPlaceholder");
	    }
	    if (b) {
		this._setDynamicModelValues("EditSelectorTargetsNoPlaceholder",
			W, "availableTemplatesNoPlaceholder");
	    }
	}
    };
    P.prototype._setModelChangeEventListeners = function M(W, V) {
	if (W instanceof mstr.models.ListModel) {
	    if (W instanceof mstr.models.ColorPicker) {
		W.attachEventListener(this, "set_actualColor",
			"onModelPropertyChange");
	    } else {
		W.attachEventListener(this, "hashadd_selectedIndices",
			"onModelPropertyChange");
		W.attachEventListener(this, "hashremove_selectedIndices",
			"onModelPropertyChange");
	    }
	    W.set("mappedPropertyName", V);
	} else {
	    if (mstr.models.ListCart && W instanceof mstr.models.ListCart) {
		var X = W.get("selected");
		X.attachEventListener(this, "listadd_items",
			"onModelPropertyChange");
		X.attachEventListener(this, "listremove_items",
			"onModelPropertyChange");
		X.set("mappedPropertyName", V);
	    }
	}
    };
    P.prototype._setDynamicModelValues = function G(W, X, Y) {
	var V = (typeof (Y) == "string") ? this.getBone().commands
		.queryState(Y) : Y;
	if (X instanceof mstr.models.ListModel) {
	    this._setDynamicListModelValues(X, V, W);
	} else {
	    if (mstr.models.ListCart && X instanceof mstr.models.ListCart) {
		this._setDynamicCartModelValues(X, V, W);
	    }
	}
    };
    P.prototype._setDynamicListModelValues = function J(X, W, V) {
	X.setItems(W);
	var Z = this.getBone().commands.queryState(V);
	var Y = (mstr.$A.isArray(Z)) ? "execSelectValues" : "execSelectValue";
	X[Y](Z);
    };
    P.prototype._setDynamicCartModelValues = function S(X, W, V) {
	X.get("available").setItems(W);
	var Y = this.getBone().commands.queryState(V);
	X.get("selected").setItems(Y);
	X._updateAvailableFilteredItems();
    };
    P.prototype._resolveDynamicModelSource = function D(V) {
	return (V in this.props && "getItems" in this.props[V]) ? this.get(V)
		.getItems() : V;
    };
    P.prototype._getPropertyCategory = function E() {
	return "default";
    };
    P.prototype._storeDeltaProp = function C(X, V) {
	if (this.get("previewDisabledFields")
		&& this.get("previewDisabledFields")[X]) {
	    this.props.parent.set("disablePreview", true);
	    this.props.parent.set("enablePreview", false);
	}
	var W = this._getPropertyCategory();
	this.deltaProps[W] = this.deltaProps[W] || {};
	this.deltaProps[W][X] = V;
	this.raiseEvent("store_deltaProp", {
	    category : W,
	    name : X,
	    value : V
	});
	mstr.models.BaseModel.prototype.set.apply(this, [ "hasChanges", true ]);
    };
    P.prototype._getDeltaProp = function O(W) {
	var V = this._getPropertyCategory();
	if (!(V in this.deltaProps) || !(W in this.deltaProps[V])) {
	    return null;
	}
	return this.deltaProps[V][W];
    };
    P.prototype.getBone = function N() {
	return mstr.$obj(this.props.boneId);
    };
    P.prototype.reinitializeModel = function F() {
	var W = ("dynamicModels" in this);
	this.translateBone();
	if (!this.get("enabled")) {
	    return;
	}
	if (!W) {
	    return;
	}
	var Z = this.translating;
	this.translating = true;
	for ( var a = 0, Y = this.dynamicModels.length; a < Y; a++) {
	    var b = this.dynamicModels[a];
	    if (b.p === "EditSelectorTargets" && b.s === "availableTemplates") {
		var V = this.get("EditSelectorSource"), e = V
			&& V.getSelectedItem() && V.getSelectedItem().olap, X = V
			&& V.getSelectedItem(), c = X && X.de && X.sty != 12033;
		if (e) {
		    this._setDynamicModelValues(
			    "EditSelectorTargetsNoPlaceholder", b.dm,
			    "availableTemplatesNoPlaceholder");
		    continue;
		}
		if (c) {
		    this._setDynamicModelValues(
			    "EditSelectorTargetsNoPlaceholder", b.dm,
			    "availableTemplatesNoPlaceholder");
		    continue;
		}
	    }
	    this._setDynamicModelValues(b.p, b.dm, b.s);
	}
	this.translating = Z;
    };
    P.prototype.getDynamicListModel = function R(X, W) {
	var Y = this._resolveDynamicModelSource(X);
	var V = this._createNewModel({
	    scriptClass : "ListModel",
	    parent : this,
	    valueForm : "dssid"
	});
	if (V) {
	    this._initializeDynamicModel(W, V, Y);
	}
	return V;
    };
    P.prototype.getDynamicCartModel = function K(X, W) {
	var Y = this._resolveDynamicModelSource(X);
	var V = this._createNewModel({
	    scriptClass : "ListCart",
	    parent : this,
	    available : {
		scriptClass : "mstr.models.ListModel",
		valueForm : "dssid"
	    },
	    selected : {
		scriptClass : "mstr.models.ListModel",
		valueForm : "dssid"
	    }
	});
	if (V) {
	    this._initializeDynamicModel(W, V, Y);
	}
	return V;
    };
    P.prototype.set = function U(Y, V) {
	var X = mstr.models.BaseModel.prototype.set.apply(this, [ Y, V ]);
	if (!X) {
	    return;
	}
	if (!this.translating && this._isTranslatedProperty(Y)) {
	    this._storeDeltaProp(Y, V);
	}
	var W = this.get("broadcastProperties");
	if (W && W[Y]) {
	    this.get("parent").notifyPropertyChange(Y, {
		memo : {
		    value : V
		}
	    });
	}
    };
    P.prototype.translateBone = function I() {
	var Z = this.getBone();
	var W = this.props.visibleField;
	if (W != null && W.length > 0) {
	    this.set(W, Z.commands.queryEnabled(W));
	    if (!this.props[W]) {
		return;
	    }
	}
	if (!this.get("enabled") || !Z) {
	    return;
	}
	var b = this.get("fields");
	if (!b) {
	    return;
	}
	b = b.split("|");
	if (b[0] == "") {
	    b.shift();
	}
	if (b[b.length - 1] == "") {
	    b.pop();
	}
	if (!b) {
	    return;
	}
	this.translating = true;
	for ( var a = 0, Y = b.length; a < Y; a++) {
	    var X = b[a];
	    if (!Z.commands.queryEnabled(X)) {
		continue;
	    }
	    var d = this._getDeltaProp(X);
	    if (d == null) {
		d = Z.commands.queryState(X);
	    }
	    if (d && typeof d == "string") {
		d = d.replace(/'+/g, "");
	    }
	    var V = this.props[X];
	    if (mstr.models.ListCart && V instanceof mstr.models.ListCart) {
		V.get("selected").setItems(d);
		this._setModelChangeEventListeners(V, X);
	    } else {
		if (V instanceof mstr.models.ListModel) {
		    var c = (mstr.$A.isArray(d)) ? "execSelectValues"
			    : "execSelectValue";
		    var e = V[c](d);
		    if (!e && V.execClearSelect) {
			V.execClearSelect();
		    }
		    this._setModelChangeEventListeners(V, X);
		} else {
		    this.set(X, d);
		}
	    }
	}
	this.translating = false;
    };
    P.prototype.onModelPropertyChange = function L(g) {
	var Z = g.src;
	var e = "";
	var W = null;
	if (g.name == "set_actualColor") {
	    e = Z.get("actualColor");
	    W = g.memo.valueWas;
	} else {
	    var c = [];
	    switch (g.name) {
	    case "hashadd_selectedIndices":
	    case "hashremove_selectedIndices":
		c = Z.getSelectedItems();
		W = g.memo.at;
		break;
	    case "listadd_items":
	    case "listremove_items":
		c = Z.getItems();
		break;
	    default:
		return;
	    }
	    var a = Z.get("valueForm");
	    var b = "";
	    for ( var X = 0, V = c.length; X < V; X++) {
		e += b + c[X][a];
		b = CLIPBOARD_ITEM_SEPARATOR;
	    }
	}
	var Y = Z.get("mappedPropertyName");
	this.raiseEvent("set_" + Y, {
	    name : Y,
	    src : g.name,
	    value : e,
	    valueWas : W
	});
	if (this.translating) {
	    return;
	}
	this._storeDeltaProp(Y, e);
    };
    P.prototype.resetDeltas = function B() {
	this.deltaProps = {};
	mstr.models.BaseModel.prototype.set
		.apply(this, [ "hasChanges", false ]);
    };
    P.prototype.collectChanges = function A(X) {
	for ( var W in this.deltaProps) {
	    var V = (W.indexOf("|") == -1) ? {} : mstr.utils.Arrays
		    .toHashProperties(W.split("|"), [ "category", "unit",
			    "format" ]);
	    for ( var Y in this.deltaProps[W]) {
		X.push({
		    obj : null,
		    cmdId : Y,
		    value : this.deltaProps[W][Y],
		    memo : V,
		    performFormatChange : true,
		    submitUpdateManager : false
		});
	    }
	}
    };
    P.prototype._isTranslatedProperty = function T(X) {
	var V = this.props.fields;
	if (!V) {
	    return false;
	}
	var W = new RegExp("\\|" + X + "\\||^" + X + "\\||\\|" + X + "$|^" + X
		+ "$");
	return W.test(V);
    };
    function P(V) {
	mstr.models.BaseModel.apply(this, [ V ]);
	this.resetDeltas();
    }
    return P;
})();
mstr.bones.editors.BoneTranslatorManager = (function() {
    mstr.$O.extendsClass(P, mstr.models.ListModel);
    P.prototype.init = function A() {
	mstr.models.BaseModel.prototype.init.apply(this);
	this.attachEventListener(this, "set_lockedTab", "_lockTabs");
	this._lockTabs();
	var R = this.getItems();
	var T = R.length;
	for ( var S = 0; S < T; S++) {
	    R[S].attachEventListener(this, "set_hasChanges", "handleChanges");
	}
	this._startBoneTranslation();
	this._fixSelection();
    };
    P.prototype.on_set_viewDisabled = function N(R) {
	this.set("CommandEnabledOkChanges", (!R.memo.value && this
		.get("enableOk")));
	this.set("CommandEnabledPreviewChanges", (!R.memo.value && this
		.get("enablePreview")));
    };
    P.prototype.on_set_enableOk = function J(R) {
	this.set("CommandEnabledOkChanges", (R.memo.value && !this
		.get("viewDisabled")));
    };
    P.prototype.on_set_enablePreview = function O(R) {
	this.set("CommandEnabledPreviewChanges", (R.memo.value
		&& !this.get("viewDisabled") && !this.get("disablePreview")));
    };
    P.prototype._startBoneTranslation = function K() {
	var R = this.getItems();
	var T = R.length;
	for ( var S = 0; S < T; S++) {
	    R[S].translateBone();
	}
    };
    P.prototype._lockTabs = function I() {
	var R = this.get("lockedTab");
	if (R != -1) {
	    this.execSingleSelect(R);
	    this.set("disableList", true);
	} else {
	    this.set("disableList", false);
	}
    };
    P.prototype.execReinitializeModel = function E() {
	this.set("hasChanges", false);
	this.set("previewCount", 0);
	this.props.enableOk = false;
	this.props.enablePreview = false;
	this.set("viewDisabled", false);
	this.set("disablePreview", false);
	this._reinitializeChildModels();
	this._fixSelection();
    };
    P.prototype._reinitializeChildModels = function G() {
	var R = this.getItems();
	for ( var T = 0, S = R.length; T < S; T++) {
	    R[T].reinitializeModel();
	}
    };
    P.prototype.handleChanges = function Q(R) {
	this.set("hasChanges", R.memo.value);
	if (!R.memo.value) {
	    return;
	}
	this.set("enableOk", true);
	this.set("enablePreview", true);
	if (this.get("lockedTab") != -1 && !this.get("viewDisabled")) {
	    this.set("lockedTab", -1);
	}
    };
    P.prototype.disableModelFromView = function F(R) {
	this.set("viewDisabled", R);
    };
    P.prototype.execOkChanges = function D() {
	this.saveModelChanges();
	this.set("enableOk", false);
	this.set("enablePreview", false);
	return true;
    };
    P.prototype.execPreviewChanges = function H() {
	var R = microstrategy.updateManager;
	if (R) {
	    R.observer.register(this.props.id);
	}
	this.saveModelChanges();
	this.set("enablePreview", false);
	this.props.previewCount++;
	if (R && !R.isFlushing()) {
	    var S = mstr.$obj(this.get("boneId"));
	    if (S && S.commands.queryEnabled("oneTable")) {
		this._initializeSelectors();
	    }
	    this._reinitializeChildModels();
	    R.observer.unregister(this.props.id);
	}
	return true;
    };
    P.prototype.saveModelChanges = function C() {
	var S = new Array();
	var R = this.getItems();
	for ( var U = 0, T = R.length; U < T; U++) {
	    R[U].collectChanges(S);
	}
	if (S.length > 0) {
	    var V = mstr.$obj(this.props.boneId);
	    if (V) {
		if (!(V.commands.exec(this.props.boneCmdId, S))) {
		    return false;
		}
	    }
	}
	this.execClearChanges();
	return true;
    };
    P.prototype.execClearChanges = function L() {
	var R = this.getItems();
	for ( var T = 0, S = R.length; T < S; T++) {
	    R[T].resetDeltas();
	}
    };
    P.prototype.execCancelChanges = function M() {
	this.execClearChanges();
	var R = mstr.$obj(this.props.boneId);
	if (R) {
	    R.commands.exec("cancelEdit", this.get("previewCount"));
	}
	this.set("lockedTab", -1);
	this.set("enablePreview", false);
	this.set("enableOk", false);
    };
    P.prototype._fixSelection = function B() {
	var U = this.getSelectedItem();
	if (!U.get(U.get("visibleField"))) {
	    var R = this.getItems();
	    for ( var T = 0, S = R.length; T < S; T++) {
		if (R[T].get(R[T].get("visibleField"))) {
		    this.execSingleSelect(T);
		    return;
		}
	    }
	}
    };
    function P(R) {
	mstr.models.ListModel.apply(this, [ R ]);
    }
    return P;
})();
mstr.bones.editors.PropertiesBoneTranslatorManager = (function() {
    mstr.$O.extendsClass(I, mstr.bones.editors.BoneTranslatorManager);
    I.prototype._initializeSelectors = function N() {
	var X = mstr.$obj(this.get("boneId"));
	this.set("showGridSelectors", X.commands
		.queryEnabled("showGridSelectors"));
	this.set("showPanelSelector", X.commands
		.queryEnabled("showPanelSelector"));
	var V = [ "edtUnitSelector", "edtValueSelector" ];
	for ( var W = 0; W < 2; W++) {
	    this._initializeSingleSelector(V[W]);
	}
    };
    I.prototype._initializeSingleSelector = function O(W) {
	var X = mstr.$obj(this.get("boneId"));
	var V = this.get(W);
	V.detachEventListener(this, "hashadd_selectedIndices");
	V.set("cmdId", W);
	var Y = X.commands.queryState(W, this._getTabName());
	if (Y.isFetching && (!this.pollInterval)) {
	    this._setGridModelEnablement(false);
	    this.pollInterval = self.setInterval("mstr.$obj('" + this.get("id")
		    + "').pollForGridFormat();", 100);
	}
	V.set("visible", Y.visible);
	V.set("enabled", Y.enabled);
	if (Y.items) {
	    V.setItems(Y.items);
	    if ("value" in Y) {
		V.execSelectValue(Y.value);
	    }
	}
	V.attachEventListener(this, "hashadd_selectedIndices",
		"updateTargetFromUnitSelectors");
    };
    I.prototype._getTabName = function B() {
	return mstr.controllers.Factory.safeget(this.getSelectedItem(),
		"tabName");
    };
    I.prototype._setGridModelEnablement = function C(W) {
	var V = this.getItems();
	for ( var Y = 0, X = V.length; Y < X; Y++) {
	    var Z = mstr.controllers.Factory
		    .safeget(V[Y], "unitSelectorChange");
	    if (Z && (Z.indexOf("Grid") > -1)) {
		mstr.controllers.Factory.safeset(V[Y], "enabled", W);
		if (W && V[Y].reinitializeModel) {
		    V[Y].reinitializeModel();
		}
	    }
	}
    };
    I.prototype.on_set_enablePreview = function T(V) {
	if (!V.memo.value || this.get("viewDisabled")) {
	    mstr.bones.editors.BoneTranslatorManager.prototype.on_set_enablePreview
		    .apply(this, [ V ]);
	    return;
	}
	this.set("CommandEnabledPreviewChanges", !this.get("isGridFormatted"));
    };
    I.prototype.pollForGridFormat = function F() {
	var V = mstr.$obj(this.get("boneId"));
	if (V.commands.queryState("areGridFormatsReady")) {
	    this._clearGridFormatPoll();
	    this._setGridModelEnablement(true);
	}
    };
    I.prototype._clearGridFormatPoll = function D() {
	if (this.pollInterval) {
	    self.clearInterval(this.pollInterval);
	    delete this.pollInterval;
	}
    };
    I.prototype._cancelGridFormatPoll = function Q() {
	if (!this.pollInterval) {
	    return;
	}
	this._clearGridFormatPoll();
	var Y = mstr.$obj(this.get("boneId"));
	Y.commands.exec("cancelGridFormatRequest");
	var V = this.getItems();
	for ( var X = 0, W = V.length; X < W; X++) {
	    mstr.controllers.Factory.safeset(V[X], "enabled", true);
	}
    };
    I.prototype._startBoneTranslation = function M() {
	this._initializeSelectors();
	mstr.bones.editors.BoneTranslatorManager.prototype._startBoneTranslation
		.apply(this);
    };
    I.prototype._handleDeltaPropStorage = function P(V) {
	return;
	var W = V.memo.category.split("|");
	if (W.length == 3) {
	    if (W[0] == "Grid" || (W[0] == "AllGrid" && W[1] != "0")) {
		this.set("isGridFormatted", true);
		this.set("enablePreview", false);
	    }
	}
    };
    I.prototype.init = function E() {
	mstr.bones.editors.BoneTranslatorManager.prototype.init.apply(this);
	this.set("isGridFormatted", false);
	var V = this.getItems();
	for ( var X = 0, W = V.length; X < W; X++) {
	    V[X].attachEventListener(this, "store_deltaProp",
		    "_handleDeltaPropStorage");
	}
    };
    I.prototype.acknowledgeReloadEnd = function U() {
	this.execReinitializeModel();
	var V = microstrategy.updateManager;
	if (V) {
	    V.observer.unregister(this.props.id);
	}
    };
    I.prototype.execReinitializeModel = function H() {
	this._initializeSelectors();
	this.set("isGridFormatted", false);
	this.set("showCancelButton", true);
	mstr.bones.editors.BoneTranslatorManager.prototype.execReinitializeModel
		.apply(this);
	var V = this.getSelectedItem();
	if (!V.get(V.get("visibleField"))) {
	    this.execSingleSelect(0);
	}
    };
    I.prototype.updateTargetFromUnitSelectors = function A(X) {
	var W = X.src.get("cmdId");
	var V = this.get(W);
	var Y = {
	    src : W,
	    v : V.getSelectedItem()[V.get("valueForm")],
	    t : this._getTabName()
	};
	mstr.$obj(this.get("boneId")).commands.exec("setUnitFormatLevels", Y);
	if (W == "edtUnitSelector") {
	    this._initializeSingleSelector("edtValueSelector");
	}
	this._reinitializeSelectorBasedModels();
    };
    I.prototype._reinitializeSelectorBasedModels = function S() {
	if (this.pollInterval) {
	    return;
	}
	var V = this.getItems();
	for ( var X = 0, W = V.length; X < W; X++) {
	    var Y = V[X].get("unitSelectorChange");
	    if (Y) {
		V[X].reinitializeModel();
	    }
	}
    };
    I.prototype.execClearChanges = function R() {
	mstr.bones.editors.BoneTranslatorManager.prototype.execClearChanges
		.apply(this);
	this._cancelGridFormatPoll();
    };
    I.prototype.execOpenWebHyperLinkEditor = function L() {
	mstr.$obj("rwb_viewer").doc.commands.exec("WebHyperLinkEditor");
	this.set("showCancelButton", false);
    };
    I.prototype.handleChanges = function G(V) {
	mstr.bones.editors.BoneTranslatorManager.prototype.handleChanges.apply(
		this, [ V ]);
	V.memo.value && this.set("showCancelButton", true);
    };
    I.prototype.on_hashadd_selectedIndices = function K(V) {
	mstr.bones.editors.BoneTranslatorManager.prototype.on_hashadd_selectedIndices
		.call(this, V);
	var X = this._getTabName();
	if (X) {
	    mstr.$obj(this.get("boneId")).commands.exec("edtTabChange", X);
	}
	var W = this.getItems();
	if (W.length > 0 && W[0].get) {
	    this._initializeSelectors();
	    this._reinitializeSelectorBasedModels();
	}
    };
    I.prototype.notifyPropertyChange = function J(X, V) {
	var W = this.getItems();
	for ( var Z = 0, Y = W.length; Z < Y; Z++) {
	    if (W[Z]["on_set_ext_prop_" + X]) {
		W[Z]["on_set_ext_prop_" + X](V);
	    }
	}
    };
    function I(V) {
	mstr.bones.editors.BoneTranslatorManager.apply(this, [ V ]);
    }
    return I;
})();
mstr.bones.editors.FormatEditingBoneTranslator = (function() {
    mstr.$O.extendsClass(C, mstr.bones.editors.BoneTranslator);
    C.prototype._getPropertyCategory = function A() {
	var F = mstr.bones.editors.BoneTranslator.prototype._getPropertyCategory
		.apply(this);
	var J = this.get("parent");
	var H = J.get("edtUnitSelector");
	var I = J.get("edtValueSelector");
	var E = ((J.get("showGridSelectors")) ? "Grid" : "default") + "|";
	var G = H.getSelectedItem();
	if (!G) {
	    return F;
	}
	E += H.getSelectedItem()[H.get("valueForm")] + "|";
	G = I.getSelectedItem();
	if (!G) {
	    return F;
	}
	E += I.getSelectedItem()[I.get("valueForm")];
	return E;
    };
    C.prototype.refreshForSearchBox = function B(G, E) {
	if (E) {
	    var F = G.get("visibleField");
	    if (F == "alignmentTabEnabled" || F == "effectsTabEnabled") {
		G.set(F, false);
	    }
	}
    };
    C.prototype.translateBone = function D() {
	mstr.bones.editors.BoneTranslator.prototype.translateBone.apply(this);
	this.translating = true;
	var E = mstr.bones.editors.LayoutPropertiesBoneTranslator.prototype
		.isSearchBox(this);
	this.refreshForSearchBox(this, E);
	this.translating = false;
    };
    function C(E) {
	mstr.bones.editors.BoneTranslator.apply(this, [ E ]);
    }
    return C;
})();
mstr.bones.editors.EffectsPropertiesBoneTranslator = (function() {
    mstr.$O.extendsClass(A, mstr.bones.editors.FormatEditingBoneTranslator);
    A.prototype.on_set_ext_prop_showTranslucent = function B(C) {
	var D = C.InfoWindowMode;
	this.set("showTranslucent", (C.UseAsInformationWindow && (D === "2"
		|| D === "3" || D === "4")));
    };
    function A(C) {
	mstr.bones.editors.FormatEditingBoneTranslator.apply(this, [ C ]);
    }
    return A;
})();
mstr.bones.editors.FontPropertiesBoneTranslator = (function() {
    mstr.$O.extendsClass(A, mstr.bones.editors.FormatEditingBoneTranslator);
    A.prototype._getPropertyCategory = function C() {
	return mstr.bones.editors.FormatEditingBoneTranslator.prototype._getPropertyCategory
		.apply(this);
    };
    A.prototype.on_set_ext_prop_ButtonDisplayStyle = function B(D) {
	var E = Number(D.memo.value);
	var F = this.get("visibleField");
	switch (E) {
	case microstrategy.BUTTON_STYLE_CAPTION_ONLY:
	case microstrategy.BUTTON_STYLE_ICON_LEFT:
	case microstrategy.BUTTON_STYLE_ICON_RIGHT:
	case microstrategy.BUTTON_STYLE_ICON_TOP:
	    this.set(F, true);
	    break;
	case microstrategy.BUTTON_STYLE_ICON_ONLY:
	case microstrategy.BUTTON_STYLE_CUSTOM:
	    this.set(F, false);
	    break;
	}
    };
    function A(D) {
	mstr.bones.editors.FormatEditingBoneTranslator.apply(this, [ D ]);
    }
    return A;
})();
mstr.bones.editors.LayoutPropertiesBoneTranslator = (function() {
    mstr.$O.extendsClass(R, mstr.bones.editors.BoneTranslator);
    var E = null;
    var D = {};
    R.prototype.init = function S() {
	mstr.bones.editors.BoneTranslator.prototype.init.apply(this);
	E = this.get("XTabView").getItems()[this.get("XTabView").indexOfValue(
		"50")];
    };
    R.prototype.translateBone = function B() {
	mstr.bones.editors.BoneTranslator.prototype.translateBone.apply(this);
	var Y = this.get("XTabView").getSelectedItemValue();
	this.set("ExportOverflowVisible", !this.get("IsPortal")
		&& (Y == 1 || Y == 3));
	this.on_set_DataSource();
	D = {};
    };
    R.prototype.getDynamicListModel = function I(a, Z) {
	var Y = mstr.bones.editors.BoneTranslator.prototype.getDynamicListModel
		.apply(this, [ a, Z ]);
	if (Z == "DataSource") {
	    this.on_set_DataSource();
	} else {
	    if (Z == "EditSelectorStyle") {
		this.on_set_EditSelectorStyle();
	    }
	}
	return Y;
    };
    R.prototype._setDynamicModelValues = function G(Z, a, b) {
	if (Z == "EditSelectorStyle") {
	    this.isNde = this._isNde();
	    var Y = this._getApplicableStyles(this.isNde);
	    this._setDynamicListModelValues(a, Y, Z);
	} else {
	    mstr.bones.editors.BoneTranslator.prototype._setDynamicModelValues
		    .apply(this, [ Z, a, b ]);
	}
    };
    R.prototype._isNde = function Q() {
	var b = mstr.controllers.Factory.getPath(
		"parent/items/6/EditSelectorSource", this);
	var Y = b && b.get("selectedIndicesList"), Z, a;
	if (Y != undefined) {
	    a = b.get("items")[Y];
	    Z = a.sty == 12033;
	} else {
	    a = microstrategy.getViewerBone()
		    && microstrategy.getViewerBone().commands
			    .queryState("EditSelectorSource");
	    if (a) {
		Z = a.split("|")[1] == 47;
	    }
	}
	return Z;
    };
    R.prototype._getApplicableStyles = function V(a) {
	var c = [], Y = this.get("SelectorStyles").get("items"), Z, b;
	for (Z = 0; Z < Y.length; Z++) {
	    b = Y[Z];
	    if (a && b.dssid == 9) {
		continue;
	    }
	    c.push(b);
	}
	this.isNde = a;
	return c;
    };
    R.prototype.on_set_ext_prop_EditSelectorSource = function M(Y) {
	var c = this._isNde();
	if (c != this.isNde) {
	    this.isNde = c;
	    var a = this.get("EditSelectorStyle");
	    if (a) {
		var Z = this._getApplicableStyles(c), b = a
			.getSelectedItemValue();
		a.setItems(Z);
		if (b) {
		    a.execSelectValue(b);
		}
	    }
	}
    };
    R.prototype.on_set_ext_prop_IsPortal = function P(Y) {
	var Z = Y.memo.value;
	var a = this.translating;
	this.translating = true;
	this.set("IsPortal", Z);
	this.translating = a;
	if (!this.get("isOneGrid")) {
	    return;
	}
	this.set("showFixedHeightOnly", Z);
	this.set("showFixedFitHeight", !Z);
	this.set("showFixedWidthOnly", Z);
	this.set("showFixedFitWidth", !Z);
	this.set("ExportOverflowVisible", !Z
		&& this.props.XTabView.getSelectedIndex() != 1);
    };
    R.prototype.on_set_DataSource = function F(Y) {
	this.set("enableShortcut", this.props.DataSource
		&& this.props.DataSource.props.selectedCount > 0
		&& !this.props.isCubeReportDataset);
    };
    R.prototype.on_set_XTabView = function J(Y) {
	if (!this.translating) {
	    this.get("parent").notifyPropertyChange("XTabView", Y);
	    this.set("ExportOverflowVisible", !this.get("IsPortal")
		    && (Y.memo.value == 1 || Y.memo.value == 3));
	}
    };
    R.prototype.on_set_Height = function A(Y) {
	if (this._shouldLockRatio()) {
	    this._lockRatio(Y, "Width");
	}
    };
    R.prototype.on_set_Width = function U(Y) {
	if (this._shouldLockRatio()) {
	    this._lockRatio(Y, "Height");
	}
    };
    R.prototype.on_set_ext_prop_EditSelectorType = function H(Y) {
	this.on_set_EditSelectorStyle(Y);
    };
    R.prototype.on_set_EnableSelCount = function H(Y) {
	if (!this.get("EnableSelCount")) {
	    this.set("MaxSel", "");
	    this.set("MinSel", "");
	}
    };
    R.prototype.on_set_ext_prop_isDSAsTarget = function X(Y) {
	this._checkSearchBoxProps(Y);
    };
    R.prototype.on_set_ext_prop_EditSelectorStyle = function T(Y) {
	this._checkSearchBoxProps(Y);
    };
    R.prototype._checkSearchBoxProps = function L(Y) {
	var Z = this.isSearchBox(this);
	this.set("visibleSearchOnServ", Z);
	this.set("ItemWidthModeEnabled", !Z);
	if (Z) {
	    this.get("EditSelectorOrientation").set("selectedIndicesList", 0);
	    var a = this.get("setWidget");
	    if (a) {
		a.set("selectedIndicesList", 0);
	    }
	}
	mstr.bones.editors.ColorLinesPropertiesBoneTranslator.prototype
		.refreshForSearchBox(this.get("parent").get("items")[8], Z);
	mstr.bones.editors.FormatEditingBoneTranslator.prototype
		.refreshForSearchBox(this.get("parent").get("items")[11], Z);
	mstr.bones.editors.FormatEditingBoneTranslator.prototype
		.refreshForSearchBox(this.get("parent").get("items")[12], Z);
	mstr.bones.editors.SelectorPageBoneTranslator.prototype
		.refreshForSearchBox(this.get("parent").get("items")[6], Z);
    };
    R.prototype.on_set_EditSelectorStyle = function N(a) {
	var c = mstr.controllers.Factory.getPath(
		"parent/items/6/EditSelectorType", this);
	var Z, d, e;
	this._checkSearchBoxProps(a);
	if (c.props && c.props.selectedIndicesList != undefined) {
	    Z = c.props.selectedIndicesList == "2";
	    d = c.props.selectedIndicesList == "4";
	    e = c.props.selectedIndicesList == "5";
	} else {
	    Z = microstrategy.getViewerBone()
		    && microstrategy.getViewerBone().commands
			    .queryState("EditSelectorType") == "3";
	    d = microstrategy.getViewerBone()
		    && microstrategy.getViewerBone().commands
			    .queryState("EditSelectorType") == "5";
	    e = microstrategy.getViewerBone()
		    && microstrategy.getViewerBone().commands
			    .queryState("EditSelectorType") == "8";
	}
	if (Z || e) {
	    this.set("EditSelectorMultiSelectEnabled", false);
	    return;
	}
	if (d) {
	    this.set("EditSelectorMultiSelectEnabled", true);
	    return;
	}
	var b = this.get("EditSelectorStyle"), Y = b
		&& b.props.selectedIndicesList;
	switch (Y) {
	case "1":
	case "2":
	case "3":
	case "5":
	case "6":
	case "7":
	    this.set("EditSelectorMultiSelectEnabled", true);
	    break;
	default:
	    this.set("EditSelectorMultiSelectEnabled", false);
	}
	this.set("ChangeSelectionOnMouseOverEnabled",
		(this.props.isSlicingSelector && Y != 7));
    };
    R.prototype._shouldLockRatio = function W() {
	return (!this.translating && !this.adjustingRatio && this
		.get("LockAspectRatio"));
    };
    R.prototype._lockRatio = function K(Y, g) {
	var a = Y.memo, Z = a.value, c = a.name, b = g;
	if (!(D[c] && D[c].hasOwnProperty(b))) {
	    if (!D[c]) {
		D[c] = {};
	    }
	    var e = this.get(b) / a.valueWas;
	    e = isNaN(e) || !isFinite(e) ? 0 : e;
	    D[c][b] = e;
	    if (!D[b]) {
		D[b] = {};
	    }
	    D[b][c] = 1 / e;
	}
	this.adjustingRatio = true;
	this.set(g, Z * D[c][b]);
	this.adjustingRatio = false;
    };
    R.prototype.on_set_LockAspectRatio = function C(Y) {
	if (!Y.memo.value) {
	    D = {};
	}
    };
    R.prototype.isSearchBox = function O(a) {
	var Y = mstr.controllers.Factory.getPath(
		"parent/items/6/EditSelectorType", a);
	var c = mstr.controllers.Factory.getPath(
		"parent/items/1/EditSelectorStyle", a);
	if (Y && c) {
	    var Z = Y.getSelectedItemValue() != null ? Y.getSelectedItemValue()
		    : microstrategy.getViewerBone().commands
			    .queryState("EditSelectorType");
	    var b = c.getSelectedItemValue() != null ? c.getSelectedItemValue()
		    : microstrategy.getViewerBone().commands
			    .queryState("EditSelectorStyle");
	    return (Z == "1" && b == "9");
	}
	return false;
    };
    function R(Y) {
	mstr.bones.editors.BoneTranslator.apply(this, [ Y ]);
    }
    return R;
})();
mstr.bones.editors.GridPropertiesBoneTranslator = (function() {
    mstr.$O.extendsClass(D, mstr.bones.editors.BoneTranslator);
    D.prototype.translateBone = function B() {
	mstr.bones.editors.BoneTranslator.prototype.translateBone.apply(this);
	this.translating = true;
	this.on_set_DrillOptions();
	this.translating = false;
    };
    D.prototype.on_set_DrillOptions = function C(E) {
	var F = (E && E.memo && E.memo.value);
	if (F == null) {
	    F = this.get("DrillOptions").getSelectedItemValue();
	}
	if (F == "") {
	    return;
	}
	this
		.set(
			"showSyncDrillingOpt",
			(F == 2)
				&& mstr.behaviors.featureResolver
					.featAvailable(microstrategy.FEATURE_RW_EDITABLE_VIEW_MODE_EPLUS));
    };
    D.prototype.IF_MODE_ROWS = "1";
    D.prototype.IF_MODE_BLOCKS = "2";
    D.prototype.on_set_gridIfRowMode = function A(K) {
	var E = (K && K.memo && K.memo.value);
	if (E == null) {
	    E = this.get("gridIfRowMode").getSelectedItemValue();
	}
	if (E == "") {
	    return;
	}
	var G = this.getBone(), H = G.doc.selections.getSelectedGrid(), F = microstrategy
		.findBone(H), J = F.ifTotalRows, I = F.ifTotalBlocks, L = this
		.get("gridIfMaxRows"), M = L;
	if (J && I) {
	    if (E === this.IF_MODE_ROWS) {
		M = Math.round(L * J / I) || 1;
	    } else {
		M = Math.round(L * I / J) || 1;
	    }
	} else {
	    M = 1;
	}
	this.set("gridIfMaxRows", M);
    };
    function D(E) {
	mstr.bones.editors.BoneTranslator.apply(this, [ E ]);
    }
    return D;
})();
mstr.bones.editors.NumberPropertiesBoneTranslator = (function() {
    mstr.$O.extendsClass(D, mstr.bones.editors.FormatEditingBoneTranslator);
    D.prototype.init = function F() {
	mstr.bones.editors.FormatEditingBoneTranslator.prototype.init
		.apply(this);
	this.attachEventListener(this, "set_Category", "_buildFormatString");
	this.attachEventListener(this, "set_DecimalPlaces",
		"_buildFormatString");
	this.attachEventListener(this, "set_ThousandSeparator",
		"_buildFormatString");
	this.attachEventListener(this, "set_CurrencySymbol",
		"_buildFormatString");
	this.attachEventListener(this, "set_CurrencyPosition",
		"_buildFormatString");
	this.get("NegativeNumbers").attachEventListener(this,
		"hashadd_selectedIndices", "_buildFormatString");
	this.get("Date").attachEventListener(this, "hashadd_selectedIndices",
		"_buildFormatString");
	this.get("Time").attachEventListener(this, "hashadd_selectedIndices",
		"_buildFormatString");
	this.get("Fraction").attachEventListener(this,
		"hashadd_selectedIndices", "_buildFormatString");
    };
    D.prototype.translateBone = function E() {
	mstr.bones.editors.FormatEditingBoneTranslator.prototype.translateBone
		.apply(this);
	var J = this.get("Format");
	var L = this.get("Category").getSelectedItem();
	L = L ? parseInt(L.dssid) : -2;
	switch (L) {
	case -2:
	case 9:
	    if (this.get("Format") == "General") {
		var K = this.translating;
		this.translating = true;
		this.set("Format", "");
		this.translating = K;
	    }
	    break;
	case 0:
	case 1:
	case 4:
	    this._rebuildNegativeNumberField(this._buildDecimalString(true));
	    break;
	case 2:
	    this.get("Date").execSelectValue(J);
	    break;
	case 3:
	    this.get("Time").execSelectValue(J);
	    break;
	case 5:
	    this.get("Fraction").execSelectValue(J);
	    break;
	}
    };
    D.prototype.onModelPropertyChange = function H(J) {
	mstr.bones.editors.FormatEditingBoneTranslator.prototype.onModelPropertyChange
		.apply(this, [ J ]);
	this._buildFormatString(J);
    };
    D.prototype._buildDecimalString = function I(N) {
	var J = "";
	var L = parseInt(this.get("DecimalPlaces"));
	for ( var K = 0; K < L; K++) {
	    J += "0";
	}
	var M = ".";
	if (N) {
	    M = mstr.$obj("mstrPageInfo").get("userInfo").get(
		    "decimalSeparator");
	}
	return (J.length > 0) ? M + J : "";
    };
    D.prototype._addNegativeFormatString = function A(J) {
	switch (this.get("NegativeNumbers").getSelectedIndex()) {
	case 1:
	    return J + ";[RED]-" + J;
	case 2:
	    return J + ";[RED]" + J;
	case 3:
	    return J + ";(" + J + ")";
	case 4:
	    return J + ";[RED](" + J + ")";
	default:
	    return J;
	}
    };
    D.prototype._addCurrencySymbolFormatString = function C(J) {
	var K = "";
	var L = this.get("CurrencySymbol");
	switch (this.get("CurrencyPosition").getSelectedIndex()) {
	case 1:
	    K = J + '"' + L + '"';
	    break;
	case 2:
	    K = '"' + L + ' "' + J;
	    break;
	case 3:
	    K = J + '" ' + L + '"';
	    break;
	default:
	    K = '"' + L + '"' + J;
	}
	return this._addNegativeFormatString(K);
    };
    D.prototype._buildFormatString = function B(M) {
	var O = this.get("Category").getSelectedItem();
	if (!O) {
	    return;
	}
	var K = parseInt(O.dssid);
	if (K == 7) {
	    return;
	}
	var J = this._buildDecimalString();
	if (K == 0 || K == 1 || K == 4) {
	    this._rebuildNegativeNumberField(this._buildDecimalString(true));
	}
	var N = (this.get("ThousandSeparator")) ? "," : "";
	var L = "";
	switch (K) {
	case 0:
	    L = this._addNegativeFormatString("#" + N + "##0" + J);
	    break;
	case 1:
	    L = this._addCurrencySymbolFormatString("#,##0" + J);
	    break;
	case 2:
	    L = this.get("Date").getSelectedItem()["dssid"];
	    break;
	case 3:
	    L = this.get("Time").getSelectedItem()["dssid"];
	    break;
	case 4:
	    L = this._addNegativeFormatString("0" + J + "%");
	    break;
	case 5:
	    L = this.get("Fraction").getSelectedItem()["dssid"];
	    break;
	case 6:
	    L = "0" + J + "E+00";
	}
	this.set("Format", L);
    };
    D.prototype._rebuildNegativeNumberField = function G(Q) {
	var L = this.translating;
	this.translating = true;
	var J = this.get("NegativeNumbers");
	var P = mstr.utils.Hash.deepClone(J.getItems());
	var T = J.getSelectedItem() && J.getSelectedItem()["dssid"];
	J.detachEventListener(this, "hashadd_selectedIndices");
	J.detachEventListener(this, "hashremove_selectedIndices");
	var N = this.get("Red");
	var K = this.getBone().commands.queryState("textfieldSelected") ? "color:red;display:block;"
		: "color:red;display:none;";
	var S = mstr.Settings.Locale.THOUSANDSEP;
	var R = parseInt(this.get("Category").getSelectedItem()["dssid"]);
	switch (R) {
	case 0:
	    S = (this.get("ThousandSeparator")) ? S : "";
	    P[0]["n"] = "-1" + S + "234" + Q;
	    P[1]["n"] = "-1" + S + "234" + Q + " [" + N + "]";
	    P[1]["cssText"] = K;
	    P[2]["n"] = "1" + S + "234" + Q + " [" + N + "]";
	    P[2]["cssText"] = K;
	    P[3]["n"] = "(1" + S + "234" + Q + ")";
	    P[4]["n"] = "(1" + S + "234" + Q + ") [" + N + "]";
	    P[4]["cssText"] = K;
	    break;
	case 1:
	    var O = "";
	    var U = "";
	    var M = this.get("CurrencySymbol");
	    switch (this.get("CurrencyPosition").getSelectedIndex()) {
	    case 2:
		O += " ";
	    case 0:
		O = M + O;
		break;
	    case 3:
		U += " ";
	    case 1:
		U += M;
		break;
	    }
	    P[0]["n"] = O + "-1" + S + "234" + Q + U;
	    P[1]["n"] = O + "-1" + S + "234" + Q + U + " [" + N + "]";
	    P[1]["cssText"] = K;
	    P[2]["n"] = O + "1" + S + "234" + Q + U + " [" + N + "]";
	    P[2]["cssText"] = K;
	    P[3]["n"] = "(" + O + "1" + S + "234" + Q + U + ")";
	    P[4]["n"] = "(" + O + "1" + S + "234" + Q + U + ") [" + N + "]";
	    P[4]["cssText"] = K;
	    break;
	case 4:
	    P[0]["n"] = "-123" + Q + "%";
	    P[1]["n"] = "-123" + Q + "% [" + N + "]";
	    P[1]["cssText"] = K;
	    P[2]["n"] = "123" + Q + "% [" + N + "]";
	    P[2]["cssText"] = K;
	    P[3]["n"] = "(123" + Q + "%)";
	    P[4]["n"] = "(123" + Q + "%) [" + N + "]";
	    P[4]["cssText"] = K;
	    break;
	}
	J.setItems(P);
	if (T) {
	    J.execSelectValue(T);
	}
	J.attachEventListener(this, "hashadd_selectedIndices",
		"onModelPropertyChange");
	J.attachEventListener(this, "hashremove_selectedIndices",
		"onModelPropertyChange");
	this.translating = L;
    };
    function D(J) {
	mstr.bones.editors.FormatEditingBoneTranslator.apply(this, [ J ]);
    }
    return D;
})();
mstr.bones.editors.ColorLinesPropertiesBoneTranslator = (function() {
    mstr.$O.extendsClass(C, mstr.bones.editors.FormatEditingBoneTranslator);
    C.prototype.on_set_enableBorders = function G(H) {
	var I = mstr.controllers.Factory.safeget;
	this.resolveBorderEnablement(H.memo.value, I(this.get("parent").get(
		"items")[12], "enabled3d"));
    };
    C.prototype.on_set_ext_prop_enabled3d = function D(H) {
	this.resolveBorderEnablement(this.get("enableBorders"), H.memo.value);
    };
    C.prototype.resolveBorderEnablement = function B(I, H) {
	this.set("enableBordersNot3d", I && !H);
    };
    C.prototype.translateBone = function F() {
	mstr.bones.editors.FormatEditingBoneTranslator.prototype.translateBone
		.apply(this);
	this.translating = true;
	var H = mstr.bones.editors.LayoutPropertiesBoneTranslator.prototype
		.isSearchBox(this);
	this.refreshForSearchBox(this, H);
	this.translating = false;
    };
    C.prototype.refreshForSearchBox = function A(L, J) {
	var M = microstrategy.formatType;
	var I = L.get("parent").get("edtValueSelector");
	var K = I.get("items");
	var H = mstr.$A.findByForm(K, 4, "dssid", false);
	if (J && H >= 0) {
	    I.set("selectedIndicesList", H);
	}
	I.set("formatEnabled", !J);
	microstrategy.formatType = M;
    };
    C.prototype.on_set_ext_prop_ButtonDisplayStyle = function E(H) {
	var I = Number(H.memo.value);
	var J = this.get("visibleField");
	switch (I) {
	case microstrategy.BUTTON_STYLE_CAPTION_ONLY:
	case microstrategy.BUTTON_STYLE_ICON_LEFT:
	case microstrategy.BUTTON_STYLE_ICON_RIGHT:
	case microstrategy.BUTTON_STYLE_ICON_TOP:
	case microstrategy.BUTTON_STYLE_ICON_ONLY:
	    this.set(J, true);
	    break;
	case microstrategy.BUTTON_STYLE_CUSTOM:
	    this.set(J, false);
	    break;
	}
    };
    function C(H) {
	mstr.bones.editors.FormatEditingBoneTranslator.apply(this, [ H ]);
    }
    return C;
})();
mstr.bones.editors.ThemePropertiesBoneTranslator = (function() {
    mstr.$O.extendsClass(D, mstr.bones.editors.FormatEditingBoneTranslator);
    function D(I) {
	mstr.bones.editors.FormatEditingBoneTranslator.apply(this, [ I ]);
    }
    D.prototype._resolveAppliedThemeTypeSelected = function H() {
	var J = this.get("appliedThemeID"), I = this.get("appliedThemeType"), K = this
		.get("appliedThemeTypes");
	if (!K) {
	    return;
	}
	switch (I) {
	case microstrategy.APPLIED_THEME_NONE:
	case microstrategy.APPLIED_THEME_CUSTOM:
	    K.execSelectValue(I);
	    break;
	case microstrategy.APPLIED_THEME_DEFAULT:
	    K.execSelectValue(J);
	    break;
	}
    };
    D.prototype._resolveAppliedThemeAsLink = function G() {
	var I = this.get("appliedThemeAsLink"), J = this
		.get("appliedThemeAsTypes");
	if (!J) {
	    return;
	}
	J.execSelectValue(I ? "1" : "0");
    };
    D.prototype.translateBone = function F() {
	mstr.bones.editors.BoneTranslator.prototype.translateBone.apply(this);
	this.translating = true;
	this._resolveAppliedThemeTypeSelected();
	this._resolveAppliedThemeAsLink();
	this.translating = false;
    };
    D.prototype._handleAppliedThemeTypeChange = function E(I) {
	if (this.translating) {
	    return;
	}
	var K = this.get("appliedThemeTypes"), J = K.getSelectedItemValue();
	if (J === microstrategy.APPLIED_THEME_CUSTOM) {
	    this.set("appliedThemeType", J);
	    this.set("appliedThemeID", null);
	    this.set("showAppliedThemeAsType", true);
	    this.set("showCustomThemePicker", true);
	} else {
	    if (J === microstrategy.APPLIED_THEME_NONE) {
		this.set("appliedThemeType", J);
		this.set("appliedThemeID", null);
		this.set("showAppliedThemeAsType", false);
		this.set("showCustomThemePicker", false);
	    } else {
		this.set("appliedThemeType",
			microstrategy.APPLIED_THEME_DEFAULT);
		this.set("appliedThemeID", J);
		this.set("showAppliedThemeAsType", true);
		this.set("showCustomThemePicker", false);
	    }
	}
    };
    D.prototype._handleAppliedThemeAsTypeChange = function A(I) {
	if (this.translating) {
	    return;
	}
	var K = this.get("appliedThemeAsTypes"), J = K.getSelectedItemValue();
	this.set("appliedThemeAsLink", J === "0" ? false : true);
    };
    D.prototype.onModelPropertyChange = function C(I) {
	mstr.bones.editors.BoneTranslator.prototype.onModelPropertyChange
		.apply(this, [ I ]);
	if (this.get("appliedThemeTypes") == I.src
		&& I.name == "hashadd_selectedIndices") {
	    this._handleAppliedThemeTypeChange(I);
	} else {
	    if (this.get("appliedThemeAsTypes") == I.src
		    && I.name == "hashadd_selectedIndices") {
		this._handleAppliedThemeAsTypeChange(I);
	    }
	}
    };
    D.prototype.execBrowseTheme = function B(J) {
	var L = microstrategy.getViewerBone(), I = L.saveFolderId ? L.saveFolderId
		: L.parentFolderID, K = this;
	microstrategy.showApplyThemeEditor(false, null, function(O, N, M) {
	    K.set("appliedThemeID", O);
	    K.set("appliedThemePath", encode(M));
	});
    };
    return D;
})();
mstr.bones.editors.DocAdvancedBoneTranslator = (function() {
    mstr.$O.extendsClass(A, mstr.bones.editors.BoneTranslator);
    A.prototype._storeDeltaProp = function B(E, C) {
	mstr.bones.editors.BoneTranslator.prototype._storeDeltaProp.apply(this,
		arguments);
	if (E == "RefreshDocument" && C) {
	    var D = "RefreshFrequency";
	    this._storeDeltaProp(D, this.get(D));
	}
    };
    function A(C) {
	mstr.bones.editors.BoneTranslator.apply(this, [ C ]);
    }
    return A;
})();
mstr.bones.editors.DocMobileBoneTranslator = (function() {
    mstr.$O.extendsClass(B, mstr.bones.editors.BoneTranslator);
    B.prototype.set = function A(D, C) {
	mstr.bones.editors.BoneTranslator.prototype.set.apply(this, [ D, C ]);
    };
    function B(C) {
	mstr.bones.editors.BoneTranslator.apply(this, [ C ]);
    }
    return B;
})();
mstr.bones.editors.PageSetupPageBoneTranslator = (function() {
    mstr.$O.extendsClass(E, mstr.bones.editors.BoneTranslator);
    E.prototype.init = function C() {
	mstr.bones.editors.BoneTranslator.prototype.init.apply(this);
	this.attachEventListener(this, "set_PageWidth",
		"_handlePaperSizeChange");
	this.attachEventListener(this, "set_PageHeight",
		"_handlePaperSizeChange");
	this.attachEventListener(this, "set_ScalePercentage",
		"_handleScalingChange");
	this.attachEventListener(this, "set_ScalePagesWide",
		"_handleScalingChange");
	this.attachEventListener(this, "set_ScalePagesTall",
		"_handleScalingChange");
    };
    E.prototype._handlePaperSizeChange = function D(O) {
	if (this.translating || this.changingPaperSize) {
	    return;
	}
	if (O.name == "hashremove_selectedIndices") {
	    return;
	}
	this.changingPaperSize = true;
	var J, M, N, H, L;
	var P = this.get("PaperType");
	var G = this.get("PaperOrientation");
	var F = O.src;
	if (F == this) {
	    J = parseFloat(microstrategy.number.toUSUnits(this
		    .get("PageHeight"), true), 10);
	    M = parseFloat(microstrategy.number.toUSUnits(
		    this.get("PageWidth"), true), 10);
	    N = G.getSelectedIndex();
	    if (N == 0 && M > J) {
		G.execSingleSelect(1);
	    } else {
		if (N == 1 && J > M) {
		    G.execSingleSelect(0);
		}
	    }
	    H = Math.min(J, M);
	    L = Math.max(J, M);
	    if (!P.execSelectString(".*," + H + "," + L, P.get("valueForm"))) {
		P.execClearSelect();
	    }
	} else {
	    if (F == P) {
		var N = P.getSelectedItemValue().split(",").slice(1);
		var K = [ "PageWidth", "PageHeight" ];
		if (G.getSelectedIndex() != 0) {
		    K.reverse();
		}
		for ( var I = 0; I < N.length; I++) {
		    this.set(K[I], microstrategy.number.toUserUnits(N[I]));
		}
	    } else {
		J = parseFloat(microstrategy.number.toUSUnits(this
			.get("PageHeight")), 10);
		M = parseFloat(microstrategy.number.toUSUnits(this
			.get("PageWidth")), 10);
		H = Math.min(J, M);
		L = Math.max(J, M);
		H = microstrategy.number.toUserUnits(H);
		L = microstrategy.number.toUserUnits(L);
		N = G.getSelectedIndex();
		if (N == 0) {
		    if (J != L) {
			this.set("PageHeight", L);
			this.set("PageWidth", H);
		    }
		} else {
		    if (J != H) {
			this.set("PageHeight", H);
			this.set("PageWidth", L);
		    }
		}
	    }
	}
	this.changingPaperSize = false;
    };
    E.prototype.onModelPropertyChange = function A(F) {
	mstr.bones.editors.BoneTranslator.prototype.onModelPropertyChange
		.apply(this, [ F ]);
	if (F.src == this.get("PaperType")
		|| F.src == this.get("PaperOrientation")) {
	    this._handlePaperSizeChange(F);
	}
    };
    E.prototype._handleScalingChange = function B(F) {
	if (this.translating || this.changingScale) {
	    return;
	}
	this.changingScale = true;
	var H = this.get("Scaling");
	var G = H.getSelectedIndex();
	if (F.name == "set_ScalePercentage") {
	    if (G != 0) {
		H.execSingleSelect(0);
	    }
	} else {
	    if (G != 1) {
		H.execSingleSelect(1);
	    }
	}
	this.changingScale = false;
    };
    function E(F) {
	mstr.bones.editors.BoneTranslator.apply(this, [ F ]);
    }
    return E;
})();
mstr.bones.editors.ButtonPropertiesBoneTranslator = (function() {
    mstr.$O.extendsClass(A, mstr.bones.editors.BoneTranslator);
    A.prototype.on_set_DisplayStyle = function D(E) {
	var F = E.memo.value;
	this._onSetDisplayStyle(F);
	this.get("parent").notifyPropertyChange("ButtonDisplayStyle", E);
    };
    A.prototype._onSetDisplayStyle = function B(F) {
	F = Number(F);
	var E = this;
	function G(H) {
	    E.set("normalURLEnable", H);
	    E.set("highlightURLEnable", H);
	}
	switch (F) {
	case microstrategy.BUTTON_STYLE_CAPTION_ONLY:
	    G(false);
	    break;
	case microstrategy.BUTTON_STYLE_ICON_ONLY:
	case microstrategy.BUTTON_STYLE_ICON_LEFT:
	case microstrategy.BUTTON_STYLE_ICON_RIGHT:
	case microstrategy.BUTTON_STYLE_ICON_TOP:
	case microstrategy.BUTTON_STYLE_CUSTOM:
	    G(true);
	    break;
	}
	if (this.get("isInsideNavBar")) {
	    this.set("highlightURLEnable", false);
	}
    };
    A.prototype.translateBone = function C() {
	mstr.bones.editors.BoneTranslator.prototype.translateBone.apply(this);
	this.translating = true;
	displayStyleValue = this.get("DisplayStyle").getSelectedItemValue();
	this._onSetDisplayStyle(displayStyleValue);
	this.translating = false;
    };
    function A(E) {
	mstr.bones.editors.BoneTranslator.apply(this, [ E ]);
    }
    return A;
})();
mstr.bones.editors.DocumentTabBoneTranslator = (function() {
    mstr.$O.extendsClass(A, mstr.bones.editors.BoneTranslator);
    A.prototype.on_set_ExecutionFullScreenMode = function B(F) {
	if (F.memo.value) {
	    this.set("ShowingBarsTemporarily", true);
	}
    };
    A.prototype.on_set_DefaultViewMode = function E(N) {
	var G = this.get("DefaultViewMode");
	var L = mstr.utils.Hash.firstKey(N.memo.valueWas);
	var M = G.getItems()[L][G.get("valueForm")];
	switch (N.memo.src) {
	case "hashremove_selectedIndices":
	    this.cache = {};
	    this.cache[M] = true;
	    break;
	case "hashadd_selectedIndices":
	    this.cache[M] = false;
	    this.changingRunMode = true;
	    var I = this.get("AvailableViewModes");
	    var F = this.get("AvailableExportModes");
	    var H = I.getSelectedItems();
	    var K = F.getSelectedItems();
	    I.execEnableIndices(this.cache);
	    F.execEnableIndices(this.cache);
	    var J = function(O, S, Q) {
		var P = O.getSelectedItems();
		outer: for (f1 in P) {
		    if (Q[P[f1].dssid] != undefined) {
			continue;
		    }
		    for (f2 in S) {
			if (S[f2].dssid == P[f1].dssid) {
			    continue outer;
			}
		    }
		    var R = O.indexOfItem(P[f1]);
		    O.execRemoveSelect(R);
		}
	    };
	    J(F, K, this.cache);
	    J(I, H, this.cache);
	    this.changingRunMode = false;
	    if (!this._selectDefaultRunMode(I, M)) {
		this._selectDefaultRunMode(F, M);
	    }
	    break;
	}
    };
    A.prototype._selectDefaultRunMode = function C(F, G) {
	var H = F.indexOfValue(G);
	if (H == -1) {
	    return false;
	}
	var I = F.getSelectedIndices();
	if (!(H in I)) {
	    F.execAddSelect(H);
	}
	return true;
    };
    A.prototype.onModelPropertyChange = function D(F) {
	if (this.changingRunMode) {
	    return;
	}
	mstr.bones.editors.BoneTranslator.prototype.onModelPropertyChange
		.apply(this, [ F ]);
    };
    function A(F) {
	mstr.bones.editors.BoneTranslator.apply(this, [ F ]);
    }
    return A;
})();
mstr.bones.editors.WidgetBoneTranslator = (function() {
    mstr.$O.extendsClass(W, mstr.bones.editors.BoneTranslator);
    W.prototype.execOpenWidgets = function M(l) {
	var g = getObjSumLeft(l), m = getObjSumTop(l) + getObjHeight(l), h;
	microstrategy.openBlockLoaderEditor("addWidgetMenu",
		"InsertMenuBlockLoader", null, {
		    cssText : "position:absolute;top:" + m + "px;left:" + g
			    + "px;z-index:"
			    + mstr.views.FloatingMenuBook.prototype.getZIndex()
			    + ";",
		    useFixedPosition : "false",
		    contextMenuName : "insertWidgetEditor",
		    viewer : "#widgetBoneTranslator"
		}, this, null, h);
    };
    W.prototype.execOpenVisPropsEditor = function F(o) {
	var l = microstrategy.getViewerBone();
	if (l) {
	    var n = l.gridWidgets.lst;
	    var u = n[this.props.widgetId];
	    if (u && u.edt) {
		var s = l.doc.selections.getSelectedGrid();
		if (s) {
		    var h = microstrategy.findBone(s);
		    if (h) {
			if (this.isMojoVis(u.edt)) {
			    if (this.props.hasChanges) {
				var t = this.props.parent.props.parent.props.models[0];
				t.execPreviewChanges();
			    }
			    return h.docViewer.commands.exec(
				    "mojoVisPropsEditor", u.edt);
			}
			var r = microstrategy.VIS_EDITOR_SCOPE_RW_GRID;
			var q = [ r, u.edt, "" ];
			q.push(this.props.WidgetProps || "");
			var g = this.deltaProps["default"];
			var m = (g && g.SecondaryDataProviders) ? g.SecondaryDataProviders
				: this.props.SecondaryDataProvidersValue;
			q.push(m || "");
			h.commands.exec("visPropsEditor", q);
		    }
		}
	    }
	}
    };
    W.prototype.commands = {
	getTranslator : function() {
	    if (!this.t) {
		this.t = mstr.$obj("widgetBoneTranslator");
	    }
	    return this.t;
	},
	queryEnabled : function() {
	    return true;
	},
	queryVisible : function() {
	    return true;
	},
	queryState : function() {
	    return true;
	},
	exec : function(g) {
	    var l = this.getTranslator();
	    var h = g.split(";")[1];
	    l.set("widgetId", h);
	}
    };
    W.prototype.on_set_widgetId = function I(g) {
	var h = g.memo.value;
	this.set("ADisplayEnabled", h != "");
	this.updateWidgetInfo(h);
    };
    W.prototype.updateWidgetInfo = function a(l) {
	var z = this.getWidgetObj(l);
	if (z) {
	    var m = microstrategy.getViewerBone();
	    this.setupSecondaryDataProviders(z);
	    this.set("widgetName", z.t);
	    this.set("FlashDisplayEnabled", !!z.wgt);
	    this.set("DHTMLDisplayEnabled", !!z.vis);
	    this.set("iPhoneDisplayEnabled", !!z.iphVis);
	    this.set("iPadDisplayEnabled", !!z.ipadVis);
	    this.updateIPhoneFullscreen();
	    this.set("AndroidDisplayEnabled", !!z.aVis);
	    this.set("AndroidTabletDisplayEnabled", !!z.atVis);
	    this.set("AndroidDisplayFullScreenEnabled",
		    !!this.props.AndroidDisplayEnabled && m.isMultiLayout);
	    if (!this.translating) {
		this.sureBoolSet("FlashDisplay",
			!!this.props.FlashDisplayEnabled);
		this.sureBoolSet("DHTMLDisplay",
			!!this.props.DHTMLDisplayEnabled && z.vis.vm != 50);
		this.sureBoolSet("iPhoneDisplay",
			!!this.props.iPhoneDisplayEnabled);
		this.sureBoolSet("iPhoneDisplayFullScreen",
			!!this.props.iPhoneDisplayEnabled);
		this
			.sureBoolSet("iPadDisplay",
				!!this.props.iPadDisplayEnabled);
		this.sureBoolSet("AndroidDisplay",
			!!this.props.AndroidDisplayEnabled);
		this.sureBoolSet("AndroidTabletDisplay",
			!!this.props.AndroidTabletDisplayEnabled);
		this.sureBoolSet("AndroidDisplayFullScreen",
			!!this.props.AndroidDisplayEnabled);
		this.set("WidgetProps", "");
	    } else {
		var y = m.commands.queryState("setWidget");
		if (y && y != "None") {
		    var m = microstrategy.getViewerBone(), q = !!m
			    && m.gridWidgets && m.gridWidgets.lst;
		    for ( var o in q) {
			var x = q[o];
			if (x.wgt && (x.wgt.rsl == y || x.wgt.cn == y)) {
			    this.set("FlashDisplay", l == o);
			    break;
			}
		    }
		}
		var u = m.doc.selections.getSelectedGrid();
		if (u) {
		    var h = microstrategy.findBone(u);
		    if (h) {
			this.set("DHTMLDisplay", z.vis
				&& z.vis.s == h.selectedVisualization
				&& h.isVisualization);
			this.set("iPadDisplay", z.ipadVis
				&& z.ipadVis.s == h.iPadVis);
		    }
		}
		var n = z.iphVis && z.iphVis.s == m.iPhoneVis;
		var g = z.iphVis && z.iphVis.s == h.iPhoneVis;
		this.set("iPhoneDisplay", n || g);
		this.set("iPhoneDisplayFullScreen", n);
		var s = z.aVis && z.aVis.s == m.aVis;
		var r = z.aVis && z.aVis.s == h.aVis;
		this.set("AndroidDisplay", s || r);
		if (m.aVis) {
		    this._storeDeltaProp("AndroidDisplay", true);
		}
		var t = z.atVis && z.atVis.s == h.atVis;
		this.set("AndroidTabletDisplay", t);
	    }
	    this.set("OpenVisPropsEditor", z.edt);
	} else {
	    this.props.NonFlashRender.execSelectValue(0);
	    this
		    .set("widgetName", microstrategy.descriptors
			    .getDescriptor(181));
	    this.sureBoolSet("FlashDisplayEnabled", false);
	    this.sureBoolSet("DHTMLDisplayEnabled", false);
	    this.sureBoolSet("iPhoneDisplayEnabled", false);
	    this.sureBoolSet("iPadDisplayEnabled", false);
	    this.sureBoolSet("AndroidDisplayEnabled", false);
	    this.sureBoolSet("AndroidTabletDisplayEnabled", false);
	    this.sureBoolSet("FlashDisplay", false);
	    this.sureBoolSet("DHTMLDisplay", false);
	    this.sureBoolSet("iPadDisplay", false);
	    this.sureBoolSet("AndroidDisplay", false);
	    this.sureBoolSet("AndroidTabletDisplay", false);
	    this.sureBoolSet("iPhoneDisplay", false);
	    this.sureBoolSet("iPhoneDisplayFullScreen", false);
	    this.sureBoolSet("AndroidDisplayFullScreen", false);
	}
	this.updateLabelsForAltDisplay();
	this.updateFlashDisplayLabel();
	this.updateIPhoneDisplayLabel();
	this.updateIPadDisplayLabel();
	this.updateAndroidDisplayLabel();
	this.updateAndroidTabletDisplayLabel();
    };
    W.prototype.sureBoolSet = function L(h, g) {
	if (g == this.props[h]) {
	    this.props[h] = !g;
	}
	this.set(h, g);
    };
    W.prototype.setupSecondaryDataProviders = function J(g) {
	if (!g) {
	    g = this.getWidgetObj(this.props.widgetId);
	}
	if (!g) {
	    this.set("showSecondaryDataProviders", false);
	    return;
	}
	if ((!!this.props.FlashDisplay || !!this.props.DHTMLDisplay
		|| !!this.props.iPadDisplay || !!this.props.AndroidDisplay
		|| !!this.props.AndroidTabletDisplay || !!this.props.iPhoneDisplay)
		&& (g.smn > 0 || g.smx > 0)) {
	    this.set("showSecondaryDataProviders", true);
	    this.validateSecondaryDataProviders();
	} else {
	    this.set("showSecondaryDataProviders", false);
	    if (!this.translating) {
		this.get("parent").set("enableOk", true);
		this.get("parent").set("enablePreview", true);
	    }
	}
    };
    W.prototype.validateSecondaryDataProviders = function d(g) {
	var h = this.get("SecondaryDataProviders"), m = h
		&& h.get("selected").get("items").length, l = this
		.getWidgetObj(this.get("widgetId"));
	if (!l) {
	    return;
	}
	if (m < l.smn || m > l.smx) {
	    this.get("parent").set("enableOk", false);
	    this.get("parent").set("enablePreview", false);
	} else {
	    this.get("parent").set("enableOk", true);
	    this.get("parent").set("enablePreview", true);
	}
    };
    W.prototype.on_set_SecondaryDataProviders = function b(g) {
	this.validateSecondaryDataProviders();
    };
    W.prototype.on_set_FlashDisplay = function N(g) {
	this.setupSecondaryDataProviders();
	this.updateFlashDisplayLabel();
    };
    W.prototype.updateFlashDisplayLabel = function R() {
	this.set("FlashDisplayLabel",
		!!this.props.FlashDisplay ? this.props.widgetName
			: microstrategy.descriptors.getDescriptor(7759));
    };
    W.prototype.on_set_DHTMLDisplay = function c(g) {
	this.setupSecondaryDataProviders();
	this.set("DHTMLDisplayLabel", g.memo.value ? this.props.widgetName
		: this.props.PDFExcelDisplayLabel);
    };
    W.prototype.on_set_iPhoneDisplay = function Q(g) {
	this.setupSecondaryDataProviders();
	this.updateIPhoneDisplayLabel();
    };
    W.prototype.on_set_iPhoneDisplayFullScreen = function E(g) {
	this.sureBoolSet("iPhoneDisplay", !!this.props.iPhoneDisplay);
    };
    W.prototype.updateIPhoneDisplayLabel = function H() {
	this.set("iPhoneDisplayLabel",
		!!this.props.iPhoneDisplay ? this.props.widgetName
			: microstrategy.descriptors.getDescriptor(7759));
    };
    W.prototype.updateIPhoneFullscreen = function U() {
	this.set("iPhoneDisplayFullScreenEnabled", !!this.props.iPhoneDisplay
		&& !!this.props.iPhoneDisplayEnabled
		&& microstrategy.getViewerBone().isMultiLayout);
    };
    W.prototype.on_set_iPadDisplay = function e(g) {
	this.setupSecondaryDataProviders();
	this.updateIPadDisplayLabel();
    };
    W.prototype.updateIPadDisplayLabel = function C() {
	this.set("iPadDisplayLabel",
		!!this.props.iPadDisplay ? this.props.widgetName
			: microstrategy.descriptors.getDescriptor(7759));
    };
    W.prototype.on_set_AndroidDisplay = function T(g) {
	this.setupSecondaryDataProviders();
	this.updateAndroidDisplayLabel();
    };
    W.prototype.on_set_AndroidTabletDisplay = function K(g) {
	this.setupSecondaryDataProviders();
	this.updateAndroidTabletDisplayLabel();
    };
    W.prototype.on_set_AndroidDisplayFullScreen = function Y(g) {
	this.sureBoolSet("AndroidDisplay", !!this.props.AndroidDisplay);
    };
    W.prototype.on_set_mojoVisPropsChanged = function D(g) {
	if (g.memo.value) {
	    this.setupSecondaryDataProviders();
	}
    };
    W.prototype.updateAndroidDisplayLabel = function A() {
	this.set("AndroidDisplayLabel",
		!!this.props.AndroidDisplay ? this.props.widgetName
			: microstrategy.descriptors.getDescriptor(7759));
    };
    W.prototype.updateAndroidTabletDisplayLabel = function G() {
	this.set("AndroidTabletDisplayLabel",
		!!this.props.AndroidTabletDisplay ? this.props.widgetName
			: microstrategy.descriptors.getDescriptor(7759));
    };
    W.prototype.on_set_NonFlashRender = function Z(g) {
	this.updateLabelsForAltDisplay();
    };
    W.prototype.updateLabelsForAltDisplay = function P() {
	this
		.set(
			"PDFExcelDisplayLabel",
			this
				.getAltDisplayLabel(this.props.NonFlashRender.props.selectedIndicesList));
	this.set("DHTMLDisplayLabel",
		!!this.props.DHTMLDisplay ? this.props.widgetName
			: this.props.PDFExcelDisplayLabel);
    };
    W.prototype.getAltDisplayLabel = function S(g) {
	var h = 7759;
	if (g == "1") {
	    h = 7760;
	} else {
	    if (g == "2") {
		h = 7761;
	    }
	}
	return microstrategy.descriptors.getDescriptor(h);
    };
    W.prototype.getWidgetObj = function V(l) {
	var h = microstrategy.getViewerBone(), g = !!h && h.gridWidgets
		&& h.gridWidgets.lst;
	return !!g && g[l];
    };
    W.prototype.isMojoVis = function B(g) {
	return [ "GraphMatrixVisualizationStyle",
		"VIHeatMapVisualizationStyle", "NetworkVisualizationStyle" ]
		.indexOf(g) > -1;
    };
    W.prototype.onModelPropertyChange = function X(g) {
	mstr.bones.editors.BoneTranslator.prototype.onModelPropertyChange
		.apply(this, [ g ]);
	this.validateSecondaryDataProviders(g);
    };
    W.prototype.translateBone = function O() {
	this.props.widgetId = "-1";
	mstr.bones.editors.BoneTranslator.prototype.translateBone.apply(this);
    };
    function W(g) {
	mstr.bones.editors.BoneTranslator.apply(this, [ g ]);
    }
    return W;
})();
mstr.bones.editors.OnlineBoneTranslator = (function() {
    mstr.$O.extendsClass(D, mstr.bones.editors.BoneTranslator);
    D.prototype.init = function C() {
	mstr.bones.editors.BoneTranslator.prototype.init.apply(this);
	if (!this.get("boneModel")) {
	    return;
	}
	var G = this.props.parent;
	if (G) {
	    var H = mstr.$obj(G.props.boneId);
	    if (H && H.observer) {
		H.observer.register(this.get("id"));
	    }
	}
    };
    D.prototype.onselectionchange = function() {
	this.translateBone();
    };
    D.prototype.translateBone = function E() {
	var H = this.get("boneModel");
	var I = this.props.enabledField;
	if (I != null && I.length > 0) {
	    var G = H.commands.queryEnabled(I);
	    if (G != this.props[I]) {
		this.set(I, G);
	    }
	    if (!this.props[I]) {
		return;
	    }
	}
	mstr.bones.editors.BoneTranslator.prototype.translateBone.apply(this);
    };
    D.prototype.on_set_fontTabEnabled = function B(H) {
	var G = this.props.fields;
	var K = G && G.length > 0 ? G.split("|") : [];
	var J;
	for ( var I = 0; I < K.length; I++) {
	    J = K[I];
	    if (!J || !J.length > 0) {
		continue;
	    }
	    this.props[J] && this.props[J].set
		    && this.props[J].set(H.memo.name, H.memo.value);
	}
    };
    D.prototype._storeDeltaProp = function A(H, G) {
	this.exec(H, G);
    };
    D.prototype.exec = function F(K, G) {
	var I = this.props.parent;
	if (I) {
	    var J = mstr.$obj(I.props.boneId);
	    if (J) {
		var H = [ {
		    obj : null,
		    cmdId : K,
		    value : G,
		    memo : {},
		    performFormatChange : true,
		    submitUpdateManager : false
		} ];
		if (!(J.commands.exec(I.props.boneCmdId, H))) {
		    return false;
		}
	    }
	}
    };
    function D(G) {
	mstr.bones.editors.BoneTranslator.apply(this, [ G ]);
    }
    return D;
})();
mstr.bones.editors.TOCPageBoneTranslator = (function() {
    mstr.$O.extendsClass(A, mstr.bones.editors.BoneTranslator);
    A.prototype._resolveTOCTitleSet = function C(E) {
	if (E && E.props && E.props.selectedCount && E.props.selectedCount == 1
		&& E.props.selectedIndicesList) {
	    if (E.props.selectedIndicesList == "0"
		    || E.props.selectedIndicesList == "") {
		this.set("TOCBorderStyleEnable", false);
	    } else {
		this.set("TOCBorderStyleEnable", true);
	    }
	}
    };
    A.prototype.onModelPropertyChange = function B(E) {
	mstr.bones.editors.BoneTranslator.prototype.onModelPropertyChange
		.apply(this, [ E ]);
	if (E.src == this.get("TOCBorderStyle")) {
	    this._resolveTOCTitleSet(E.src);
	}
    };
    A.prototype.set = function D(H, F) {
	mstr.bones.editors.BoneTranslator.prototype.set.apply(this, [ H, F ]);
	if (H == "EnableToc" || H == "TOCTitleEnableInherit") {
	    var E = this.get("EnableToc");
	    var G = this.get("TOCTitleEnableInherit");
	    if (E && !G) {
		this.set("TOCTitleSetEnable", true);
	    } else {
		this.set("TOCTitleSetEnable", false);
	    }
	}
	if (H == "EnableToc") {
	    this._resolveTOCTitleSet(this.get("TOCBorderStyle"));
	}
    };
    function A(E) {
	mstr.bones.editors.BoneTranslator.apply(this, [ E ]);
    }
    return A;
})();
mstr.bones.editors.SelectorPageBoneTranslator = (function() {
    mstr.$O.extendsClass(B, mstr.bones.editors.BoneTranslator);
    B.prototype.init = function K() {
	mstr.bones.editors.BoneTranslator.prototype.init.apply(this);
	this.attachEventListener(this, "openPopup", "_handleOpenPopup");
    };
    B.prototype.reinitializeModel = function S() {
	mstr.bones.editors.BoneTranslator.prototype.reinitializeModel
		.apply(this);
	if (this.get(this.props.visibleField)) {
	    this._resolveUCLogic();
	}
	this._resolveStateEnabled();
	var AE = null;
	var AD = null;
	var AF = this.translating;
	this.translating = true;
	this._resolveDelimiterSelected();
	this._resolveAttrFormSelected();
	this._resolveAttrFormEnabled();
	this.translating = AF;
    };
    B.prototype._resolveDelimiterSelected = function AB() {
	if (!this.get("EditSelectorSource")) {
	    return;
	}
	var AE = this.get("showFormDelimiters");
	if (this.get("EditSelectorSource").getSelectedIndex() == 0) {
	    AE.execSingleSelect(0);
	} else {
	    var AD = this.get("EditFormDelimiter");
	    if (AD == " ") {
		AD = "SPACE";
	    }
	    AE.execSelectValue(AD) || AE.execSingleSelect(4);
	}
    };
    B.prototype._resolveAttrFormSelected = function R() {
	if (!this.get("EditSelectorSource")) {
	    return;
	}
	var AE = this.get("displayForms");
	if (this.get("EditSelectorSource").getSelectedIndex() == 0) {
	    this.updateDisplayFormList(null);
	    AE.execSingleSelect(0);
	    this.attrFormSelectedIndex = 0;
	    this.attrFormSelectedItems = null;
	} else {
	    var AF = this.get("EditDisplayForm");
	    if (AF == mstr.Enum.AttrFormSelector.CUSTOM) {
		var AD = this.get("selectedAttrForms");
		this.updateDisplayFormList(AD);
		this.checkAvailabilityAndSelect(AD);
		this.attrFormSelectedIndex = 1;
		this.attrFormSelectedItems = AD;
	    } else {
		this.updateDisplayFormList(null);
		AE.execSingleSelect(0);
		this.attrFormSelectedIndex = 0;
		this.attrFormSelectedItems = null;
	    }
	}
    };
    B.prototype._resolveAttrFormEnabled = function e() {
	if (!this.get("EditSelectorSource")) {
	    return;
	}
	this.set("displayFormsEnable", true);
	var AD = this.get("EditSelectorSource").getSelectedIndex();
	if (AD < 0) {
	    return;
	}
	if (AD == 0) {
	    this.set("displayFormsEnable", false);
	} else {
	    var AG = this.getBone().commands
		    .queryState("documentAttributesType")[AD];
	    if (!AG) {
		return;
	    }
	    var AF = AG.type.split("|")[0];
	    var AE = AG.type.split("|")[1];
	    if (AF
		    && (AF == microstrategy.DSSTYPE_CONSOLIDATION || (AF == microstrategy.DSSTYPE_FILTER && AE == microstrategy.DSSTYPE_CUSTOM_GROUP))) {
		this.set("displayFormsEnable", false);
	    } else {
		this.set("displayFormsEnable", true);
	    }
	}
    };
    B.prototype._initializeDynamicModel = function m(AD, AE, AH) {
	if (AD == "selectedAttrForms") {
	    this._setDynamicModelValues(AD, AE, AH);
	    this.set("afCartModel", AE);
	    var AG = AE.get("selected");
	    AG.attachEventListener(this, "listadd_items", "onOkEnabledChange");
	    AG.attachEventListener(this, "listremove_items",
		    "onOkEnabledChange");
	    this.set("okBtnEnable",
		    !!(AE && AE.props && AE.props.selected && AE.props.selected
			    .getItems().length > 0));
	} else {
	    if (AD == "sortAttrForm") {
		this._setDynamicModelValues(AD, AE, AH);
		this.set("afListModel", AE);
		AE.attachEventListener(this, "hashadd_selectedIndices",
			"onModelPropertyChange");
		this._resolveSortType();
	    } else {
		mstr.bones.editors.BoneTranslator.prototype._initializeDynamicModel
			.apply(this, [ AD, AE, AH ]);
		if (AD == "EditSelectorTargets") {
		    var AF = this.translating;
		    this.translating = true;
		    this._resolveUCLogic();
		    this.translating = AF;
		}
		if (AD == "selectorCurrentState") {
		    var AF = this.translating;
		    this.translating = true;
		    this._resolveCountEnabled();
		    this._resolveStateEnabled();
		    this._resolveAllEnabled();
		    this.translating = AF;
		}
		if (AD == "EditSelectorSource") {
		    var AF = this.translating;
		    this.translating = true;
		    this._resolveDelimiterSelected();
		    this._resolveAttrFormSelected();
		    this._resolveAttrFormEnabled();
		    this.translating = AF;
		}
	    }
	}
    };
    B.prototype.checkAvailabilityAndSelect = function q(AI) {
	if (this.availAttrForms == null) {
	    this.availAttrForms = {};
	}
	var AE = this.get("EditSelectorSource")
		&& this.get("EditSelectorSource").getSelectedItemValue();
	if (AE) {
	    var AG = AE.split("|")[0];
	    if (this.availAttrForms[AG] == null) {
		var AF = this;
		var AD = {
		    success : function(AO) {
			var AJ = [];
			var AN = {};
			for ( var AM in AO.objects) {
			    var AQ = AO.objects[AM];
			    var AK = AQ.did + "|" + AQ.t + "|" + AQ.n;
			    AJ.push({
				dssid : AK,
				n : AQ.n
			    });
			    AN[AK] = true;
			}
			AF.availAttrForms[AG] = AJ;
			var AP = [];
			for ( var AM in AI) {
			    if (AN[AI[AM].dssid]) {
				AP.push(AI[AM]);
			    }
			}
			var AL = AF.translating;
			AF.translating = true;
			AF.updateDisplayFormList(AP);
			AF.translating = AL;
		    },
		    failure : function(AJ) {
			AF.updateDisplayFormList([]);
		    }
		}, AH = {
		    taskId : "getWSAttributeForms",
		    attributeID : AG,
		    objectType : 55,
		    msgID : this.getBone().messageID
		};
		mstr.$XHR.request(mstrConfig.taskURL, AH, AD);
	    }
	}
    };
    B.prototype._getAvailableSortForm = function y(AH, AF) {
	if (!AH || !AF) {
	    return undefined;
	}
	var AE = AH.split("|")[0], AD = AF.length, AI;
	for ( var AG = 0; AG < AD; AG++) {
	    AI = AF[AG].dssid;
	    if (AE == AI.split("|")[0]) {
		return AI;
	    }
	}
	return undefined;
    };
    B.prototype._setDynamicModelValues = function I(AD, AE, AH) {
	if (AH == "availAttrFormsList" || AH == "availAttrFormsCart") {
	    if (this.availAttrForms == null) {
		this.availAttrForms = {};
	    }
	    var AF = this.get("EditSelectorSource")
		    && this.get("EditSelectorSource").getSelectedItemValue();
	    if (AF) {
		var AG = AF.split("|")[0];
		if (this.availAttrForms[AG] == null) {
		    return;
		} else {
		    if (AH == "availAttrFormsList") {
			this._setDynamicListModelValues(AE,
				this.availAttrForms[AG], AD);
		    } else {
			this._setDynamicCartModelValues(AE,
				this.availAttrForms[AG], AD);
		    }
		}
	    }
	} else {
	    mstr.bones.editors.BoneTranslator.prototype._setDynamicModelValues
		    .apply(this, [ AD, AE, AH ]);
	}
    };
    B.prototype._setDynamicListModelValues = function Z(AF, AJ, AH) {
	if (AH == "sortAttrForm") {
	    var AG = microstrategy.descriptors.getDescriptor("959"), AE = this
		    .get(AH)
		    || this.getBone().commands.queryState(AH), AM = AE.dssid, AJ, AD = mstr.Enum.AttrFormSelector.DEFAULT_SORT;
	    if (AM) {
		AM = this._getAvailableSortForm(AM, AJ) || AD;
	    } else {
		AM = AD;
	    }
	    AJ = AJ && [ {
		dssid : AD,
		n : AG
	    } ].concat(AJ);
	} else {
	    var AM = this.getBone().commands.queryState(AH);
	}
	if (AH == "EditSelectorSource") {
	    var AN = mstr.bones.editors.LayoutPropertiesBoneTranslator.prototype
		    .isSearchBox(this);
	    if (AN) {
		AJ = this.getBone().commands
			.queryState("documentPureAttributes");
	    }
	}
	var AI = this.getBone().commands.queryState("isAQSelector");
	if (AI) {
	    AJ = this.getBone().commands
		    .queryState("documentAttributesWithDateForm");
	}
	AF.setItems(AJ);
	var AL = (mstr.$A.isArray(AM)) ? "execSelectValues" : "execSelectValue";
	var AK = AF[AL](AM);
	if (AH == "EditSelectorSource" && !AK) {
	    AF.execSingleSelect(0);
	}
    };
    B.prototype._setDynamicCartModelValues = function Y(AF, AE, AD) {
	AF.get("available").setItems(AE);
	if (AD == "selectedAttrForms") {
	    var AG = this.get(AD) || this.getBone().commands.queryState(AD);
	} else {
	    var AG = this.getBone().commands.queryState(AD);
	}
	AF.get("selected").setItems(AG);
	AF._updateAvailableFilteredItems();
    };
    B.prototype._resolveSelecotrSourceForUConDS = function z(AK) {
	if (AK && AK.selectedCount == 1) {
	    if (isNaN(AK.selectedIndicesList)) {
		return false;
	    }
	    var AH = parseInt(AK.selectedIndicesList);
	    if (AK.items[AH]) {
		var AF = AK.items[AH], AJ = -1, AG = AF.sty;
		var AD = AF.dssid.split("|");
		if (AD.length > 2 && !isNaN(AD[1])) {
		    AJ = parseInt(AD[1]);
		}
		var AL = this.get("dsAsTgtChkVisible"), AE = this
			.get("isDSAsTarget"), AI = this.get("EditSelectorType"), AM = AI
			.getSelectedItemValue();
		if (AJ === parseInt(microstrategy.DSSTYPE_ATTRIBUTE)
			&& AG !== microstrategy.DSSSUB_TYPE_DERIVED_ATTRIBUTE
			&& AM !== mstrRWControlImpl.CTL_TYPE_ATTR_QUAL
			&& AM !== mstrRWControlImpl.CTL_TYPE_ATTR_LIST) {
		    if (!AL) {
			this.set("dsAsTgtChkVisible", true);
		    }
		} else {
		    if (AE) {
			this.set("isDSAsTarget", false);
		    }
		    if (AL) {
			this.set("dsAsTgtChkVisible", false);
		    }
		}
	    }
	}
    };
    B.prototype._resolveEditSelectorTargetsCartList = function x(AD) {
	var AG = this.get("EditSelectorSource");
	if (!AG || !AG.getSelectedItem()) {
	    return;
	}
	var AF = AG.getSelectedItem().olap, AE = AG && AG.getSelectedItem(), AH = AE
		&& AE.de && AE.sty != 12033;
	lastSelectedItem = AG.getItems()[this.lastSelectedSourceIdx],
		lastde = lastSelectedItem && lastSelectedItem.de
			&& lastSelectedItem.sty != 12003,
		lastOlap = lastSelectedItem && lastSelectedItem.olap;
	if (AF && !lastOlap || AH && !lastde) {
	    this._setDynamicModelValues("EditSelectorTargetsNoPlaceholder",
		    this.get("EditSelectorTargets"),
		    "availableTemplatesNoPlaceholder");
	} else {
	    if (!AF && lastOlap || !AH && lastde) {
		this._setDynamicModelValues("EditSelectorTargets", this
			.get("EditSelectorTargets"), "availableTemplates");
	    }
	}
    };
    B.prototype._storeLastSelectedSourceIdx = function J(AD) {
	if (AD && AD.memo) {
	    this.lastSelectedSourceIdx = mstr.utils.Hash.firstKey(AD.memo.at);
	}
    };
    B.prototype.onModelPropertyChange = function C(AD) {
	mstr.bones.editors.BoneTranslator.prototype.onModelPropertyChange
		.apply(this, [ AD ]);
	if (AD.src == this.get("EditSelectorType")) {
	    this._handleSelectorTypeChange();
	    this.get("parent").notifyPropertyChange("EditSelectorType", AD);
	    this._resolveUCLogic();
	    this._resolveStateUCVisible();
	    this._resolveCountEnabled();
	    this._resolveStateEnabled();
	    this._resolveAllEnabled();
	    this._resolveGUIComponentsVisible();
	    this._resolveCartListVisible();
	} else {
	    if (AD.src == this.get("DataFilterMode")) {
		this._resolveTotalAndAutoSynchEnabled();
		this._resolveCountEnabled();
		this._resolveStateUCVisible();
		this._resolveUpdateFilterTargetEnabled();
	    } else {
		if (this.get("EditSelectorTargets")
			&& (AD.src == this.get("EditSelectorTargets").get(
				"selected") || this.get("EditSelectorSource") == AD.src)) {
		    this._resolveUCLogic();
		    if (this.get("EditSelectorSource") == AD.src) {
			this._resolveAttrFormEnabled();
			this._resolveEditSelectorTargetsCartList(AD);
			this._storeLastSelectedSourceIdx(AD);
		    }
		    if (AD.name != "listremove_items" && !this.translating) {
			this._resolveDataFilterMode();
		    }
		} else {
		    if (this.get("EditSelectorTargets")
			    && (AD.src == this.get("EditSelectorTargets").get(
				    "selected") || this
				    .get("EditSelectorSourceDDIC") == AD.src)) {
			this._resolveUCLogic();
			if (AD.name != "listremove_items" && !this.translating) {
			    this._resolveDataFilterMode();
			}
		    } else {
			if (this.get("selectorCurrentState") == AD.src) {
			    this._resolveCountEnabled();
			} else {
			    if (this.get("EditSelectorSelectionType") == AD.src) {
				this._resolveAllEnabled();
			    } else {
				if (this.get("showFormDelimiters") == AD.src
					&& AD.name == "hashadd_selectedIndices") {
				    this._resolveDelimiter();
				} else {
				    if (this.get("displayForms") == AD.src
					    && AD.name == "hashadd_selectedIndices") {
					this._resolveDisplayForm();
				    } else {
					if (this.get("afListModel") == AD.src
						&& AD.name == "hashadd_selectedIndices") {
					    this._resolveSortType();
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	}
	if (this.get("EditSelectorSource") == AD.src
		&& AD.name == "hashadd_selectedIndices") {
	    this._clearAttrFormSelector();
	    this.get("parent").notifyPropertyChange("EditSelectorSource", AD);
	    this._resolveSelecotrSourceForUConDS(AD.src.props);
	}
    };
    B.prototype.set = function P(AG, AE) {
	mstr.bones.editors.BoneTranslator.prototype.set.apply(this, [ AG, AE ]);
	if (AG == "isDSAsTarget") {
	    var AF = this.get("EditSelectorType");
	    if (AE) {
		this.set("DataFilterVisible", false);
		this.set("attrLCVisible", false);
		this.set("metricLCVisible", false);
		this.set("datasetLCVisible", true);
		this.set("attrReplaceLCVisible", false);
		this.set("submissionLCVisible", false);
		this.set("selectorAutoSyncVisible", false);
		this.set("showTotalVisible", false);
		this.set("countVisible", false);
		this.set("selectionTypeVisible", false);
		this._moveSelectedBack("EditSelectorTargets");
	    } else {
		if (AF.getSelectedItemValue() == 1) {
		    if (!this.getBone().commands
			    .queryState("isMetricQualifier")) {
			this.set("DataFilterVisible", true);
		    }
		    this.set("attrLCVisible", true);
		    this.set("metricLCVisible", false);
		    this.set("datasetLCVisible", false);
		    this.set("attrReplaceLCVisible", false);
		    this.set("submissionLCVisible", false);
		    this.set("selectorAutoSyncVisible", true);
		    var AD = this.getBone().commands.queryState("isDDIC");
		    this.set("showTotalVisible", !AD);
		    this.set("countVisible", !AD);
		    this.set("selectionTypeVisible", !AD);
		    this._moveSelectedBack("EditSelectorTargetsDataset");
		}
	    }
	    this._resolveStateUCVisible();
	} else {
	    if (AG == "Autowire") {
		this.set("showAutoWireMessage", AE);
	    }
	}
    };
    B.prototype._moveSelectedBack = function u(AE) {
	var AD = this.get(AE);
	if (AD) {
	    AD.execRemoveAll();
	}
    };
    B.prototype._resolveStateUCVisible = function V() {
	var AE = this.get("EditSelectorType")
		&& this.get("EditSelectorType").getSelectedItemValue();
	var AF = this.get("DataFilterMode");
	var AG = AF && AF.getSelectedItemValue();
	var AD = this.get("isDSAsTarget");
	if (AG == null || AG == undefined) {
	    AG = this.getBone().commands.queryState("DataFilterMode");
	}
	if (AG == "1" || (AE == "1" && AD)) {
	    this.set("stateUCVisible", true);
	} else {
	    this.set("stateUCVisible", false);
	}
    };
    B.prototype._resolveGUIComponentsVisible = function O() {
	var AE = this.get("EditSelectorType")
		&& this.get("EditSelectorType").getSelectedItemValue();
	this.set("DataFilterVisible", true);
	this.set("selectionTypeVisible", false);
	this.set("showAdvanced", true);
	if (AE == 1) {
	    this.set("dsAsTgtChkVisible", true);
	    var AD = this.get("isDSAsTarget");
	    if (AD) {
		this.set("attrLCVisible", false);
		this.set("metricLCVisible", false);
		this.set("datasetLCVisible", true);
		this.set("attrReplaceLCVisible", false);
		this.set("DataFilterVisible", false);
		this.set("submissionLCVisible", false);
	    } else {
		this.set("attrLCVisible", true);
		this.set("metricLCVisible", false);
		this.set("datasetLCVisible", false);
		this.set("attrReplaceLCVisible", false);
		this.set("selectionTypeVisible", true);
		this.set("submissionLCVisible", false);
	    }
	} else {
	    if (AE == 2) {
		this.set("dsAsTgtChkVisible", false);
		this.set("isDSAsTarget", false);
		this.set("attrLCVisible", false);
		this.set("metricLCVisible", true);
		this.set("datasetLCVisible", false);
		this.set("attrReplaceLCVisible", false);
		this.set("submissionLCVisible", false);
	    } else {
		if (AE == 3) {
		    this.set("attrReplaceLCVisible", false);
		    this.set("submissionLCVisible", false);
		} else {
		    if (AE == 4) {
			this.set("attrLCVisible", false);
			this.set("metricLCVisible", false);
			this.set("datasetLCVisible", false);
			this.set("DataFilterVisible", false);
			this.set("attrReplaceLCVisible", false);
			this.set("submissionLCVisible", true);
		    } else {
			if (AE == 8) {
			    this.set("dsAsTgtChkVisible", false);
			    this.set("isDSAsTarget", false);
			    this.set("attrLCVisible", false);
			    this.set("metricLCVisible", false);
			    this.set("datasetLCVisible", false);
			    this.set("attrReplaceLCVisible", true);
			    this.set("DataFilterVisible", false);
			    this.set("showAdvanced", false);
			    this.set("submissionLCVisible", false);
			    this.set("EditSelectorShowAll", false);
			    this.set("EditSelectorMultiSelect", false);
			}
		    }
		}
	    }
	}
	this._resolveStateUCVisible();
    };
    B.prototype._clearAttrFormSelector = function E() {
	if (!this.translating) {
	    this._clearPopupDelta();
	    this.get("displayForms").execSingleSelect(0);
	    this.get("showFormDelimiters").execSingleSelect(0);
	    if (this.get("stRadioList")) {
		this.get("stRadioList").execClearSelect();
	    }
	}
    };
    B.prototype._resolveSortType = function X() {
	if (this.translating) {
	    return;
	}
	if (!this.get("stRadioList")) {
	    this.getSortTypeModel();
	}
	if (this.get("afListModel").getSelectedItemValue() == mstr.Enum.AttrFormSelector.DEFAULT_SORT) {
	    this.get("stRadioList").execClearSelect();
	    this.set("SortTypeEnabled", false);
	} else {
	    var AD = this.get("sortType");
	    this.get("stRadioList").execSelectValue(AD);
	    this.set("SortTypeEnabled", true);
	}
    };
    B.prototype._resolveDisplayForm = function n() {
	if (!this.translating) {
	    displayFormList = this.get("displayForms");
	    if (!displayFormList) {
		return;
	    }
	    var AD = displayFormList.getSelectedItemValue();
	    if (AD == mstr.Enum.AttrFormSelector.AUTOMATIC) {
		if (displayFormList.props.items.length > 2) {
		    this._removeCustom(displayFormList);
		}
		this.set("EditDisplayForm", AD);
		this.attrFormSelectedIndex = 0;
		this.attrFormSelectedItems = null;
	    } else {
		if (AD == "custom") {
		    this.execTryOpenPopup("AttrFormsEditor",
			    "AttrFormsCartBlock", "selectedAttrForms",
			    "availAttrFormsCart");
		    this.set("EditDisplayForm",
			    mstr.Enum.AttrFormSelector.CUSTOM);
		}
	    }
	}
    };
    B.prototype._clearPopupDelta = function o() {
	this.set("selectedAttrForms", []);
	this.set("sortAttrForm", mstr.Enum.AttrFormSelector.DEFAULT_SORT);
    };
    B.prototype.execTryOpenPopup = function G(AF, AH, AK, AD) {
	if (this.availAttrForms == null) {
	    this.availAttrForms = {};
	}
	var AM = this.get("EditSelectorSource")
		&& this.get("EditSelectorSource").getSelectedItemValue(), AE = this
		.get("EditSelectorSource")
		&& this.get("EditSelectorSource").getSelectedItem().n;
	if (AM) {
	    var AJ = AM.split("|")[0], AN = arguments;
	    AN.title = microstrategy.descriptors.getDescriptor("2890")
		    + (AE ? " - " + AE : "");
	    if (this.availAttrForms[AJ] == null) {
		var AL = this;
		var AG = {
		    success : function(AQ) {
			var AO = [];
			for ( var AP in AQ.objects) {
			    var AR = AQ.objects[AP];
			    AO.push({
				dssid : AR.did + "|" + AR.t + "|" + AR.n,
				n : AR.n
			    });
			}
			AL.availAttrForms[AJ] = AO;
			AL.raiseEvent("openPopup", {
			    args : AN
			});
		    },
		    failure : function(AO) {
			showMessage({
			    contents : AO
				    .getResponseHeader("X-MSTR-TaskFailureMsg"),
			    elements : microstrategy.OK_BUTTON,
			    type : mstrMsgBoxImpl.MSG_WARNING
			});
		    }
		}, AI = {
		    taskId : "getWSAttributeForms",
		    attributeID : AJ,
		    objectType : 55,
		    msgID : this.getBone().messageID
		};
		mstr.$XHR.request(mstrConfig.taskURL, AI, AG);
	    } else {
		this.raiseEvent("openPopup", {
		    args : AN
		});
	    }
	}
    };
    B.prototype._handleOpenPopup = function a(AD) {
	args = AD && AD.memo && AD.memo.args;
	editorId = args[0], editorStyle = args[1], propertyName = args[2],
		source = args[3];
	microstrategy.openBlockLoaderEditor(editorId, editorStyle, {}, {
	    title : (args && args.title) || ""
	}, this, null, null);
	if (propertyName == "selectedAttrForms" && this.get("afCartModel")) {
	    this._setDynamicModelValues(propertyName, this.get("afCartModel"),
		    source);
	} else {
	    if (propertyName == "sortAttrForm" && this.get("afListModel")) {
		this._setDynamicModelValues(propertyName, this
			.get("afListModel"), source);
		mstr.$obj("tt").render();
	    }
	}
    };
    B.prototype.onOkEnabledChange = function F(AD) {
	model = AD && AD.src;
	this.set("okBtnEnable", !!(model && model.getItems().length > 0));
    };
    B.prototype.execSelectAttrForms = function h(AF) {
	if (AF && AF.get("selected")) {
	    var AE = AF.get("selected"), AD = AE.getItems();
	    if (this.translating) {
		return;
	    }
	    this.updateDisplayFormList(AD);
	    AD = AD && [].concat(AD);
	    this.set("selectedAttrForms", AD);
	    this.attrFormSelectedIndex = 1;
	    this.attrFormSelectedItems = AD;
	}
    };
    B.prototype.updateDisplayFormList = function Q(AE) {
	displayFormList = this.get("displayForms");
	if (displayFormList.get("items").length > 2) {
	    this._removeCustom(displayFormList);
	}
	if (!AE || AE.length == 0) {
	    displayFormList.execSingleSelect(0);
	    return;
	}
	this.set("selectedAttrForms", AE);
	itemValue = AE[0].n;
	for (i = 1; i < AE.length; i++) {
	    itemValue += "," + AE[i].n;
	}
	var AD = mstr.Enum.AttrFormSelector.CUSTOM;
	displayFormList.insertItemsAt([ {
	    dssid : AD,
	    n : itemValue
	} ], 2);
	displayFormList.execSingleSelect(2);
    };
    B.prototype._removeCustom = function T(AD) {
	this.set("selectedAttrForms", []);
	AD.removeItemsAt([ 2 ]);
	var AE = mstr.$obj("formLPD");
	if (AE && AE.props.currentPopUp) {
	    AE.props.currentPopUp.props.scrollArea.children[0].style.width = "200px";
	}
    };
    B.prototype.execCancelSelectAttrForms = function t() {
	if (this.attrFormSelectedIndex == 0) {
	    this.get("displayForms").execSingleSelect(0);
	    return;
	} else {
	    if (this.attrFormSelectedIndex == 1 && this.attrFormSelectedItems) {
		this.updateDisplayFormList(this.attrFormSelectedItems);
		return;
	    }
	}
	this.get("displayForms").execSingleSelect(0);
    };
    B.prototype.execSelectSortAttrForm = function r() {
	if (this.translating) {
	    return;
	}
	var AE = this.get("afListModel").getSelectedItem();
	var AD = mstr.$H.clone(AE);
	AD.attr = this.get("EditSelectorSource")
		&& this.get("EditSelectorSource").getSelectedItemValue();
	this.set("sortAttrForm", AD);
	this.set("sortType", "-1");
	this.set("sortType", this.get("stRadioList").getSelectedItemValue());
    };
    B.prototype._resolveDelimiter = function d() {
	var AE = this.get("showFormDelimiters");
	var AF = AE.getSelectedItemValue() || "";
	if (AF == "OTHER") {
	    var AD = this.get("EditFormDelimiter");
	    if (AD == ":" || AD == ";" || AD == "," || AD == " ") {
		AD = ":";
	    }
	    this.set("EditFormDelimiter", AD);
	} else {
	    if (AF == "SPACE") {
		AF = " ";
	    }
	    this.set("EditFormDelimiter", AF);
	}
    };
    B.prototype.getSortTypeModel = function c() {
	var AD = this._createNewModel({
	    scriptClass : "ListModel",
	    parent : this,
	    valueForm : "dssid"
	});
	var AE = microstrategy.descriptors.getDescriptor("1885"), AF = microstrategy.descriptors
		.getDescriptor("1886");
	AD.setItems([ {
	    dssid : "1",
	    n : AE
	}, {
	    dssid : "0",
	    n : AF
	} ]);
	this.set("stRadioList", AD);
	return AD;
    };
    B.prototype._moveSelectedBack = function u(AE) {
	var AD = this.get(AE);
	if (AD) {
	    AD.execRemoveAll();
	}
    };
    B.prototype._resolveCartListVisible = function AA() {
	var AE = this.get("EditSelectorType")
		&& this.get("EditSelectorType").getSelectedItemValue();
	this.set("DataFilterVisible", true);
	this.set("showAdvanced", true);
	if (AE == 1) {
	    var AD = this.get("isDSAsTarget");
	    if (AD) {
		this.set("attrLCVisible", false);
		this.set("metricLCVisible", false);
		this.set("datasetLCVisible", true);
		this.set("attrReplaceLCVisible", false);
		this.set("DataFilterVisible", false);
		this.set("submissionLCVisible", false);
	    } else {
		this.set("attrLCVisible", true);
		this.set("metricLCVisible", false);
		this.set("datasetLCVisible", false);
		this.set("attrReplaceLCVisible", false);
		this.set("submissionLCVisible", false);
	    }
	} else {
	    if (AE == 2) {
		this.set("attrLCVisible", false);
		this.set("metricLCVisible", true);
		this.set("datasetLCVisible", false);
		this.set("attrReplaceLCVisible", false);
		this.set("submissionLCVisible", false);
	    } else {
		if (AE == 3) {
		    this.set("attrReplaceLCVisible", false);
		    this.set("submissionLCVisible", false);
		} else {
		    if (AE == 4) {
			this.set("attrLCVisible", false);
			this.set("metricLCVisible", false);
			this.set("datasetLCVisible", false);
			this.set("DataFilterVisible", false);
			this.set("attrReplaceLCVisible", false);
			this.set("submissionLCVisible", true);
		    } else {
			if (AE == 8) {
			    this.set("attrLCVisible", false);
			    this.set("metricLCVisible", false);
			    this.set("datasetLCVisible", false);
			    this.set("attrReplaceLCVisible", true);
			    this.set("DataFilterVisible", false);
			    this.set("showAdvanced", false);
			    this.set("submissionLCVisible", false);
			    this.set("EditSelectorShowAll", false);
			    this.set("EditSelectorMultiSelect", false);
			}
		    }
		}
	    }
	}
    };
    B.prototype._resolveCountEnabled = function g() {
	var AE = this.get("EditSelectorType").getSelectedItemValue(), AG = this
		.get("DataFilterMode"), AD = AG && AG.getSelectedItemValue(), AF = this
		.get("selectorCurrentState"), AF = AF
		&& AF.getSelectedItemValue(), AH = (AF && AF != "-1");
	this.set("countEnabled", AE == "1" && AH);
	this.set("nonMixed", (AD != "-1"));
    };
    B.prototype._resolveStateEnabled = function l() {
	var AD = this.get("EditSelectorType").getSelectedItemValue();
	this.set("stateEnabled", AD == "1");
    };
    B.prototype._resolveAllEnabled = function H() {
	this._handleSelectorTypeChange();
	var AE = this.get("EditSelectorType"), AD = AE.getSelectedItemValue(), AF = AD !== "3";
	if (AF) {
	    AE = this.get("EditSelectorSelectionType");
	    AD = AE.getSelectedItemValue();
	    AF = AD !== "0";
	}
	if (!AF) {
	    this.set("EditSelectorShowAll", false);
	}
	this.set("OptionAllEnabled", AF);
    };
    B.prototype._handleSelectorTypeChange = function W() {
	if (this.translating) {
	    return;
	}
	var AE = this.get("EditSelectorType"), AD = AE.getSelectedItemValue();
	switch (AD) {
	case "3":
	    this.set("EditSelectorShowAll", false);
	case "2":
	    this.set("EditSelectorShowTotal", false);
	    break;
	}
	this._clearAttrFormSelector();
    };
    B.prototype._resolveUCLogic = function M() {
	this._resolveDataFilterModeEnabled();
	this._resolveTotalAndAutoSynchEnabled();
	this._resolveUpdateFilterTargetEnabled();
    };
    B.prototype._resolveDataFilterModeEnabled = function AC() {
	var AF = this.get("EditSelectorType");
	var AK = this.props["EditSelectorSource"
		+ (this.get("isMetricQualifier") ? "Metrics" : this
			.get("isDDIC") ? "DDIC" : "")];
	if (!AK) {
	    return;
	}
	var AJ = AK && AK.getSelectedItem() && AK.getSelectedItem().olap, AE = AK
		&& AK.getSelectedItem() && AK.getSelectedItem().sty;
	AK = AK && AK.getSelectedItemValue();
	AK = AK && AK.split("|");
	AK = AK
		&& AK.length > 2
		&& (AK[1] == microstrategy.DSSTYPE_ATTRIBUTE || (AK[1] == microstrategy.DSSTYPE_CONSOLIDATION && AE == "12033"));
	var AD = this.get("EditSelectorTargets").get("selected").props.items;
	var AH = false;
	for ( var AG = 0; AD && AG < AD.length; AG++) {
	    var AI = AD[AG];
	    if (AI.dssid.indexOf("_") > -1) {
		AH = true;
		break;
	    }
	}
	this.set("DataFilterModeEnabled", (AD && AD.length > 0)
		&& (AF.getSelectedItemValue() == 1) && !!AK && !AJ && !AH);
    };
    B.prototype._resolveDataFilterMode = function L() {
	var AI = this.get("EditSelectorSource"), AE = AI
		&& AI.getSelectedItem(), AH = AI && AI.getSelectedItemValue(), AK = AH
		&& AH.split("|"), AF = AE && AE.sty === 257, AG = AK
		&& AK.length > 2
		&& AK[1] == microstrategy.DSSTYPE_CONSOLIDATION
		&& AE.sty === 12032;
	var AL = this.get("DataFilterMode"), AD = AL.getItems(), AJ = AL
		.get("valueForm");
	AL.setItems(AD.map(function(AM) {
	    if (AM[AJ] === "-1") {
		if (AF || AG) {
		    AM.cssClass = "Disabled";
		} else {
		    delete AM.cssClass;
		}
	    }
	    return AM;
	}));
	this.get("DataFilterMode").execSelectValue((AF || AG) ? "-1" : "1");
    };
    B.prototype._resolveTotalAndAutoSynchEnabled = function N() {
	var AG = this.get("DataFilterMode");
	var AD = AG && AG.getSelectedItemValue();
	var AH = this.get("DataFilterModeEnabled");
	var AF = this.get("EditSelectorType")
		&& this.get("EditSelectorType").getSelectedItemValue();
	var AE = mstr.bones.editors.LayoutPropertiesBoneTranslator.prototype
		.isSearchBox(this);
	this.set("showTotalEnabled", (AD == "0" || !AH) && AF == 1 && !AE);
	this.set("selectorAutoSyncEnabled", AD == "0" || !AH);
	if (!((AD == "0" || !AH) && AF == 1)) {
	    this.set("EditSelectorShowTotal", false);
	}
	if (AD != "0" && AH) {
	    this.set("EditSelectorAutoSync", false);
	}
    };
    B.prototype._resolveUpdateFilterTargetEnabled = function b() {
	var AF = this.get("DataFilterMode");
	var AD = AF && AF.getSelectedItemValue();
	var AG = this.get("DataFilterModeEnabled");
	var AE = this.get("EditSelectorType")
		&& this.get("EditSelectorType").getSelectedItemValue();
	this.set("updateFilterTargetEnabled", (AD != "0" && AG) && AE == 1);
    };
    B.prototype.execSelectObject = function s(AD) {
	this.set("runReportDocName", AD[0].n);
	this.set("runReportDocId", AD[0].dssid);
	this.set("runObjectType", AD[0].tp);
    };
    B.prototype.refreshForSearchBox = function A(AD, AL) {
	AD.set("showTotalEnabled", !AL);
	var AI = AD.get("EditSelectorSource"), AE = AI
		&& AI.getSelectedItemValue();
	if (AI) {
	    var AJ = AD.getBone().commands
		    .queryState(AL ? "documentPureAttributes"
			    : "documentAttributes"), AH = AI.getItems() || [];
	    if (AH.length != AJ.length) {
		AI.setItems(AJ);
		var AK = AI.execSelectValue(AE);
		if (!AK) {
		    AI.execSingleSelect(0);
		}
	    }
	}
	if (AL) {
	    AD.get("EditSelectorType").set("selectedIndicesList", 0);
	    if (!AI) {
		var AG = AD.getBone().commands.queryState("EditSelectorSource")
			|| "", AF = AG.split("|")[1];
		if (AF && AF != microstrategy.DSSTYPE_ATTRIBUTE) {
		    AD._storeDeltaProp("EditSelectorSource", "");
		}
	    }
	}
    };
    B.prototype.on_set_ext_prop_UseAsInformationWindow = function U(AD) {
	if (this.get("showTableDisplayMode")) {
	    var AE = microstrategy.descriptors;
	    this.set("TableCancelType", AD.memo.value ? AE
		    .getDescriptor("11174") : AE.getDescriptor("11175"));
	    this.set("TableCancelText", AD.memo.value ? AE.getDescriptor("221")
		    : AE.getDescriptor("2827"));
	}
    };
    B.prototype.translateBone = function D() {
	this.translating = true;
	var AE = this.props.EditSelectorType, AF = AE && AE.getItems().concat(), AH = (AF && mstr.$A
		.findByForm(AF, 3, "dssid", false))
		|| -1, AG = this.getBone().commands
		.queryState("isInFilterPanel"), AD = !!AE.iifp;
	isAQ = microstrategy.getViewerBone()
		&& microstrategy.getViewerBone().commands
			.queryState("EditSelectorStyle") == "11";
	mstr.$A.forEach(AF, function(AJ) {
	    var AI = AJ.dssid;
	    if (AI != 4) {
		if (isAQ) {
		    AJ.cssText = (AI == 7) ? "" : "display: none;";
		} else {
		    AJ.cssText = (AI == 7) ? "display: none;" : "";
		}
	    }
	});
	if (AG != AD) {
	    AF[AH].cssText = AG ? "display: none;" : "";
	    AE.iifp = AG;
	}
	AE.setItems(AF);
	this.translating = false;
	mstr.bones.editors.BoneTranslator.prototype.translateBone.apply(this);
    };
    function B(AD) {
	mstr.bones.editors.BoneTranslator.apply(this, [ AD ]);
    }
    return B;
})();
mstr.bones.editors.GeneralTabBoneTranslator = (function() {
    mstr.$O.extendsClass(K, mstr.bones.editors.BoneTranslator);
    K.prototype.init = function H() {
	mstr.bones.editors.BoneTranslator.prototype.init.apply(this);
	this.attachEventListener(this, "set_Visible",
		"_handleVisiblilityChange");
    };
    K.prototype._handleVisiblilityChange = function B(P) {
	if (this.translating) {
	    return;
	}
	if (!P.memo.value) {
	    this.set("VisibleHTML", false);
	}
    };
    K.prototype.on_set_IsPortal = function J(P) {
	if (this.translating) {
	    return;
	}
	this.get("parent").notifyPropertyChange("IsPortal", P);
	this.updatePanelCustomTitle();
    };
    K.prototype.on_set_TitleBarDisplay = function D(P) {
	if (this.translating) {
	    return;
	}
	this.updatePanelCustomTitle();
    };
    K.prototype.updateShowTranslucent = function L(R, Q) {
	var P = {};
	P.UseAsInformationWindow = R;
	P.InfoWindowMode = Q;
	this.get("parent").notifyPropertyChange("showTranslucent", P);
    };
    K.prototype.updateInitialSlidingInWidthAndHeightEnabled = function C(T) {
	var S = T.usiw !== undefined ? T.usiw : this
		.get("UseAsInformationWindow"), Q = T.dips !== undefined ? T.dips
		: this.get("DisplayInPartialScreen"), R = T.iwm !== undefined ? T.iwm
		: this.get("InfoWindowMode").getSelectedItemValue(), P = T.iwp !== undefined ? T.iwp
		: this.get("InfoWindowPosition").getSelectedItemValue();
	this.set("InitialSlidingInHeightEnabled", S && Q && R === "4"
		&& (P === "1" || P === "2"));
	this.set("InitialSlidingInWidthEnabled", S && Q && R === "4"
		&& (P === "3" || P === "4"));
    };
    K.prototype.on_set_InfoWindowMode = function O(P) {
	if (this.translating) {
	    return;
	}
	this.updateShowTranslucent(this.get("UseAsInformationWindow"),
		P.memo.value);
	this.updateInfoWinPosition();
	this.updateInitialSlidingInWidthAndHeightEnabled({
	    iwm : P.memo.value
	});
    };
    K.prototype.on_set_UseAsInformationWindow = function N(P) {
	if (this.translating) {
	    return;
	}
	this.updateShowTranslucent(P.memo.value, this.get("InfoWindowMode")
		.getSelectedItemValue());
	if (this.get("showTableDisplayMode")) {
	    !P.memo.value && this.set("IsPortal", P.memo.value);
	    this.get("parent")
		    .notifyPropertyChange("UseAsInformationWindow", P);
	}
	if (P.memo.value) {
	    this.set("ShowAsCollapsiblePanel", false);
	}
	this.updateInfoWinPosition();
	this.updateInitialSlidingInWidthAndHeightEnabled({
	    usiw : P.memo.value
	});
    };
    K.prototype.on_set_DisplayInPartialScreen = function A(P) {
	this.updateInitialSlidingInWidthAndHeightEnabled({
	    dips : P.memo.value
	});
    };
    K.prototype.on_set_InfoWindowPosition = function M(P) {
	this.updateInitialSlidingInWidthAndHeightEnabled({
	    iwp : P.memo.value
	});
    };
    K.prototype.updateInfoWinPosition = function F() {
	var P = this.get("InfoWindowMode").getSelectedItemValue(), Q = this
		.get("UseAsInformationWindow");
	this.set("InfoWindowPositionEnabled", Q && (P == 4));
    };
    K.prototype.updatePanelCustomTitle = function E() {
	var P = this.get("TitleBarDisplay").getSelectedItemValue();
	this.set("panelCustomTitle", P && P == "1" && this.get("IsPortal"));
    };
    K.prototype.onModelPropertyChange = function I(P) {
	mstr.bones.editors.BoneTranslator.prototype.onModelPropertyChange
		.apply(this, [ P ]);
	if (P.src == this.get("titleTriState")) {
	    if (this.translating) {
		return;
	    }
	    var Q = (this.get("titleTriState").getSelectedItemValue() == "1");
	    this.set("ShowWidgetTitleBar", Q);
	    this.set("IsPortal", Q);
	}
    };
    K.prototype.translateBone = function G() {
	mstr.bones.editors.BoneTranslator.prototype.translateBone.apply(this);
	this.translating = true;
	var P = !this.get("IsPortal") ? "0"
		: (this.get("ShowWidgetTitleBar") ? "1" : "-1");
	this.get("titleTriState").execSelectValue(P);
	this.translating = false;
    };
    function K(P) {
	mstr.bones.editors.BoneTranslator.apply(this, [ P ]);
    }
    return K;
})();
mstr.bones.editors.ActionsBoneTranslator = (function() {
    mstr.$O.extendsClass(E, mstr.bones.editors.BoneTranslator);
    E.prototype.getDynamicListModel = function B(I, H) {
	var G = mstr.bones.editors.BoneTranslator.prototype.getDynamicListModel
		.apply(this, arguments);
	if (H == "ControlGroupByList") {
	    G.detachEventListener(this, "hashadd_selectedIndices");
	    G.detachEventListener(this, "hashremove_selectedIndices");
	    G.attachEventListener(this, "listadd_items",
		    "onControlGroupByChange");
	}
	return G;
    };
    E.prototype.onControlGroupByChange = function F(H) {
	var K = H.src;
	var J = "";
	var G = null;
	var I = [];
	J = K.getItems();
	var L = K.get("mappedPropertyName");
	this.raiseEvent("set_" + L, {
	    name : L,
	    src : H.name,
	    value : J,
	    valueWas : G
	});
	if (this.translating) {
	    return;
	}
	this._storeDeltaProp(L, J);
    };
    E.prototype.on_set_ext_prop_XTabView = function D(G) {
	var H = G.memo.value;
	var I = this.translating;
	this.translating = true;
	this.set("showGridIf", H == 1 || H == 3);
	this.translating = I;
    };
    E.prototype.on_set_expandPanels = function A(H) {
	var G = H.memo.value;
	var I = this.translating;
	this.translating = true;
	this.set("allowPanelsToSplitAcrossPages", G == 0);
	this.set("panelOverflowSpacingEnabled", this.get("ClipOnExport")
		&& G != 0);
	this.translating = I;
    };
    E.prototype.on_set_ClipOnExport = function F(H) {
	var J = this.translating;
	if (J) {
	    return;
	}
	this.translating = true;
	var I = H.memo.value;
	var G = this.get("expandPanels");
	this.set("panelOverflowSpacingEnabled", I && G.getSelectedIndex() != 0);
	this.translating = J;
    };
    E.prototype.joinTypeChange = function C(G, I) {
	var H = this._getDeltaProp("joinTypes");
	if (!H) {
	    H = {};
	}
	H[G] = I;
	this._storeDeltaProp("joinTypes", H);
    };
    function E(G) {
	mstr.bones.editors.BoneTranslator.apply(this, [ G ]);
    }
    return E;
})();
mstr.models.TriStateListModel = (function() {
    mstr.$O.extendsClass(A, mstr.models.ListModel);
    A.prototype.execSingleSelectNextAndLoop = function B() {
	mstr.models.ListModel.prototype.execSingleSelectNextAndLoop.apply(this);
	var D = this.props.selectedIndicesList;
	if (isNaN(D)) {
	    return false;
	}
	var C = parseInt(D);
	var E = this.get("ExcludedItemsOnLoop");
	E = E && E.split(",");
	if (E && C in E) {
	    this.execSingleSelectNextAndLoop();
	}
	return true;
    };
    function A(C) {
	mstr.models.ListModel.apply(this, [ C ]);
    }
    return A;
})();
mstr.models.IPhoneTimeSeriesEditorModel = (function() {
    mstr.$O.extendsClass(N, mstr.models.BaseModel);
    N.prototype.init = function J() {
	mstr.models.BaseModel.prototype.init.apply(this);
	this.set("granularity", "");
	if (this.props.isReport) {
	    this.selectItemFromId(this.props.dataSets, "r");
	}
	this.aeh();
	this.changeSelectedNode();
	this.ROOT_NODE = "rl";
	this.ITEM_NODE = "it";
	this.TEMPLATE_NODE = "nk";
	this.NAME_NODE = "lbl";
	this.LEVEL_NODE = "lvl";
	this.RANGE_NODE = "rng";
	this.RANGE_ATT_NODE = "ut";
	this.RANGE_SIZE_NODE = "v";
    };
    N.prototype.aeh = function L() {
	this.props.nodes.attachEventListener(this, "hashadd_selectedIndices",
		"changeSelectedNode");
	this.props.rangeList.attachEventListener(this,
		"hashadd_selectedIndices", "changeRangeList");
	this.props.dataSets.attachEventListener(this,
		"hashadd_selectedIndices", "changeDataSet");
    };
    N.prototype.changeSelectedNode = function C(S) {
	var X = this.props.nodes, U = X.getSelectedItem();
	if (U) {
	    if (U.dssid == "-1") {
		if (!this.props.justRemoved) {
		    this.execAdd();
		}
		return;
	    }
	    this.set("empty", false);
	    this.set("downEnabled", !S.memo.at[mstr.$A.len(X.props.items) - 2]);
	    this.set("upEnabled", !X.props.selectedIndices[0]);
	    var W = this.changingN;
	    this.changingN = true;
	    var T = mstr.$obj("selectedNameIphoneEditorField");
	    if (T) {
		T.textBoxInitialized = false;
	    }
	    this.set("selectedName", U.n);
	    this.set("selectedRangeSize", U.rs);
	    var V = this.selectItemFromId(this.props.dataSets, U.ds);
	    this.selectItemFromId(this.props.rangeList, U.sr);
	    if (!V) {
		this.set("attEnabled", false);
	    }
	    this.changingN = W;
	} else {
	    this.set("empty", true);
	}
	this.updatePreview();
    };
    N.prototype.updatePreview = function K() {
	var W = microstrategy.descriptors.getDescriptor("7678"), U = this.props.nodes
		.getSelectedItem(), V = this.props.dataSets.getSelectedItem(), S = this.props.rangeList
		.getSelectedItem(), T = this.props.granularity;
	v = V && T && S && U;
	W = W.replace("######", V ? V.n : "").replace("#####", T ? T : "")
		.replace("####", S ? S.n : "").replace("###", U ? U.rs : "")
		.replace("##", U ? U.n : "");
	this.props.preview.set("value", v ? W : "");
    };
    N.prototype.selectItemFromId = function E(U, V) {
	var S = U.getItems();
	for ( var T in S) {
	    if (S[T][U.props.valueForm] == V) {
		U.setSelectedItems([ S[T] ]);
		return true;
	    }
	}
	U.execClearSelect();
	return false;
    };
    N.prototype.on_set_selectedRangeSize = function F() {
	this.props.nodes.getSelectedItem().rs = this.props.selectedRangeSize;
	this.updatePreview();
    };
    N.prototype.on_set_selectedName = function G() {
	if (this.changingN) {
	    return;
	}
	var S = this.changingN;
	this.changingN = true;
	this.props.justRemoved = true;
	this.props.nodes.execRenameSelectedItem(this.props.selectedName);
	this.props.justRemoved = false;
	this.changingN = S;
	this.updatePreview();
    };
    N.prototype.changeRangeList = function B() {
	this.props.nodes.getSelectedItem().sr = this.props.rangeList
		.getSelectedItem()[this.props.rangeList.props.valueForm];
	this.updatePreview();
    };
    N.prototype.changeDataSet = function O() {
	this.set("attEnabled", true);
	this.props.rangeList.execClearSelect();
	this.props.rangeList.removeItems(this.props.rangeList.getItems());
	var T = this.props.dataSets.getSelectedItem();
	var U = this.props.__atts[T.dssid];
	this.set("granularity", U[U.length - 1].n);
	this.props.rangeList.insertItemsAt(U);
	var S = this.props.nodes.getSelectedItem();
	S.ds = this.props.dataSets.getSelectedItem()[this.props.dataSets.props.valueForm];
	S.sl = U[U.length - 1].dssid;
	if (!this.changingN) {
	    S.sr = null;
	}
	this.updatePreview();
    };
    N.prototype.execAdd = function Q() {
	this.set("empty", false);
	this.set("downEnabled", false);
	this.set("attEnabled", false);
	this.set("upEnabled", false);
	var T = {
	    dssid : Math.random(),
	    n : microstrategy.descriptors.getDescriptor(945),
	    sl : null,
	    sr : null,
	    rs : "1",
	    ds : null
	}, U = this.props.nodes, S = U.props.items.length;
	U.insertItemsAt([ T ], S - 1);
	U.execSingleSelect(S - 1);
	this.props.rangeList.execClearSelect();
	this.set("granularity", "");
	if (this.props.isReport) {
	    this.selectItemFromId(this.props.dataSets, "r");
	} else {
	    this.props.dataSets.execClearSelect();
	}
    };
    N.prototype.execRemove = function R() {
	this.props.justRemoved = true;
    };
    N.prototype.execPostRemove = function H() {
	var T = this.props.nodes, S = mstr.$A.len(T.props.items);
	this.props.justRemoved = false;
	this.set("empty", S == 1);
	this.set("attEnabled", S > 1);
	if (S == 1) {
	    T.execClearSelect();
	} else {
	    if (parseInt(T.props.selectedIndicesList) == (S - 1)) {
		T.execSingleSelect(S - 2);
	    }
	}
    };
    N.prototype.execCheckDown = function A() {
	var T = this.props.nodes, S = mstr.$A.len(T.props.items);
	this.set("downEnabled", !T.props.selectedIndices[S - 2]);
	this.set("upEnabled", !T.props.selectedIndices[0]);
    };
    N.prototype.getXMLValue = function P() {
	var S = this.props.nodes.getItems();
	var U = "<" + this.ROOT_NODE + ">";
	for ( var T in S) {
	    if (T == S.length - 1) {
		continue;
	    }
	    U += this.appendItemXML(S[T]);
	}
	U += "</" + this.ROOT_NODE + ">";
	return U;
    };
    N.prototype.appendItemXML = function M(T) {
	var S = "<" + this.ITEM_NODE + "><" + this.TEMPLATE_NODE + ">" + T.ds
		+ "</" + this.TEMPLATE_NODE + "><" + this.NAME_NODE + ">" + T.n
		+ "</" + this.NAME_NODE + "><" + this.LEVEL_NODE + ">" + T.sl
		+ "</" + this.LEVEL_NODE + "><" + this.RANGE_NODE + "><"
		+ this.RANGE_SIZE_NODE + ">" + T.rs + "</"
		+ this.RANGE_SIZE_NODE + "><" + this.RANGE_ATT_NODE + ">"
		+ T.sr + "</" + this.RANGE_ATT_NODE + "></" + this.RANGE_NODE
		+ "></" + this.ITEM_NODE + ">";
	return S;
    };
    N.prototype.validate = function I() {
	var T = this.props.nodes.getItems(), U, V = "";
	for ( var S in T) {
	    if (S == T.length - 1) {
		continue;
	    }
	    U = T[S];
	    if (!U.n || !U.sl || !U.sr || !U.ds || !/^\d+$/.test(U.rs)) {
		V += " " + U.n + ",";
	    }
	}
	if (V) {
	    V = V.substring(0, V.length - 1);
	    return microstrategy.descriptors.getDescriptor(7565) + " " + V;
	}
	return true;
    };
    N.prototype.checkValidationStatus = function D() {
	var V = this.props.nodes.props.items, U = microstrategy
		.bone("visPropsEditor_VisualizationPropertiesEditorStyle").elem, S = microstrategy
		.findChildWithAtt(U, "input", "id", "ok");
	for ( var T in V) {
	    if (V[T].invalidRS) {
		S.disabled = true;
		return;
	    }
	}
	S.disabled = false;
    };
    function N(S) {
	mstr.models.BaseModel.apply(this, [ S ]);
    }
    return N;
})();
mstr.models.IphoneTSFieldValidator = (function() {
    mstr.$O.extendsClass(C, mstr.models.FieldValidator);
    C.prototype.validate = function A(D) {
	this.props.theValue = D;
	var E = mstr.models.FieldValidator.prototype.validate
		.apply(this, [ D ]);
    };
    C.prototype.setValidationStatus = function B(H) {
	var G = mstr.models.FieldValidator.prototype.setValidationStatus.apply(
		this, [ H ]);
	var D = this.props.parent;
	D = D && D.props.model;
	var F = D && D.props.nodes, E = this.props.theValue;
	F = F && F.getSelectedItem();
	if (F) {
	    F.rs = E;
	    F.invalidRS = !G;
	    D.set("selectedRangeSize", E);
	    D.checkValidationStatus();
	}
	return G;
    };
    function C(D) {
	mstr.models.FieldValidator.apply(this, [ D ]);
    }
    return C;
})();
mstr.behaviors.ToolbarContextMenuOpener = (function() {
    var B = {};
    B.openMenu = function C(E) {
	var G = E.props.element, D = getObjSumLeft(G), H = getObjSumTop(G)
		+ getObjHeight(G), F = E.getModel();
	microstrategy.openBlockLoaderEditor("addWidgetToolbarMenu",
		"InsertMenuBlockLoader", null, {
		    cssText : "position:absolute;top:" + H + "px;left:" + D
			    + "px;z-index:"
			    + mstr.views.FloatingMenuBook.prototype.getZIndex()
			    + ";",
		    useFixedPosition : "false",
		    contextMenuName : F.get("contextMenuName"),
		    viewer : "#" + F.props.id
		}, E, null, document.body);
    };
    B.changeIcon = function A(D, E, G) {
	var F = E.props.cmdid.split(";");
	F = F.length > 1 ? F[1] : F.join();
	G.className = D.props.cssBaseIcon + F;
    };
    return B;
})();
mstr.models.ToolbarContextMenuOpenerModel = (function() {
    mstr.$O.extendsClass(A, mstr.models.BaseModel);
    A.prototype.init = function B() {
	mstr.models.BaseModel.prototype.init.apply(this);
	this.commands.p = this;
	this.commands.h = this.props.toolbarHelper;
    };
    A.prototype.commands = {
	queryEnabled : function() {
	    return true;
	},
	queryVisible : function() {
	    return true;
	},
	queryState : function() {
	    return true;
	},
	exec : function(C) {
	    this.p.set("cmdid", C);
	    this.h.execPressed();
	}
    };
    function A(C) {
	mstr.models.BaseModel.apply(this, [ C ]);
    }
    return A;
})();
mstr.itemrenderers.IPhoneTimeSeriesItemRenderer = (function() {
    LV = mstr.$H.clone(mstr.itemrenderers.ListView);
    LV.renderListItem = function(A, C, F, D) {
	var B = mstr.itemrenderers.FastListView.renderListItem(A, C, F, D);
	this._insertElementForIndex(A, F, D.at, B);
	if (D && D.item && D.item.dssid == -1) {
	    var E = B.style;
	    E.fontStyle = "italic";
	    E.textDecoration = "underline";
	    E.cursor = "pointer";
	    B.className = "";
	    B.title = "";
	}
	return B;
    };
    return LV;
})();
mstrSelectionsImpl.prototype = {};
mstrSelectionsImpl.prototype.length = 0;
mstrSelectionsImpl.prototype.path = "";
mstrSelectionsImpl.prototype.dragX = 0;
mstrSelectionsImpl.prototype.dragY = 0;
mstrSelectionsImpl.prototype.mousedownX = 0;
mstrSelectionsImpl.prototype.mousedownY = 0;
mstrSelectionsImpl.prototype.shiftKey = false;
mstrSelectionsImpl.prototype.ctrlKey = false;
mstrSelectionsImpl.prototype.clickedSrc = null;
mstrSelectionsImpl.prototype.onload = function(A) {
};
mstrSelectionsImpl.prototype.onmousedown = function(B) {
    try {
	if (!B) {
	    B = window.event;
	}
	getMouse(B);
	this.mousedownX = lMouseX;
	this.mousedownY = lMouseY;
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrSelectionsImpl.prototype.onmouseup = function(C, B) {
    try {
	if (typeof (mstr) != "undefined") {
	    this.parentBone.detachWinListener((B) ? B : this, "mousemove");
	    this.parentBone.detachWinListener((B) ? B : this, "mouseup");
	} else {
	    document.onmousemove = null;
	    document.onmouseup = null;
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrSelectionsImpl.prototype.ondeselect = function(B) {
    try {
	if (B.e) {
	    B = B.e;
	}
	this.onmouseup(B);
	if (this.clickedSrc != null) {
	    this.remove(this.clickedSrc);
	}
	return false;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrSelectionsImpl.prototype.ondragstart = function(C) {
    try {
	if (!C) {
	    C = window.event;
	}
	if (C.e) {
	    C = C.e;
	}
	getMouse(C);
	if (Math.abs(lMouseX - this.mousedownX) >= 3
		|| Math.abs(lMouseY - this.mousedownY) >= 3) {
	    microstrategy.eventManager.onnotifydrag(this.items,
		    this.parentBone, this.getDssTypes());
	    var A = microstrategy.getEventHandlerString(this.path);
	    if (typeof (mstr) != "undefined") {
		this.parentBone.attachWinListener(this, "mousemove", "ondrag");
		this.parentBone.attachWinListener(this, "mouseup", "ondragend");
	    } else {
		document.onmousemove = new Function("e", A + " { return "
			+ this.path + ".ondrag(e); }");
		document.onmouseup = new Function("e", A + " { return "
			+ this.path + ".ondragend(e); }");
	    }
	    this.ondrag(C);
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return false;
};
mstrSelectionsImpl.prototype.ondrag = function(A) {
};
mstrSelectionsImpl.prototype.ondragend = function(A) {
};
mstrSelectionsImpl.prototype.add = function(B) {
    try {
	this.items[B.getAttribute("id")] = B;
	this.length++;
	if (this.parentBone && this.parentBone.onselectionchange) {
	    this.parentBone.onselectionchange();
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrSelectionsImpl.prototype.remove = function(B) {
    try {
	delete this.items[B.getAttribute("id")];
	this.length--;
	if (this.parentBone.onselectionchange) {
	    this.parentBone.onselectionchange();
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrSelectionsImpl.prototype.clear = function(C, B) {
    try {
	if (C == null) {
	    C = true;
	}
	this.items = {};
	this.length = 0;
	if (C && this.parentBone && this.parentBone.onselectionchange) {
	    this.parentBone.onselectionchange(B);
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrSelectionsImpl.prototype.firstItem = function() {
    try {
	for (member in this.items) {
	    return this.items[member];
	    break;
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrSelectionsImpl.prototype.isMulti = function() {
    try {
	return (this.length > 1);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrSelectionsImpl.prototype.isSelected = function(B) {
    try {
	return (typeof (this.items[B.getAttribute("id")]) != "undefined");
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrSelectionsImpl.prototype.isActive = function() {
    try {
	return (this.length > 0);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrSelectionsImpl.prototype.getTypes = function() {
    try {
	var A = [];
	var B = 0;
	for ( var D in this.items) {
	    if (this.items[D].getAttribute(microstrategy.HTMLATTR_SUBOBJTYPE)) {
		A[B++] = this.items[D]
			.getAttribute(microstrategy.HTMLATTR_OBJTYPE)
			+ "."
			+ this.items[D]
				.getAttribute(microstrategy.HTMLATTR_SUBOBJTYPE);
	    } else {
		A[B++] = this.items[D]
			.getAttribute(microstrategy.HTMLATTR_OBJTYPE);
	    }
	}
	return A;
    } catch (C) {
	microstrategy.errors.log(C);
	return null;
    }
};
mstrSelectionsImpl.prototype.isSameType = function() {
    try {
	var A = this.getDssTypes();
	A.sort(function(D, C) {
	    return parseInt(D) - parseInt(C);
	});
	return (A[0] == A[A.length - 1]);
    } catch (B) {
	microstrategy.errors.log(B);
	return null;
    }
};
mstrSelectionsImpl.prototype.isOnlyMetrics = function() {
    try {
	for ( var B in this.items) {
	    if (this.items[B].getAttribute(microstrategy.HTMLATTR_DSS_TYPE) != microstrategy.DSSTYPE_METRIC
		    && this.items[B]
			    .getAttribute(microstrategy.HTMLATTR_DSS_TYPE) != microstrategy.DSSTYPE_USER_METRIC
		    && this.items[B]
			    .getAttribute(microstrategy.HTMLATTR_DSS_TYPE) != microstrategy.DSSTYPE_USER_SUMMARY_METRIC) {
		return false;
	    }
	}
	return true;
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrSelectionsImpl.prototype.getDssTypes = function() {
    try {
	var A = [];
	var B = 0;
	for ( var D in this.items) {
	    A[B++] = this.items[D]
		    .getAttribute(microstrategy.HTMLATTR_DSS_TYPE);
	}
	return A;
    } catch (C) {
	microstrategy.errors.log(C);
	return null;
    }
};
mstrSelectionsImpl.prototype.getSelectedIds = function() {
    try {
	var C = "|";
	for ( var B in this.items) {
	    C += B + "|";
	}
	return C;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrSelectionsImpl.prototype.getDataSetIDs = function() {
    try {
	var B = [];
	var C = 0;
	for ( var E in this.items) {
	    var A = new mstrObjectInfoImpl(this.items[E]);
	    B[C++] = A.dSetId;
	}
	return B;
    } catch (D) {
	microstrategy.errors.log(D);
	return null;
    }
};
mstrSelectionsImpl.prototype.getSelectionsKey = function() {
    try {
	var A = [];
	var B = 0;
	for ( var D in this.items) {
	    A[B++] = this.items[D].id;
	}
	return A;
    } catch (C) {
	microstrategy.errors.log(C);
	return null;
    }
};
mstrSelectionsImpl.prototype.getFirstObjSubType = function() {
    try {
	var A = null;
	var C = this.firstItem();
	if (C) {
	    A = C.getAttribute(microstrategy.HTMLATTR_SUBOBJTYPE);
	}
	return A;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrSelectionsImpl.prototype.getFirstObjType = function() {
    try {
	var A = null;
	var C = this.firstItem();
	if (C) {
	    A = C.getAttribute(microstrategy.HTMLATTR_OBJTYPE);
	}
	return A;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrSelectionsImpl.prototype.getChildren = function(B) {
    try {
	return B.parentNode.parentNode.lastChild.getElementsByTagName("span");
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrSelectionsImpl.prototype.getItems = function() {
    try {
	return mstr.utils.Arrays.fromHashValues(this.items);
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrSelectionsImpl.prototype.getInnerRect = function(D) {
    try {
	var C = microstrategy.styleObj;
	var B = {};
	B.left = getObjSumLeft(D);
	B.top = getObjSumTop(D);
	if (bIsIE6) {
	    B.right = B.left + getObjWidth(D);
	    B.bottom = B.top + getObjHeight(D);
	} else {
	    B.left += D.clientLeft;
	    B.top += D.clientTop;
	    B.right = B.left + C.getInnerWidth(D);
	    B.bottom = B.top + C.getInnerHeight(D);
	}
	if (B.right < (B.left + 1)) {
	    B.right = B.left + 1;
	}
	if (B.bottom < (B.top + 1)) {
	    B.bottom = B.top + 1;
	}
	return B;
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrSelectionsImpl.prototype.getOuterRect = function(D, A) {
    try {
	var C = {};
	if (D.getAttribute(microstrategy.HTMLATTR_OBJTYPE) == null) {
	    C.left = getObjSumLeft(D);
	    C.top = getObjSumTop(D);
	} else {
	    C.left = getObjSumLeftScrolled(D);
	    C.top = getObjSumTopScrolled(D, A);
	}
	C.right = Math.max(C.left + getObjWidth(D), C.left + 1);
	C.bottom = Math.max(C.top + getObjHeight(D), C.top + 1);
	return C;
    } catch (B) {
	microstrategy.errors.log(B);
	return null;
    }
};
function mstrSelectionsImpl(A) {
    this.items = {};
    this.parentBone = A;
    return this;
}
promptFunctionsScript = true;
var bDefault = new Array();
var treeToList = "";
var treePos = "";
var promptJSAnswerName = "";
var promptJSListBoxName = "";
var promptJSDimensionName = "";
var promptJSMaxPin = -1;
var sBeanPath = "";
var promptHeight = "";
var searchPrefix = "";
if (typeof (iframe) != "undefined") {
    iframe.isPromptedReport = true;
}
function gotoAnchor(B) {
    var C, D;
    if ((navigator != null) && (B > 1)) {
	if ((navigator.appName != null) && (navigator.appVersion != null)) {
	    C = (navigator.appName == "Netscape");
	    D = (navigator.appName.indexOf("Internet Explorer") != -1);
	    if (C || (D && parseInt(navigator.appVersion) >= 4)) {
		var A = document.getElementById("CP" + B);
		if (A) {
		    var E = document.getElementById("mstrPromptsBody");
		    E.scrollTop = A.offsetTop;
		    window.scrollTo(0, E.parentNode.offsetTop + A.offsetTop
			    - E.scrollTop);
		}
	    }
	}
    }
}
function checkAnchorsReady(B) {
    var A = document.anchors.length;
    for ( var C = 0; C < A; C++) {
	if (document.anchors.item(C).name == B) {
	    return true;
	}
    }
    return false;
}
function AddItemstoElementPickerTextBox(F, B) {
    var A = getObj(F);
    var G = getObj(B);
    if (G == null || A == null) {
	return;
    }
    var D;
    var C = A.options.length;
    if (!A.multiple) {
	G.value = A.options[A.selectedIndex].value;
	D = A.selectedIndex;
	A.options[D].selected = false;
    } else {
	for ( var E = 0; E < C; E++) {
	    if ((A.options[E]) && (A.options[E].selected == true)
		    && (A.options[E].value != "-none-")) {
		if (G.value.length > 0) {
		    G.value += ";";
		}
		G.value += A.options[E].value;
		A.options[E].selected = false;
		D = E;
	    }
	}
    }
    if (D != C - 1) {
	A.options[D + 1].selected = true;
    }
}
function MoveItemsbyListObjectPrompt(S, R, M, B, F) {
    try {
	var P = document.PromptForm;
	var O;
	var C;
	var J = true;
	var T = getObj(S);
	var L = getObj(R);
	var A = -1;
	var D = 0;
	var G = document.getElementById("mstrPromptsButtonBarBottom");
	var H = 0;
	if (M == null) {
	    M = true;
	}
	if (B == null) {
	    B = true;
	}
	if (F == null) {
	    F = false;
	}
	T.style.visibility = "hidden";
	C = T.options.length;
	H = L.options.length;
	if (F && B) {
	    for (O = 0; O < H; O++) {
		if (L.options[O].selected) {
		    H = O;
		    break;
		}
	    }
	}
	for (O = 0; O < C; O++) {
	    if ((T.options[O]) && (T.options[O].selected == true)
		    && (T.options[O].value != "-none-")) {
		var K = true;
		if (!M) {
		    if (isItemInList(T.options[O], L)) {
			K = false;
		    }
		}
		if (B && K) {
		    var Q = new Option(T.options[O].text, T.options[O].value,
			    false, true);
		    if ((L.length == 1) && (L.options[0].value == "-none-")) {
			L.options[0] = Q;
			L.options[0].selected = false;
		    } else {
			for ( var N = L.length - 1; N >= H; N--) {
			    var I = new Option(L.options[N].text,
				    L.options[N].value, false, false);
			    L.options[N + 1] = I;
			}
			L.options[H] = Q;
			L.options[H].selected = false;
			H = H + 1;
		    }
		}
		A = O;
		D = D + 1;
	    }
	}
	if (M) {
	    for (O = C - 1; O >= 0; O--) {
		if (T.options[O] && (T.options[O].selected == true)
			&& (T.options[O].value != "-none-")) {
		    T.options[O] = null;
		}
	    }
	}
	if (T.options.length == 0) {
	    var Q = new Option("--" + aDescriptor[18] + "--", "-none-", false,
		    false);
	    T.options[0] = Q;
	    T.options[0].selected = false;
	}
	if (!M && (T.options.length > 1)) {
	    if (D > 0) {
		for (O = 0; O < A; O++) {
		    T.options[O].selected = false;
		}
	    }
	    if ((A >= 0) && (T.options[A + 1] != null)) {
		T.options[A].selected = false;
		T.options[A + 1].selected = true;
	    } else {
		if (A == -1) {
		    T.options[0].selected = true;
		}
	    }
	} else {
	    if ((A > 0) && (T.options.length > 0)) {
		if (A >= D) {
		    if (T.options.length > A - D + 1) {
			T.options[A - D + 1].selected = true;
		    } else {
			T.options[T.options.length - 1].selected = true;
		    }
		} else {
		    D = D - 1;
		    T.options[A - D].selected = true;
		}
	    } else {
		T.options[0].selected = true;
	    }
	}
	if (G) {
	    G.style.visibility = "hidden";
	    G.style.visibility = "visible";
	}
	T.style.visibility = "visible";
    } catch (E) {
	alert(E.value);
    }
}
function AddItemsbyListObjectForObjectPrompt(G, D, I) {
    var J = document.PromptForm;
    var F;
    var E;
    var M;
    var A = new Array();
    var N;
    var L;
    var B;
    var O = getObj(G);
    var C = getObj(D);
    if (I == null) {
	I = true;
    }
    B = 0;
    N = C.options.length;
    for (F = 0; F < N; F++) {
	if (C.options[F].selected) {
	    N = F;
	    break;
	}
    }
    O.style.visibility = "hidden";
    M = O.options.length;
    for (F = 0; F < M; F++) {
	if (O.options[F].selected && (O.options[F].value != "-none-")) {
	    if (C.options.length == 1) {
		if (C.options[0].value == "-none-") {
		    C.options[0] = null;
		    if (N > 0) {
			N = N - 1;
		    }
		}
	    }
	    var K = true;
	    if (!I) {
		if (isItemInList(O.options[F], C)) {
		    K = false;
		}
	    }
	    if (K) {
		for (E = C.length - 1; E >= N; E--) {
		    var H = new Option(C.options[E].text, C.options[E].value,
			    false, false);
		    C.options[E + 1] = H;
		}
		var H = new Option(O.options[F].text, O.options[F].value,
			false, false);
		C.options[N] = H;
		C.options[N].selected = false;
		N = N + 1;
		H = null;
		L = F;
		B = B + 1;
	    }
	}
    }
    if (I) {
	for (F = M - 1; F >= 0; F--) {
	    if (O.options[F].selected) {
		O.options[F].selected = false;
		A[A.length] = F;
	    }
	}
	for (F = 0; F < A.length; F++) {
	    O.options[A[F]] = null;
	}
    }
    if (O.options.length == 0) {
	var H = new Option("--" + aDescriptor[18] + "--", "-none-", false,
		false);
	O.options[O.length] = H;
	O.options[O.length - 1].selected = false;
	H = null;
    }
    if ((L > 0) && (O.options.length > 0)) {
	if (L >= B) {
	    if (O.options.length > L - B + 1) {
		O.options[L - B + 1].selected = true;
	    } else {
		O.options[O.options.length - 1].selected = true;
	    }
	} else {
	    B = B - 1;
	    O.options[L - B].selected = true;
	}
    } else {
	O.options[0].selected = true;
    }
    O.style.visibility = "visible";
}
function isItemInList(A, C) {
    var B = false;
    for (j = C.length - 1; j >= 0; j--) {
	if (A.value == C.options[j].value) {
	    B = true;
	    break;
	}
    }
    return B;
}
function BuildUserSelections() {
    var E;
    var D;
    var N;
    var L;
    var H;
    var B;
    var A;
    var J;
    var I;
    var K;
    var M;
    var C;
    for (E = 0; E < promptJSMaxPin; E++) {
	if (E > 0) {
	    I = promptJSAnswerName + "_" + parseInt(E);
	    K = promptJSListBoxName + "_" + parseInt(E);
	    M = promptJSDimensionName + "_" + parseInt(E);
	    sOperatorName = promptJSFuncName + "_" + parseInt(E);
	    C = sTreeName + "_" + parseInt(E);
	} else {
	    I = promptJSAnswerName;
	    K = promptJSListBoxName;
	    M = promptJSDimensionName;
	    sOperatorName = promptJSFuncName;
	    C = sTreeName;
	}
	if (K != null) {
	    H = (document.getElementsByName(K).length > 0) ? document
		    .getElementsByName(K)[0] : null;
	    B = (document.getElementsByName(I).length > 0) ? document
		    .getElementsByName(I)[0] : null;
	    A = (document.getElementsByName(M).length > 0) ? document
		    .getElementsByName(M)[0] : null;
	    J = (document.getElementsByName(C).length > 0) ? document
		    .getElementsByName(C)[0] : null;
	    if (H != null) {
		L = H.options;
		N = L.length;
		if (B != null) {
		    B.value = "";
		}
		if ((L[0].value != "-none-") && (L[0].value != "-default-")) {
		    for (D = 0; D < N; D++) {
			if (L[D].value == "include" || L[D].value == "exclude") {
			    continue;
			}
			if (A == null && J == null) {
			    if (B.value != "") {
				B.value += unescape(ANSWER_SEPARATOR);
			    }
			    B.value += L[D].value;
			} else {
			    switch (CheckAttributeElementExpression(L[D].value)) {
			    case 2:
				if (B.value.length > 0) {
				    B.value += unescape(ANSWER_SEPARATOR);
				}
				B.value += L[D].value;
				break;
			    case 1:
				if (B.value.length > 0) {
				    B.value += unescape(ANSWER_SEPARATOR);
				}
				B.value += "22" + unescape(ITEM_SEPARATOR)
					+ "1" + unescape(EXPRESSION_SEPARATOR)
					+ L[D].value
					+ unescape(EXPRESSION_SEPARATOR);
				break;
			    case 0:
				B.value += L[D].value
					+ unescape(UNIT_SEPARATOR);
			    }
			}
		    }
		}
	    } else {
		var F = getObj(sOperatorName);
		if (F) {
		    if (F.options) {
			F.options[F.selectedIndex].value = AddOutputLevelToOperator(
				F.options[F.selectedIndex].value, E);
		    } else {
			F.value = AddOutputLevelToOperator(F.value, E);
		    }
		}
		var G = checkConstantPromptAnswer(I);
		if (G.length > 0) {
		    B.value = G;
		}
	    }
	}
    }
    return (true);
}
function checkConstantPromptAnswer(G) {
    var B = "";
    var A = getObj(G + "_date");
    if (A != null) {
	B = A.value;
    }
    var E = "";
    var I = "";
    var D = "";
    var J = ":";
    var C = is24HourFormat() ? getObj(G + "_timeHour24") : getObj(G
	    + "_timeHour12");
    if (C != null) {
	E = C.value;
    }
    var K = getObj(G + "_timeMins");
    if (K != null) {
	I = K.value;
    }
    var F = getObj(G + "_timeSecs");
    if (F != null) {
	D = F.value;
    }
    var H = getObj(G + "_timeSep");
    if (H != null) {
	J = H.value;
    }
    if (E.length > 0) {
	B += " " + E + J + I;
    }
    if (D.length > 0) {
	B += J + D;
    }
    return B;
}
function GetCurrentAttributeValue(D) {
    var C = "";
    if (D.options) {
	var A = D.options.length;
	for ( var B = 0; B < A; B++) {
	    if (D.options[B].defaultSelected == true) {
		C = D.options[B].value;
	    }
	}
    } else {
	C = D.value;
    }
    return C;
}
function GetUnitType(B) {
    var A = B.split(ITEM_SEPARATOR);
    return (A[1]);
}
function GetUnitName(B) {
    var A = B.split(ITEM_SEPARATOR);
    return (A[2]);
}
function CheckAttributeExist(B, A) {
    var C = B.options.length;
    for ( var D = 0; D < C; D++) {
	if (isSameAttributeValue(B.options[D].value, A)) {
	    return (D + 1);
	}
    }
    return (-1);
}
function CheckNextNonAttributeElement(A, D) {
    var B = A.options.length;
    for ( var C = D; C < B; C++) {
	if (CheckAttributeElementExpression(A.options[C].value) != 0) {
	    return (C);
	}
    }
    return (-1);
}
function CheckAttributeElementExpression(C) {
    var B = ":";
    var E = EXPRESSION_SEPARATOR;
    var D = ITEM_SEPARATOR;
    var A = new Array();
    var G = new Array();
    var F = new Array();
    A = C.split(E);
    if (A.length > 1) {
	return (2);
    }
    G = A[0].split(D);
    F = G[0].split(B);
    if (F.length > 1) {
	return (0);
    } else {
	if (A[0] == "-default-" || A[0] == "-none-") {
	    return (-1);
	} else {
	    return (1);
	}
    }
}
function checkOneHierarchyRestriction(D, A, B, E, C) {
    if (canAddAttribute(D, A, B, E)) {
	return true;
    }
    showMessage({
	contents : microstrategy.descriptors.getDescriptor("5097"),
	elements : microstrategy.OK_BUTTON + microstrategy.CANCEL_BUTTON,
	okEval : "removeCurrentSelectionsForHierarchy('" + B + "','" + E
		+ "');" + C,
	type : mstrMsgBoxImpl.MSG_WARNING
    });
    return false;
}
function canAddAttribute(D, B, C, F) {
    var E = getObj(C);
    if (E == "undefined" || E == null) {
	var A = getObj("PromptForm");
	if (A) {
	    E = document.createElement("input");
	    if (E) {
		E.type = "hidden";
		E.id = C;
		E.name = C;
		A.insertAdjacentElement("beforeEnd", E);
		E.value = getExistingAttributeIdsFromList(F);
	    }
	}
    }
    var G = E.value;
    if (G.length <= 0 || G.indexOf(D) >= 0 || G.indexOf(B) >= 0) {
	return true;
    }
    return false;
}
function addAllowedObjects(D, A) {
    var B = getObj(A);
    if (B != null) {
	var C = B.value;
	if (C.length <= 0 || C.indexOf(D) < 0) {
	    B.value = C + D + ",";
	}
    }
}
function removeCurrentSelectionsForHierarchy(A, F) {
    var C = getObj(A);
    clearAllowedObjects(C);
    var E = getObj(F);
    for ( var B = E.options.length - 1; B >= 0; B--) {
	E.options[B] = null;
    }
    var D = new Option("--" + aDescriptor[18] + "--", "-none-", false, false);
    E.options[0] = D;
    E.options[0].selected = false;
    D = null;
}
function clearAllowedObjects(A) {
    var B = getObj(A);
    if (!!B) {
	B.value = "";
    }
}
function getExistingAttributeIdsFromList(E) {
    var A = "";
    var D = getObj(E);
    if (D != null) {
	for ( var C = D.options.length - 1; C >= 0; C--) {
	    var B = getAttributeIdFromValue(D.options[C].value);
	    if (B.length > 0) {
		A += B + ",";
	    }
	}
    }
    return A;
}
function getAttributeIdFromValue(C) {
    var A = "";
    var B = CheckAttributeElementExpression(C);
    if (B == 2) {
	A = C.split(EXPRESSION_SEPARATOR)[1];
    } else {
	if (B == 1) {
	    A = C.split(ITEM_SEPARATOR)[0];
	}
    }
    return (A.length > 0) ? (A + ITEM_SEPARATOR + "12") : A;
}
function AddItemsbyListObjectForHI(V, U, E, S, O, P) {
    var T;
    var R;
    var L = new Array();
    var M = ITEM_SEPARATOR;
    var Y = new Array();
    var B = "";
    var N;
    var C;
    var G;
    var Q = parseInt(S);
    var W;
    if (O == null) {
	O = true;
    }
    var X = getObj(V);
    var K = getObj(U);
    var J = getObj(E);
    var A = -1;
    var D;
    D = 0;
    if (X) {
	X.focus();
	R = GetCurrentAttributeValue(J);
	N = CheckAttributeExist(K, R);
	C = X.options.length;
	for (i = 0; i < C; i++) {
	    if (X.options[i].selected && X.options[i].value != "-none-") {
		var I = true;
		if (!O) {
		    if (isItemInList(X.options[i], K)) {
			I = false;
		    }
		}
		if (I) {
		    if ((K.options.length == 1)
			    && ((K.options[0].value == "-none-") || (K.options[0].value == "-default-"))) {
			if (K.options[0].value == "-default-") {
			    bDefault[Q] = true;
			} else {
			    bDefault[Q] = false;
			}
			K.options[0] = null;
		    }
		    if (N == -1) {
			T = new Option(GetUnitName(R) + ":", R, false, false);
			K.options[K.length] = T;
			if (K.options[K.length - 1]) {
			    K.options[K.length - 1].selected = false;
			}
			T = null;
		    }
		    var T;
		    if (bIsIE4) {
			T = new Option(unescape("%a0") + unescape("%a0")
				+ unescape("%a0") + X.options[i].text,
				X.options[i].value, false, false);
		    } else {
			T = new Option(
				"\u00A0\u00A0\u00A0" + X.options[i].text,
				X.options[i].value, false, false);
		    }
		    if (N > -1) {
			var F = CheckNextNonAttributeElement(K, N);
			if (F == -1) {
			    N = K.options.length;
			} else {
			    N = F;
			}
		    }
		    if (T) {
			N = AddItem(S, T, N, K);
			var H = getObj("PROMPT_DEFAULT_MEANING_" + S);
			if ((H != null) && (bDefault[Q])) {
			    H.style.display = "none";
			}
			N += 1;
			T = null;
		    }
		}
		A = i;
		D = D + 1;
	    }
	}
	if (O) {
	    for (i = C - 1; i >= 0; i--) {
		if (X.options[i].selected) {
		    X.options[i].selected = false;
		    Y[Y.length] = i;
		}
	    }
	}
	for (i = 0; i < Y.length; i++) {
	    X.options[Y[i]] = null;
	}
	if (X.options.length == 0) {
	    var T = new Option("--" + aDescriptor[18] + "--", "-none-", false,
		    false);
	    X.options[X.length] = T;
	    X.options[X.length - 1].selected = false;
	    T = null;
	}
	Y = null;
	CleanList(K);
	if (!O && (X.options.length > 1)) {
	    if (D > 0) {
		for (i = 0; i < A; i++) {
		    X.options[i].selected = false;
		}
	    }
	    if ((A >= 0) && (X.options[A + 1] != null)) {
		X.options[A].selected = false;
		X.options[A + 1].selected = true;
	    } else {
		if (A == -1) {
		    X.options[0].selected = true;
		}
	    }
	} else {
	    if ((A > 0) && (X.options.length > 0)) {
		if (A >= D) {
		    if (X.options.length > A - D + 1) {
			X.options[A - D + 1].selected = true;
		    } else {
			X.options[X.options.length - 1].selected = true;
		    }
		} else {
		    D = D - 1;
		    X.options[A - D].selected = true;
		}
	    } else {
		X.options[0].selected = true;
	    }
	}
	C = K.options.length;
	G = 0;
	for (i = 0; i < C; i++) {
	    B = K.options[i].value;
	    if (CheckAttributeElementExpression(B) != 0) {
		G += 1;
	    }
	}
	if ((getObj("ANDOR_" + S) != null) && (G > 1)) {
	    displayObj("ANDOR_" + S);
	}
    }
}
function RemoveItemsByPin(J, B) {
    var C = new Array();
    var G = J.options.length;
    var I = parseInt(B);
    for ( var E = G - 1; E >= 0; E--) {
	if (J.options[E].selected) {
	    J.options[E].selected = false;
	    C[C.length] = E;
	}
    }
    for (E = 0; E < C.length; E++) {
	if ((J.options[C[E]].value == "-default-")
		|| (J.options[C[E]].text == "(default)")) {
	    bDefault[I] = false;
	}
	for ( var D = C[E]; D < J.options.length - 1; D++) {
	    J.options[D].value = J.options[D + 1].value;
	    J.options[D].text = J.options[D + 1].text;
	}
	J.options.length -= 1;
    }
    if (J.options.length == 0) {
	var H = getObj("PROMPT_DEFAULT_MEANING_" + B);
	if (bDefault[I]) {
	    var F = new Option("--- " + aDescriptor[19] + " ---", "-default-",
		    false, false);
	    if (H != null) {
		H.style.display = "block";
	    }
	} else {
	    var F = new Option("--" + aDescriptor[18] + "--", "-none-", false,
		    false);
	    if (H != null) {
		H.style.display = "none";
		var A = null;
		if (B == "0") {
		    A = getObj("answerOptions");
		} else {
		    A = getObj("answerOptions_" + B);
		}
		if (A != null) {
		    A.value = "2";
		}
	    }
	}
	J.options[J.length] = F;
	J.options[J.length - 1].selected = false;
	F = null;
    }
    C = null;
}
function RemoveItemsbyListObjectForHIInList(Y, X, E, V, Q, U, S) {
    var J;
    var H;
    var T = "";
    var R;
    var O = new Array();
    var A;
    var I;
    var B;
    var D = false;
    var F = ITEM_SEPARATOR;
    var a = getObj(Y);
    var N = getObj(X);
    var M = getObj(E);
    var Z;
    if (Q == null) {
	Q = true;
    }
    if (U == null) {
	U = true;
    }
    if (M) {
	T = GetCurrentAttributeValue(M);
    } else {
	D = true;
    }
    var C = a.options.length;
    var K = false;
    var W = -1;
    for ( var P = 0; P < C; P++) {
	if ((a.options[P]) && (a.options[P].selected)) {
	    K = true;
	    W = P;
	    break;
	}
    }
    if (!K && (C > 0) && (a.options[0]) && (a.options[0].value != "-none")) {
	a.options[C - 1].selected = true;
    }
    for ( var P = 0; P < C; P++) {
	J = a.options[P].value;
	if (CheckAttributeElementExpression(J) == 1) {
	    bAttributeSelected = true;
	    var G = P + 1;
	    H = a.options[G].value;
	    while ((G < C) && (CheckAttributeElementExpression(H) == 0)) {
		if (a.options[P].selected) {
		    a.options[G].selected = true;
		    if ((U) && (isSameAttributeValue(J, T) || D)) {
			R = a.options[G].text;
			var L = new Option(R.substring(3, R.length),
				a.options[G].value, false, false);
			AddItem(V, L, -1, N);
		    }
		} else {
		    if (a.options[G].selected == true) {
			if ((U) && (isSameAttributeValue(J, T) || D)) {
			    R = a.options[G].text;
			    var L = new Option(R.substring(3, R.length),
				    a.options[G].value, false, false);
			    AddItem(V, L, -1, N);
			}
		    } else {
			bAttributeSelected = false;
		    }
		}
		G += 1;
		if (G < C) {
		    H = a.options[G].value;
		}
	    }
	    a.options[P].selected = bAttributeSelected;
	    P = G - 1;
	}
    }
    if (Q) {
	RemoveItemsByPin(a, V);
	CleanList(a);
    }
    if (a.length > 1) {
	if ((W > 0) && (W < (a.length - 1))) {
	    if (CheckAttributeElementExpression(a.options[W].value) != 0) {
		W++;
	    }
	} else {
	    if (CheckAttributeElementExpression(a.options[a.length - 1].value) != 1) {
		W = a.length - 1;
	    } else {
		if (CheckAttributeElementExpression(a.options[a.length - 2].value) != 1) {
		    W = a.length - 2;
		}
	    }
	}
	a.options[W].selected = true;
    }
    C = a.options.length;
    I = 0;
    for (i = 0; i < C; i++) {
	B = a.options[i].value;
	if (CheckAttributeElementExpression(B) != 0) {
	    I += 1;
	}
    }
    if (I < 2) {
	Z = getObj("ANDOR_" + V);
	if (Z != null) {
	    Z.style.display = "none";
	}
    }
}
function RemoveItemsbyListObjectForHIInQual(V, E, F, U, R) {
    var L;
    var J;
    var T;
    var S;
    var O = new Array();
    var A;
    var K;
    var C;
    var Q;
    var H;
    var I = "";
    var B;
    var P = EXPRESSION_SEPARATOR;
    var G = ITEM_SEPARATOR;
    var X = getObj(V);
    var M = getObj(E);
    var N = getObj(F);
    var W;
    if (R == null) {
	R = true;
    }
    var D = X.options.length;
    for (Q = 0; Q < D; Q++) {
	L = X.options[Q].value;
	B = CheckAttributeElementExpression(L);
	if (B == 1) {
	    bAttributeSelected = true;
	    H = Q + 1;
	    J = X.options[H].value;
	    while ((H < D) && (CheckAttributeElementExpression(J) == 0)) {
		if (X.options[Q].selected) {
		    X.options[H].selected = true;
		} else {
		    if (X.options[H].selected == false) {
			bAttributeSelected = false;
		    }
		}
		H += 1;
		if (H < D) {
		    J = X.options[H].value;
		}
	    }
	    X.options[Q].selected = bAttributeSelected;
	    Q = H - 1;
	}
	if ((B == 2) && (I == "")) {
	    I = L;
	}
    }
    if (R) {
	RemoveItemsByPin(X, U);
	CleanList(X);
    }
    D = X.options.length;
    K = 0;
    for (i = 0; i < D; i++) {
	C = X.options[i].value;
	if (CheckAttributeElementExpression(C) != 0) {
	    K += 1;
	}
    }
    if (K < 2) {
	W = getObj("ANDOR_" + U);
	if (W != null) {
	    W.style.display = "none";
	}
    }
    if (N) {
	O = I.split(P);
	D = N.options.length;
	for (i = 0; i < D; i++) {
	    if (N.options[i].value == O[1]) {
		N.options[i].selected = true;
		break;
	    }
	}
    }
    D = M.options.length;
    for (i = 0; i < D; i++) {
	if (M.options[i].value == O[0]) {
	    M.options[i].selected = true;
	    break;
	}
    }
}
function GetNodeAttributeValue(A) {
    var B = "";
    if (A) {
	B = A.getAttribute("val");
    }
    return B;
}
function GetNodeDimensionId(A) {
    var B = "";
    if (A) {
	B = A.getAttribute("dimensionId");
    }
    return B;
}
function AddAttributeQualificationExpressionForTree(E, D, A, B, F, C) {
    AddItemsbyListObjectForExpression(E, D, A, treeToList, treePos);
    ClosePromptEditor(B, F, C);
}
function ClosePromptEditor(A, D, B) {
    var C = document.getElementById(B);
    C && (C.style.visibility = "hidden");
    togglePulldowns(C, true);
    toggleShowBean(D, false, "isTreeRequest=true&position=" + treePos, true);
}
function AddItemsbyListObjectForHIInTree(M, R, N, E, K, L) {
    var J;
    var m;
    var Z = new Array();
    var T = "";
    var X;
    var C = 0;
    var D;
    var Y = parseInt(N);
    var B;
    var g = getObj(M);
    var S = getObj(R);
    var A;
    var Q = 0;
    var P = -1;
    var e = false;
    var d = "";
    if (L) {
	d = (Y > 0) ? "allowedObjects_" + Y : "allowedObjects";
    }
    if (g) {
	var U = g.getElementsByTagName("LI");
	if ((U) && (U.length)) {
	    C = U.length;
	}
	for (l = 0; l < C; l++) {
	    if (U[l].getAttribute("sel") == "1") {
		if (U[l].getAttribute("tp") != "12"
			&& U[l].getAttribute("tp") != "14"
			&& U[l].getAttribute("tp") != "8") {
		    if ((S.options.length == 1)
			    && ((S.options[0].value == "-none-") || (S.options[0].value == "-default-"))) {
			bDefault[Y] = (S.options[0].value == "-default-") ? true
				: false;
			S.options[0] = null;
		    }
		    sCurrentAttributeElmentValue = GetNodeAttributeValue(U[l]);
		    X = CheckAttributeExist(S, sCurrentAttributeElmentValue);
		    if (X == -1) {
			m = GetNodeAttributeValue(U[l].parentNode.parentNode.previousSibling.childNodes[0]);
			X = CheckAttributeExist(S, m);
			if (X == -1) {
			    if (L) {
				var a = GetNodeDimensionId(U[l].parentNode.parentNode.previousSibling.childNodes[0]);
				var h = a.split(ITEM_SEPARATOR)[0]
					+ ITEM_SEPARATOR + "14";
				var I = m.split(ITEM_SEPARATOR)[0]
					+ ITEM_SEPARATOR + "12";
				var G = "AddItemsbyListObjectForHIInTree('" + M
					+ "','" + R + "','" + N + "','" + E
					+ "','" + K + "','" + L + "')";
				if (!checkOneHierarchyRestriction(h, I, d, R, G)) {
				    return;
				}
				addAllowedObjects(h, d);
			    }
			    J = new Option(GetUnitName(m) + ":", m, false,
				    false);
			    S.options[S.length] = J;
			    e = true;
			    if (S.options[S.length - 1]) {
				S.options[S.length - 1].selected = false;
			    }
			    J = null;
			}
			if (X > -1) {
			    var O = CheckNextNonAttributeElement(S, X);
			    if (O == -1) {
				X = S.options.length;
			    } else {
				X = O;
			    }
			}
			var J = (bIsIE4) ? new Option(unescape("%a0")
				+ unescape("%a0") + unescape("%a0")
				+ LTrim(U[l].innerText), U[l]
				.getAttribute("val"), false, false)
				: new Option("\u00A0\u00A0\u00A0"
					+ LTrim(U[l].innerText), U[l]
					.getAttribute("val"), false, false);
			if (J) {
			    X = AddItem(N, J, X, S);
			    e = true;
			    var c = getObj("PROMPT_DEFAULT_MEANING_" + N);
			    if ((c != null) && (bDefault[Y])) {
				c.style.display = "none";
			    }
			    X += 1;
			    J = null;
			    A = l;
			    Q = Q + 1;
			}
		    }
		} else {
		    if (U[l].getAttribute("tp") == "12" && E) {
			if (L) {
			    m = GetNodeAttributeValue(U[l]);
			    X = CheckAttributeExist(S, m);
			    if (X == -1) {
				var a = GetNodeDimensionId(U[l]);
				var h = a.split(ITEM_SEPARATOR)[0]
					+ ITEM_SEPARATOR + "14";
				var I = m.split(ITEM_SEPARATOR)[0]
					+ ITEM_SEPARATOR + "12";
				var G = "AddItemsbyListObjectForHIInTree('" + M
					+ "','" + R + "','" + N + "','" + E
					+ "','" + K + "','" + L + "')";
				if (!checkOneHierarchyRestriction(h, I, d, R, G)) {
				    return;
				}
				addAllowedObjects(h, d);
			    }
			}
			treeToList = R;
			treePos = N;
			var n = "";
			if (U[l].getAttribute("hiddenForms")) {
			    n = "&hiddenForms="
				    + U[l].getAttribute("hiddenForms");
			}
			toggleShowBean("attFormsQual", true, "position=" + N
				+ "&isTreeRequest=true&attributeId="
				+ U[l].getAttribute("did") + "&operatorType="
				+ K + n, true);
		    }
		}
		U[l].setAttribute("sel", "0");
		var F = util_getChildNode(U[l], "A");
		if (F) {
		    F.className = "";
		}
		if (e) {
		    P = l;
		}
	    }
	}
	if (P != -1) {
	    var W = U[P].getAttribute("tp");
	    var V = U[P].getAttribute("did");
	    if (V && V.indexOf(":") > 0) {
		V = V.substring(0, V.indexOf(":"));
	    }
	    for ( var l = P + 1; l < C; l++) {
		var b = U[l].getAttribute("tp");
		if (b && b == W) {
		    var H = U[l].getAttribute("did");
		    if (H && H.indexOf(":") > 0) {
			H = H.substring(0, H.indexOf(":"));
		    }
		    if (H && H == V) {
			util_markNodeAsSelected(U[l]);
			scrollItemIntoView(U[l], g, false);
			break;
		    }
		}
	    }
	}
	CleanList(S);
	C = S.options.length;
	D = 0;
	for (l = 0; l < C; l++) {
	    T = S.options[l].value;
	    if (CheckAttributeElementExpression(T) != 0) {
		D += 1;
	    }
	}
	if (D > 1) {
	    displayObj("ANDOR_" + N);
	}
    }
}
function itemIsInView(D, B) {
    var A = new SimpleRect(B);
    var C = D.getElementsByTagName("A");
    if (C && C.length > 0) {
	var E = new SimpleRect(C[0]);
	return (E.left > A.left
		&& E.right < (A.left + parseInt(getObjInnerWidth(B)))
		&& E.top > A.top && E.bottom < (A.top + parseInt(getObjInnerHeight(B))));
    }
    return false;
}
function scrollItemIntoView(F, C, E) {
    var B = new SimpleRect(C);
    var D = F.getElementsByTagName("A");
    if (D && D.length > 0) {
	var G = new SimpleRect(D[0]);
	var A = (G.top > B.top && G.top < (B.top + parseInt(getObjInnerHeight(C)))) ? 0
		: (B.top - G.top);
	var H = (G.bottom > B.top && G.bottom < (B.top + parseInt(getObjInnerHeight(C)))) ? 0
		: (G.bottom - (B.top + parseInt(getObjInnerHeight(C))));
	if (E) {
	    if (A > 0) {
		C.scrollTop = C.scrollTop + A;
	    }
	} else {
	    if (H > 0) {
		C.scrollTop = C.scrollTop + H;
	    }
	}
    }
}
function RemoveItemsbyListObjectForHIInTree(I, A) {
    var C;
    var B;
    var J;
    var E;
    var N = getObj(I);
    var O;
    var F = -1;
    var L = N.options.length;
    for ( var H = 0; H < L; H++) {
	C = N.options[H].value;
	if (CheckAttributeElementExpression(C) == 1) {
	    bAttributeSelected = true;
	    var K = H + 1;
	    B = N.options[K].value;
	    while ((K < L) && (CheckAttributeElementExpression(B) == 0)) {
		if (N.options[H].selected) {
		    N.options[K].selected = true;
		} else {
		    if (N.options[K].selected == false) {
			bAttributeSelected = false;
		    }
		}
		K += 1;
		if (K < L) {
		    B = N.options[K].value;
		}
	    }
	    N.options[H].selected = bAttributeSelected;
	    H = K - 1;
	}
    }
    for ( var G = L - 1; G >= 0; G--) {
	if (N.options[G].selected) {
	    F = G;
	    break;
	}
    }
    RemoveItemsByPin(N, A);
    CleanList(N);
    if (N.length > 1) {
	if ((F > 0) && (F < (N.length - 1))) {
	    if (CheckAttributeElementExpression(N.options[F].value) != 0) {
		F++;
	    }
	} else {
	    if (CheckAttributeElementExpression(N.options[N.length - 1].value) != 1) {
		F = N.length - 1;
	    } else {
		if (CheckAttributeElementExpression(N.options[N.length - 2].value) != 1) {
		    F = N.length - 2;
		}
	    }
	}
	N.options[F].selected = true;
    } else {
	if (CheckAttributeElementExpression(N.options[0].value) == -1) {
	    var M = parseInt(A);
	    var D = (M > 0) ? "allowedObjects_" + M : "allowedObjects";
	    clearAllowedObjects(D);
	}
    }
    L = N.options.length;
    J = 0;
    for (G = 0; G < L; G++) {
	E = N.options[G].value;
	if (CheckAttributeElementExpression(E) != 0) {
	    J += 1;
	}
    }
    if (J < 2) {
	O = getObj("ANDOR_" + A);
	if (O != null) {
	    O.style.display = "none";
	}
    }
}
function AddItem(F, G, C, A) {
    var B;
    var E = parseInt(F);
    if (A) {
	if ((A.options.length == 1)
		&& ((A.options[0].value == "-none-")
			|| (A.options[0].value == "-default-") || (A.options[0].text == "(default)"))) {
	    if ((A.options[0].value == "-default-")
		    || (A.options[0].text == "(default)")) {
		bDefault[E] = true;
	    } else {
		bDefault[E] = false;
	    }
	    A.options[0] = null;
	}
	B = A.options.length;
	if (C == -1) {
	    C = B;
	}
	for ( var D = B; D > C; D--) {
	    var H = new Option(A.options[D - 1].text, A.options[D - 1].value,
		    false, false);
	    A.options[D] = H;
	    A.options[D].selected = false;
	    H = null;
	}
	A.options[C] = G;
	A.options[C].selected = false;
    }
    return (C);
}
function AddItemsbyListObjectForExpression(Z, G, O, X, V, P) {
    var W;
    var H;
    var b;
    var R;
    var F;
    var Y;
    var A;
    var S;
    var C;
    var d;
    var a;
    var T = parseInt(V);
    var c = getObj(Z);
    var N = getObj(X);
    var B = getObj(O);
    var M = getObj(G);
    var I = "";
    if (P) {
	var L = document.getElementsByName(P);
	if (L && L.length > 0) {
	    for ( var U = 0; U < L.length; U++) {
		if (L[U].checked) {
		    I = L[U].value;
		    break;
		}
	    }
	}
    }
    b = GetSelectedItemValue(c);
    H = GetSelectedItemText(c);
    R = GetSelectedItemDatatype(c);
    F = GetSelectedItemValue(M);
    Y = B.value;
    if ((F == "17" + ITEM_SEPARATOR + "1")
	    || (F == "22" + ITEM_SEPARATOR + "1")
	    || (F == "57" + ITEM_SEPARATOR + "1")
	    || (F == "44" + ITEM_SEPARATOR + "1")) {
	Y = CleanInput(Y, false);
    }
    d = Y.split(";").length;
    if (b == "0") {
	DisplayError(aDescriptor[16], aDescriptor[15], V);
	return false;
    } else {
	if ((Y == "")
		&& !((F == "54" + ITEM_SEPARATOR + "1") || (F == "55"
			+ ITEM_SEPARATOR + "1"))) {
	    DisplayError(aDescriptor[16], aDescriptor[12], V);
	    return false;
	} else {
	    if (b != "" && b != "0") {
		var K = F.split(ITEM_SEPARATOR);
		if (K[1] == "3") {
		    Y = CleanPercentageSign(Y) + "%";
		}
		S = BuildSelectTextForExpression(H, F, Y, R, V);
		F = AddOutputLevelToOperator(F, V);
		if (I == "exclude") {
		    F += ITEM_SEPARATOR + "exclude";
		}
		A = BuildSelectValueForExpression(b, F, Y, I);
		if (S == "9") {
		    DisplayError(aDescriptor[16], aDescriptor[9], V);
		    return false;
		} else {
		    if (S == "21") {
			DisplayError(aDescriptor[16], aDescriptor[21], V);
			return false;
		    } else {
			if (S == "10") {
			    DisplayError(aDescriptor[16], aDescriptor[10], V);
			    return false;
			} else {
			    if ((F == "M8" || F == "M9" || F == "M10" || F == "M11")
				    && (d > 1)) {
				DisplayError(aDescriptor[16], aDescriptor[15],
					V);
				B.value = "";
				return false;
			    } else {
				if (S != "0") {
				    var Q = -1;
				    if (I.length > 0) {
					if (bIsIE4) {
					    S = unescape("%a0")
						    + unescape("%a0")
						    + unescape("%a0") + S;
					} else {
					    S = "\u00A0\u00A0\u00A0" + S;
					}
					var E = CheckIncludeExcludePosition(N,
						I);
					if (I == "include") {
					    if (E == -1) {
						Q = AddIncludeOption(V, N);
					    } else {
						var D = CheckIncludeExcludePosition(
							N, "exclude");
						Q = D;
					    }
					} else {
					    if (I == "exclude") {
						if (E == -1) {
						    Q = AddExcludeOption(V, N);
						} else {
						    Q = -1;
						}
					    }
					}
				    }
				    W = new Option(S, A, false, false);
				    W.setAttribute("unitId", b);
				    W.setAttribute("opId", F);
				    W.setAttribute("val", Y);
				    AddItem(V, W, Q, N);
				    B.value = "";
				    var J = getObj("PROMPT_DEFAULT_MEANING_"
					    + V);
				    if ((J != null) && (bDefault[T])) {
					J.style.display = "none";
				    }
				    ClearError(V);
				}
			    }
			}
		    }
		}
	    }
	}
    }
    C = N.options.length;
    if (C > 1) {
	a = getObj("ANDOR_" + V);
	if (a != null) {
	    a.style.display = "block";
	}
    }
    return true;
}
function updateExpressionFields(N, M, A, E, B, K) {
    var H = -1;
    if (N) {
	if (E && N.getAttribute("unitId")) {
	    var D = N.getAttribute("unitId");
	    if (D.length > 0) {
		for ( var P = 0; P < E.length; P++) {
		    if (E.options[P]) {
			if (E.options[P].value.indexOf(D) > -1) {
			    E.options[P].selected = true;
			    if (E.options[P].getAttribute("DATATYPE")) {
				H = E.options[P].getAttribute("DATATYPE");
			    }
			} else {
			    E.options[P].selected = false;
			}
		    }
		}
	    }
	}
	var J = N.getAttribute("opId");
	if (M && J) {
	    if (J.length > 0) {
		for ( var O = 0; O < M.length; O++) {
		    if (M.options[O]) {
			if (J.indexOf(M.options[O].value, 0) == 0) {
			    M.options[O].selected = true;
			} else {
			    M.options[O].selected = false;
			}
		    }
		}
	    }
	}
	if ((A != null) && (N.getAttribute("val") != null)) {
	    A.value = N.getAttribute("val");
	    if ((J != null) && (J.length > 0)) {
		var L = getObj(B);
		if ((J.indexOf("54" + ITEM_SEPARATOR + "1", 0) == 0)
			|| (J.indexOf("55" + ITEM_SEPARATOR + "1", 0) == 0)) {
		    A.parentNode.style.visibility = "hidden";
		    if (((H == 15) || (H == 14)) && L) {
			L.style.visibility = "hidden";
		    }
		} else {
		    A.parentNode.style.visibility = "visible";
		    if (((H == 15) || (H == 14)) && L) {
			L.style.visibility = "visible";
		    }
		}
	    }
	}
	if (K && J) {
	    var G = document.getElementsByName(K);
	    var I = J.split(ITEM_SEPARATOR);
	    var C = "include";
	    if (I.length > 2) {
		C = "exclude";
	    }
	    if (G && G.length > 0) {
		for ( var F = 0; F < G.length; F++) {
		    if (G[F].value == C) {
			G[F].checked = true;
			break;
		    }
		}
	    }
	}
    }
}
function hideExpressionValueTextbox(C, E, L, K) {
    var B = getObj(C);
    var I = getObj(E);
    if (B && I) {
	var H = B.value.split(ITEM_SEPARATOR);
	var A = getObj(K);
	var F = getObj(L);
	var D = false;
	if (A && (A.options.length > 0) && F) {
	    var G = A.options.selectedIndex;
	    if ((G != null) && (G > -1)) {
		var J = A.options[G].getAttribute("DATATYPE");
		if ((J != null) && ((J == 15) || (J == 14))) {
		    D = true;
		}
	    }
	}
	if ((H[0] == "54") || (H[0] == "55")) {
	    if ((I.parentNode != null) && (I.parentNode.nodeName == "DIV")) {
		I.parentNode.style.visibility = "hidden";
	    } else {
		I.style.visibility = "hidden";
	    }
	    if (D && F) {
		F.style.visibility = "hidden";
	    }
	} else {
	    if ((I.parentNode != null) && (I.parentNode.nodeName == "DIV")) {
		I.parentNode.style.visibility = "visible";
	    } else {
		I.style.visibility = "visible";
	    }
	    if (D && F) {
		F.style.visibility = "visible";
	    }
	}
    }
}
function RemoveItemsbyListObjectForExpression(a, F, B, W, Y, G, P) {
    var X;
    var T;
    var E;
    var Z;
    var O = new Array();
    var e = new Array();
    var Q = ANSWER_SEPARATOR;
    var l = ITEM_SEPARATOR;
    var R;
    var S = parseInt(W);
    var I;
    var H;
    var h;
    var V;
    var R;
    var M = getObj(F);
    var J = getObj(B);
    var N = getObj(Y);
    var d = getObj(a);
    var C = d.options.length;
    var c = isIncludeExcludeOption(d.options[0]);
    var A = -1;
    var D = -1;
    if (c) {
	A = CheckIncludeExcludePosition(d, "include");
	D = CheckIncludeExcludePosition(d, "exclude");
    }
    var L = false;
    if (d.selectedIndex != -1) {
	L = true;
    }
    if (!L && (C > 0) && (d.options[0]) && (d.options[0].value != "-none")) {
	d.options[0].selected = true;
    }
    if (c) {
	if (A == d.selectedIndex) {
	    d.selectedIndex = A + 1;
	} else {
	    if (D == d.selectedIndex) {
		d.selectedIndex = D + 1;
	    }
	}
	if (A >= 0) {
	    if ((A == C - 2) || (A == D - 2 && D > d.selectedIndex)) {
		d.options[A] = null;
		C = d.options.length;
	    }
	}
	if (D >= 0 && D == C - 2 && D < d.selectedIndex) {
	    d.options[D] = null;
	    C = d.options.length;
	}
    }
    if (!d.multiple) {
	e[e.length] = d.selectedIndex;
    } else {
	for ( var U = C - 1; U >= 0; U--) {
	    if (d.options[U].selected) {
		d.options[U].selected = false;
		e[e.length] = U;
	    }
	}
    }
    if (e.length != 0) {
	for (U = 0; U < e.length; U++) {
	    if ((d.options[e[U]].value == "-default-")
		    || (d.options[e[U]].text == "(default)")) {
		bDefault[S] = false;
	    }
	    updateExpressionFields(d.options[e[U]], M, J, N, G, P);
	    d.options[e[U]] = null;
	}
	if (d.options.length == 0) {
	    var K = getObj("PROMPT_DEFAULT_MEANING_" + W);
	    if (bDefault[S]) {
		var X = new Option("--- " + aDescriptor[19] + " ---",
			"-default-", false, false);
		if (K != null) {
		    K.style.display = "block";
		}
	    } else {
		var X = new Option("--" + aDescriptor[18] + "--", "-none-",
			false, false);
		if (K != null) {
		    K.style.display = "none";
		    var g = null;
		    if (W == "0") {
			g = getObj("answerOptions");
		    } else {
			g = getObj("answerOptions_" + W);
		    }
		    if (g != null) {
			g.value = "2";
		    }
		}
	    }
	    d.options[d.length] = X;
	    d.options[d.length - 1].selected = false;
	    X = null;
	}
	C = d.options.length;
	if (C < 2 && document.all) {
	    if (W != null || W != "") {
		var b = getObj("ANDOR_" + W);
		if (b != null) {
		    b.style.display = "none";
		}
	    }
	}
    }
}
function isIncludeExcludeOption(A) {
    if (A != null && (A.value == "include" || A.value == "exclude")) {
	return true;
    }
    return false;
}
function CheckIncludeExcludePosition(A, C) {
    var B = A.options.length;
    for ( var D = 0; D < B; D++) {
	if (A.options[D].value == C) {
	    return (D);
	}
    }
    return (-1);
}
function AddIncludeOption(B, A) {
    var C = new Option(aDescriptor[39], "include", false, false);
    AddItem(B, C, 0, A);
    return (1);
}
function AddExcludeOption(B, A) {
    var C = new Option(aDescriptor[40], "exclude", false, false);
    AddItem(B, C, -1, A);
    return (A.length);
}
function BuildSelectValueForExpression(F, G, D, A) {
    var E;
    var H = EXPRESSION_SEPARATOR;
    var I = new Array();
    var B;
    var C = G.split(ITEM_SEPARATOR);
    if (C[0] == "22") {
	var B = new RegExp(",", "g");
	D = D.replace(B, ";");
    }
    D = CleanInput(D, false);
    E = G + H + F + H + D;
    return (E);
}
function FindDelimeter(B) {
    var A;
    A = B.match(";");
    if (A != null) {
	return (";");
    } else {
	A = B.match(",");
	if (A != null) {
	    return (",");
	} else {
	    return ("");
	}
    }
}
function BuildSelectTextForExpression(B, L, H, J, A) {
    var K;
    var M = ITEM_SEPARATOR;
    var N = new Array();
    var C;
    var I;
    var G = FindDelimeter(H);
    K = B;
    var E = L.split(ITEM_SEPARATOR);
    if (E[1] == "1") {
	L = "M" + E[0];
    } else {
	if (E[1] == "2") {
	    L = "R" + E[0];
	} else {
	    if (E[1] == "3") {
		L = "P" + E[0];
	    }
	}
    }
    var F = GetOperatorSymbol(L);
    if (L == "M17") {
	if (G == ";") {
	    N = H.split(G);
	} else {
	    return ("9");
	}
	I = N.length;
	if (J == "4") {
	    for (lCount = 0; lCount < I; lCount++) {
		if (!isANumber(N[lCount])) {
		    return ("21");
		}
	    }
	}
	if (I == 2) {
	    K = K + " " + aDescriptor[1] + " " + N[0] + " " + aDescriptor[8]
		    + " " + N[1];
	} else {
	    return ("9");
	}
    } else {
	if (L == "M44") {
	    if (G == ";") {
		N = H.split(G);
	    } else {
		return ("10");
	    }
	    I = N.length;
	    if (J == "4") {
		for (lCount = 0; lCount < I; lCount++) {
		    if (!isANumber(N[lCount])) {
			return ("21");
		    }
		}
	    }
	    if (I == 2) {
		K = K + " " + aDescriptor[2] + " " + N[0] + " "
			+ aDescriptor[8] + " " + N[1];
	    } else {
		return ("10");
	    }
	} else {
	    if (L == "M22") {
		var D = new RegExp(",", "g");
		C = H.replace(D, ";");
		K = K + " " + aDescriptor[7] + " (" + C + ")";
	    } else {
		if (L == "M57") {
		    var D = new RegExp(",", "g");
		    C = H.replace(D, ";");
		    K = K + " " + aDescriptor[20] + " (" + C + ")";
		} else {
		    if (L == "M18") {
			K = K + " " + aDescriptor[3] + " " + H;
		    } else {
			if (L == "M43") {
			    K = K + " " + aDescriptor[4] + " " + H;
			} else {
			    if (L == "P1") {
				K = K + " " + aDescriptor[5] + " " + H;
			    } else {
				if (L == "P2") {
				    K = K + " " + aDescriptor[6] + " " + H;
				} else {
				    if (L == "R1") {
					K = K + " " + aDescriptor[5] + " " + H;
				    } else {
					if (L == "R2") {
					    K = K + " " + aDescriptor[6] + " "
						    + H;
					} else {
					    if (L == "M76") {
						if (H.indexOf('"') < 0) {
						    K = K + " "
							    + aDescriptor[33]
							    + ' "' + H + '"';
						} else {
						    K = K + " "
							    + aDescriptor[33]
							    + " " + H;
						}
					    } else {
						if (L == "M77") {
						    if (H.indexOf('"') < 0) {
							K = K
								+ " "
								+ aDescriptor[34]
								+ ' "' + H
								+ '"';
						    } else {
							K = K
								+ " "
								+ aDescriptor[34]
								+ " " + H;
						    }
						} else {
						    if (L == "M78") {
							if (H.indexOf('"') < 0) {
							    K = K
								    + " "
								    + aDescriptor[35]
								    + ' "' + H
								    + '"';
							} else {
							    K = K
								    + " "
								    + aDescriptor[35]
								    + " " + H;
							}
						    } else {
							if (L == "M79") {
							    if (H.indexOf('"') < 0) {
								K = K
									+ " "
									+ aDescriptor[30]
									+ ' "'
									+ H
									+ '"';
							    } else {
								K = K
									+ " "
									+ aDescriptor[30]
									+ " "
									+ H;
							    }
							} else {
							    if (L == "M80") {
								if (H
									.indexOf('"') < 0) {
								    K = K
									    + " "
									    + aDescriptor[31]
									    + ' "'
									    + H
									    + '"';
								} else {
								    K = K
									    + " "
									    + aDescriptor[31]
									    + " "
									    + H;
								}
							    } else {
								if (L == "M81") {
								    if (H
									    .indexOf('"') < 0) {
									K = K
										+ " "
										+ aDescriptor[32]
										+ ' "'
										+ H
										+ '"';
								    } else {
									K = K
										+ " "
										+ aDescriptor[32]
										+ " "
										+ H;
								    }
								} else {
								    if (L == "M54") {
									K = K
										+ " "
										+ aDescriptor[36];
								    } else {
									if (L == "M55") {
									    K = K
										    + " "
										    + aDescriptor[37];
									} else {
									    K = K
										    + " "
										    + F
										    + " "
										    + H;
									}
								    }
								}
							    }
							}
						    }
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	}
    }
    K = AddMQOutputLevelText(K, A);
    return (K);
}
function isANumber(B) {
    var A = false;
    if (promptDecimalSeparator != null) {
	B = B.replace(promptDecimalSeparator, ".");
	if (!isNaN(B)) {
	    A = true;
	}
    }
    return A;
}
function GetOperatorSymbol(A) {
    if (A == "M17") {
	return (aDescriptor[1]);
    } else {
	if (A == "M44") {
	    return (aDescriptor[2]);
	} else {
	    if (A == "M6") {
		return (aDescriptor[22]);
	    } else {
		if (A == "M7") {
		    return (aDescriptor[27]);
		} else {
		    if (A == "M8") {
			return (aDescriptor[23]);
		    } else {
			if (A == "M10") {
			    return (aDescriptor[24]);
			} else {
			    if (A == "M9") {
				return (aDescriptor[25]);
			    } else {
				if (A == "M11") {
				    return (aDescriptor[26]);
				} else {
				    if (A == "M18") {
					return (aDescriptor[3]);
				    } else {
					if (A == "M43") {
					    return (aDescriptor[4]);
					} else {
					    if (A == "M22") {
						return (aDescriptor[7]);
					    } else {
						if (A == "M57") {
						    return (aDescriptor[20]);
						} else {
						    if (A == "R1" || A == "P1") {
							return (aDescriptor[5]);
						    } else {
							if (A == "R2"
								|| A == "P2") {
							    return (aDescriptor[6]);
							} else {
							    return ("=");
							}
						    }
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	}
    }
}
function GetSelectedItemValue(E) {
    var D;
    var A = E.options.length;
    var C = 0;
    for ( var B = 0; B < A; B++) {
	if (E.options[B].selected) {
	    C += 1;
	    if (C > 1) {
		return ("1");
	    } else {
		D = E.options[B].value;
	    }
	}
    }
    if (C == 0) {
	return ("0");
    } else {
	return (D);
    }
}
function GetSelectedItemText(E) {
    var D;
    var A = E.options.length;
    var C = 0;
    for ( var B = 0; B < A; B++) {
	if (E.options[B].selected) {
	    C += 1;
	    if (C > 1) {
		return ("1");
	    } else {
		D = E.options[B].text;
	    }
	}
    }
    if (C == 0) {
	return ("0");
    } else {
	return (D);
    }
}
function GetSelectedItemDatatype(B) {
    var A = GetCurrentAttributeValue(B);
    if (A != null) {
	A = GetUnitType(A);
    } else {
	return "-1";
    }
    return A;
}
function CleanList(E) {
    var D;
    var A = E.options.length;
    var C = 0;
    for ( var B = A - 1; B >= 0; B--) {
	D = E.options[B].value;
	if (D == "") {
	    E.options[B] = null;
	}
    }
}
function CleanInput(E, C) {
    var D;
    var A;
    if (C == null) {
	C = true;
    }
    A = E.split(";");
    D = A[0];
    if (C) {
	D = LTrim(A[0]);
	if (D.length == 0) {
	    D = A[0];
	}
    }
    for ( var B = 1; B < A.length; B++) {
	if (A[B] != "") {
	    var F = A[B];
	    if (C) {
		F = LTrim(A[B]);
		if (F.length == 0) {
		    F = A[B];
		}
	    }
	    D = D + ";" + F;
	}
    }
    return (D);
}
function CleanPercentageSign(B) {
    var A;
    A = B;
    while (A.length > 0) {
	if (A.substring(A.length - 1, A.length) == "%") {
	    A = A.substring(0, A.length - 1);
	} else {
	    break;
	}
    }
    return (A);
}
function DisplayError(D, A, C) {
    var E = getObj("DetailErrorDisplay_" + C);
    var B;
    if (E != null) {
	B = '<IMG SRC="'
		+ microstrategy.FOLDER_IMAGES
		+ 'promptError_white.gif" WIDTH="23" HEIGHT="23" BORDER="0" ALIGN=MIDDLE>';
	B = B + '<SPAN CLASS="prompt-error-description">';
	B = B + A;
	B = B + "</SPAN>";
	writeToDiv(B, E);
	displayObj(E);
    }
}
function ClearError(B) {
    1;
    var C = getObj("DetailErrorDisplay_" + B);
    var A;
    if (C != null) {
	A = "";
	writeToDiv(A, C);
	removeObj(C);
    }
}
function selectInOperator(A) {
    var B;
    var C;
    C = window.document.PromptForm[A];
    if (C) {
	if ((C.selecteIndex == -1)
		|| ((C.selectedIndex >= 0)
			&& (C[C.selectedIndex].value != ("22" + ITEM_SEPARATOR + "1")) && (C[C.selectedIndex].value != ("57"
			+ ITEM_SEPARATOR + "1")))) {
	    for (B = 0; B < C.length; B++) {
		if (C[B].value == ("22" + ITEM_SEPARATOR + "1")) {
		    C.selectedIndex = B;
		}
	    }
	}
    }
}
function checkFileExtension(B) {
    var D;
    var A;
    var C;
    C = window.document.PromptForm[B];
    if (C) {
	D = C.value;
	if (D.length > 0) {
	    A = "," + getFileExtension(D) + ",";
	    if (sValidExtensions.indexOf(A) == -1) {
		alert(sInvalidFileMessage);
		return false;
	    }
	} else {
	    alert(sEmptyFileName);
	    return false;
	}
    }
    return true;
}
function getFileExtension(B) {
    var A = "";
    var C = B.lastIndexOf(".");
    if (C != -1 && C < B.length) {
	A = B.substr(C + 1);
    }
    return A;
}
function SubmitPromptIndex(B) {
    var A = getObj("PromptForm");
    if (A) {
	var C = document.createElement("INPUT");
	if (C) {
	    C.type = "HIDDEN";
	    C.name = B + ".x";
	    A.insertAdjacentElement("beforeEnd", C);
	    A.submit();
	}
    }
}
function SubmitPromptLink(B) {
    var A = getObj("PromptForm");
    if (A) {
	addURLAsHiddenInputsToForm(A, B.href, true);
	A.submit();
    }
}
function RTrim(D) {
    var A = new String(" \t\n\r");
    var C = new String(D);
    if (A.indexOf(C.charAt(C.length - 1)) != -1) {
	var B = C.length - 1;
	while (B >= 0 && A.indexOf(C.charAt(B)) != -1) {
	    B--;
	}
	C = C.substring(0, B + 1);
    }
    return C;
}
function LTrim(E) {
    var B = new String(" \t\n\r");
    var D = new String(E);
    if (B.indexOf(D.charAt(0)) != -1) {
	var A = 0, C = D.length;
	while (A < C && B.indexOf(D.charAt(A)) != -1) {
	    A++;
	}
	D = D.substring(A, C);
    }
    return D;
}
function showHideAttSelection(C) {
    var A = getObj("attributeSelection");
    if (C == "3") {
	if (A) {
	    displayObj(A);
	    if (microstrategy) {
		microstrategy.eventManager.notifyOrphanBones(
			"processShowHideAttSelection", true);
	    }
	    var B = microstrategy.findAncestorWithAtt(A, "ty", "editor");
	    if (B) {
		togglePulldowns(B, false);
	    }
	}
    } else {
	if (A) {
	    removeObj(A);
	    if (microstrategy) {
		microstrategy.eventManager.notifyOrphanBones(
			"processShowHideAttSelection", false);
	    }
	    var B = microstrategy.findAncestorWithAtt(A, "ty", "editor");
	    if (B) {
		togglePulldowns(B, true);
		togglePulldowns(B, false);
	    }
	}
    }
}
function addAttributeToCartMQEditor() {
    var E = getObj("mqLevelAttID");
    var B = getObj("mqLevelAttName");
    var A = false;
    var C;
    if (E && B) {
	var D = getObj("dimtyAttributes");
	if (D) {
	    if (E.value.length > 0) {
		for (C = 0; C < D.options.length; C++) {
		    if (D.options[C].value.indexOf(E.value) >= 0) {
			A = true;
		    }
		}
		if (!A) {
		    if (D.options.length == 1) {
			if (D.options[0].value == "-none-") {
			    D.options[0] = null;
			}
		    }
		    var F = new Option(B.value, E.value
			    + unescape(ITEM_SEPARATOR) + B.value, false, false);
		    D.options[D.length] = F;
		    F = null;
		    B.value = "";
		    E.value = "";
		}
	    }
	}
    }
}
function removeAttributeFromCartMQEditor() {
    var A = getObj("dimtyAttributes");
    if (A) {
	if (!(A.options[0].value == "")) {
	    if (A.selectedIndex >= 0) {
		A.options[A.selectedIndex] = null;
		if (A.options.length == 0) {
		    var B = new Option("--" + aDescriptor[18] + "--", "-none-",
			    false, false);
		    A.options[0] = B;
		    A.options[0].selected = false;
		    B = null;
		}
	    }
	}
    }
}
function ProcessOKforMQEditor(F, G) {
    var D = getObj("dimtyAttributes");
    var B = getObj("metricQualLevel_MetricQualLevelStyle_form").outputLevel;
    var C = getObj("outputLevelLabel_" + F);
    var E = getObj("outputLevel_" + F);
    var A = 0;
    if (B) {
	if (B[3].checked) {
	    if (D) {
		if (E) {
		    var H = getObj("attList_" + F);
		    if (H) {
			H.value = "";
			if (C) {
			    if (D.options[0].value != "-none-") {
				C.innerHTML = microstrategy.descriptors
					.getDescriptor("2790").replace(/##/g,
						"");
			    }
			}
			for (A = 0; A < D.options.length; A++) {
			    if (D.options[A].value != "-none-") {
				E.value = "3";
				if (A != D.options.length - 1) {
				    H.value += D.options[A].value
					    + unescape(UNIT_SEPARATOR);
				    if (C) {
					C.innerHTML += D.options[A].text + ", ";
				    }
				} else {
				    H.value += D.options[A].value;
				    if (C) {
					C.innerHTML += D.options[A].text + ": ";
				    }
				}
			    }
			}
		    }
		}
	    }
	} else {
	    if (E) {
		if (B[0].checked) {
		    E.value = "0";
		    if (C) {
			C.innerHTML = microstrategy.descriptors
				.getDescriptor("4389");
		    }
		}
		if (B[1].checked) {
		    E.value = "1";
		    if (C) {
			C.innerHTML = microstrategy.descriptors
				.getDescriptor("4388");
		    }
		}
		if (B[2].checked) {
		    E.value = "2";
		    if (C) {
			C.innerHTML = microstrategy.descriptors
				.getDescriptor("3275");
		    }
		}
	    }
	}
    }
}
function ProcessApplyElementPickerEditor(B, E) {
    var A;
    if (B == "0") {
	A = "unitsToAdd";
    } else {
	A = "unitsToAdd_" + B;
    }
    var D = getObj(A);
    var C = getObj("selectedText");
    if (C) {
	D.value = C.value;
    } else {
	oFromList = getObj("AvailableItems");
	D.value = oFromList.options[oFromList.selectedIndex].value;
    }
}
function AddOutputLevelToOperator(A, B) {
    var D = getObj("outputLevel_" + B);
    var C = getObj("outputLevelLabel_" + B);
    if (D) {
	var F = D.value;
	A += unescape(UNIT_SEPARATOR) + F;
	switch (F) {
	case "3":
	    var E = getObj("attList_" + B);
	    if (E) {
		A += unescape(UNIT_SEPARATOR) + E.value;
		E.value = "";
	    }
	    break;
	}
	D.value = "";
    }
    if (C) {
	C.innerHTML = microstrategy.descriptors.getDescriptor("3274");
    }
    return A;
}
function AddMQOutputLevelText(F, A) {
    var H = getObj("outputLevel_" + A);
    var B = "";
    var D;
    var J = 0;
    if (H) {
	var G = H.value;
	if (G == "3") {
	    var E = getObj("attList_" + A);
	    var I = E.value;
	    if (I.length > 32) {
		var C = I.split(UNIT_SEPARATOR);
		J = C.length;
		for (i = 0; i < J; i++) {
		    D = C[i].split(ITEM_SEPARATOR);
		    if (i == 0) {
			B += D[2];
		    } else {
			B += ", " + D[2];
		    }
		}
	    }
	    if (J > 1) {
		B = "( " + B + " )";
	    }
	    F = aDescriptor[28].replace(/##/g, B) + " "
		    + aDescriptor[29].replace(/##/g, F);
	}
    }
    return (F);
}
function openMQLevelEditor(C, D) {
    var G = getObj("outputLevel_" + D);
    var F = "";
    var E = "";
    E = "isTreeRequest=true&promptPosition=" + D;
    if (G) {
	var B = G.value;
	if (B.length > 0) {
	    if (B == "3") {
		var H = getObj("attList_" + D);
		if (H) {
		    var A = H.value;
		    E += "&outputLevel=3&dimtyAttributes=" + A;
		}
	    } else {
		E += "&outputLevel=" + B;
	    }
	} else {
	    E += "&outputLevel=0";
	}
    }
    toggleShowBean("metricQualLevel", true, E, true);
}
function openElementPicker(B, A, H, G, D) {
    var F = "";
    F = "isTreeRequest=true&promptPosition=" + A;
    var C = getObj(H);
    if (C && C[C.selectedIndex]) {
	F += "&operator=" + C[C.selectedIndex].value;
    }
    var I = getObj(G);
    if (I && I[I.selectedIndex]) {
	F += "&attributeId=" + I[I.selectedIndex].value;
    }
    var E = getObj(D);
    if (E) {
	F += "&selectedText=" + E.value;
    }
    toggleShowBean("elementPicker", true, F, true);
}
function submitMQForm(E) {
    var B = document.createElement("input");
    B.setAttribute("name", "outputLevel");
    B.setAttribute("type", "hidden");
    var D = document.createElement("input");
    D.setAttribute("name", "dimtyAttributes");
    D.setAttribute("type", "hidden");
    var A = "";
    var G = createDynamicForm(E.href + "&isTreeRequest=true");
    if (G) {
	G.target = "frameManager";
	var C = document.getElementsByName("outputLevel");
	if (C[3].checked) {
	    B.setAttribute("value", C[3].value);
	    G.insertAdjacentElement("beforeEnd", B);
	    var F = getObj("dimtyAttributes");
	    if (F) {
		for (i = 0; i < F.options.length; i++) {
		    if (F.options[i].value != "-none-") {
			if (i != F.options.length - 1) {
			    A += F.options[i].value + unescape(UNIT_SEPARATOR);
			} else {
			    A += F.options[i].value;
			}
		    }
		}
		D.setAttribute("value", A);
		G.insertAdjacentElement("beforeEnd", D);
	    }
	}
	if (C[2].checked) {
	    B.setAttribute("value", C[2].value);
	    G.insertAdjacentElement("beforeEnd", B);
	}
	if (C[1].checked) {
	    B.setAttribute("value", C[1].value);
	    G.insertAdjacentElement("beforeEnd", B);
	}
	if (C[0].checked) {
	    B.setAttribute("value", C[0].value);
	    G.insertAdjacentElement("beforeEnd", B);
	}
	submitForm(G, true);
    }
    return false;
}
function makeSelections() {
    var B = getObj("dimtyAttributes");
    var C = "";
    if (B) {
	for (i = 0; i < B.options.length; i++) {
	    if (B.options[i].value != "-none-") {
		if (i != B.options.length - 1) {
		    C += B.options[i].value + unescape(UNIT_SEPARATOR);
		} else {
		    C += B.options[i].value;
		}
	    }
	}
	var A = new Option("", C, false, true);
	B.options[B.length] = A;
    }
}
function goUpFolderLevel(A) {
    makeSelections();
    processSelect(A);
}
function resizePromptContent() {
    if (typeof (microstrategy) == "undefined") {
	return;
    }
    if (typeof (microstrategy.cancelPromptResize) != "undefined") {
	if (microstrategy.cancelPromptResize) {
	    return;
	}
    }
    fitPromptContentToWindow(false);
    if (bIsFirefox) {
	if (this.timer) {
	    window.clearTimeout(this.timer);
	}
	this.timer = window.setTimeout("fitPromptContentToWindow(true)", 200);
    }
    return;
}
function fitPromptContentToWindow(D) {
    var B = getObj("mstrPromptsIndex");
    var E = getObj("mstrPromptsBody");
    var C = getObj("mstrPromptsButtonBarBottom");
    if (E) {
	var A = getAvailablePromptHeight(E);
	if (A && (!isNaN(A))) {
	    applyPromptHeight(E, B, C, A);
	}
    }
    return;
}
function applyPromptHeight(I, A, G, E) {
    var H = SCROLLBAR_SIZE * 3;
    if (E < H) {
	E = H;
    }
    var D = 5;
    if (bIsIE4) {
	G && (G.style.visibility = "hidden");
    }
    var C = 0;
    if (A) {
	var F = getObj("mstrPromptsRename");
	if (F) {
	    C = getObjOuterHeight(F);
	}
	A.style.height = (E - D * 2) + "px";
    }
    if (I) {
	I.style.height = (E - C - D * 2) + "px";
    }
    var B = getObjOuterHeight(I.parentNode);
    adjustEnclosingTableHeight(B);
    if (bIsIE4) {
	G.style.visibility = "visible";
    }
}
function adjustEnclosingTableHeight(A) {
    var B = getElementById("mstrWebContentTable");
    if (B) {
	B.style.height = A + "px";
    }
}
function getAvailablePromptHeight(C) {
    try {
	if (!C) {
	    return NaN;
	}
	var E = mstr.utils.BoxModel.getBrowserWindowHeight(document);
	var G = getObjOuterHeight(C);
	var A = getObjOuterHeight(C.parentNode);
	var D = getObjSumTop(C);
	var H = (bIsFirefox) ? 8 : 5;
	var B = E - D - (A - G) - H;
	return B;
    } catch (F) {
	return null;
    }
}
function ToggleDrillButton(D, E) {
    try {
	var A = getObj(D);
	var B = getObj(E);
	if ((A != null) && (B != null)) {
	    if ((A.options.length == 0)
		    || ((A.options.length == 1) && (A.options[0].value == "-none-"))) {
		B.disabled = true;
	    } else {
		B.disabled = false;
	    }
	}
    } catch (C) {
	return false;
    }
    return true;
}
function setTreeSearch(C, A) {
    if (C == null) {
	return;
    }
    var B = searchPrefix;
    if (B == "") {
	return;
    }
    if (A > 0) {
	B = B + "_" + A;
    }
    var D = getObj(B);
    if (D) {
	if (C.getAttribute("tp") == "12"
		&& C.getAttribute("searchLocked") != "1") {
	    D.disabled = false;
	    D.style.background = "#ffffff";
	} else {
	    D.disabled = true;
	    D.style.background = "#cccccc";
	}
    }
}
function clearTreeSearch(E, D) {
    var I = getObj(util_getTreeName(E));
    var B = util_getChildNodeById(I, "main");
    B.style.display = "block";
    var C = util_getChildNodeById(I, "search");
    var H = C.getAttribute("attId");
    var L = C.getAttribute("dimId");
    I.removeChild(C);
    var J = getObj("clearSearch_" + E);
    J.style.display = "none";
    var A = searchPrefix;
    if (E > 0) {
	A = A + "_" + E;
    }
    var F = getObj(A);
    if (F) {
	F.value = "";
    }
    if (D) {
	var G = attributeIdPrefix;
	if (E > 0) {
	    G = G + "_" + E;
	}
	var K = dimensionIdPrefix;
	if (E > 0) {
	    K = K + "_" + E;
	}
	D.href = replaceURLParameter(D.href, G, H);
	D.href = replaceURLParameter(D.href, K, L);
	util_submitForm(D);
    }
    return false;
}
function doTreeSearch(I, G) {
    if (iframe.isTreeProcessing) {
	event.returnValue = false;
	return;
    }
    var M = getObj(util_getTreeName(I));
    var K = M.getElementsByTagName("LI");
    var L = null;
    if ((K) && (K.length)) {
	var E = K.length;
	for ( var H = 0; H < E; H++) {
	    if (K[H].getAttribute("sel") == "1") {
		L = K[H];
		break;
	    }
	}
	if (L && L.getAttribute("tp") == "12"
		&& L.getAttribute("searchLocked") != "1") {
	    var A = searchPrefix;
	    if (I > 0) {
		A = A + "_" + I;
	    }
	    var J = getObj(A);
	    if (J && J.value.length > 0) {
		hideTreeWaitMessage();
		var F = util_getChildNodeById(M, "search");
		if (F) {
		    M.removeChild(F);
		}
		var B = util_findTargetTag(L, "DIV");
		var D = B.cloneNode(true);
		util_setTreeTargetState(D, NODE_STATE_OPEN);
		var P = util_createNode("UL", "search");
		P.style.display = "block";
		P.appendChild(D);
		P.setAttribute("attId", L.getAttribute("val"));
		P.setAttribute("dimId", L.getAttribute("dimensionId"));
		var C = util_getChildNodeById(M, "main");
		C.style.display = "none";
		C.insertAdjacentElement("afterEnd", P);
		var N = getObj("clearSearch_" + I);
		N.style.display = "block";
		showTreeWaitMessage(D, "afterEnd");
		var O = getBrowsePath(M, B);
		util_submitSearchForm(I, G, L.getAttribute("val"), L
			.getAttribute("dimensionId"), J.value, O);
	    }
	}
    }
}
function appendBrowsePathForIncrementalFetch(B, A) {
    var E = getObj(util_getTreeName(A));
    var G = browsePathPrefix;
    if (A > 0) {
	G = G + "_" + A;
    }
    var C = findAttributeForIncrementalFetch(B);
    if (C) {
	var F = util_getAnchor(B);
	var D = getBrowsePath(E, C);
	if (D && D.length > 0) {
	    F.href += "&" + G + "=" + encodeURIComponent(D);
	}
    }
    return true;
}
function appendBrowsePath(C, A) {
    var E = getObj(util_getTreeName(A));
    if (util_shouldSubmitForm(C, E)) {
	var G = browsePathPrefix;
	if (A > 0) {
	    G = G + "_" + A;
	}
	var B = findAttributeForDrill(C);
	if (B) {
	    var D = getBrowsePath(E, B);
	    if (D && D.length > 0) {
		var F = util_getAnchor(C);
		F.href += "&" + G + "=" + encodeURIComponent(D);
	    }
	}
    }
    return true;
}
function findAttributeForIncrementalFetch(D) {
    var A = null;
    var B = util_findTargetTag(D, "UL");
    if (B) {
	if (B.parentNode.tagName == "div" || B.parentNode.tagName == "DIV") {
	    var C = B.parentNode;
	    if (C) {
		A = C.previousSibling;
	    }
	} else {
	    if (B.parentNode.tagName == "UL") {
		A = B.previousSibling;
	    }
	}
    }
    return A;
}
function findAttributeForDrill(B) {
    var A = util_findTargetTag(B, "DIV");
    return A;
}
function getBrowsePath(E, C) {
    var A = C.parentNode;
    var B = "";
    while (A && A.id != "main" && A.id != "search") {
	var D = A.previousSibling;
	var F = getChildNodeValue(D);
	B = unescape(UNIT_SEPARATOR) + F + B;
	D = D.parentNode.previousSibling;
	F = getChildNodeValue(D);
	B = unescape(EXPRESSION_SEPARATOR) + F + B;
	A = D.parentNode;
    }
    return B.substr(1);
}
function getChildNodeValue(A) {
    var B = "";
    if (A && A.childNodes.length) {
	B = A.childNodes[0].getAttribute("val");
    }
    return B;
}
function util_submitSearchForm(G, B, D, C, P, K) {
    var N = util_getNewTreeForm(B.href);
    if (N && N.childNodes.length > 0) {
	var A = searchPrefix;
	if (G > 0) {
	    A = A + "_" + G;
	}
	var I = attributeIdPrefix;
	if (G > 0) {
	    I = I + "_" + G;
	}
	var M = dimensionIdPrefix;
	if (G > 0) {
	    M = M + "_" + G;
	}
	var F = browsePathPrefix;
	if (G > 0) {
	    F = F + "_" + G;
	}
	var O = matchCasePrefix;
	if (G > 0) {
	    O = O + "_" + G;
	}
	var J = false;
	var H = null;
	for ( var E = 0; E < N.childNodes.length; E++) {
	    var L = N.childNodes[E];
	    if (L.name == A) {
		L.value = P;
	    }
	    if (L.name == I) {
		L.value = D;
	    }
	    if (L.name == M) {
		L.value = C;
	    }
	    if (L.name == F) {
		L.value = K;
	    }
	    if (L.name == O) {
		H = L;
		checkBoxNode = getObj(O);
		if (checkBoxNode && checkBoxNode.checked == true) {
		    L.value = "1";
		} else {
		    J = true;
		}
	    }
	}
	if (J == true) {
	    N.removeChild(H);
	}
	submitForm(N, true);
    }
}
function util_getChildNodeById(A, D) {
    if ((A) && (A.childNodes.length)) {
	for ( var B = 0; B < A.childNodes.length; B++) {
	    var C = A.childNodes[B];
	    if (C.id == D) {
		return C;
	    }
	}
    }
    return null;
}
function util_createNode(A, C) {
    var B = document.createElement(A);
    B.id = C;
    return B;
}
function changeHierarchyForTree(F, B) {
    var D = getObj(util_getTreeName(B));
    if (D) {
	hideTreeWaitMessage();
	var A = util_getChildNodeById(D, "main");
	if (A) {
	    D.removeChild(A);
	}
	var E = util_getChildNodeById(D, "search");
	if (E) {
	    D.removeChild(E);
	    var H = getObj("clearSearch_" + B);
	    H.style.display = "none";
	    var C = searchPrefix;
	    if (B > 0) {
		C = C + "_" + B;
	    }
	    var G = getObj(C);
	    if (G) {
		G.value = "";
	    }
	}
	showTreeWaitMessage(D, "beforeEnd");
	submitChangeTreeHierarchyForm(F.options[F.selectedIndex].value, B, F
		.getAttribute("eventURL"));
    }
}
function submitChangeTreeHierarchyForm(B, A, D) {
    var G = util_getNewTreeForm(D);
    if (G && G.childNodes.length > 0) {
	var C = hierarchyPrefix;
	if (A > 0) {
	    C = C + "_" + A;
	}
	for ( var E = 0; E < G.childNodes.length; E++) {
	    var F = G.childNodes[E];
	    if (F.name == C) {
		F.value = B;
	    }
	}
	submitForm(G, true);
    }
}
function util_getTreeName(A) {
    var B = TREE_NAME_PREFIX;
    if (A > 0) {
	B += "_" + A;
    }
    return B;
}
function promptSubmitSearchForEnterKey(B, A) {
    var D = A || window.event;
    if (D != null && D.keyCode == 13) {
	var C = microstrategy.findChildWithAtt(B, "INPUT", "type", "image");
	if (C) {
	    C.click();
	}
	return false;
    }
    return true;
}
function isSameAttributeValue(D, C) {
    var B = D.split(ITEM_SEPARATOR);
    var A = C.split(ITEM_SEPARATOR);
    return (B[0] == A[0] && B[2] == A[2]);
}
function is24HourFormat() {
    var A = new Date();
    A.setTime(Date.parse("January, 01 2006 13:00:00"));
    var B = A.toLocaleString();
    return (B.indexOf("13") >= 0);
}
function adjustTimeFormat(D, C) {
    if (is24HourFormat()) {
	var B = getObj(C);
	if (B != null) {
	    B.style.display = "";
	}
    } else {
	var A = getObj(D);
	if (A != null) {
	    A.style.display = "";
	}
    }
}
function MoveItemInListUp(A) {
    MoveItemInList(A, -1);
}
function MoveItemInListDown(A) {
    MoveItemInList(A, 1);
}
function MoveItemInList(B, F) {
    var G = getObj(B);
    var E = new Array();
    if (G) {
	for ( var D = 0; D < G.options.length; D++) {
	    if (G.options[D].selected) {
		if (D + F >= 0 && G.options[D + F]) {
		    E[E.length] = G.options[D].text;
		    var A = G.options[D].text;
		    var C = G.options[D].value;
		    G.options[D].text = G.options[D + F].text;
		    G.options[D].value = G.options[D + F].value;
		    G.options[D].selected = false;
		    G.options[D + F].text = A;
		    G.options[D + F].value = C;
		}
	    }
	}
	for (D = 0; D < G.options.length; D++) {
	    for (j = 0; j < E.length; j++) {
		if (E[j] == G.options[D].text) {
		    G.options[D].selected = true;
		}
	    }
	}
    }
}
mstrContextMenuManagerImpl.prototype = new Object();
contextMenuManagerScript = true;
mstrContextMenuManagerImpl.prototype.id = null;
mstrContextMenuManagerImpl.prototype.dynamic_menus = new Array;
mstrContextMenuManagerImpl.prototype.menu_items = new Array;
microstrategy.contextMenuManagers = new Array;
microstrategy.unloadContextMenuManager = function(B) {
    for ( var A = 0; A < microstrategy.contextMenuManagers.length; A++) {
	if (microstrategy.contextMenuManagers[A].id == B) {
	    microstrategy.contextMenuManagers.splice(A, 1);
	}
    }
};
microstrategy.getContextMenuManager = function(B) {
    for ( var A = 0; A < microstrategy.contextMenuManagers.length; A++) {
	if (microstrategy.contextMenuManagers[A].id == B) {
	    return microstrategy.contextMenuManagers[A];
	}
    }
    var C = new mstrContextMenuManagerImpl(B);
    microstrategy.contextMenuManagers.push(C);
    return C;
};
mstrContextMenuManagerImpl.prototype.getMenu = function(D) {
    var C, A;
    try {
	if (D) {
	    for (C = 0; C < this.dynamic_menus.length; C++) {
		if (this.dynamic_menus[C] != null) {
		    if (this.dynamic_menus[C][0] == D) {
			return new mstrContextMenuImpl(this.id,
				this.menu_items, this.dynamic_menus[C][1]);
		    }
		}
	    }
	}
	var B = this.dynamic_menus.length;
	this.dynamic_menus[B] = new Array;
	this.dynamic_menus[B][0] = D;
	this.dynamic_menus[B][1] = new Array;
	return new mstrContextMenuImpl(this.id, this.menu_items,
		this.dynamic_menus[B][1]);
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrContextMenuManagerImpl.prototype.findMenuItem = function(C, B) {
    try {
	var A = new Array();
	if (B != null) {
	    for (i = 0; i < B.length; i++) {
		if (this.menu_items[B[i]][0] == C) {
		    A.push(this.menu_items[B[i]]);
		}
	    }
	} else {
	    for (i = 0; i < this.menu_items.length; i++) {
		if (this.menu_items[i][0] == C) {
		    A.push(this.menu_items[i]);
		}
	    }
	}
	return A;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
function mstrContextMenuManagerImpl(key) {
    try {
	if (key) {
	    if (eval("(typeof(" + key + ") != 'undefined')")) {
		this.menu_items = eval(key);
	    }
	    if (eval("(typeof(" + key + "_dyn) != 'undefined')")) {
		this.dynamic_menus = eval(key + "_dyn");
	    }
	    this.id = key;
	}
	return this;
    } catch (err) {
	microstrategy.errors.log(err);
	return false;
    }
}
mstrGridSelectionsImpl.prototype = new mstrSelectionsImpl();
mstrGridSelectionsImpl.prototype.path = "";
mstrGridSelectionsImpl.prototype.verifiedPath = "";
mstrGridSelectionsImpl.prototype.selectedUnits = null;
mstrGridSelectionsImpl.prototype.hilitedItems = null;
mstrGridSelectionsImpl.prototype.clipboardUnits = undefined;
mstrGridSelectionsImpl.prototype.drillingElementsList = "";
mstrGridSelectionsImpl.prototype.prevSelectionObj = null;
mstrGridSelectionsImpl.prototype.x = 0;
mstrGridSelectionsImpl.prototype.y = 0;
mstrGridSelectionsImpl.prototype.onload = function(B) {
    try {
	this.verifiedPath = microstrategy.getEventHandlerString(this.path);
	return true;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrGridSelectionsImpl.prototype.singleAttributeElementsAreSelected = function() {
    try {
	if (this.getSelectedUnitsCount() == 1) {
	    for ( var A in this.selectedUnits) {
		var C = this.selectedUnits[A];
		if (C && C.countLevel() == 1) {
		    return (C.hasLevel(microstrategy.GRIDCELLTYPE_UNIT_VALUE));
		}
	    }
	}
	return false;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrGridSelectionsImpl.prototype.anyAttributeElementSelected = function() {
    try {
	for ( var A in this.selectedUnits) {
	    var C = this.selectedUnits[A];
	    if (C && C.hasLevel(microstrategy.GRIDCELLTYPE_UNIT_VALUE)) {
		return true;
	    }
	}
	return false;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrGridSelectionsImpl.prototype.getSelectedItemCount = function() {
    try {
	var B = this.getItems();
	return (B) ? B.length : 0;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrGridSelectionsImpl.prototype.repopulateSelections = function() {
    try {
	this.clearUnits();
	var pb = this.parentBone, gridSelections = pb.gridSelections;
	if (gridSelections == null || typeof (gridSelections) == "undefined"
		|| gridSelections.length == 0) {
	    return;
	}
	this.prevSelectionObj = eval("(" + gridSelections + ")");
	if (this.prevSelectionObj == null
		|| typeof (this.prevSelectionObj) == "undefined") {
	    return;
	}
	if (this.prevSelectionObj != null) {
	    var currentpage = this.parentBone.currentPageX + ","
		    + this.parentBone.currentPageY;
	    var reselectItems = (this.prevSelectionObj.items != null);
	    var reselectUnits = (this.prevSelectionObj.page == currentpage && this.prevSelectionObj.units != null);
	    var selectionActive = (reselectItems || reselectUnits)
		    && this.hasHilitedCells();
	    if (selectionActive
		    && microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION) {
		this.parentBone.switchToCellSelectionMode();
	    }
	    if (reselectItems) {
		var isFetchingColumns = pb.currentPageX != pb.previousPageX, items = this.prevSelectionObj.items, cItems = items[currentpage], cnt;
		if (isFetchingColumns) {
		    cnt = pb.chc;
		    for ( var idx in cItems) {
			if (idx.substring(0, idx.indexOf(",")) >= cnt) {
			    delete cItems[idx];
			}
		    }
		} else {
		    cnt = pb.rhc;
		    for ( var idx in cItems) {
			if (idx.substring(idx.indexOf(","), idx.length - 1) >= cnt) {
			    delete cItems[idx];
			}
		    }
		}
		for ( var page in items) {
		    if (items[page] != null) {
			this.reselectItems(items[page]);
		    }
		}
	    }
	    if (reselectUnits) {
		for ( var i in this.prevSelectionObj.units) {
		    var value = this.prevSelectionObj.units[i];
		    if (value != null) {
			var temps = value.split("|");
			if (temps != null) {
			    var uIndex = temps[0];
			    var uLevel = temps[1];
			    var uTemps = uIndex.split(",");
			    if (uTemps) {
				var uAxis = uTemps[0];
				var uDepth = uTemps[1];
				var unit = this.parentBone.gridStructureInfo
					.getUnit(uAxis, uDepth);
				if (unit != null) {
				    if (unit.isVisible
					    && (this.selectedUnits[uIndex] == null
						    || (!this.selectedUnits[uIndex]
							    .hasLevel(uLevel)) || (this.selectedUnits[uIndex].levelObjs && !(this.selectedUnits[uIndex].levelObjs[uLevel])
						    .hasSelectedCells()))) {
					this.addToSelectedUnits(null, unit.src,
						uLevel, true);
				    }
				    this.resolveParentSelectionInfo(unit,
					    uLevel);
				}
			    }
			}
		    }
		}
	    }
	}
    } catch (err) {
	return false;
    }
};
mstrGridSelectionsImpl.prototype.checkForSpannedCell = function(D, E, B) {
    try {
	var A = D.rows[0].cells[0];
	if (A && A.getAttribute(B) != null && A.getAttribute(B) == E) {
	    return A;
	}
	return null;
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrGridSelectionsImpl.prototype.reselectItems = function(E) {
    try {
	var J = this.parentBone.elem.getElementsByTagName("table")[0];
	if (J == null) {
	    return;
	}
	var L = false;
	for ( var B in E) {
	    if (E[B] == null || E[B] == "null" || typeof (E[B]) == "undefined") {
		continue;
	    }
	    var C = B.split(",");
	    var F = C[0];
	    var H = C[1];
	    var I = util_findCell(J, F, H, E[B], "d1");
	    if (I == null) {
		I = this.checkForSpannedCell(J, E[B], "d1");
	    }
	    if (I == null) {
		var K = J.rows[F];
		if (K != null) {
		    var D = this.parentBone.gridStructureInfo
			    .getGridCellProps(K.cells[H]);
		    var G = D && D.getCellDrillElement(K.cells[H]);
		    if (G && (G.toLowerCase() == E[B].toLowerCase())) {
			I = K.cells[H];
			I.setAttribute("d1", G);
		    }
		}
	    }
	    if (I != null) {
		this.add(I, false);
		L = true;
	    }
	}
	return L;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrGridSelectionsImpl.prototype.add = function(C, B) {
    try {
	if (microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION
		&& this.parentBone != null
		&& !this.parentBone.isGridInCellSelectionMode()) {
	    this.parentBone.switchToCellSelectionMode();
	}
	if (C.nodeName.toLowerCase() != "td") {
	    return null;
	}
	var A = this.getCellLevel(C);
	this.selectUnitsItems(C, A, B);
    } catch (D) {
	microstrategy.errors.log(D);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.isCellSingleSelectable = function(F, B) {
    try {
	var E = false;
	var D = this.parentBone.gridStructureInfo.getGridCellProps(F);
	var H = F.getAttribute("D1");
	if (!H) {
	    H = D && D.getCellDrillElement(F);
	    if (H) {
		F.setAttribute("D1", H);
	    }
	}
	var E = (H != null && H.length > 0);
	if (!E) {
	    E = F.getAttribute("peix") != null;
	}
	if (B == microstrategy.GRIDCELLTYPE_UNIT_VALUE && E) {
	    var A = F.getAttribute("CX");
	    if (!A) {
		A = D && D.getCellCx();
		if (A) {
		    F.setAttribute("CX", A);
		}
	    }
	    E = (A != null && A.length > 0);
	}
	if (!E && D) {
	    E = D.getGridUnitInfo().src.getAttribute("cde");
	}
	var C = (B == microstrategy.GRIDCELLTYPE_UNIT_HEADER);
	return (E || C);
    } catch (G) {
	microstrategy.errors.log(G);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.findTemplateUnit = function(B, A) {
    if (A == microstrategy.GRIDCELLTYPE_UNIT_HEADER) {
	return B;
    }
    var C = this.findTemplateUnitObj(B, A);
    return C && C.src;
};
mstrGridSelectionsImpl.prototype.findTemplateUnitObj = function(D, A) {
    try {
	var F;
	switch (A) {
	case microstrategy.GRIDCELLTYPE_UNIT_HEADER:
	    F = D;
	    break;
	case microstrategy.GRIDCELLTYPE_SUBTOTAL_HEADER:
	case microstrategy.GRIDCELLTYPE_SUBTOTAL_VALUE:
	case microstrategy.GRIDCELLTYPE_UNIT_VALUE:
	case microstrategy.GRIDCELLTYPE_METRIC_DATA:
	    var C = D.getAttribute(microstrategy.HTMLATTR_GRID_UNIT_POS);
	    if (C != null && C.length > 0) {
		var G = C.split(",");
		var B = this.parentBone.gridStructureInfo.getUnit(G[0], G[1]);
		if (B != null) {
		    F = B;
		}
	    } else {
		var H = D.nodeName.toLowerCase();
		if ((H != "td")) {
		    D = microstrategy.findParentWithTag(D, "td");
		}
		var B = this.parentBone.gridStructureInfo.getGridCellProps(D)
			&& this.parentBone.gridStructureInfo
				.getGridCellProps(D).getGridUnitInfo();
		if (B != null) {
		    F = B;
		}
	    }
	    break;
	}
	return F;
    } catch (E) {
	microstrategy.errors.log(E);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.getAttrFormUnits = function(B, F) {
    try {
	var A = new Array;
	var G = F.getSubAxis();
	var C;
	if (this.parentBone.gridStructureInfo != null
		&& this.parentBone.gridStructureInfo.showAttForms && G != null) {
	    for ( var D in G.units) {
		A.push(G.units[D].src);
	    }
	} else {
	    A.push(B);
	}
	return A;
    } catch (E) {
	microstrategy.errors.log(E);
    }
    return null;
};
mstrGridSelectionsImpl.prototype.getAttrFormValueCells = function(J, H) {
    try {
	var K = new Array;
	var E = H.getSubAxis();
	var F;
	var I = this.parentBone.gridStructureInfo;
	if (I != null && I.showAttForms && E != null) {
	    if (H.axis == microstrategy.GRIDCELL_AXIS_ROWS) {
		F = J.parentNode.rowIndex;
		var A = J.parentNode.cells;
		var G = H.axis + "," + H.depth;
		for ( var D = 0; D < A.length; D++) {
		    var C = A[D]
			    .getAttribute(microstrategy.HTMLATTR_GRID_UNIT_POS);
		    if (!C) {
			C = I.getGridCellProps(A[D])
				&& I.getGridCellProps(A[D]).getCellUpt();
			if (C) {
			    A[D].setAttribute(
				    microstrategy.HTMLATTR_GRID_UNIT_POS, C);
			}
		    }
		    if (C == G) {
			K.push(A[D]);
		    }
		}
	    } else {
		if (H.axis == microstrategy.GRIDCELL_AXIS_COLUMNS) {
		    F = J.cellIndex;
		    K.push(J);
		}
	    }
	} else {
	    K.push(J);
	}
	return K;
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.selectUnitsItems = function(C, A, B) {
    try {
	var D = true;
	if (this.isCellSingleSelectable(C, A)) {
	    D = false;
	    if (!B) {
		this.lastSelection = C;
	    }
	}
	var F = this.findTemplateUnitObj(C, A);
	if (F.subtype == microstrategy.SUBOBJTYPE_METRIC
		|| A == microstrategy.GRIDCELLTYPE_SUBTOTAL_VALUE) {
	    D = false;
	}
	if (F && F.src) {
	    F = F.src;
	}
	if (F != null) {
	    this.addToSelectedUnits(C, F, A, D);
	    this.parentBone.setGraphSelected(false);
	    if (!B) {
		this.parentBone.notifySelectionChange("ongridselectionschange");
	    }
	}
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrGridSelectionsImpl.prototype.isEmpty = function() {
    try {
	var B = this.getSelectedUnitsCount();
	return (B <= 0);
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.getSelectedCellsWithAttr = function(I, H) {
    try {
	var G = new Array;
	for ( var E in this.selectedUnits) {
	    var F = this.selectedUnits[E];
	    F = F && F.levelObjs;
	    if (F) {
		for ( var D in F) {
		    for ( var B in F[D].selectedItems) {
			var A = F[D].selectedItems[B].getAttribute(I);
			if (A != null && A.length > 0 && A.toLowerCase() == H) {
			    G.push(F[D].selectedItems[B]);
			}
		    }
		}
	    }
	}
	return G;
    } catch (C) {
	microstrategy.errors.log(C);
	return null;
    }
};
mstrGridSelectionsImpl.prototype.addToHilitedItemsCollection = function(B) {
    try {
	var A = this.getIndexFromCell(B);
	this.hilitedItems[A] = B;
	this.hiliteSelected(B);
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.addToSelectedUnits = function(S, N, D, X) {
    try {
	var A = new Array();
	var I = new Array();
	var C = new Array();
	var W = false;
	var G = N.getAttribute ? N.getAttribute(microstrategy.HTMLATTR_DSS_ID)
		: N.dssId;
	var M = this.parentBone.gridStructureInfo.findUnit(G);
	if (M == null) {
	    return;
	}
	var J = M.axis + "," + M.depth;
	if (this.selectedUnits[J] == null) {
	    this.selectedUnits[J] = new mstrUnitObjImpl(this);
	}
	this.selectedUnits[J].unit = M;
	var V = "";
	var F = false;
	switch (M.subtype) {
	case microstrategy.SUBOBJTYPE_ATTRIBUTE:
	case microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM:
	    if (M.isMetricTemplateUnit) {
		V = "0,-999,6";
	    } else {
		V = M.axis + "," + M.depth + ",1";
	    }
	    break;
	case microstrategy.SUBOBJTYPE_METRIC:
	    V = (M.depth - 1) + ",-1,2";
	    F = true;
	    break;
	}
	this.selectedUnits[J].gridTarget = V;
	this.selectedUnits[J].isMetric = F;
	if (this.selectedUnits[J].levelObjs[D] == null) {
	    this.selectedUnits[J].levelObjs[D] = new mstrUnitLevelObjImpl(
		    this.selectedUnits[J]);
	}
	if (X) {
	    if (D == microstrategy.GRIDCELLTYPE_UNIT_HEADER) {
		if (X && this.parentBone.gridStructureInfo.showAttForms
			&& M.hasAttForms()) {
		    I = this.getAttrFormUnits(N, M);
		} else {
		    I.push(N);
		}
	    } else {
		I = this.parentBone.findAllCells(M, D);
	    }
	} else {
	    if (D != microstrategy.GRIDCELLTYPE_UNIT_HEADER) {
		A = this.getAttrFormValueCells(S, M);
		if (M.axis == microstrategy.GRIDCELL_AXIS_ROWS
			&& M.depth == this.parentBone.gridStructureInfo
				.getMaxAxisPosition(M.axis) - 1) {
		    var U = this.parentBone.elem.getElementsByTagName("table")[0];
		    if (this.parentBone.commands
			    .queryState("checkMergeRowHeader")) {
			C = util_getAllCellsInRowFromThisCell(S, U);
		    } else {
			C = U.rows[S.parentNode.rowIndex].cells;
		    }
		}
	    } else {
		A.push(S);
	    }
	}
	for ( var Q = 0; C != null && Q < C.length; Q++) {
	    if (C[Q] == S) {
		continue;
	    }
	    var O = this.getCellLevel(C[Q]);
	    var B = this.findTemplateUnit(C[Q], O);
	    if (B == null) {
		continue;
	    }
	    var K = B.getAttribute(microstrategy.HTMLATTR_DSS_ID);
	    var T = this.parentBone.gridStructureInfo.findUnit(K);
	    var P = T.axis + "," + T.depth;
	    if (this.selectedUnits[P] == null) {
		this.selectedUnits[P] = new mstrUnitObjImpl(this);
	    }
	    this.selectedUnits[P].unit = T;
	    if (this.selectedUnits[P].levelObjs[O] == null) {
		this.selectedUnits[P].levelObjs[O] = new mstrUnitLevelObjImpl(
			this.selectedUnits[P]);
	    }
	    var L = this.selectedUnits[P].levelObjs[O];
	    L.addToHilitedItems(C[Q]);
	}
	var E = this.selectedUnits[J].levelObjs[D];
	for ( var R in I) {
	    E.addToHilitedItems(I[R]);
	}
	for ( var R in A) {
	    E.addToHilitedItems(A[R]);
	    E.addToSelectedItems(A[R]);
	}
	if (this.selectedUnits[J].levels.toString().indexOf(D) < 0) {
	    this.selectedUnits[J].levels.push(D);
	    W = true;
	}
	if (S != null) {
	    this.parentBone.resetSelections();
	}
	return W;
    } catch (H) {
	microstrategy.errors.log(H);
	return false;
    }
};
mstrGridSelectionsImpl.prototype.getSelectedGridTarget = function() {
    try {
	var C = this.getSelectedUnitsCount();
	if (C == 0) {
	    return microstrategy.GRID_TARGET_NONE;
	} else {
	    if (C == 1) {
		for ( var A in this.selectedUnits) {
		    if (this.selectedUnits[A] != null
			    && this.selectedUnits[A].gridTarget != null
			    && this.selectedUnits[A].gridTarget.length > 0) {
			return this.selectedUnits[A].gridTarget;
		    }
		}
	    } else {
		return microstrategy.GRID_TARGET_MULTIPLE;
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrGridSelectionsImpl.prototype.getSelectedGridLevel = function() {
    try {
	var A = this.getSelectedGridTarget();
	switch (A) {
	case microstrategy.GRID_TARGET_NONE:
	    return microstrategy.GRIDCELLTYPE_LEVEL_NONE;
	case microstrategy.GRID_TARGET_MULTIPLE:
	    return microstrategy.GRIDCELLTYPE_LEVEL_MULTIPLE;
	default:
	    for ( var C in this.selectedUnits) {
		if (this.selectedUnits[C] != null
			&& this.selectedUnits[C].levels.length > 0) {
		    var E = this.selectedUnits[C].levels;
		    var B = this.getLevelsCount(E);
		    if (B <= 0) {
			return microstrategy.GRIDCELLTYPE_LEVEL_NONE;
		    } else {
			if (B == 1) {
			    return E[0];
			} else {
			    return microstrategy.GRIDCELLTYPE_LEVEL_MULTIPLE;
			}
		    }
		}
	    }
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrGridSelectionsImpl.prototype.addToSelections = function(F, A, L) {
    try {
	var G = this.getCellLevel(A);
	if (G == null || G.length <= 0) {
	    return false;
	}
	var I = this.findTemplateUnitObj(A, G);
	if (!I) {
	    if (microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION
		    && this.parentBone) {
		var C = this.parentBone.getDocSelections();
		C
			&& C.addToSelection(F.ctrlKey, findTarget(
				this.parentBone.elem,
				microstrategy.HTMLATTR_OBJTYPE));
	    }
	    return false;
	}
	I = I.src || I;
	var E = I.getAttribute ? I.getAttribute(microstrategy.HTMLATTR_DSS_ID)
		: I.dssId;
	var H = this.parentBone.gridStructureInfo.findUnit(E);
	if (F.button == 2) {
	    if (!this.isSelected(A, H, G)) {
		if (!F.ctrlKey) {
		    this.clearCurrentPage(true);
		}
		this.resolveParentSelectionInfo(H, G);
		this.add(A);
	    }
	} else {
	    if ((F.ctrlKey || isMac && F.metaKey) && !F.shiftKey) {
		var B = this.getSelectedUnitsCount();
		if (this.isSelected(A, H, G)) {
		    if (B == 2) {
			var K = null;
			for ( var J in this.selectedUnits) {
			    if (this.selectedUnits[J]
				    && this.selectedUnits[J].unit != H) {
				K = this.selectedUnits[J];
			    }
			}
			if (K) {
			    this.resolveParentSelectionInfo(K.unit, K
				    .resolveLevelsValue());
			}
		    } else {
			if (B == 1) {
			    this.updateParentSelectionInfo(
				    microstrategy.GRID_UNIT_CONTAINER, 1);
			}
		    }
		    this.remove(A);
		} else {
		    this.selectStartFunc = this.parentBone.elem.onselectstart;
		    this.restoreSelectStartFunc = true;
		    this.parentBone.elem.onselectstart = new Function(
			    "return false;");
		    if (this.lastSelectionIsFromToolbar()) {
			this.clearCurrentPage(true);
		    }
		    if (B > 0) {
			this.updateParentSelectionInfo(-1, -1);
		    }
		    if (this.isCellSingleSelectable(A, G)) {
			this.add(A);
		    } else {
			if (this.isCellHilited(A)) {
			    this.remove(A);
			} else {
			    this.add(A);
			}
		    }
		}
	    } else {
		if (F.shiftKey && this.isCellShiftSelectable(A, G)) {
		    this.selectStartFunc = this.parentBone.elem.onselectstart;
		    this.restoreSelectStartFunc = true;
		    this.parentBone.elem.onselectstart = new Function(
			    "return false;");
		    if (!F.ctrlKey) {
			this.clearCurrentPage(true);
		    }
		    this.updateParentSelectionInfo(-1, -1);
		    this.shiftSelect(H, A, G);
		} else {
		    if (!L) {
			if (this.isSelected(A, H, G)
				&& (G == microstrategy.GRIDCELLTYPE_UNIT_HEADER)) {
			    this.deferredSrc = A;
			    return false;
			} else {
			    this.deferredSrc = null;
			}
		    }
		    if (G == microstrategy.GRIDCELLTYPE_UNIT_HEADER) {
			this.clearAll(true);
		    } else {
			this.clearCurrentPage(true);
		    }
		    this.resolveParentSelectionInfo(H, G);
		    this.add(A);
		}
	    }
	}
	this.handleCopySelections(A, H, F);
    } catch (D) {
	microstrategy.errors.log(D);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.isCellShiftSelectable = function(B, A) {
    return (A == microstrategy.GRIDCELLTYPE_UNIT_VALUE)
	    && B.nodeName.toLowerCase() == "td"
	    && this.lastSelection
	    && this.lastSelection != B
	    && this.lastSelection
		    .getAttribute(microstrategy.HTMLATTR_GRIDCELL_ID) === B
		    .getAttribute(microstrategy.HTMLATTR_GRIDCELL_ID);
};
mstrGridSelectionsImpl.prototype.shiftSelect = function(H, C, G) {
    try {
	var B = ((H.axis == -1) ? 0 : H.axis) + "A" + H.depth;
	var K = this.parentBone.getCellsWithAttr(
		microstrategy.HTMLATTR_GRIDCELL_ID, B);
	var J = false;
	var A = -1, E = -1;
	for ( var F = 0; F < K.length; F++) {
	    var I = K[F];
	    if (I === C || I === this.lastSelection) {
		J = !J;
		if (!J) {
		    this.add(I, true);
		    break;
		}
	    }
	    if (J) {
		this.add(I, true);
	    }
	}
	this.parentBone.notifySelectionChange("ongridselectionschange");
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrGridSelectionsImpl.prototype.resolveParentSelectionInfo = function(C, A) {
    try {
	if (C != null) {
	    var D = (C.isMetricTemplateUnit) ? mstrGridReport.METRIC_UNITS
		    : this.parentBone.resolveGridUnitId(C.axis, C.depth);
	    this.updateParentSelectionInfo(D, A);
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridSelectionsImpl.prototype.updateParentSelectionInfo = function(C, A) {
    try {
	this.parentBone.gridUnitFormat = C;
	this.parentBone.gridValueFormat = A;
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridSelectionsImpl.prototype.clearDeferredSrc = function() {
    this.deferredSrc = null;
};
mstrGridSelectionsImpl.prototype.onmouseup = function(A) {
    if (this.restoreSelectStartFunc) {
	this.parentBone.elem.onselectstart = this.selectStartFunc;
    }
    this.selectStartFunc = null;
    this.restoreSelectStartFunc = false;
    if (this.deferredSrc) {
	this.addToSelections(A, this.deferredSrc, true);
    }
};
mstrGridSelectionsImpl.prototype.lastSelectionIsFromToolbar = function() {
    try {
	return (this.parentBone.selectedAxis != null
		|| this.parentBone.selectedLevel != null
		|| this.parentBone.selectedPosition != null || this.parentBone.selectedUnit != null);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrGridSelectionsImpl.prototype.isCellHilited = function(F) {
    try {
	var B = false;
	for ( var E in this.selectedUnits) {
	    var C = this.selectedUnits[E];
	    if (C != null && C.levelObjs != null) {
		var A = C.levelObjs;
		for ( var D in A) {
		    if (A[D] != null) {
			B = A[D].hasHilitedCell(F);
			if (B) {
			    return B;
			}
		    }
		}
	    }
	}
	return B;
    } catch (G) {
	microstrategy.errors.log(G);
	return null;
    }
};
mstrGridSelectionsImpl.prototype.isCellSelected = function(F) {
    try {
	var A = this.getCellLevel(F);
	if (A == null || A.length <= 0) {
	    return false;
	}
	var B = this.findTemplateUnit(F, A);
	if (B == null) {
	    return false;
	}
	var C = B.getAttribute(microstrategy.HTMLATTR_DSS_ID);
	var E = this.parentBone.gridStructureInfo.findUnit(C);
	return this.isSelected(F, E, A);
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrGridSelectionsImpl.prototype.isSelected = function(E, D, F) {
    try {
	if (this.selectedUnits != null && D != null) {
	    var B = D.axis + "," + D.depth;
	    var A = this.selectedUnits[B];
	    if (A != null && A.levelObjs != null && A.levelObjs[F] != null) {
		return A.levelObjs[F].hasSelectedCell(E);
	    }
	}
	return false;
    } catch (C) {
	microstrategy.errors.log(C);
	return null;
    }
};
mstrGridSelectionsImpl.prototype.hasSelectedCells = function() {
    try {
	var A = false;
	if (this.selectedUnits != null) {
	    for ( var C in this.selectedUnits) {
		var B = this.selectedUnits[C];
		if (B != null && B.levelObjs != null) {
		    var E = B.levelObjs;
		    for ( var F in E) {
			A = E[F].hasSelectedCells();
			if (A) {
			    return A;
			}
		    }
		}
	    }
	}
	return A;
    } catch (D) {
	microstrategy.errors.log(D);
	return null;
    }
};
mstrGridSelectionsImpl.prototype.hasHilitedCells = function() {
    try {
	var A = false;
	if (this.selectedUnits != null) {
	    for ( var C in this.selectedUnits) {
		var B = this.selectedUnits[C];
		if (B != null && B.levelObjs != null) {
		    var E = B.levelObjs;
		    for ( var F in E) {
			A = E[F].hasHilitedCells();
			if (A) {
			    return A;
			}
		    }
		}
	    }
	}
	return A;
    } catch (D) {
	microstrategy.errors.log(D);
	return null;
    }
};
mstrGridSelectionsImpl.prototype.remove = function(B) {
    try {
	if (B.nodeName.toLowerCase() != "td") {
	    return false;
	}
	var A = this.getCellLevel(B);
	this.removeUnitsItems(B, A);
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.removeUnitsItems = function(B, A) {
    try {
	var E = true;
	if (this.isCellSingleSelectable(B, A)) {
	    E = false;
	}
	var D = this.findTemplateUnit(B, A);
	if (D != null) {
	    this.removeFromSelectedUnits(B, D, A, E);
	    this.parentBone.notifySelectionChange("ongridselectionschange");
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.removeFromSelectedUnits = function(T, N, C, S) {
    try {
	var W = false;
	var M = new Array();
	var L = new Array;
	var H = new Array;
	var B = new Array;
	var E = N.getAttribute(microstrategy.HTMLATTR_DSS_ID);
	var K = this.parentBone.gridStructureInfo.findUnit(E);
	var G = K.axis + "," + K.depth;
	var D = this.selectedUnits[G].levelObjs[C];
	if (S) {
	    D.clearSelectedItems();
	    D.clearHilitedItems();
	} else {
	    if (C != microstrategy.RIDCELLTYPE_UNIT_HEADER) {
		H = this.getAttrFormValueCells(T, K);
		if (K.axis == microstrategy.GRIDCELL_AXIS_ROWS
			&& K.depth == this.parentBone.gridStructureInfo
				.getMaxAxisPosition(K.axis) - 1) {
		    var V = this.parentBone.elem.getElementsByTagName("table")[0];
		    if (this.parentBone.commands
			    .queryState("checkMergeRowHeader")) {
			B = util_getAllCellsInRowFromThisCell(T, V);
		    } else {
			B = V.rows[T.parentNode.rowIndex].cells;
		    }
		}
	    } else {
		H.push(T);
	    }
	}
	for ( var Q = 0; B != null && Q < B.length; Q++) {
	    if (B[Q] == T) {
		continue;
	    }
	    var O = this.getCellLevel(B[Q]);
	    var A = this.findTemplateUnit(B[Q], O);
	    if (A == null) {
		return false;
	    }
	    var I = A.getAttribute(microstrategy.HTMLATTR_DSS_ID);
	    var U = this.parentBone.gridStructureInfo.findUnit(I);
	    var P = U.axis + "," + U.depth;
	    if (this.selectedUnits[P] == null) {
		this.selectedUnits[P] = new mstrUnitObjImpl(this);
	    }
	    this.selectedUnits[P].unit = U;
	    if (this.selectedUnits[P].levelObjs[O] == null) {
		this.selectedUnits[P].levelObjs[O] = new mstrUnitLevelObjImpl(
			this.selectedUnits[P]);
	    }
	    var J = this.selectedUnits[P].levelObjs[O];
	    J.removeHilitedItems(B[Q]);
	}
	for ( var R in H) {
	    D.removeSelectedItems(H[R]);
	    D.removeHilitedItems(H[R]);
	}
	if (D.selectedItemsLength == 0) {
	    W = true;
	    this.selectedUnits[G].removeLevel(C);
	}
	if (this.selectedUnits[G].countLevel() <= 0) {
	    this.selectedUnits[G] = null;
	}
	return W;
    } catch (F) {
	microstrategy.errors.log(F);
	return false;
    }
};
mstrGridSelectionsImpl.prototype.getIndexFromCell = function(B) {
    try {
	if (B == null || typeof (B) == "undefined" || B.nodeName == null
		|| typeof (B.nodeName) == "undefined"
		|| B.nodeName.toLowerCase() != "td") {
	    return null;
	}
	return (B.parentNode.rowIndex + "," + B.cellIndex);
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return null;
};
mstrGridSelectionsImpl.prototype.hiliteSelected = function(B) {
    try {
	if (B.nodeName.toLowerCase() == "td") {
	    this.hiliteObj(B, "50");
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.hiliteObj = function(D, A) {
    try {
	if (D.nodeName.toLowerCase() == "td" && bIsIE8) {
	    var E, C;
	    if (A != "100") {
		if (D.firstChild
			&& D.firstChild.nodeName.toLowerCase() == "div"
			&& D.firstChild.getAttribute("f") == "1") {
		    E = D.firstChild;
		} else {
		    E = document.createElement("div");
		    E.setAttribute("f", "1");
		    while (D.firstChild) {
			C = D.removeChild(D.firstChild);
			E.appendChild(C);
		    }
		    D.appendChild(E);
		}
		setFilter(E, "Alpha", {
		    opacity : "50"
		});
		return;
	    } else {
		if (D.firstChild
			&& D.firstChild.nodeName.toLowerCase() == "div"
			&& D.firstChild.getAttribute("f") == "1") {
		    E = D.firstChild;
		    while (E.firstChild) {
			C = E.removeChild(E.firstChild);
			D.appendChild(C);
		    }
		    D.removeChild(E);
		    return;
		}
	    }
	}
	setFilter(D, "Alpha", {
	    opacity : A
	});
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridSelectionsImpl.prototype.clear = function() {
    try {
	this.clearAll(true);
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.clearAll = function(A) {
    try {
	if (this.hasHilitedCells()) {
	    this.clearCurrentPage(A);
	    this.clearSelectionsFromOtherPages();
	    this.clearClipboardItems();
	    var B = this.parentBone
		    && this.parentBone.switchToContainerSelectionMode
		    && this.parentBone.switchToContainerSelectionMode();
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.clearCurrentPage = function(A) {
    try {
	this.removeAllHilites();
	this.clearSelectedItemsOnCurrentPage();
	this.clearUnits();
	if (A) {
	    return;
	}
	this.parentBone.notifySelectionChange("ongridselectionschange");
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridSelectionsImpl.prototype.clearUnits = function() {
    try {
	this.selectedUnits = new Array;
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.clearSelectedItemsOnCurrentPage = function() {
    try {
	for ( var B in this.selectedUnits) {
	    if (this.selectedUnits[B] != null
		    && this.selectedUnits[B].levelObjs != null) {
		for ( var A in this.selectedUnits[B].levelObjs) {
		    this.selectedUnits[B].levelObjs[A].clearSelectedItems();
		}
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.removeAllHilites = function() {
    try {
	for ( var B in this.selectedUnits) {
	    if (this.selectedUnits[B] != null
		    && this.selectedUnits[B].levelObjs != null) {
		for ( var A in this.selectedUnits[B].levelObjs) {
		    this.selectedUnits[B].levelObjs[A].clearHilitedItems();
		}
	    }
	}
	return false;
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridSelectionsImpl.prototype.removeHilites = function(B) {
    try {
	if (B.nodeName.toLowerCase() == "td") {
	    if (!this.parentBone.restoreHiliteIfCurrent(B)) {
		this.hiliteObj(B, "100");
	    }
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.removeFromHilitedItems = function(C) {
    try {
	var A = this.getIndexFromCell(Obj);
	delete this.hilitedItems[A];
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.getSelectionsFromOtherPages = function() {
    try {
	return this.parentBone.gridSelections;
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.clearSelectionsFromOtherPages = function() {
    try {
	this.parentBone.gridSelections = "";
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrGridSelectionsImpl.prototype.getSelectedUnitsCount = function() {
    try {
	var A = 0;
	for ( var B in this.selectedUnits) {
	    if (this.selectedUnits[B] != null) {
		var D = this.selectedUnits[B].levels;
		if (D != null && this.getLevelsCount(D) > 0) {
		    A++;
		}
	    }
	}
	return A;
    } catch (C) {
	microstrategy.errors.log(C);
	return 0;
    }
};
mstrGridSelectionsImpl.prototype.getLevelsCount = function(D) {
    try {
	var A = 0;
	for ( var B in D) {
	    if (D[B] != null && typeof (D[B]) != "undefined") {
		A++;
	    }
	}
	return A;
    } catch (C) {
	microstrategy.errors.log(C);
	return 0;
    }
};
mstrGridSelectionsImpl.prototype.getSelectedGridTargetGridLevel = function() {
    try {
	var A = new Array();
	if (this.parentBone.selectedAxis != null
		&& this.parentBone.selectedPosition != null
		&& this.parentBone.selectedUnit != null
		&& this.parentBone.selectedLevel != null) {
	    A.push(this.parentBone.selectedAxis + ","
		    + this.parentBone.selectedPosition + ","
		    + this.parentBone.selectedUnit + ","
		    + this.parentBone.selectedLevel);
	} else {
	    if (this.selectedUnits.length == 0
		    && this.parentBone.gridUnitFormat == microstrategy.GRID_BORDERS) {
		A = [ "0,-99,2,6" ];
	    } else {
		for ( var F in this.selectedUnits) {
		    if (this.selectedUnits[F] != null) {
			var I = this.selectedUnits[F].levels;
			var B;
			var G;
			var H;
			var C = this.selectedUnits[F].gridTarget.split(",");
			if (this.selectedUnits[F].isMetric) {
			    B = "0";
			    G = C[0];
			} else {
			    B = C[0];
			    G = C[1];
			}
			H = C[2];
			for ( var D in I) {
			    A.push(B + "," + G + "," + H + "," + I[D]);
			}
		    }
		}
	    }
	}
	return A;
    } catch (E) {
	microstrategy.errors.log(E);
	return 0;
    }
};
mstrGridSelectionsImpl.prototype.getCellLevel = function(D) {
    try {
	var A = D.getAttribute(microstrategy.HTMLATTR_SUBOBJTYPE);
	var C = "";
	switch (A) {
	case microstrategy.SUBOBJTYPE_ATTRIBUTE:
	case microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM:
	case microstrategy.SUBOBJTYPE_METRIC:
	    C = microstrategy.GRIDCELLTYPE_UNIT_HEADER;
	    break;
	}
	if (C == "") {
	    var B = this.parentBone.gridStructureInfo.getCellType(D);
	    switch (B) {
	    case microstrategy.GRIDCELLTYPE_SUBTOTAL_HEADER:
	    case microstrategy.GRIDCELLTYPE_SUBTOTAL_VALUE:
	    case microstrategy.GRIDCELLTYPE_UNIT_VALUE:
		C = B;
		break;
	    }
	}
	return C;
    } catch (E) {
	microstrategy.errors.log(E);
	return null;
    }
};
mstrGridSelectionsImpl.prototype.getSelections = function() {
    try {
	var A = "";
	var H = "";
	var G = "'" + this.parentBone.currentPageX + ","
		+ this.parentBone.currentPageY + "':{"
		+ this.getItemSelections(this.getItemsAsAssociativeArray())
		+ "}";
	H += "'items':{" + G + "}";
	var E = this.parentBone.gridSelections.indexOf("'units'");
	if (E > -1) {
	    this.parentBone.gridSelections = this.parentBone.gridSelections
		    .substring(0, E - 1)
		    + "}";
	}
	if (microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION
		|| this.parentBone.gridSelections.length <= 0) {
	    A = "{" + H + "}";
	} else {
	    var C = new RegExp("'" + this.parentBone.currentPageX + ","
		    + this.parentBone.currentPageY
		    + "':\\{(('\\d+,\\d+':'(\\w,*)*'),*)*\\}", "g");
	    if (this.parentBone.gridSelections.match(C) != null) {
		A = this.parentBone.gridSelections.replace(C, G);
	    } else {
		A = this.parentBone.gridSelections.substring(0,
			this.parentBone.gridSelections.length - 2)
			+ "," + G + "}}";
	    }
	}
	var F = this.getUnitSelections(this.selectedUnits);
	if (F != "") {
	    F = "'units':{" + F + "}";
	} else {
	    F = "'units':null";
	}
	var B = "'page':'" + this.parentBone.currentPageX + ","
		+ this.parentBone.currentPageY + "'";
	A = A.substring(0, A.length - 2) + "}," + F + "," + B + "}";
	return A;
    } catch (D) {
	microstrategy.errors.log(D);
    }
    return null;
};
mstrGridSelectionsImpl.prototype.getItemSelections = function(B) {
    try {
	var E = false;
	var F = "";
	if (B != null) {
	    for ( var C in B) {
		var A = B[C].getAttribute("d1");
		F += "'" + C + "':'" + A + "',";
		E = true;
	    }
	    if (E) {
		F = F.substring(0, F.length - 1);
	    }
	}
	return F;
    } catch (D) {
	microstrategy.errors.log(D);
	return "";
    }
};
mstrGridSelectionsImpl.prototype.getItemsAsAssociativeArray = function() {
    try {
	var D = new Object;
	var G = false;
	for ( var C in this.selectedUnits) {
	    if (this.selectedUnits[C] != null) {
		var F = this.selectedUnits[C].levelObjs;
		for ( var B in F) {
		    for ( var A in F[B].selectedItems) {
			D[A] = F[B].selectedItems[A];
			G = true;
		    }
		}
	    }
	}
	return (G) ? D : null;
    } catch (E) {
	microstrategy.errors.log(E);
	return "";
    }
};
mstrGridSelectionsImpl.prototype.getItems = function() {
    try {
	var D = new Array;
	for ( var C in this.selectedUnits) {
	    if (this.selectedUnits[C] != null) {
		var F = this.selectedUnits[C].levelObjs;
		for ( var B in F) {
		    for ( var A in F[B].selectedItems) {
			D.push(F[B].selectedItems[A]);
		    }
		}
	    }
	}
	return D;
    } catch (E) {
	microstrategy.errors.log(E);
	return "";
    }
};
mstrGridSelectionsImpl.prototype.allOnOneAxis = function() {
    try {
	var A = this.getSelectedUnitHeaders();
	if (A.length == 0) {
	    return true;
	}
	A
		.sort(function(D, C) {
		    return (parseInt(D
			    .getAttribute(microstrategy.HTMLATTR_GRIDCELL_AXIS)) - parseInt(C
			    .getAttribute(microstrategy.HTMLATTR_GRIDCELL_AXIS)));
		});
	return (A[0].getAttribute(microstrategy.HTMLATTR_GRIDCELL_AXIS) == A[A.length - 1]
		.getAttribute(microstrategy.HTMLATTR_GRIDCELL_AXIS));
    } catch (B) {
	microstrategy.errors.log(B);
	return "";
    }
};
mstrGridSelectionsImpl.prototype.getFullLevelSelectedUnits = function(B) {
    try {
	var G = false;
	var H = "";
	var C = 0;
	if (B != null) {
	    for ( var D in B) {
		for ( var A in B[D].levels) {
		    var E = B[D].levelObjs[A];
		    H += "'" + (C++) + "':'" + D + "," + B[D].levels[A] + "',";
		    G = true;
		}
	    }
	    if (G) {
		H = H.substring(0, H.length - 1);
	    }
	}
	return H;
    } catch (F) {
	microstrategy.errors.log(F);
	return "";
    }
};
mstrGridSelectionsImpl.prototype.getUnitSelections = function(B) {
    try {
	var F = false;
	var G = "";
	var C = 0;
	if (B != null) {
	    for ( var D in B) {
		if (B[D] != null) {
		    for ( var A in B[D].levels) {
			G += "'" + (C++) + "':'" + D + "|" + B[D].levels[A]
				+ "',";
			F = true;
		    }
		}
	    }
	    if (F) {
		G = G.substring(0, G.length - 1);
	    }
	}
	return G;
    } catch (E) {
	microstrategy.errors.log(E);
	return "";
    }
};
mstrGridSelectionsImpl.prototype.getSelectedUnitHeaders = function() {
    try {
	var D = new Array;
	if (this.selectedUnits != null) {
	    for ( var C in this.selectedUnits) {
		if (this.selectedUnits[C] != null) {
		    var F = this.selectedUnits[C].levelObjs;
		    if (F[microstrategy.GRIDCELLTYPE_UNIT_HEADER] != null) {
			for ( var B in F[microstrategy.GRIDCELLTYPE_UNIT_HEADER].selectedItems) {
			    var A = F[microstrategy.GRIDCELLTYPE_UNIT_HEADER].selectedItems[B];
			    if (A != null) {
				D.push(A);
			    }
			}
		    }
		}
	    }
	}
	return D;
    } catch (E) {
	microstrategy.errors.log(E);
	return "";
    }
};
mstrGridSelectionsImpl.prototype.hasMetricsSelected = function() {
    try {
	if (this.selectedUnits != null) {
	    for ( var A in this.selectedUnits) {
		if (this.selectedUnits[A] != null) {
		    if (this.selectedUnits[A].isMetric) {
			return true;
		    }
		}
	    }
	}
	return false;
    } catch (B) {
	microstrategy.errors.log(B);
	return "";
    }
};
mstrGridSelectionsImpl.prototype.getSelectedDrillElements = function() {
    try {
	var J = "";
	var G = this.getItems();
	for ( var D in G) {
	    var E = G[D].getAttribute("d1");
	    if (E != null && E != "null") {
		J += E + ",";
	    }
	}
	if (this.prevSelectionObj != null) {
	    for ( var F in this.prevSelectionObj.items) {
		var A = F.split(",");
		var I = A[0];
		var H = A[1];
		if (I != this.parentBone.currentPageX
			|| H != this.parentBone.currentPageY) {
		    var C = this.prevSelectionObj.items[F];
		    for ( var D in C) {
			var E = C[D];
			if (E != null && E != "null") {
			    J += E + ",";
			}
		    }
		}
	    }
	}
	J = J + (this.parentBone.hiddenDrillValues || "");
	if (J.length > 0) {
	    J = J.substring(0, J.length - 1);
	}
	return J;
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return null;
};
mstrGridSelectionsImpl.prototype.getSelectedDrillElementsCount = function() {
    try {
	var K = 0;
	var H = this.getItems();
	var F = {};
	for ( var D in H) {
	    var E = H[D].getAttribute("d1");
	    if (E != null && E != "null" && !F[E]) {
		F[E] = true;
		K++;
	    }
	}
	if (this.prevSelectionObj != null) {
	    for ( var G in this.prevSelectionObj.items) {
		var A = G.split(",");
		var J = A[0];
		var I = A[1];
		if (J != this.parentBone.currentPageX
			|| I != this.parentBone.currentPageY) {
		    var C = this.prevSelectionObj.items[G];
		    for ( var D in C) {
			var E = C[D];
			if (E != null && E != "null" && !F[E]) {
			    F[E] = true;
			    K++;
			}
		    }
		}
	    }
	}
	return K;
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return null;
};
mstrGridSelectionsImpl.prototype.getSelectedElementsOrdinals = function(B) {
    try {
	var J = new Array();
	var D = this.getSelectedGridTarget();
	if (D != null) {
	    var O = D.split(",");
	    var A = this.parentBone.gridStructureInfo.getUnit(O[0], O[1], 1);
	    if (A != null) {
		var N = A.src;
		var L = this.getIndexFromCell(N);
		for ( var H in this.selectedUnits) {
		    if (this.selectedUnits[H] != null) {
			var I = this.selectedUnits[H].levelObjs;
			for ( var G in I) {
			    for ( var K in I[G].selectedItems) {
				var C = I[G].selectedItems[K];
				var F = C.getAttribute("D1");
				if (F && F.length > 0) {
				    var M = F.split("A");
				    if (M && M.length == 3) {
					J.push(parseInt(M[2]));
				    }
				}
				B.push(trim(decode(C.innerHTML, false)));
			    }
			}
		    }
		}
	    }
	}
	return J;
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrGridSelectionsImpl.prototype.containsDerivedElements = function() {
    try {
	var C = this.getSelectedGridTarget();
	if (C != null) {
	    var J = C.split(",");
	    var A = this.parentBone.gridStructureInfo.getUnit(J[0], J[1], 1);
	    if (A != null) {
		for ( var F in this.selectedUnits) {
		    if (this.selectedUnits[F] != null) {
			var G = this.selectedUnits[F].levelObjs;
			for ( var E in G) {
			    for ( var I in G[E].selectedItems) {
				var B = G[E].selectedItems[I];
				var H = B.getAttribute("ide");
				if (H) {
				    return true;
				}
			    }
			}
		    }
		}
	    }
	}
	return false;
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrGridSelectionsImpl.prototype.ondocumentclick = function(L) {
    try {
	var B = "";
	var C = "";
	var E = false;
	var D = false;
	if (!L) {
	    L = window.event;
	}
	getMouse(L);
	var A = getEventTarget(L), G = microstrategy.findAncestorWithAtt(A,
		"tagName", "table");
	var P = false;
	if (this.hasHilitedCells() == false) {
	    if (G == null
		    || (G.getAttribute("id") != "table_" + this.parentBone.id)) {
		this.clearClipboardItems();
	    }
	    return;
	}
	if (mstrGridStatic.isMouseOverScrollBar(A, lMouseX, lMouseY)) {
	    return;
	}
	if (microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION) {
	    P = !!microstrategy.findAncestorWithAtt(A, "id", "rwb_viewer");
	} else {
	    var K = (A.className && A.className == "repLayoutRight");
	    var J = (bIsW3C) ? "class" : "className";
	    var M = microstrategy
		    .findAncestorWithAtt(A, J, "mstrVerticalDocks");
	    var I = microstrategy.findAncestorWithAtt(A,
		    microstrategy.HTMLATTR_OBJTYPE, "if");
	    if (I == null) {
		var F = microstrategy.findAncestorWithAtt(A,
			microstrategy.HTMLATTR_ID, "drillEditor_pane");
		if (F == null) {
		    var O = microstrategy.findAncestorWithAtt(A, J,
			    "report-right");
		    if (O == null) {
			var N = microstrategy.findAncestorWithAtt(A, J,
				"report-left");
			if (N != null) {
			    D = true;
			}
		    } else {
			D = true;
		    }
		} else {
		    D = true;
		}
	    } else {
		D = true;
	    }
	    if (M != null || K) {
		P = true;
	    }
	}
	E = (P && !D && (G == null || (G.getAttribute("id") != "table_"
		+ this.parentBone.id)));
	if (E) {
	    this.clearAll();
	}
    } catch (H) {
	microstrategy.errors.log(H);
    }
};
mstrGridSelectionsImpl.prototype.handleCopySelections = function(L, N, V) {
    if (V.button == 2) {
	return;
    }
    var S = {
	ADD : 0,
	REMOVE : 1,
	RANGE_ADD : 2
    }, Q = this.clipboardUnits || {}, R = this.getCellLevel(L), O = this
	    .findTemplateUnit(L, R), E = this.getCellIndexInTable(L), H = this
	    .findAllAssociatedCells(N, L, R), C = (V.ctrlKey || isMac
	    && V.metaKey), M = V.shiftKey, F = !M, J = S.ADD, X = false, T;
    if (C && !M) {
	J = Q[E] ? S.REMOVE : S.ADD;
    } else {
	if (M) {
	    J = S.RANGE_ADD;
	    X = !C;
	} else {
	    X = true;
	}
    }
    if (X) {
	Q = {};
	this.clearClipboardItems();
    }
    var P = X;
    switch (J) {
    case S.ADD:
	var W = [], D;
	if (R == microstrategy.GRIDCELLTYPE_UNIT_HEADER
		|| R == microstrategy.GRIDCELLTYPE_SUBTOTAL_HEADER) {
	    W = H;
	} else {
	    if (N.axis == microstrategy.GRIDCELL_AXIS_ROWS
		    && N.depth == this.parentBone.gridStructureInfo
			    .getMaxAxisPosition(N.axis) - 1) {
		var U = this.parentBone.elem.getElementsByTagName("table")[0];
		var K = L.parentNode;
		var B = K.nodeName.toLowerCase();
		if ((B != "tr")) {
		    K = microstrategy.findParentWithTag(K, "tr");
		}
		W = (this.parentBone.commands.queryState("checkMergeRowHeader") ? util_getAllCellsInRowFromThisCell(
			L, U)
			: U.rows[K.rowIndex].cells)
			|| [];
		P = false;
	    }
	}
	for (T = 0; T < W.length; T++) {
	    D = W[T];
	    Q[this.getCellIndexInTable(D)] = D;
	}
	Q[E] = L;
	break;
    case S.REMOVE:
	this.clearClipboardItems();
	delete Q[E];
	break;
    case S.RANGE_ADD:
	var Y = L.getAttribute(microstrategy.HTMLATTR_GRIDCELL_ID), A = false, I = -1, G = -1, D;
	for (T = 0; T < H.length; T++) {
	    D = H[T];
	    if (D === L || D === this.lastCopySelection) {
		A = !A;
		if (!A) {
		    Q[this.getCellIndexInTable(D)] = D;
		    break;
		}
	    }
	    if (A) {
		Q[this.getCellIndexInTable(D)] = D;
	    }
	}
	if (A) {
	    Q = {};
	    Q[E] = L;
	    F = true;
	}
	break;
    }
    if (F) {
	this.lastCopySelection = L;
    }
    this.clipboardUnits = Q;
    this.copyToClipboard(false, P);
};
mstrGridSelectionsImpl.prototype.handleSelectAll = function() {
    try {
	microstrategy.showWait();
	var G = {}, H = this, A = this.parentBone, E = A.elem, J = E
		.getElementsByTagName("table")[0], F = J.rows, D, C, I;
	A.commands.exec("tbGridUnitSelector", mstrGridReport.ALL_UNITS);
	A.commands
		.exec("tbGridValueSelector", mstrGridReport.ALL_FORMAT_VALUES);
	addCssClass(E, [ "cbSel" ]);
	window.setTimeout(function() {
	    for (D = 0; D < F.length; D++) {
		I = F[D].cells;
		for (C = 0; C < I.length; C++) {
		    G[H.getCellIndexInTable(I[C])] = I[C];
		}
	    }
	    H.clipboardUnits = G;
	    H.copyToClipboard(true, true);
	}, 0);
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridSelectionsImpl.prototype.getCellIndexInTable = function(N) {
    var A = this.tableLookup;
    if (!A) {
	var E = [], O = this.parentBone.elem.getElementsByTagName("table")[0], H = O.rows, I, P, F, F, D, C, B;
	A = {};
	for (F = 0; F < H.length; F++) {
	    P = H[F].cells;
	    var M = H[F].rowIndex;
	    for (D = 0; D < P.length; D++) {
		var L = P[D], K = L.rowSpan || 1, G = L.colSpan || 1, J;
		I = E[M] = E[M] || [];
		for (C = 0; C < I.length + 1; C++) {
		    if (!I[C]) {
			J = C;
			break;
		    }
		}
		A[this.getIndexFromCell(L)] = J;
		for (C = M; C < M + K; C++) {
		    I = E[C] = E[C] || [];
		    for (B = J; B < J + G; B++) {
			I[B] = [ M, J ];
		    }
		}
	    }
	}
	this.tableLookup = A;
	this.tableReference = E;
    }
    return (N.parentNode.rowIndex + "," + A[this.getIndexFromCell(N)]);
};
mstrGridSelectionsImpl.prototype.findAllAssociatedCells = function(C, A) {
    try {
	if (!C) {
	    return [];
	}
	var B = microstrategy, G = [], I = [], D = this.getCellLevel(A), H = (C.subtype == B.SUBOBJTYPE_METRIC), F;
	if (D == B.GRIDCELLTYPE_UNIT_HEADER) {
	    D = B.GRIDCELLTYPE_UNIT_VALUE;
	} else {
	    if (D == B.GRIDCELLTYPE_SUBTOTAL_HEADER) {
		D = B.GRIDCELLTYPE_SUBTOTAL_VALUE;
	    }
	}
	G = G.concat(this.parentBone.findAllCells(C, D, true));
	if (H) {
	    G = G.concat(this.parentBone.getCellsWithAttr(
		    B.HTMLATTR_GRID_CELL_TYPE, B.GRIDCELLTYPE_SUBTOTAL_VALUE));
	}
	for (F in G) {
	    if (this.isAlignedHeader(G[F], A)) {
		I.push(G[F]);
	    }
	}
	return I;
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrGridSelectionsImpl.prototype.isAlignedHeader = function(C, G) {
    var F = false, E = [ G.rowSpan, G.colSpan ], A = this
	    .getCellIndexInTable(C).split(","), D = this.getCellIndexInTable(G)
	    .split(","), B;
    for (B = 0; B < 2; B++) {
	F = F
		|| ((parseInt(D[B], 10) <= parseInt(A[B], 10)) && ((parseInt(
			D[B], 10) + E[B]) > parseInt(A[B], 10)));
    }
    return F;
};
mstrGridSelectionsImpl.prototype.getHeaderSourceList = function(C) {
    var B = microstrategy, D = [], E = this.getCellLevel(C), G = this
	    .findTemplateUnitObj(C, E);
    if (G) {
	var I = (G.subtype == B.SUBOBJTYPE_METRIC), A = microstrategy.HTMLATTR_DSS_ID, F = G.dssId;
	switch (E) {
	case B.GRIDCELLTYPE_SUBTOTAL_VALUE:
	    D.push(this.parentBone.findAllCells(G,
		    B.GRIDCELLTYPE_SUBTOTAL_HEADER, true)[0]);
	    I = true;
	    A = B.HTMLATTR_SUBOBJTYPE;
	    F = "MV";
	case B.GRIDCELLTYPE_UNIT_VALUE:
	case B.GRIDCELLTYPE_METRIC_DATA:
	    if (I) {
		var H = this.parentBone.getCellsWithAttr(A, F);
		i;
		for (i = 0; i < H.length; i++) {
		    if (this.isAlignedHeader(C, H[i])) {
			D.push(H[i]);
		    }
		}
	    } else {
		D.push(this.findTemplateUnit(C, E));
	    }
	    break;
	default:
	    D.push(C);
	}
    }
    return D;
};
mstrGridSelectionsImpl.prototype.copyToClipboard = function(N, D) {
    var T = [], I = this.clipboardUnits, O, P, A, H = function(a, U, Y) {
	var W, b, X, Z, V;
	X = U.split(",");
	W = X[0];
	b = X[1];
	Y[W] = Y[W] || [];
	Z = (a.innerText || a.textContent || "").replace("\n", "");
	if (!trimString(Z)) {
	    V = a.getElementsByTagName("img");
	    if (V && V[0]) {
		Z = V[0].title;
	    }
	}
	Y[W][b] = Z;
    };
    for (P in I) {
	H(I[P], P, T);
	if (!D) {
	    A = this.getHeaderSourceList(I[P]);
	    for (O = 0; O < A.length; O++) {
		var Q = A[O];
		if (Q) {
		    var E = this.getCellIndexInTable(Q);
		    H(Q, E, T);
		    I[E] = Q;
		}
	    }
	}
    }
    var M = "", G, J = -1, F = true, B = -1;
    for (G in T) {
	B = Math.max(T[G].length, B);
    }
    P = 0;
    while (P < B) {
	for (G in T) {
	    if (T[G][P] != undefined) {
		P++;
		F = false;
		break;
	    }
	}
	if (F) {
	    for (G in T) {
		T[G] = T[G].slice(0, P).concat(T[G].slice(P + 1));
	    }
	    B--;
	} else {
	    F = true;
	}
    }
    for (G in T) {
	if (T[G].length) {
	    M = M + T[G].join("\t") + "\n";
	}
    }
    var R = document.getElementById("mstrWeb_content") || document.body, K = document
	    .getElementById("clipboardTextArea")
	    || R.appendChild(document.createElement("textarea"));
    if (K) {
	K.setAttribute("id", "clipboardTextArea");
	K.value = M;
	var L = K.style;
	L.left = document.documentElement.scrollLeft + "px";
	L.top = document.documentElement.scrollTop + "px";
	window.setTimeout(function() {
	    K.select();
	    K.focus();
	    microstrategy.showWait(false);
	}, 50);
	var C = this;
	K.onkeyup = function S(V) {
	    V = V || window.event;
	    switch (V.keyCode) {
	    case 65:
		if (V.ctrlKey) {
		    var U = C.parentBone;
		    if (!(U.delegateSelectAll && U.delegateSelectAll())) {
			C.handleSelectAll();
		    } else {
			C.clearClipboardItems();
		    }
		}
		break;
	    }
	    return true;
	};
    }
};
mstrGridSelectionsImpl.prototype.clearClipboardItems = function() {
    if (!this.clipboardUnits) {
	return;
    }
    removeCssClass(this.parentBone.elem, [ "cbSel" ]);
    delete this.clipboardUnits;
    var A = document.getElementById("clipboardTextArea");
    if (A) {
	A.value = "";
	A.blur();
    }
};
function mstrGridSelectionsImpl() {
    this.selectedUnits = new Array();
    this.hilitedItems = new Array();
    return this;
}
mstrUnitObjImpl.prototype = new Object();
mstrUnitObjImpl.prototype.levels = null;
mstrUnitObjImpl.prototype.gridTarget = "";
mstrUnitObjImpl.prototype.isMetric = false;
mstrUnitObjImpl.prototype.levelObjs = null;
mstrUnitObjImpl.prototype.removeLevel = function(C) {
    try {
	for ( var A in this.levels) {
	    if (this.levels[A] == C) {
		delete this.levels[A];
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrUnitObjImpl.prototype.hasLevel = function(C) {
    try {
	for ( var A in this.levels) {
	    if (this.levels[A] == C) {
		return true;
	    }
	}
	return false;
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrUnitObjImpl.prototype.countLevel = function() {
    try {
	var C = 0;
	for ( var A in this.levels) {
	    if (this.levels[A] != null && this.levels[A].length > 0) {
		C++;
	    }
	}
	return C;
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrUnitObjImpl.prototype.resolveLevelsValue = function() {
    try {
	if (!this.levels || this.levels.length == 0) {
	    return 0;
	}
	switch (this.levels.length) {
	case 1:
	    return this.levels[0];
	case 4:
	    return 5;
	default:
	    return -1;
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return 2;
    }
};
function mstrUnitObjImpl(A) {
    this.parentBone = A;
    this.levels = new Array;
    this.levelObjs = new Array;
    this.isMetric = false;
    this.gridTarget = "";
    return this;
}
mstrUnitLevelObjImpl.prototype = new Object();
mstrUnitLevelObjImpl.prototype.selectedItems = null;
mstrUnitLevelObjImpl.prototype.selectedItemsLength = 0;
mstrUnitLevelObjImpl.prototype.hilitedItems = null;
mstrUnitLevelObjImpl.prototype.hilitedItemsLength = 0;
mstrUnitLevelObjImpl.prototype.addToSelectedItems = function(B) {
    try {
	var A = this.gridSelections.getIndexFromCell(B);
	this.selectedItems[A] = B;
	this.selectedItemsLength++;
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrUnitLevelObjImpl.prototype.removeSelectedItems = function(B) {
    try {
	var A = this.gridSelections.getIndexFromCell(B);
	delete this.selectedItems[A];
	this.selectedItemsLength--;
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrUnitLevelObjImpl.prototype.clearSelectedItems = function() {
    try {
	this.selectedItems = new Array;
	this.selectedItemsLength = 0;
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrUnitLevelObjImpl.prototype.addToHilitedItems = function(A) {
    try {
	var C = this.gridSelections.getIndexFromCell(A);
	this.hilitedItems[C] = A;
	this.hilitedItemsLength++;
	var G = this.gridSelections.parentBone.elem
		.getElementsByTagName("table");
	if (G != null && G.length && G.length > 1) {
	    var D = A.cellIndex;
	    var E = A.parentNode.rowIndex;
	    for (i = 0, len = G.length; i < len; ++i) {
		var H = G[i];
		if (H && H.rows) {
		    if (E < H.rows.length) {
			var I = H.rows[E];
			if (I && I.cells && (D < I.cells.length)) {
			    var F = I.cells[D];
			    if (F) {
				this.gridSelections.hiliteSelected(F);
			    }
			}
		    }
		}
	    }
	} else {
	    this.gridSelections.hiliteSelected(A);
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrUnitLevelObjImpl.prototype.removeHilitedItems = function(B) {
    try {
	var A = this.gridSelections.getIndexFromCell(B);
	delete this.hilitedItems[A];
	this.hilitedItemsLength--;
	this.gridSelections.removeHilites(B);
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrUnitLevelObjImpl.prototype.clearHilitedItems = function() {
    try {
	var H = this.gridSelections.parentBone.elem
		.getElementsByTagName("table"), D, J;
	if (H != null && H.length && H.length > 1) {
	    for (J = 0, D = H.length; J < D; ++J) {
		var I = H[J], A, E, F, K, G, C;
		if (I && I.rows) {
		    for (C in this.hilitedItems) {
			if (typeof C === "string") {
			    A = C.split(",");
			    F = A[0];
			    if (F < I.rows.length) {
				K = I.rows[F];
				E = A[1];
				if (K && K.cells && (E < K.cells.length)) {
				    G = K.cells[E];
				    if (G) {
					this.gridSelections.removeHilites(G);
				    }
				}
			    }
			}
		    }
		}
	    }
	} else {
	    for (C in this.hilitedItems) {
		this.gridSelections.removeHilites(this.hilitedItems[C]);
	    }
	}
	this.hilitedItems = new Array;
	this.hilitedItemsLength = 0;
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrUnitLevelObjImpl.prototype.hasSelectedCell = function(B) {
    try {
	var A = this.gridSelections.getIndexFromCell(B);
	return (typeof (this.selectedItems[A]) != "undefined" && this.selectedItems[A] != null);
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrUnitLevelObjImpl.prototype.hasSelectedCells = function() {
    try {
	return (this.selectedItems && this.selectedItemsLength > 0);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrUnitLevelObjImpl.prototype.hasHilitedCells = function() {
    try {
	return (this.hilitedItems && this.hilitedItemsLength > 0);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrUnitLevelObjImpl.prototype.hasHilitedCell = function(B) {
    try {
	var A = this.gridSelections.getIndexFromCell(B);
	return (typeof (this.hilitedItems[A]) != "undefined" && this.hilitedItems[A] != null);
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
function mstrUnitLevelObjImpl(A) {
    this.parentBone = A;
    this.gridSelections = this.parentBone.parentBone;
    this.selectedItems = new Array;
    this.hilitedItems = new Array;
    return this;
}
mstrGridStaticScript = true;
var mstrGrid = mstrGridStatic;
mstrGridStatic.prototype = new mstrRWUnitBoneImpl();
mstrGridStatic.prototype.useLockset = false;
mstrGridStatic.prototype.lockSet = null;
mstrGridStatic.prototype.commands = null;
mstrGridStatic.prototype.isGridBone = true;
mstrGridStatic.prototype.isGridPostLoaded = false;
mstrGridStatic.prototype.hasResized = false;
mstrGridStatic.prototype.emptyCase = false;
mstrGridStatic.prototype.lockHeadersInitialized = false;
mstrGridStatic.prototype.titleBarObj = null;
mstrGridStatic.prototype.isTitleVisible = false;
mstrGridStatic.prototype.wait = null;
mstrGridStatic.prototype.isGridStatic = true;
mstrGridStatic.prototype.onload = function() {
    try {
	mstrRWUnitBoneImpl.prototype.onload.call(this);
	if (!this.elem) {
	    return;
	}
	this.wait = document.getElementById(this.id + "_wait");
	this.commands = new mstrGridStaticCommands(this);
	this.observer = microstrategy.observer || new mstrObserverImpl();
	microstrategy.observer = this.observer;
	var A = this.isGridStatic && this.initGrid();
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridStatic.prototype.onpostload = function() {
    try {
	mstrRWUnitBoneImpl.prototype.onpostload.call(this);
	if (this.lockSet) {
	    this.onresize();
	}
	this.isGridPostLoaded = true;
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridStatic.prototype.onresize = function() {
    try {
	this.resizeLockSet();
	if (this.isGridPostLoaded) {
	    this.hasResized = true;
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridStatic.prototype.initGrid = function() {
    try {
	if (microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION) {
	    var C = microstrategy.findAncestor(this.elem.parentNode);
	    if (C != null && microstrategy.styleObj) {
		this.gridPosition = parseInt(microstrategy.styleObj
			.getAttValue(C, microstrategy.HTMLATTR_GRID_POS));
		this.gridArea = parseInt(microstrategy.styleObj.getAttValue(C,
			microstrategy.HTMLATTR_GRID_AREA_PCT)) / 100;
	    }
	}
	this.emptyCase = (this.elem.getAttribute("ept") == "-1");
	if (this.isGridBone && !this.emptyCase) {
	    var B = this;
	    window.setTimeout(function() {
		B.initLockHeaders();
		B.resizeLockSet();
	    }, 100);
	    if (bIsIE6) {
		this.forcerepaint(document.getElementById("ReportFrame"));
	    }
	}
	this.hasResized = false;
	if (bIsIE7) {
	    window.setTimeout("microstrategy.bone('" + this.id
		    + "'). forcerepaint();", 0);
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridStatic.prototype.initLockHeaders = function() {
    try {
	if (!this.useLockset) {
	    return;
	}
	var C = this.id;
	var B = document.getElementById(C);
	var D = document.getElementById(C + "divLock4");
	if (B && D) {
	    D.style.overflow = "visible";
	    this.lockSet = new mstrLockSet(B, D, this);
	    if (!this.lockSet.initialized) {
		return;
	    }
	    this.lockSet.addScrollEventHandler();
	    D.style.overflow = "auto";
	}
	this.LockHeadersInitialized = true;
	window
		.setTimeout("microstrategy.repaintContent('" + this.id + "');",
			0);
	window.setTimeout("microstrategy.bone('" + this.id + "'). hideWait();",
		0);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridStatic.prototype.hideWait = function() {
    if (this.wait) {
	this.wait.style.display = "none";
    }
};
mstrGridStatic.prototype.showWait = function() {
    if (this.wait) {
	this.wait.style.display = "block";
    }
};
mstrGridStatic.prototype.forcerepaint = function(B) {
    try {
	var A = document.createElement("img");
	B = B || this.elem;
	B.appendChild(A);
	A.parentNode.removeChild(A);
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridStatic.prototype.resizeLockSet = function(C) {
    try {
	if (!this.lockSet) {
	    return;
	}
	if (microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION) {
	    var E = microstrategy.findAncestor(this.elem.parentNode), B = mstr.utils.BoxModel;
	    if (E) {
		var J = B.getElementInnerWidth(E)
			+ ((mstr.utils.ISIE8 || mstr.utils.ISIE9 || mstr.utils.ISIE10) ? 2
				: 0), G = B.getElementInnerHeight(E)
			+ (mstr.utils.ISIE ? 1 : 0);
		if (J <= 0 && G <= 0) {
		    return;
		}
		J = Math.max(J, mstrLockSet.MINIMUM_GRID_WIDTH);
		G = Math.max(G, mstrLockSet.MINIMUM_GRID_HEIGHT);
		if (this.isGrid && this.isGraph) {
		    if (this.gridPosition < 2) {
			G = Math.round(G * this.gridArea);
		    } else {
			J = Math.round(J * this.gridArea);
		    }
		}
		var H = (this.isGridStatic) ? 0 : this.getTitleHeight(), D = Math
			.max((G - H - (this.incfetchvisible ? 26 : 0)), 0);
		var A = parseInt(microstrategy.styleObj.getAttValue(E,
			microstrategy.HTMLATTR_HEIGHT_MODE));
		if (A === microstrategy.AUTO_MODE) {
		    var I = document.getElementById(this.id + "divLock4");
		    if (I) {
			D += Math.max(I.scrollHeight - I.clientHeight, 0);
			window.setTimeout(function() {
			    I.style.height = "auto";
			}, 0);
		    }
		}
		this.lockSet.resize(C, J, D);
	    } else {
		this.lockSet.resize(C, mstrLockSet.MINIMUM_GRID_WIDTH,
			mstrLockSet.MINIMUM_GRID_HEIGHT);
	    }
	} else {
	    this.lockSet.resize(C);
	}
    } catch (F) {
	microstrategy.errors.log(F);
    }
};
mstrGridStatic.prototype.getFixedRows = function() {
    try {
	return this.getFixedHeaders(0);
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return 0;
};
mstrGridStatic.prototype.getFixedColumns = function() {
    try {
	return this.getFixedHeaders(1);
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return 0;
};
mstrGridStatic.prototype.getFixedHeaders = function(A) {
    try {
	var C = 0;
	var J = document.getElementById(this.id + "divLock4");
	if (!J) {
	    return C;
	}
	var F, B;
	var K = J.getElementsByTagName("tbody")[0].rows;
	if (A == 0) {
	    for (F = 0, B = K.length; F < B; F++) {
		var H = K[F];
		if (H.getAttribute("o")) {
		    break;
		}
		C++;
	    }
	} else {
	    var I = K[0].cells;
	    for (F = 0, B = I.length; F < B; F++) {
		var D = I[F];
		if (D.getAttribute("upt") || D.getAttribute("i")) {
		    break;
		}
		var G = parseInt(D.getAttribute("colSpan"));
		C += G || 1;
	    }
	}
	return C;
    } catch (E) {
	microstrategy.errors.log(E);
	return 0;
    }
};
mstrGridStatic.prototype.onstatechange = function() {
    if (this.observer) {
	this.observer.notifyAll("onstatechange");
    }
};
mstrGridStatic.isGraphCommand = function(A) {
    switch (A) {
    case "majorPicker":
    case "minorPicker":
    case "major":
    case "minor":
    case "legend":
    case "dValues":
    case "seriesByColumn":
    case "seriesByRow":
    case "maxCategories":
    case "maxSeries":
    case "CategoriesSeries":
    case "FormatGraphUniversal":
    case "fmtSubTargets":
    case "numSubTargets":
    case "gfeField":
    case "majorType":
    case "minorType":
    case "curvedLines":
    case "mainCat":
    case "subCat":
    case "seriesLayout":
    case "seriesLabels":
    case "antiAliasing":
    case "roundedEffect":
    case "lockFontSize":
    case "showSubtotals":
    case "fontName":
    case "fontSize":
    case "textBoldItalic":
    case "textBold":
    case "textItalic":
    case "textUnderline":
    case "textStrikeout":
    case "fontColor":
    case "fillColor":
    case "lineColor":
    case "bevelType":
    case "areaAlpha":
    case "show":
    case "dataTextShow":
    case "titlePosition":
    case "titleContent":
    case "titleOriContent":
    case "tooltipsShow":
    case "tooltipsEditor":
    case "tooltipsEditor_ie":
    case "tooltipsEditor_ie_ScatterBubble":
    case "gridIntervalX":
    case "gridIntervalY1":
    case "gridIntervalY2":
    case "gridIntervalZ":
    case "maxScaleX":
    case "minScaleX":
    case "maxScaleY1":
    case "minScaleY1":
    case "maxScaleY2":
    case "minScaleY2":
    case "maxScaleZ":
    case "minScaleZ":
    case "maxScaleCKX":
    case "minScaleCKX":
    case "maxScaleCKY1":
    case "minScaleCKY1":
    case "maxScaleCKY2":
    case "minScaleCKY2":
    case "maxScaleCKZ":
    case "minScaleCKZ":
    case "gridIntervalCKX":
    case "gridIntervalCKY1":
    case "gridIntervalCKY2":
    case "gridIntervalCKZ":
    case "dualAxisAuto":
    case "dualOptionItems":
    case "gfnCat":
    case "gfnTime":
    case "gfnFraction":
    case "gfnDate":
    case "gfnDecimalPlaces":
    case "gfnCurrencySymbol":
    case "gfnCurrencyPosition":
    case "gfnNegativeNumbers":
    case "gfnThousandSeparator":
    case "gfnFormat":
    case "gaugeStyle":
    case "gaugeNeedleStyle":
    case "gaugeBorderStyle":
    case "gaugeBorderThick":
    case "gaugeRangeThick":
    case "gaugeStartAngle":
    case "gaugeStopAngle":
    case "ResetGFEStatus":
    case "openGraphFormatter":
    case "getDefaultVal":
    case "tbGraphValueSelector":
    case "isGraphPropertiesReady":
    case "gaugeQBShow":
    case "seriesLineColor":
    case "seriesLineStyle":
    case "seriesLineThickness":
    case "lineAlpha":
    case "seriesLineAlpha":
    case "seriesLineAlphaText":
    case "markerShow":
    case "markerShape":
    case "markerBevelType":
    case "markerSize":
    case "markerColor":
    case "markerAlphaText":
    case "markerBorderColor":
    case "markerBorderStyle":
    case "markerBorderThickness":
    case "markerBorderAlpha":
    case "markerBorderAlphaText":
    case "maxBarSizeType":
    case "maxBarSizeValue":
    case "textFormatField_visible":
    case "seriesLineFormatField_visible":
    case "seriesAreaFormatField_visible":
    case "markerFormatField_visible":
    case "increfillColor":
    case "decreFillColor":
    case "increDecreColorField":
    case "isIncreDecreItem":
	return true;
    default:
	return false;
    }
};
mstrGridStatic.isGridGraphCommand = function(A) {
    switch (A) {
    case "font":
    case "FontFamily":
    case "fsize":
    case "FontSize":
    case "color":
    case "FontColor":
    case "fstyle":
    case "Bold":
    case "Italic":
    case "Underline":
    case "FillColor":
    case "bgcolor":
    case "lncolor":
    case "TextAlign":
    case "number":
    case "align":
    case "Currency":
    case "deltaDecimal":
    case "IncreaseDecimal":
    case "DecreaseDecimal":
    case "IntlCurrency":
    case "Percent":
    case "Comma":
    case "borders":
    case "lnstyle":
    case "FillColor_vf":
    case "lncolor_vf":
	return true;
    default:
	return false;
    }
};
mstrGridStatic.isMouseOverScrollBar = function(F, L, K) {
    try {
	var J = document.documentElement, A = J.scrollLeft, G = J.scrollTop;
	var E = false;
	if (!mstr.utils.ISW3C && F.componentFromPoint) {
	    return F.componentFromPoint(L - A, K - G).indexOf("scroll") > -1;
	} else {
	    if ((getObjOuterWidth(F) - getObjInnerWidth(F) > (SCROLLBAR_SIZE - 2))
		    || (getObjOuterHeight(F) - getObjInnerHeight(F) > (SCROLLBAR_SIZE - 2))) {
		var B = 0, C = 0;
		if (microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION) {
		    var I = microstrategy.getViewerBone().elem;
		    B = I.scrollTop;
		    C = I.scrollLeft;
		} else {
		    var H = document.getElementById("mstrWebContents"), C = H
			    && H.scrollLeft || 0;
		    B = H && H.scrollTop || 0;
		}
		if ((L > getObjSumLeft(F) + getObjInnerWidth(F) - C)
			|| (K > getObjSumTop(F) + getObjInnerHeight(F) - B)) {
		    return true;
		}
	    }
	}
	return false;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrGridStatic.prototype.getSelectionData = function(B) {
    var C = this.selectionData;
    if (!C || !C.attl) {
	return;
    }
    if (B) {
	return C.attl[B];
    }
    for ( var A in C.attl) {
	return C.attl[A];
    }
};
mstrGridStatic.prototype.getAllSelectionData = function() {
    return this.selectionData;
};
mstrGridStatic.prototype.saveCustomProps = function(E) {
    var D = new Array();
    var B = microstrategy.updateManager;
    if (microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION) {
	var C = window.parent.mstrUpdateManager;
	var A = this.objId + C.UNIT_SEPARATOR + "Visualization"
		+ C.UNIT_SEPARATOR + "CustomProps" + C.UNIT_SEPARATOR + E;
	D.push(B.createActionObject(null, C.EDIT_PROPS, microstrategy
		.bone("rwb_viewer").beanPath, [ "2048018", "2048035" ], [
		"false", A ], []));
    } else {
	this.setReportProp("Visualization", "CustomProps", E, D);
    }
    B.add(D);
};
mstrGridStatic.prototype.getCustomProperties = function() {
    return this.customProps;
};
mstrGridStatic.prototype.getVisProperties = function() {
    return this.visProps;
};
function mstrGridStatic(A) {
    this.inherits = mstrRWUnitBoneImpl;
    this.inherits(A);
    delete this.inherits;
    this.primaryBone = true;
    return this;
}
mstrGridStaticCommands.prototype = {};
mstrGridStaticCommands.prototype.exec = function(P, J, H, F, E) {
    var L = microstrategy.updateManager;
    switch (P) {
    case "addToHistoryList":
	this.sendUMAction(L, L.createActionObject(null,
		mstrUpdateManager.ADD_HISTORY_LIST, this.parentBone.beanPath,
		[], [], []));
	break;
    case "openReportFrameElement":
	this.sendUMAction(L, L.createActionObject(this.elem,
		mstrUpdateManager.OPEN_FRAME_ELEMENT, this.parentBone.beanPath,
		[ "6034" ], [ J ], []));
	break;
    case "allObjects":
	microstrategy
		.toggleAccordion(microstrategy.ACCORDION_REPORT_ALL_OBJECT_PANEL);
	return true;
    case "objBrowser":
	microstrategy
		.toggleAccordion(microstrategy.ACCORDION_REPORT_RP_OBJECT_PANEL);
	return true;
    case "relatedReportsPanel":
	microstrategy
		.toggleAccordion(microstrategy.ACCORDION_REPORT_RELATED_RP_PANEL);
	return true;
    case "notesPanel":
	microstrategy
		.toggleAccordion(microstrategy.ACCORDION_REPORT_NOTES_PANEL);
	return true;
    case "reportDetails":
	microstrategy.toggleEditor("reportDetails_ReportDetailsPanelStyle",
		"reportDetails");
	return true;
    case "new":
	this.sendUMAction(L, L.createActionObject(this.elem,
		mstrUpdateManager.REPORT_NEW, microstrategy.servletName, [],
		[], []), true);
	break;
    case "ncSendNow":
    case "subs":
    case "mobileSubs":
    case "ncSubs":
    case "ncFileSubs":
    case "ncCacheSubs":
    case "ncFtpSubs":
    case "ncPrintSubs":
	toggleShowBean(P, true);
	break;
    case "reset":
	this.sendUMAction(L, L.createActionObject(this.elem,
		mstrUpdateManager.REPORT_EVENT_RESET, this.parentBone.beanPath,
		[], [], []));
	break;
    case "rerun":
	this.exec("refresh", false, true);
	break;
    case "refresh":
	J = J || false;
	H = H || false;
	this.sendUMAction(L, L.createActionObject(this.elem,
		mstrUpdateManager.REPORT_EVENT_REFRESH,
		this.parentBone.beanPath, [ "4136", "4145" ], [ J, H ], []), J);
	break;
    case "reprompt":
	this.exec("refresh", true, false);
	break;
    case "reportDetailsPage":
	var L = microstrategy.updateManager, C = this.parentBone.stateID, O = this.parentBone.messageID;
	O = O != undefined ? O
		: microstrategy.bones.ReportFrame.reportProps.messageID;
	C = C != undefined ? C
		: microstrategy.bones.ReportFrame.reportProps.stateID;
	this.sendUMAction(L, L.createActionObject(this.elem,
		mstrUpdateManager.REPORT_DETAILS_PAGE,
		microstrategy.servletName, [ "3015", "3010", "3016" ], [ C, O,
			"0" ], []), true);
	break;
    case "createPersonalView":
	toggleShowBean("pvsubs", true);
	break;
    case "ShowSharingEditor":
	var N = this.parentBone, G = N.isReportBlank, B = N.stateID, K = "sharingEditor", M = window.mstrmojo
		&& mstrmojo.all[K], A = !(M && M.lastState === B), D = -1, I = false;
	if (N.isGrid && N.isGraph) {
	    D = microstrategy.DISPLAY_MODE_GRID_AND_GRAPH;
	} else {
	    if (N.isGrid) {
		D = microstrategy.DISPLAY_MODE_GRID;
	    } else {
		if (N.isGraph) {
		    D = microstrategy.DISPLAY_MODE_GRAPH;
		}
	    }
	}
	I = !(M && D === M.viewMode);
	A = A || I;
	if (G) {
	    showMessage({
		contents : microstrategy.descriptors.getDescriptor("14120"),
		elements : microstrategy.OK_BUTTON
			+ microstrategy.CANCEL_BUTTON,
		okEval : "mstr.$obj('" + this.parentBone.id
			+ "').commands.exec('dmSaveAs', {origin:"
			+ microstrategy.SAVE_AS_SHARE_EDITOR + "});",
		buttonLabels : {
		    Ok : microstrategy.descriptors.getDescriptor("118")
		},
		type : mstrMsgBoxImpl.MSG_WARNING
	    });
	} else {
	    microstrategy.showSharingEditor(null, {
		viewMode : D,
		lastState : B
	    }, A);
	}
	break;
    default:
	microstrategy.errors.log("cmdId: " + P + " "
		+ microstrategy.descriptors.getDescriptor("2950"));
    }
};
mstrGridStaticCommands.prototype.sendUMAction = function(A, C, B) {
    A.add([ C ]);
    A.useIframe = !B;
    A.flushAndSubmitChanges();
};
mstrGridStaticCommands.prototype.queryEnabled = function(A) {
    try {
	switch (A) {
	case "relatedReportsPanel":
	case "notesPanel":
	case "new":
	case "reportDetails":
	case "refresh":
	case "reprompt":
	case "reset":
	case "reportDetailsPage":
	case "ShowSharingEditor":
	case "openHome":
	    return true;
	case "rerun":
	    return this.parentBone
		    .isFeatureAvailable(microstrategy.FEATURE_ENABLE_REEXECUTE);
	case "addToHistoryList":
	    return mstr.behaviors.featureResolver
		    .featAvailable("enable-add-history-list");
	case "createPersonalView":
	case "subs":
	    return this.parentBone
		    .isFeatureAvailable(microstrategy.FEATURE_ENABLE_SCHEDULING);
	case "subscribeToMenu":
	    var B = mstr.behaviors.featureResolver;
	    return B.featAvailable("nc-enabled")
		    && (B.featAvailable("scheduling") || (B
			    .featAvailable("is-viewable-report") && (B
			    .featAvailable("use-mobile")
			    || B.featAvailable("scheduled-email")
			    || B.featAvailable("scheduled-file-export-menu") || B
			    .featAvailable("scheduled-print-menu"))));
	default:
	    return false;
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrGridStaticCommands.prototype.queryState = function(A, D) {
    try {
	switch (A) {
	case "visualizationMode":
	case "XTabView":
	    if (this.parentBone.isVisualization) {
		return this.parentBone.visualizationMode;
	    }
	case "XTabViewDHTML":
	    var B = microstrategy.DISPLAY_MODE_GRID;
	    if (this.parentBone.effectiveView) {
		B = this.parentBone.effectiveView;
	    } else {
		if (this.parentBone.isGrid && this.parentBone.isGraph) {
		    B = microstrategy.DISPLAY_MODE_GRID_AND_GRAPH;
		} else {
		    if (this.parentBone.isGraph) {
			B = microstrategy.DISPLAY_MODE_GRAPH;
		    }
		}
	    }
	    return B;
	case "fixedRows":
	    return this.parentBone.getFixedRows();
	case "fixedColumns":
	    return this.parentBone.getFixedColumns();
	case "reportDetails":
	    return !!microstrategy
		    .bone("reportDetails_ReportDetailsPanelStyle");
	case "notesPanel":
	    bone = microstrategy.bone("accordion_AccordionTabManagerStyle");
	    return (bone && bone.currentTabName == microstrategy.ACCORDION_REPORT_NOTES_PANEL);
	case "relatedReportsPanel":
	    bone = microstrategy.bone("accordion_AccordionTabManagerStyle");
	    return (bone && bone.currentTabName == microstrategy.ACCORDION_REPORT_RELATED_RP_PANEL);
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return "";
};
mstrGridStaticCommands.prototype.queryVisible = function(A) {
    switch (A) {
    case "tbLoading":
	return false;
    case "forwardPicker":
    case "backPicker":
    case "openPage":
	return microstrategy.pageScreenMode == microstrategy.PAGE_FULL_SCREEN_MODE;
    case "subscribeToMenu":
	return this.queryEnabled(A);
    default:
	return true;
    }
};
function mstrGridStaticCommands(A) {
    this.parentBone = A;
    return this;
}
microstrategy.HTMLATTR_MAPS = "MAPS";
microstrategy.HTMLATTR_MAPS_DELIM = ",";
mstrMaskMappedImpl.prototype = new mstrMaskImpl();
mstrMaskMappedImpl.prototype.maps = null;
mstrMaskMappedImpl.prototype.mask = null;
mstrMaskMappedImpl.prototype.hiLite = null;
mstrMaskMappedImpl.prototype.surroundHilite = null;
mstrMaskMappedImpl.MASK_TYPE = -1;
mstrMaskMappedImpl.prototype.onload = function(E) {
    try {
	this.maskedBone = E;
	this.initElem();
	var H = document.createElement("span");
	H.className = "mstrMaskedHilite";
	H.style.visibility = "hidden";
	this.hiLite = H;
	this.elem.appendChild(this.hiLite);
	if (this.maskedBone && this.maskedBone.maskFor) {
	    var J = this.maskedBone.maskFor;
	    this.maskfor = microstrategy.HTMLATTR_MASKFOR_DELIM + J
		    + microstrategy.HTMLATTR_MASKFOR_DELIM;
	    var G = J.split(microstrategy.HTMLATTR_MASKFOR_DELIM);
	    this.maps = new Object();
	    var F = document.getElementById("useMap");
	    for ( var C = 0; C < G.length; C++) {
		var I = this.maskedBone.id + "_map" + G[C]
			+ (this.midx ? this.midx : "");
		var A = F.cloneNode(false);
		A.name = I;
		A.setAttribute("id", I);
		A.setAttribute(microstrategy.HTMLATTR_MASKEDOBJECT,
			this.maskedBone.id);
		A.setAttribute(microstrategy.HTMLATTR_OBJTYPE,
			microstrategy.OBJTYPE_MASK_MAP);
		A.setAttribute(microstrategy.HTMLATTR_MASKFOR, G[C]);
		this.maps[G[C]] = A;
		var D = document.getElementById(I);
		if (D) {
		    document.body.removeChild(D);
		}
		document.body.appendChild(this.maps[G[C]]);
	    }
	    this.maskedBone.maskFor = mstrMaskMappedImpl.MASK_TYPE;
	    this.mask = new mstrMaskImpl();
	    this.mask.onload(this.maskedBone);
	    this.maskedBone.maskFor = J;
	    this.onmaskedobjectresize(true);
	}
	this.isLoaded = true;
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrMaskMappedImpl.prototype.onmaskedobjectresize = function(D) {
    try {
	if (this.maskedBone) {
	    if (D != true) {
		var C = this.maskedBone.gridStructureInfo;
		if (C && C.colAxis && C.colAxis.units && C.colAxis.units[0]) {
		    C.colAxis.units[0].needBuildColMetricAreas = true;
		}
	    }
	    var B = this;
	    window.setTimeout(function() {
		B.resizeMask();
	    }, 0);
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrMaskMappedImpl.prototype.sizeMask = function(B, A) {
    try {
	if (!this.img) {
	    return;
	}
	this.img.style.height = B + "px";
	this.img.style.width = A + "px";
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrMaskMappedImpl.prototype.resizeMask = function() {
    try {
	if (this.maskedBone == null) {
	    return;
	}
	var G;
	var I = {
	    height : getObjHeight(this.maskedBone.maskArea),
	    width : this.maskedBone.maskArea.scrollWidth,
	    top : getObjSumTop(this.maskedBone.maskArea),
	    left : getObjSumLeft(this.maskedBone.maskArea)
	};
	this.sizeMask(I.height, I.width);
	this.mask.onmaskedobjectresize(I.height, I.width);
	this.updateMaskDimensions && this.updateMaskDimensions(I);
	for ( var D in this.maps) {
	    var C = this.maps[D];
	    for (G = C.childNodes.length - 1; G >= 0; G--) {
		C.removeChild(C.childNodes[G]);
	    }
	    var A = this.maskedBone.mapper.getAreas(this.maskedBone, C, I);
	    if (A) {
		for (G = 0; G < A.length; G++) {
		    var H = A[G];
		    var E = document.createElement("area");
		    E.setAttribute(microstrategy.HTMLATTR_OBJTYPE,
			    microstrategy.OBJTYPE_MASK_MAP_AREA);
		    E.shape = (H.shape) ? H.shape : "rect";
		    E.coords = (H.coords) ? H.coords : "0,0,0,0";
		    if (H.pointsTo) {
			E.setAttribute(microstrategy.HTMLATTR_POINTS_TO,
				H.pointsTo);
		    }
		    if (H.onmouseovercoords) {
			if (H.moveHilite) {
			    E.onmouseover = new Function("microstrategy.bone('"
				    + this.maskedBone.id
				    + "').mask.moveHilite('"
				    + H.onmouseovercoords + "');");
			    var B = new Function(
				    "microstrategy.bone('"
					    + this.maskedBone.id
					    + "').mask.hiLite && (microstrategy.bone('"
					    + this.maskedBone.id
					    + "').mask.hiLite.style.visibility = 'hidden');");
			    if (mstrGridReport && mstrGridReport.isRWD()
				    && mstr.utils.ISIE7) {
				E.attachEvent("onmouseout", B);
			    } else {
				E.onmouseout = B;
			    }
			} else {
			    arnea.onmouseover = new Function(
				    "microstrategy.bone('" + this.maskedBone.id
					    + "').mask.moveSurroundHilite('"
					    + H.onmouseovercoords + "');");
			    E.onmouseout = new Function(
				    "microstrategy.bone('"
					    + this.maskedBone.id
					    + "').mask.surroundHilite.style.visibility = 'hidden';");
			}
		    }
		    C.appendChild(E);
		}
	    }
	}
    } catch (F) {
	microstrategy.errors.log(F);
    }
};
mstrMaskMappedImpl.prototype.toggle = function(A, B) {
    try {
	if (!A || B == mstrMaskMappedImpl.MASK_TYPE) {
	    this.mask.toggle(A, B);
	}
	if (A && this.maps[B]) {
	    this.img.useMap = "#" + this.maskedBone.id + "_map" + B
		    + (this.midx ? this.midx : "");
	    this.elem.style.display = "block";
	} else {
	    this.elem.style.display = "none";
	    this.hiLite.style.visibility = "hidden";
	    if (this.surroundHilite) {
		this.surroundHilite.style.visibility = "hidden";
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrMaskMappedImpl.prototype.moveHilite = function(s) {
    try {
	if (!this.hiLite) {
	    return;
	}
	var a = s.split(",");
	with (this.hiLite.style) {
	    if (visibility == "hidden") {
		left = a[0] + "px";
		top = a[1] + "px";
		height = a[2] + "px";
		width = a[3] + "px";
		visibility = "visible";
	    }
	}
    } catch (err) {
	microstrategy.errors.log(err);
    }
};
mstrMaskMappedImpl.prototype.moveSurroundHilite = function(s) {
    try {
	if (!this.surroundHilite) {
	    var span = document.createElement("span");
	    span.className = "mstrMaskedSurroundHilite";
	    this.surroundHilite = span;
	    this.elem.appendChild(this.surroundHilite);
	}
	var a = s.split(",");
	with (this.surroundHilite.style) {
	    if (visibility == "hidden") {
		left = a[0] + "px";
		top = a[1] + "px";
		height = a[2] + "px";
		width = a[3] + "px";
		visibility = "visible";
	    }
	}
    } catch (err) {
	microstrategy.errors.log(err);
    }
};
function mstrMaskMappedImpl(A) {
    this.updateMaskDimensions = A;
    return this;
}
mstrTabStripMask.prototype = new mstrMaskMappedImpl();
mstrTabStripMask.prototype.sizeMask = function(B, A) {
    try {
	this.maskedBone.shiftMaskArea();
	mstrMaskMappedImpl.prototype.sizeMask.call(this, B, A);
	this.maskedBone.restoreMaskArea();
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
function mstrTabStripMask() {
    return this;
}
mstrFormatImplScript = true;
mstrFormatImpl.prototype = new mstrEditorImpl();
mstrFormatImpl.prototype.childrenTabs = new Array();
mstrFormatImpl.prototype.changesApplied = 0;
mstrFormatImpl.prototype.currentTab = 1;
mstrFormatImpl.prototype.actionId = microstrategy.OPEN_EDITOR_ACTION_EDIT;
mstrFormatImpl.prototype.selectedTabOptions = "";
mstrFormatImpl.prototype.autoSubmitJS = null;
mstrFormatImpl.prototype.sharedObj = null;
mstrFormatImpl.prototype.useDynamicTitle = false;
mstrFormatImpl.prototype.titleContainer = null;
mstrFormatImpl.prototype.targetAxis = null;
mstrFormatImpl.prototype.targetLevel = null;
mstrFormatImpl.prototype.targetUnit = null;
mstrFormatImpl.prototype.targetPosition = null;
mstrFormatImpl.prototype.submitUponTargetLevelChange = true;
mstrFormatImpl.prototype.axisOptionId = null;
mstrFormatImpl.prototype.levelOptionId = null;
mstrFormatImpl.prototype.targetOptions = null;
mstrFormatImpl.prototype.levelOptions = null;
mstrFormatImpl.prototype.commands = null;
mstrFormatImpl.prototype.helpButton = null;
mstrFormatImpl.prototype.defaultHelpURL = null;
mstrFormatImpl.panelStackOptionsMapDescriptors = [ [ "4579", "3297" ],
	[ "512" ] ];
mstrFormatImpl.gridContainerOptionsMapDescriptors = [ [ "4579", "3297" ],
	[ "512" ] ];
mstrFormatImpl.panelStackOptionsMap = [ [ {
    name : "",
    value : 0
}, {
    name : "",
    value : 1
} ], [ {
    name : "",
    value : 2
} ] ];
mstrFormatImpl.gridContainerOptionsMap = [ [ {
    name : "",
    value : 8
}, {
    name : "",
    value : 9
} ], [ {
    name : "",
    value : 8
} ] ];
mstrFormatImpl.prototype.onload = function() {
    try {
	if (typeof microstrategy.log != "undefined"
		&& microstrategy.log.shouldLog(mstrLogImpl.ACTION_LEVEL
			| mstrLogImpl.METHOD_LEVEL)) {
	    microstrategy.log.start("mstrFormatImpl.onload",
		    mstrLogImpl.LOAD_TABS);
	}
	mstrFormatImpl.initOptionsMap();
	this.initFormatManager();
	this.tabContainer = microstrategy.subObjectFind(this.body, [ "DIV" ],
		microstrategy.SUBOBJTYPE_TAB_CONTAINER);
	this.commands = new mstrFormatImplCommandsImpl(this);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    } finally {
	if (typeof microstrategy.log != "undefined"
		&& microstrategy.log.shouldLog(mstrLogImpl.ACTION_LEVEL
			| mstrLogImpl.METHOD_LEVEL)) {
	    microstrategy.log.stop("mstrFormatImpl.onload",
		    mstrLogImpl.LOAD_TABS);
	}
    }
};
mstrFormatImpl.initOptionsMap = function() {
    try {
	if (mstrFormatImpl.panelStackOptionsMap[0][0].name != "") {
	    return;
	} else {
	    for ( var B = 0; B < mstrFormatImpl.panelStackOptionsMap.length; B++) {
		for ( var A = 0; A < mstrFormatImpl.panelStackOptionsMap[B].length; A++) {
		    mstrFormatImpl.panelStackOptionsMap[B][A].name = microstrategy.descriptors
			    .getDescriptor(mstrFormatImpl.panelStackOptionsMapDescriptors[B][A]);
		}
	    }
	    for ( var B = 0; B < mstrFormatImpl.gridContainerOptionsMap.length; B++) {
		for ( var A = 0; A < mstrFormatImpl.gridContainerOptionsMap[B].length; A++) {
		    mstrFormatImpl.gridContainerOptionsMap[B][A].name = microstrategy.descriptors
			    .getDescriptor(mstrFormatImpl.gridContainerOptionsMapDescriptors[B][A]);
		}
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrFormatImpl.prototype.onreload = function() {
    try {
	mstrEditorImpl.prototype.onreload.call(this);
	var F = microstrategy.findChildrenWithAtt(this.elem, "span", "ty",
		"tab");
	if (!F) {
	    return false;
	}
	for ( var C = 0; C < F.length; C++) {
	    if (F[C].getAttribute("curTab") == this.currentTab) {
		var E;
		var B = F[C].getAttribute("tab");
		if (B) {
		    E = getElementById(B);
		}
		if (E) {
		    this.updateDynamicInfo(F[C]);
		    this.showTabSection(E);
		    if (!microstrategy.bone(B)) {
			var A = E.getAttribute("scriptClass");
			if (A) {
			    loadInit(A + "Script",
				    'microstrategy.registerBone("' + B
					    + '", "(true)", null);');
			    this
				    .setTimeout('microstrategy.bone("' + B
					    + '")', 'microstrategy.bone("'
					    + this.id + '").loadChildrenTab("'
					    + B + '")', 500);
			}
		    }
		}
	    }
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrFormatImpl.prototype.onpostload = function() {
    try {
	mstrEditorImpl.prototype.onpostload.call(this);
	this.initChildrenTabs();
	this.initSelections();
	this.restorePreviousSelections();
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    } finally {
	if (typeof microstrategy.log != "undefined"
		&& microstrategy.log.shouldLog(mstrLogImpl.ACTION_LEVEL
			| mstrLogImpl.METHOD_LEVEL)) {
	    microstrategy.log.stop("mstrFormatImpl.onload",
		    mstrLogImpl.LOAD_TABS);
	}
    }
};
mstrFormatImpl.prototype.onunload = function(C) {
    try {
	mstrEditorImpl.prototype.onunload.call(this, C);
	this.unRegisterChildren();
	var B = this.getAppliesTo();
	if (B != null && B.observer) {
	    B.observer.unregister(this.id);
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return true;
};
mstrFormatImpl.prototype.restorePreviousSelections = function() {
    try {
	if (this.selectedTabOptions != null
		&& this.selectedTabOptions.length > 0) {
	    eval("this.selectedTabOptions = " + this.selectedTabOptions);
	    for ( var id in this.selectedTabOptions) {
		var tab = microstrategy.bone(id);
		if (tab != null) {
		    var settings = this.selectedTabOptions[id];
		    tab.restorePreviousSelections(settings);
		}
	    }
	    this.selectedTabOptions = null;
	}
    } catch (err) {
	microstrategy.errors.log(err);
	return false;
    }
};
mstrFormatImpl.prototype.initFormatManager = function() {
    try {
	this.initEditor();
	this.changesApplied = 0;
	if (this.elem) {
	    var A = this.elem.getAttribute("at");
	    if (A && A.length > 0) {
		this.setAppliesTo(A);
	    }
	}
	if (this.axisOptionId && this.levelOptionId) {
	    this.targetOptions = microstrategy.findChildWithAtt(this.elem,
		    "SELECT", "id", this.axisOptionId);
	    this.levelOptions = microstrategy.findChildWithAtt(this.elem,
		    "SELECT", "id", this.levelOptionId);
	}
	this.adjustTargetLevelOptions();
	this.initHelpButton();
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrFormatImpl.prototype.initHelpButton = function() {
    try {
	var B = microstrategy.findChildWithAtt(this.elem, "img",
		(bIsW3C) ? "class" : "className",
		"mstrIcon-btn mstrIcon-btnHelp");
	if (B) {
	    this.help = B.parentNode;
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrFormatImpl.prototype.isPanelStackSelected = function() {
    try {
	var A = this.getAppliesTo();
	return (A && A.commands.queryEnabled("onepanelstack") == true);
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrFormatImpl.prototype.areAllSelectedPanelStacks = function() {
    try {
	var A = this.getAppliesTo();
	return (A && A.commands.queryEnabled("allpanelstack") == true && A.commands
		.queryEnabled("onepanelstack") == false);
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrFormatImpl.prototype.isGridSelected = function() {
    try {
	var A = this.getAppliesTo();
	return (A && A.commands.queryEnabled("onegrid") == true);
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrFormatImpl.prototype.isGridContainerSelected = function() {
    try {
	var A = this.getAppliesTo();
	return (this.isGridSelected() && this.targetAxis == 0 && (this.targetLevel == 8 || this.targetLevel == 9));
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrFormatImpl.prototype.adjustTargetLevelOptions = function() {
    try {
	var D;
	var J;
	var H;
	if (this.levelOptions) {
	    D = this.levelOptions.options;
	    J = D.length;
	    if (this.isGridContainerSelected()) {
		if (D) {
		    H = D[this.levelOptions.selectedIndex].value;
		    for ( var G = 0; G < J; G++) {
			this.levelOptions.removeChild(D[0]);
		    }
		}
		var C = microstrategy.findBone(this.getAppliesTo().commands
			.queryState("selectedGrid"));
		if (!C.showTitleBar()) {
		    this.targetLevel = 8;
		    B = 1;
		    this.levelOptions.disabled = true;
		} else {
		    B = 0;
		    this.levelOptions.disabled = false;
		}
		for ( var F = 0; F < mstrFormatImpl.gridContainerOptionsMap[B].length; F++) {
		    var I = document.createElement("OPTION");
		    this.levelOptions.options.add(I);
		    I.text = mstrFormatImpl.gridContainerOptionsMap[B][F].name;
		    I.value = mstrFormatImpl.gridContainerOptionsMap[B][F].value;
		    I.selected = (F == 0 || I.value == H);
		}
	    }
	    if (this.isPanelStackSelected()) {
		if (D) {
		    H = D[this.levelOptions.selectedIndex].value;
		    for ( var G = 0; G < J; G++) {
			this.levelOptions.removeChild(D[0]);
		    }
		}
		var B = 0;
		if (this.targetAxis == 0) {
		    var A = microstrategy.findBone(this.getAppliesTo().commands
			    .queryState("selectedPanelStack"));
		    if (!A.isTitleVisible) {
			this.targetLevel = 0;
			B = 1;
			this.levelOptions.disabled = true;
		    } else {
			B = 0;
			this.levelOptions.disabled = false;
		    }
		} else {
		    if (this.targetAxis == 1) {
			this.targetLevel = 2;
			B = 1;
			this.levelOptions.disabled = true;
		    }
		}
		for ( var F = 0; F < mstrFormatImpl.panelStackOptionsMap[B].length; F++) {
		    var I = document.createElement("OPTION");
		    this.levelOptions.options.add(I);
		    I.text = mstrFormatImpl.panelStackOptionsMap[B][F].name;
		    I.value = mstrFormatImpl.panelStackOptionsMap[B][F].value;
		    I.selected = (F == 0 || I.value == H);
		}
	    }
	}
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrFormatImpl.prototype.enableChildrenTabs = function() {
    try {
	var G = microstrategy.objectListFind(this.body, [ "span" ],
		microstrategy.OBJTYPE_TAB);
	var B = this.getAppliesTo();
	var I = false;
	var A = null;
	if (G && G.length) {
	    for ( var E = 0; E < G.length; E++) {
		var H = false;
		var C = G[E].getAttribute(microstrategy.HTMLATTR_CMD_ID);
		if (C && C.length > 0) {
		    if (!B.commands.queryEnabled(C)
			    || !this.commands.queryEnabled(C)) {
			H = true;
		    }
		}
		if (A == null && !H) {
		    A = E;
		}
		if ((this.currentTab - 1) == E && H) {
		    I = true;
		}
		if (H) {
		    G[E].className = "mstrTabSetTabdisabled";
		    microstrategy.unRegisterBone(G[E].id);
		    var F = G[E].getAttribute("tab");
		    if (F) {
			F = getElementById(F);
		    }
		    if (F) {
			F.style.display = "none";
			F.style.visibility = "hidden";
		    }
		} else {
		    if (!this.submitUponTargetLevelChange) {
			if (G[E].className
				&& G[E].className.indexOf("disabled") >= 0) {
			    G[E].className = G[E].className.replace("disabled",
				    " ");
			}
		    }
		}
	    }
	}
	if (I) {
	    this.setCurrentTab(G[A]);
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrFormatImpl.prototype.initChildrenTabs = function() {
    try {
	this.childrenTabs = new Array();
	this.enableChildrenTabs();
	if (this.tabContainer) {
	    var C = microstrategy.subObjectListFind(this.tabContainer,
		    [ "DIV" ], microstrategy.SUBOBJTYPE_TAB_SECTION);
	    if (C && C.length) {
		for ( var B = 0; B < C.length; B++) {
		    var A = microstrategy.bone(C[B].id);
		    var E = microstrategy.findChildWithAtt(this.body, "SPAN",
			    "id", C[B].id + "_tab");
		    if ((E && (E.className.indexOf("disabled") == -1))
			    || C.length == 1) {
			if (!A) {
			    if (C[B].getAttribute("scriptClass")) {
				loadInit(C[B].getAttribute("scriptClass")
					+ "Script",
					'microstrategy.registerBone("'
						+ C[B].id
						+ '", "(true)", null);');
				this.setTimeout('microstrategy.bone("'
					+ C[B].id + '")',
					'microstrategy.bone("' + this.id
						+ '").loadChildrenTab("'
						+ C[B].id + '")', 500);
			    }
			} else {
			    A.dialogDiv = this.elem;
			    A.tabManager = this;
			    this.childrenTabs[this.childrenTabs.length] = A;
			    if (A.initValues) {
				A.initValues();
			    }
			}
		    }
		    this.setScheduleTab(A);
		    this.setDeliveryTab(A);
		}
	    }
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrFormatImpl.prototype.loadChildrenTab = function(A) {
    try {
	var C = microstrategy.bone(A);
	if (C) {
	    C.tabManager = this;
	    C.setAppliesTo(this.getAppliesTo());
	    if (A in this) {
		for ( var B in this[A]) {
		    C[B] = this[A][B];
		}
	    }
	    if (C.onload) {
		C.onload();
	    }
	    C.dialogDiv = this.elem;
	    if (C.initSharedObj) {
		C.initSharedObj(this.sharedObj);
	    }
	    this.childrenTabs[this.childrenTabs.length] = C;
	    if (C.onpostload) {
		C.onpostload();
	    }
	    this.setScheduleTab(C);
	    this.setDeliveryTab(C);
	    this.resizePopUp(this.elem);
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrFormatImpl.prototype.setScheduleTab = function(A) {
    try {
	if (A && A.scheduleType != undefined) {
	    A.initScheduleInfo();
	    this.scheduleTab = A;
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrFormatImpl.prototype.setDeliveryTab = function(A) {
    try {
	if (A && A.userType != undefined) {
	    this.deliveryTab = A;
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrFormatImpl.prototype.unRegisterChildren = function() {
    try {
	if (this.tabContainer) {
	    if (this.childrenTabs && this.childrenTabs.length) {
		var C = this.getAppliesTo();
		for ( var A = 0; A < this.childrenTabs.length; A++) {
		    if (C && C.observer) {
			C.observer.unregister(this.childrenTabs[A].id);
		    }
		    microstrategy.unRegisterBone(this.childrenTabs[A].id);
		}
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrFormatImpl.prototype.initSelections = function() {
    try {
	if (this.titleBar) {
	    var A = this.getAppliesTo();
	    if (A == null) {
		return;
	    }
	    var F = this.titleBar.getElementsByTagName("span");
	    var E = this.titleBar;
	    if (F.length > 0) {
		E = F[0];
	    }
	    var D = E.innerHTML;
	    var B = D.indexOf(":");
	    if (B < 0) {
		B = D.indexOf("\uFF1A");
	    }
	    if (B == D.length - 1) {
		D = D.substr(0, B + 1);
		if (A.commands
			&& A.commands.queryEnabled("isUserMetricSelected")) {
		    D = D + " "
			    + microstrategy.descriptors.getDescriptor("3865");
		} else {
		    if (A.commands
			    && A.commands
				    .queryEnabled("isSummaryMetricSelected")) {
			D = D
				+ " "
				+ microstrategy.descriptors
					.getDescriptor("3866");
		    } else {
			if (A.commands && !A.commands.queryEnabled()
				&& !A.commands.queryEnabled("onegrid")) {
			    D = D
				    + " "
				    + microstrategy.descriptors
					    .getDescriptor("3520");
			} else {
			    if (A.commands) {
				D = D + " " + A.commands.queryState("selected");
			    }
			}
		    }
		}
	    }
	    E.innerHTML = D;
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrFormatImpl.prototype.setAppliesTo = function(B) {
    try {
	if (!this.appliesTo) {
	    this.appliesTo = (typeof (B) == "string") ? B : B.id;
	}
	B = microstrategy.bone(this.appliesTo);
	if (B && B.observer) {
	    B.observer.register(this.id);
	}
	return true;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrFormatImpl.prototype.getAppliesTo = function(B) {
    try {
	if (this.appliesTo) {
	    var B = microstrategy.bone(this.appliesTo);
	    return B;
	}
	return null;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrFormatImpl.prototype.cancelChanges = function() {
    try {
	var A = this.getAppliesTo();
	var C = A.updateManager || A.um;
	if (A && C) {
	    while (this.changesApplied > 0) {
		C.undo();
		this.changesApplied--;
	    }
	}
	this.changesApplied = 0;
	for ( var B = 0; B < this.childrenTabs.length; B++) {
	    this.childrenTabs[B].cleanup();
	}
	this.actionId = null;
	this.closeEditor();
	return true;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrFormatImpl.prototype.applyGraphFormatChanges = function(C) {
    try {
	var A = this.getAppliesTo();
	if (!this.validateInputs()) {
	    return false;
	}
	if (C == null) {
	    C = new Array();
	}
	var B;
	if (C.length == 0) {
	    for (B = 0; B < this.childrenTabs.length; B++) {
		var E = this.childrenTabs[B];
		C = E.applyFormatChanges(A, C);
	    }
	}
	if (C.length > 0) {
	    A.commands.exec("formatGraphBulk", C);
	}
	return true;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrFormatImpl.prototype.applyFormatChanges = function(E) {
    try {
	if (typeof microstrategy.log != "undefined"
		&& microstrategy.log.shouldLog(mstrLogImpl.ACTION_LEVEL
			| mstrLogImpl.METHOD_LEVEL)) {
	    microstrategy.log.start("mstrFormatImpl.applyFormatChanges",
		    mstrLogImpl.APPLY_EDITOR_CHANGES);
	}
	var C = this.getAppliesTo();
	var I = C.updateManager || C.um;
	if (E == null) {
	    E = new Array();
	}
	var A;
	if (!this.validateInputs()) {
	    return false;
	}
	this.changeGridProperties = (C && C.commands.queryEnabled("onegrid") == true) ? true
		: false;
	var L = this.isGridContainerSelected();
	var B = false;
	var H = null;
	if (this.isPanelStackSelected()) {
	    if (this.targetAxis == 0 && this.targetLevel == 1) {
		microstrategy.formatType = mstrPanelStack.FMT_TYPE_TITLE;
	    }
	}
	if (this.changeGridProperties && L && this.targetLevel == 9) {
	    microstrategy.formatType = mstrGridReport.FMT_TYPE_TITLE;
	}
	if (E.length == 0) {
	    for (A = 0; A < this.childrenTabs.length; A++) {
		var G = this.childrenTabs[A];
		if (this.changeGridProperties && !L) {
		    G.enforceSubmit = true;
		}
		G.applyFormatChanges(C, E);
		B = B || G.enforceSubmit;
		if (typeof (G.isUserMetric) != "undefined" && G.isUserMetric) {
		    this.formatUserMetric = true;
		    H = G;
		}
	    }
	    this.getExtraFormatChanges(C, E);
	}
	if (E.length > 0) {
	    if (this.formatUserMetric) {
		var K = new Object();
		K.userMetricId = H.userMetricId;
		K.dataSetId = H.dataSetId;
		K.bulkChanges = E;
		C.commands.exec("formatUserMetric", K);
	    } else {
		if (this.changeGridProperties == true
			&& this.targetAxis != null) {
		    var J = C.commands.queryState("selectedGrid");
		    var F = microstrategy.findBone(J);
		    if (F == null) {
			F = microstrategy.findBone(document
				.getElementById(J.id));
		    }
		    if (F) {
			F.selectedAxis = this.targetAxis;
			F.selectedPosition = this.targetPosition;
			F.selectedLevel = this.targetLevel;
			F.selectedUnit = this.targetUnit;
		    }
		    if (L) {
			C.commands.exec("formatBulk", E);
			if (B
				&& microstrategy.DISPLAY_MODE != microstrategy.DESIGN_MODE
				&& I) {
			    I.flushAndSubmitChanges();
			}
		    } else {
			C.commands.exec("formatGridBulk", E);
		    }
		} else {
		    C.commands.exec("formatBulk", E, this
			    .isPanelStackSelected()
			    && this.targetAxis == 1);
		    if (B
			    && microstrategy.DISPLAY_MODE != microstrategy.DESIGN_MODE
			    && I) {
			I.flushAndSubmitChanges();
		    }
		}
	    }
	    this.changesApplied++;
	}
	microstrategy.formatType = microstrategy.FORMAT_TYPE_MAIN;
	return true;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    } finally {
	if (typeof microstrategy.log != "undefined"
		&& microstrategy.log.shouldLog(mstrLogImpl.ACTION_LEVEL
			| mstrLogImpl.METHOD_LEVEL)) {
	    microstrategy.log.stop("mstrFormatImpl.applyFormatChanges",
		    mstrLogImpl.APPLY_EDITOR_CHANGES);
	}
    }
};
mstrFormatImpl.prototype.getExtraFormatChanges = function(A, B) {
    try {
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return B;
};
mstrFormatImpl.prototype.applyMultiLevelFormatChanges = function() {
    try {
	if (typeof microstrategy.log != "undefined"
		&& microstrategy.log.shouldLog(mstrLogImpl.ACTION_LEVEL
			| mstrLogImpl.METHOD_LEVEL)) {
	    microstrategy.log.start(
		    "mstrFormatImpl.applyMultiLevelFormatChanges",
		    mstrLogImpl.APPLY_EDITOR_CHANGES);
	}
	var B = this.getAppliesTo();
	if (!B) {
	    return;
	}
	if (!this.validateInputs()) {
	    return false;
	}
	var D = microstrategy.updateManager;
	var C = new Array();
	var A = false;
	D.queueActions = true;
	for ( var E = 0; E < this.childrenTabs.length; E++) {
	    var G = this.childrenTabs[E];
	    C = G.applyFormatChanges(B, C);
	    A = A || G.enforceSubmit;
	}
	if (C.length == 0) {
	    D.queueActions = false;
	    return;
	}
	B.commands.exec("formatMultiLevelBulk", C);
	D.addCachedActions();
	if (A) {
	    D.flushAndSubmitChanges();
	}
	this.changesApplied++;
	return true;
    } catch (F) {
	microstrategy.errors.log(F);
	return false;
    } finally {
	if (typeof microstrategy.log != "undefined"
		&& microstrategy.log.shouldLog(mstrLogImpl.ACTION_LEVEL
			| mstrLogImpl.METHOD_LEVEL)) {
	    microstrategy.log.stop(
		    "mstrFormatImpl.applyMultiLevelFormatChanges",
		    mstrLogImpl.APPLY_EDITOR_CHANGES);
	}
    }
};
mstrFormatImpl.prototype.applyScheduleChanges = function(G) {
    try {
	var B = this.scheduleTab;
	if (B) {
	    var A = this.getAppliesTo();
	    var D = B.getScheduleType();
	    var E = B.getScheduleList();
	    if (D != B.scheduleType || E != B.scheduleList) {
		var C = A.updateManager || A.um;
		C.add([ C.createActionObject(A.elem,
			mstrUpdateManager.SAVE_REPORT_ASSOCIATED_SCHEDULES,
			A.beanPath, [ "4238", "4239" ], [ D, E ], [
				B.scheduleType, B.schedule ]) ]);
		if (G) {
		    C && C.flushAndSubmitChanges();
		}
	    }
	    return true;
	}
    } catch (F) {
	microstrategy.errors.log(F);
	return false;
    }
};
mstrFormatImpl.prototype.applyUserChanges = function(H) {
    try {
	var C = this.deliveryTab;
	if (C) {
	    var B = this.getAppliesTo(), D = C.getAssociatedUserInfo(), F = D.userType, A = D.users;
	    if (F != C.userTypeWas || A != C.usersWas) {
		var E = B.updateManager || B.um;
		E.add([ E.createActionObject(B.elem,
			mstrUpdateManager.SAVE_REPORT_ASSOCIATED_USERS,
			B.beanPath, [ "4241", "4242" ], [ D.allowType, A ]) ]);
		if (H) {
		    E && E.flushAndSubmitChanges();
		}
		C.userTypeWas = F;
		C.usersWas = A;
	    }
	    return true;
	}
    } catch (G) {
	microstrategy.errors.log(G);
	return false;
    }
};
mstrFormatImpl.prototype.applyPropertyChanges = function(G, F) {
    try {
	if (typeof microstrategy.log != "undefined"
		&& microstrategy.log.shouldLog(mstrLogImpl.ACTION_LEVEL
			| mstrLogImpl.METHOD_LEVEL)) {
	    microstrategy.log.start("mstrFormatImpl.applyPropertyChanges",
		    mstrLogImpl.APPLY_EDITOR_CHANGES);
	}
	if (F == false || this.validateInputs(true)) {
	    var A = this.getAppliesTo();
	    var D = new Array();
	    for ( var B = 0; B < this.childrenTabs.length; B++) {
		var E = this.childrenTabs[B];
		E.applyPropertyChanges(D);
		if (E.applySharedObjChanges) {
		    E.applySharedObjChanges(D);
		}
	    }
	    this.applyScheduleChanges(D.length == 0);
	    this.applyUserChanges(D.length == 0);
	    if (D.length > 0) {
		if (G && G.length > 0) {
		    A.commands.exec(G, D);
		} else {
		    A.commands.exec("PropertyChanges", D);
		}
	    }
	    this.changesApplied++;
	    return true;
	} else {
	    return false;
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    } finally {
	if (typeof microstrategy.log != "undefined"
		&& microstrategy.log.shouldLog(mstrLogImpl.ACTION_LEVEL
			| mstrLogImpl.METHOD_LEVEL)) {
	    microstrategy.log.stop("mstrFormatImpl.applyPropertyChanges",
		    mstrLogImpl.APPLY_EDITOR_CHANGES);
	}
    }
};
mstrFormatImpl.prototype.applyMultiLevelPropertyChanges = function(H) {
    try {
	if (typeof microstrategy.log != "undefined"
		&& microstrategy.log.shouldLog(mstrLogImpl.ACTION_LEVEL
			| mstrLogImpl.METHOD_LEVEL)) {
	    microstrategy.log.start("mstrFormatImpl.applyPropertyChanges",
		    mstrLogImpl.APPLY_EDITOR_CHANGES);
	}
	var B = this.getAppliesTo();
	if (!B) {
	    return;
	}
	if (H && !this.validateInputs()) {
	    return false;
	}
	var D = microstrategy.updateManager;
	var C = new Array();
	var A = false;
	D.queueActions = true;
	for ( var E = 0; E < this.childrenTabs.length; E++) {
	    var G = this.childrenTabs[E];
	    G.applyPropertyChanges(C);
	    A = A || G.enforceSubmit;
	}
	if (C.length == 0) {
	    D.queueActions = false;
	    return;
	}
	B.commands.exec("MultiLevelPropertyChanges", C);
	D.addCachedActions();
	if (A) {
	    D.flushAndSubmitChanges();
	}
	this.changesApplied++;
	return true;
    } catch (F) {
	microstrategy.errors.log(F);
	return false;
    } finally {
	if (typeof microstrategy.log != "undefined"
		&& microstrategy.log.shouldLog(mstrLogImpl.ACTION_LEVEL
			| mstrLogImpl.METHOD_LEVEL)) {
	    microstrategy.log.stop(
		    "mstrFormatImpl.applyMultiLevelPropertyChanges",
		    mstrLogImpl.APPLY_EDITOR_CHANGES);
	}
    }
};
mstrFormatImpl.prototype.okPropertyChanges = function(E, D) {
    try {
	var B = true;
	B = this.validateInputs(true);
	if (B) {
	    this.close();
	    if (D) {
		this.applyMultiLevelPropertyChanges(false);
	    } else {
		this.applyPropertyChanges(E, false);
	    }
	    for ( var A = 0; A < this.childrenTabs.length; A++) {
		this.childrenTabs[A].cleanup();
	    }
	    this.actionId = null;
	    microstrategy.unRegisterBone(this.id);
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrFormatImpl.prototype.okFormatChanges = function(B) {
    try {
	B = (B == true);
	if (!this.validateInputs()) {
	    return false;
	} else {
	    this.close();
	    if (B) {
		this.applyMultiLevelFormatChanges();
	    } else {
		this.applyFormatChanges();
	    }
	    microstrategy.unRegisterBone(this.id);
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrFormatImpl.prototype.okGraphFormatChanges = function() {
    try {
	if (!this.validateInputs()) {
	    return false;
	} else {
	    this.close();
	    this.applyGraphFormatChanges();
	    microstrategy.unRegisterBone(this.id);
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrFormatImpl.prototype.adjustFormatType = function() {
    try {
	if (this.changeGridProperties && this.targetAxis == 0
		&& this.targetLevel == 9) {
	    microstrategy.formatType = mstrGridReport.FMT_TYPE_TITLE;
	}
	if (this.isPanelStackSelected()) {
	    if (this.targetAxis == 0 && this.targetLevel == 1) {
		microstrategy.formatType = mstrPanelStack.FMT_TYPE_TITLE;
	    }
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrFormatImpl.getHTMLElement = function(A) {
    if (typeof (A) == "string") {
	A = getElementById(A);
    }
    return A;
};
mstrFormatImpl.prototype.hasChanges = function() {
    var A = false;
    var B;
    for (B = 0; B < this.childrenTabs.length; B++) {
	var C = this.childrenTabs[B];
	A = C.checkForFormatChanges();
	if (A) {
	    break;
	}
    }
    return A;
};
mstrFormatImpl.prototype.changeTarget = function(F, H) {
    try {
	var A = this.getAppliesTo();
	var C = new Array();
	F = mstrFormatImpl.getHTMLElement(F);
	var G = A.updateManager || A.um;
	var D = this.hasChanges();
	if ((typeof (H) == "undefined") && D) {
	    showMessage({
		contents : microstrategy.descriptors.getDescriptor("3044"),
		elements : microstrategy.OK_BUTTON
			+ microstrategy.CANCEL_BUTTON,
		okEval : "microstrategy.bone('" + this.id + "').changeTarget('"
			+ F.id + "',true);",
		cancelEval : "microstrategy.bone('" + this.id
			+ "').changeTarget('" + F.id + "',false);",
		type : mstrMsgBoxImpl.MSG_WARNING
	    });
	} else {
	    var I = new Array();
	    for (counter = 0; counter < this.childrenTabs.length; counter++) {
		var E = this.childrenTabs[counter];
		E.applyFormatChanges(A, C);
	    }
	    if ((typeof (H) == "boolean") && H && (C.length > 0)) {
		if (this.applyFormatPropertyChanges) {
		    this.applyFormatPropertyChanges(C);
		} else {
		    this.applyFormatChanges(C);
		}
		this.targetAxis = F.value;
		I.push(G.createActionObject(F,
			mstrUpdateManager.CHANGE_FORMATTING_TARGET,
			this.beanPath, [ "72003" ], [ F.value ]));
		G.add(I);
		if (this.submitUponTargetLevelChange) {
		    this.unRegisterChildren();
		}
	    } else {
		this.targetAxis = F.value;
		if (A && G) {
		    I.push(G.createActionObject(F,
			    mstrUpdateManager.CHANGE_FORMATTING_TARGET,
			    this.beanPath, [ "72003" ], [ F.value ]));
		    G.add(I);
		    if (this.submitUponTargetLevelChange) {
			G.flushAndSubmitChanges();
			this.unRegisterChildren();
		    }
		}
	    }
	}
	if (!this.submitUponTargetLevelChange) {
	    this.adjustTargetLevelOptions();
	    this.initChildrenTabs();
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrFormatImpl.prototype.changePosition = function(F, H) {
    try {
	var A = this.getAppliesTo();
	var C = new Array();
	F = mstrFormatImpl.getHTMLElement(F);
	var G = A.updateManager || A.um;
	var D = this.hasChanges();
	if ((typeof (H) == "undefined") && D) {
	    showMessage({
		contents : microstrategy.descriptors.getDescriptor("3044"),
		elements : microstrategy.OK_BUTTON
			+ microstrategy.CANCEL_BUTTON,
		okEval : "microstrategy.bone('" + this.id
			+ "').changePosition('" + F.id + "',true);",
		cancelEval : "microstrategy.bone('" + this.id
			+ "').changePosition('" + F.id + "',false);",
		type : mstrMsgBoxImpl.MSG_WARNING
	    });
	} else {
	    var I = new Array();
	    for (counter = 0; counter < this.childrenTabs.length; counter++) {
		var E = this.childrenTabs[counter];
		C = E.applyFormatChanges(A, C);
	    }
	    if ((typeof (H) == "boolean") && H && (C.length > 0)) {
		if (F.value == "0,-9") {
		    I.push(G.createActionObject(F,
			    mstrUpdateManager.CHANGE_FORMATTING_TARGET,
			    this.beanPath, [ "72003", "72002" ], [ 0, 8 ]));
		} else {
		    I.push(G.createActionObject(F,
			    mstrUpdateManager.CHANGE_FORMATTING_TARGET,
			    this.beanPath, [ "72001" ], [ F.value ]));
		}
		G.add(I);
		this.applyFormatChanges(C);
		G.flushAndSubmitChanges();
		this.unRegisterChildren();
	    } else {
		if (A && G) {
		    if (F.value == "0,-9") {
			I.push(G.createActionObject(F,
				mstrUpdateManager.CHANGE_FORMATTING_TARGET,
				this.beanPath, [ "72003", "72002" ], [ 0, 8 ]));
		    } else {
			I.push(G.createActionObject(F,
				mstrUpdateManager.CHANGE_FORMATTING_TARGET,
				this.beanPath, [ "72001" ], [ F.value ]));
		    }
		    G.add(I);
		    G.flushAndSubmitChanges();
		    this.unRegisterChildren();
		}
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrFormatImpl.prototype.changeLevel = function(G, F) {
    try {
	var B = this.getAppliesTo();
	G = mstrFormatImpl.getHTMLElement(G);
	var D = B.updateManager || B.um;
	var A = this.hasChanges();
	if (typeof (F) == "undefined" && A) {
	    showMessage({
		contents : microstrategy.descriptors.getDescriptor("3044"),
		elements : microstrategy.OK_BUTTON
			+ microstrategy.CANCEL_BUTTON,
		okEval : "microstrategy.bone('" + this.id + "').changeLevel('"
			+ G.id + "',true);",
		cancelEval : "microstrategy.bone('" + this.id
			+ "').changeLevel('" + G.id + "',false);",
		type : mstrMsgBoxImpl.MSG_WARNING
	    });
	    return;
	}
	if (F == true && A) {
	    this.applyFormatChanges();
	}
	this.targetLevel = G.value;
	if (B && D) {
	    if (this.submitUponTargetLevelChange == true || F == true) {
		var C = new Array();
		C.push(D.createActionObject(G,
			mstrUpdateManager.CHANGE_FORMATTING_TARGET,
			this.beanPath, [ "72002" ], [ G.value ]));
		D.add(C);
	    }
	    if (this.submitUponTargetLevelChange) {
		D.flushAndSubmitChanges();
		this.unRegisterChildren();
	    } else {
		this.initChildrenTabs();
	    }
	}
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrFormatImpl.prototype.setCurTab = function(D) {
    try {
	var B = microstrategy.findChildrenWithAtt(this.elem, "span", "ty",
		"tab");
	for ( var A = 0; A < B.length; A++) {
	    if (B[A].getAttribute("curTab") == D) {
		this.setCurrentTab(B[A]);
		break;
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrFormatImpl.prototype.setCurrentTab = function(G) {
    try {
	if (!G) {
	    return false;
	}
	if (this.currentTab == G.getAttribute("curTab")) {
	    return false;
	}
	if ((G.className.indexOf("disabled") >= 0) || (!this.validateInputs())) {
	    return true;
	}
	var C = microstrategy.findChildrenWithAtt(this.elem, "span", "ty",
		"tab");
	var E = true;
	var H = null;
	for ( var B = 0; B < C.length; B++) {
	    var F = C[B].getAttribute("tab");
	    if (F) {
		F = getElementById(F);
	    }
	    if (C[B] == G) {
		C[B].className = "mstrTabSetTabSelected";
		this.currentTab = G.getAttribute("curTab");
		if (F
			&& G.getAttribute(microstrategy.TAB_SWITCH_MODE) == microstrategy.TAB_SWITCH_MODE_CACHED) {
		    this.updateDynamicInfo(G);
		    this.showTabSection(F);
		    H = microstrategy.findBone(F);
		    E = false;
		    for ( var A = 0; A < this.childrenTabs.length; A++) {
			if (this.childrenTabs[A]
				&& this.childrenTabs[A].id == G.id.substring(0,
					G.id.indexOf("_tab"))
				&& this.childrenTabs[A].onpostswitch) {
			    this.childrenTabs[A].onpostswitch();
			    break;
			}
		    }
		}
	    } else {
		if (C[B].className.indexOf("disabled") == -1) {
		    C[B].className = "mstrTabSetTab";
		    this.hideTabSection(F);
		}
	    }
	}
	this.addSetTabEvent(E);
	if (E) {
	    microstrategy.updateManager.flushAndSubmitChanges();
	} else {
	    if (this.adjustTabTable) {
		this.adjustTabTable();
		if (H) {
		    if (H.resize) {
			H.resize();
		    }
		    if (H.onSwitchToCurrent) {
			H.onSwitchToCurrent();
		    }
		}
	    }
	}
	this.resizePopUp(this.elem);
	microstrategy.eventManager.notifyOrphanBones("onstatechange");
	return true;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrFormatImpl.prototype.findTabSectionContainer = function(B) {
    try {
	return B;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrFormatImpl.prototype.showTabSection = function(C) {
    try {
	if (!C) {
	    return;
	}
	var A = this.findTabSectionContainer(C);
	A.style.display = "block";
	A.style.visibility = "visible";
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrFormatImpl.prototype.hideTabSection = function(C) {
    try {
	if (!C) {
	    return;
	}
	var A = this.findTabSectionContainer(C);
	A.style.display = "none";
	A.style.visibility = "hidden";
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrFormatImpl.prototype.updateDynamicInfo = function(B) {
    try {
	this.updateDynamicTitle(B);
	this.updateDynamicHelp(B);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrFormatImpl.prototype.updateDynamicTitle = function(C) {
    try {
	var A = this.getTitleContainer();
	if (this.useDynamicTitle && A) {
	    if (A.childNodes[0]) {
		A.childNodes[0].nodeValue = (C.childNodes[0].childNodes[0]) ? C.childNodes[0].childNodes[0].nodeValue
			: C.childNodes[0].nodeValue;
		A.setAttribute("title", A.childNodes[0].nodeValue);
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrFormatImpl.prototype.updateDynamicHelp = function(C) {
    if (this.help) {
	this.help.setAttribute("href", (C.getAttribute("helpUrl")) ? C
		.getAttribute("helpUrl") : this.defaultHelpURL);
	if (this.help.childNodes[0] && this.getTitleContainer()) {
	    var B = microstrategy.descriptors.getDescriptor("2409").replace(
		    "###", this.titleContainer.childNodes[0].nodeValue);
	    this.help.childNodes[0].setAttribute("title", B);
	}
    }
    try {
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrFormatImpl.prototype.addSetTabEvent = function(C) {
    try {
	var B = microstrategy.updateManager;
	if (B) {
	    var A = new Array();
	    A.push(B.createActionObject(null,
		    mstrUpdateManager.SET_CURRENT_TAB, this.beanPath, [
			    "49001", "49002" ], [ this.currentTab, C ]));
	    B.add(A, true);
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrFormatImpl.prototype.getChangedTabOptions = function() {
    try {
	var B = "";
	for ( var A = 0; A < this.childrenTabs.length; A++) {
	    var D = this.childrenTabs[A];
	    var E = D.getChanges();
	    if (E != null && E.length > 0) {
		B += '"' + D.id + '":{' + E + "},";
	    }
	}
	if (B.length > 0) {
	    B = B.substring(0, B.length - 1);
	}
	B = "{" + B + "}";
	return B;
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrFormatImpl.prototype.validateInputs = function(C) {
    try {
	if (!mstrEditorImpl.prototype.validateInputs.call(this)) {
	    return false;
	}
	if (C) {
	    for ( var A = 0; A < this.childrenTabs.length; A++) {
		var D = this.childrenTabs[A];
		if (!D.validateInputs()) {
		    return false;
		}
	    }
	}
	return true;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrFormatImpl.prototype.onmenusubmitform = function() {
    if (this.autoSubmitJS != null) {
	return eval(this.autoSubmitJS);
    }
};
mstrFormatImpl.prototype.applySortChanges = function() {
    try {
	var B = new Array();
	for ( var A = 0; A < this.childrenTabs.length; A++) {
	    var E = this.childrenTabs[A];
	    E.getSortChanges(B);
	}
	var C = microstrategy.updateManager;
	if (B.length > 0 && C) {
	    C.add(B, true);
	    C.flushAndSubmitChanges();
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrFormatImpl.prototype.okSortChanges = function() {
    try {
	this.close();
	this.applySortChanges();
	microstrategy.unRegisterBone(this.id);
	return true;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrFormatImpl.prototype.afterresize = function() {
    try {
	if (mstrEditorImpl.prototype.afterresize) {
	    mstrEditorImpl.prototype.afterresize.call(this);
	}
	for ( var A = 0; A < this.childrenTabs.length; A++) {
	    if (this.childrenTabs[A] && this.childrenTabs[A].afterresize) {
		this.childrenTabs[A].afterresize();
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrFormatImpl.prototype.getTitleContainer = function() {
    try {
	if (!this.titleContainer) {
	    this.titleContainer = microstrategy.findChildWithAtt(this.elem,
		    "span", ((bIsW3C) ? "class" : "className"),
		    "mstrPanelTitle");
	}
	return this.titleContainer;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
function mstrFormatImpl(A) {
    this.inherits = mstrEditorImpl;
    this.inherits(A);
    this.inherits = null;
    return this;
}
mstrFormatImplCommandsImpl.prototype = new Object();
mstrFormatImplCommandsImpl.prototype.queryEnabled = function(A) {
    try {
	switch (A) {
	case "fontprops":
	    if (this.parentBone.areAllSelectedPanelStacks()) {
		return false;
	    }
	    if (this.parentBone.isPanelStackSelected()) {
		if (this.parentBone.targetAxis == 1) {
		    return false;
		}
		if (this.parentBone.targetLevel != 1) {
		    return false;
		}
	    } else {
		if (this.parentBone.isGridSelected()) {
		    if ((this.parentBone.targetPosition == -9 && this.parentBone.targetLevel == 8)
			    || (this.parentBone.targetPosition == -99)) {
			return false;
		    }
		}
	    }
	    break;
	case "numberprops":
	    if (this.parentBone.areAllSelectedPanelStacks()) {
		return false;
	    }
	    if (this.parentBone.isPanelStackSelected()) {
		return false;
	    }
	    if (this.parentBone.isGridSelected()) {
		if (this.parentBone.isGridContainerSelected()
			|| (this.parentBone.targetPosition == -99)) {
		    return false;
		}
	    }
	    break;
	case "alignprops":
	    if (this.parentBone.areAllSelectedPanelStacks()) {
		return false;
	    }
	    if (this.parentBone.isPanelStackSelected()) {
		return false;
	    }
	    if (this.parentBone.isGridSelected()) {
		if (this.parentBone.isGridContainerSelected()
			|| (this.parentBone.targetPosition == -99)) {
		    return false;
		}
	    }
	    break;
	case "dropShadowEffect":
	    if (this.parentBone.isGridSelected()) {
		if (this.parentBone.targetPosition == -99) {
		    return false;
		}
	    }
	case "effectprops":
	    if (this.parentBone.isPanelStackSelected()) {
		if (this.parentBone.targetLevel == 1) {
		    return false;
		}
	    } else {
		if (this.parentBone.isGridSelected()) {
		    if ((this.parentBone.targetPosition != -9 || this.parentBone.targetLevel != 8)
			    && (this.parentBone.targetPosition != -99)) {
			return false;
		    }
		}
	    }
	    break;
	}
	return true;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
function mstrFormatImplCommandsImpl(A) {
    this.parentBone = A;
    return this;
}
mstrTabImplScript = true;
mstrTabImpl.prototype = new mstrEditorImpl();
mstrTabImpl.prototype.settings = new Array();
mstrTabImpl.prototype.settingsNameArray = new Array();
mstrTabImpl.prototype.enforceSubmit = false;
mstrTabImpl.prototype.currentPropertyName = null;
mstrTabImpl.prototype.tabManager = null;
mstrTabImpl.prototype.PIXEL_WIDTH = 2;
mstrTabImpl.prototype.cmdLevel = null;
mstrTabImpl.prototype.appliesTo = null;
mstrTabImpl.prototype.tabSwitch = null;
mstrTabImpl.CMD_TYPE_DEFAULT = 0;
mstrTabImpl.CMD_TYPE_BITFLAG = 1;
mstrTabImpl.prototype.onload = function() {
    try {
	this.initEditor();
	if (this.elem && this.elem.parentNode) {
	    var A = this.elem.parentNode.getAttribute("at");
	    if (A && A.length > 0) {
		this.appliesTo = A;
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrTabImpl.prototype.onunload = function(C) {
    try {
	mstrEditorImpl.prototype.onunload.call(this, C);
	var B = this.getAppliesTo();
	if (B && B.observer) {
	    B.observer.unregister(this.id);
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return true;
};
mstrTabImpl.prototype.exec = function(A, H) {
    try {
	switch (A) {
	case "advColorPicker":
	    var G = H.split("|");
	    var F = document.getElementById(G[0]);
	    if (F) {
		this.updateColorPicker(F, G[1]);
	    }
	    break;
	case "edtColorGradient":
	    var G = H.split("|");
	    var F = document.getElementById(G[0]);
	    var E = G[1].split(",");
	    if (E.length >= 2 && (E[0] == E[1])) {
		if (F) {
		    this.updateColorPicker(F, E[0]);
		}
		break;
	    } else {
		if (F) {
		    F.setAttribute(microstrategy.HTMLATTR_CMD_VALUE, G[1]);
		    var C = F.getElementsByTagName("span");
		    if (C.length > 0) {
			C[0].setAttribute(microstrategy.HTMLATTR_CMD_VALUE,
				G[1]);
		    } else {
			F.setAttribute(microstrategy.HTMLATTR_CMD_VALUE, G[1]);
		    }
		    var B = document.getElementById(this.id
			    + F.getAttribute(microstrategy.HTMLATTR_CMD_ID));
		    if (B) {
			B.value = G[1];
			if (!this.initializing) {
			    B.setAttribute(microstrategy.HTMLATTR_CMD_VALUE,
				    G[1]);
			}
		    }
		}
		this.updateColorPickerGradient(H);
		break;
	    }
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrTabImpl.prototype.showOptions = function(E) {
    try {
	if (!E) {
	    return false;
	}
	var D = E.parentNode.getElementsByTagName(E.tagName);
	for ( var B = 0; B < D.length; B++) {
	    var A = D[B].id;
	    if (A) {
		A = document.getElementById("div" + A);
	    }
	    if (A) {
		A.style.display = (D[B] == E) ? "block" : "none";
	    }
	}
	return true;
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrTabImpl.prototype.ondocumentclick = function(B) {
    try {
	if (!B) {
	    B = window.event;
	}
	if (this.currentPicker) {
	    this.closePicker(B);
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrTabImpl.prototype.togglePicker = function(A, D, B) {
    try {
	if (B && (!B.disabled)) {
	    dropDown.togglePicker(A, D, B, this);
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return false;
};
mstrTabImpl.prototype.closePicker = function(B) {
    try {
	dropDown.closePicker(B, this);
	return true;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrTabImpl.prototype.checkForFormatChanges = function() {
    try {
	return false;
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrTabImpl.prototype.applyFormatChanges = function(A, B) {
    try {
	return B;
    } catch (C) {
	microstrategy.errors.log(C);
	return B;
    }
};
mstrTabImpl.prototype.checkRGBColors = function(B, A) {
    try {
	if ((A != null) && (B.toLowerCase().indexOf("color") > -1)) {
	    A = mstr.utils.Color.rgbStr2hex(A);
	}
	return A;
    } catch (C) {
	microstrategy.errors.log(C);
	return A;
    }
};
mstrTabImpl.prototype.applyPropertyChanges = function(G) {
    try {
	for (counter = 0; counter < this.settings.length; counter++) {
	    var C = this.settings[counter];
	    var F = C.getAttribute(microstrategy.HTMLATTR_CMD_VALUE);
	    if (F != null) {
		var D = C.getAttribute(microstrategy.HTMLATTR_CMD_ID);
		var B = C.getAttribute(microstrategy.HTMLATTR_CMD_LEVEL);
		if (!B) {
		    B = this.cmdLevel;
		}
		var A = new this.propChangeObject(C, D, F, null, null, B);
		G.push(A);
		if (!this.enforceSubmit) {
		    C.removeAttribute(microstrategy.HTMLATTR_CMD_VALUE);
		}
	    }
	}
	return true;
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrTabImpl.prototype.propChangeObject = function(E, B, G, D, A, C, F) {
    this.obj = E;
    this.cmdId = B;
    this.value = G;
    this.performFormatChange = D;
    this.submitUpdateManager = A;
    this.level = (C != null) ? C : this.cmdLevel;
    this.formatType = (F != null) ? F : microstrategy.FORMAT_TYPE_MAIN;
    return this;
};
mstrTabImpl.prototype.simpleInitCheckValue = function(D, C, A) {
    try {
	if (D && D.tagName.toLowerCase() != "input") {
	    if (C == 0) {
		D.src = microstrategy.FOLDER_IMAGES + "check_off.gif";
		D.setAttribute("cv", "0");
	    } else {
		D.src = microstrategy.FOLDER_IMAGES + "check_on.gif";
		D.setAttribute("cv", "-1");
	    }
	} else {
	    if ((C || typeof (C) == "boolean") && D) {
		if (C & D.value || C == D.value) {
		    D.checked = true;
		} else {
		    D.checked = false;
		}
	    }
	}
	if (D) {
	    if (A == null || A == "true") {
		D.onclick();
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrTabImpl.prototype.initCheckValue = function(B, A, H, C, F) {
    try {
	var G = document.getElementById(H);
	if (!G || !B || !B.commands) {
	    return;
	}
	if (F == null
		|| (B.commands.queryEnabled("isSelectionsPresent") && this
			.isEnabled(B.commands.queryState("selectedItems"), F))) {
	    if (B.commands.queryEnabled() && B.commands.queryEnabled(A)) {
		var E = B.commands.queryState(A);
		this.simpleInitCheckValue(G, E, C);
		return;
	    }
	}
	this.disableObj(H);
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrTabImpl.prototype.simpleInitTextValue = function(D, C, A) {
    try {
	if ((C || (C != null && C.length == 0)) && D) {
	    D.value = C;
	    if (A == null || A == "true") {
		D.onchange();
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrTabImpl.prototype.initTextValue = function(B, A, H, C, F) {
    try {
	if (document.getElementById(H)) {
	    if (F == null
		    || (B.commands.queryEnabled("isSelectionsPresent") && this
			    .isEnabled(B.commands.queryState("selectedItems"),
				    F))) {
		if (B.commands && B.commands.queryEnabled()) {
		    if (B.commands.queryEnabled(A)) {
			var E = B.commands.queryState(A);
			var G = document.getElementById(H);
			this.simpleInitTextValue(G, E, C);
		    }
		}
	    } else {
		this.disableObj(H);
	    }
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrTabImpl.prototype.simpleInitRadioValue = function(D, C, A) {
    try {
	if (D) {
	    D.checked = true;
	    if (A == null || A == "true") {
		D.onclick();
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrTabImpl.prototype.initRadioValue = function(A, J, I, F, E) {
    try {
	var B = document.getElementsByName(I);
	if (B) {
	    if (E == null
		    || (A.commands.queryEnabled("isSelectionsPresent") && this
			    .isEnabled(A.commands.queryState("selectedItems"),
				    E))) {
		if (A.commands && A.commands.queryEnabled()) {
		    if (A.commands.queryEnabled(J)) {
			var H = A.commands.queryState(J);
			var G = document.getElementById(I + H);
			this.simpleInitRadioValue(G, H, F);
		    }
		}
	    } else {
		for ( var D = 0; D < B.length; D++) {
		    this.disableOptionAndLabel(B[D]);
		}
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrTabImpl.prototype.simpleInitLabelValue = function(C, B) {
    try {
	if (B && C) {
	    C.innerHTML = B;
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrTabImpl.prototype.disableOptionAndLabel = function(A) {
    try {
	if (A) {
	    A.disabled = true;
	    A.className = "disabled";
	    if (document.getElementById(A.id + "_label")) {
		document.getElementById(A.id + "_label").className = "disabledLabel";
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrTabImpl.prototype.enableOptionAndLabel = function(A) {
    try {
	if (A) {
	    A.disabled = false;
	    A.className = "";
	    if (document.getElementById(A.id + "_label")) {
		document.getElementById(A.id + "_label").className = "";
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrTabImpl.prototype.initLabelValue = function(B, A, F) {
    try {
	if (B.commands && B.commands.queryEnabled()) {
	    if (B.commands.queryEnabled(A)) {
		var D = B.commands.queryState(A);
		var E = document.getElementById(F);
		this.simpleInitLabelValue(E, D);
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrTabImpl.prototype.simpleInitComboValue = function(H, J, G) {
    try {
	if (J != null && (J.toString()).length > 0 && H != null) {
	    var F = parseInt(H.getAttribute(microstrategy.HTMLATTR_CMD_TYPE));
	    switch (F) {
	    case mstrTabImpl.CMD_TYPE_BITFLAG:
		var B = H.options;
		var E = -1;
		var I = parseInt(J);
		var A = 0;
		for ( var D = 0; D < B.length; D++) {
		    var L = B.item(D);
		    var K = parseInt(L.value);
		    if ((((I & K) || (K == A)) && (K > E)) || (K == 0 == I)) {
			E = K;
			I = I - K;
			A += K;
		    }
		    if ((I == 0) && (K == A) && (E > -1)) {
			break;
		    }
		}
		if (E > -1) {
		    H.value = E;
		}
		break;
	    default:
		H.value = J;
	    }
	    if (G == null || G == "true") {
		H.onchange();
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrTabImpl.prototype.initComboValue = function(B, A, H, C, F) {
    try {
	if (F == null
		|| (B.commands.queryEnabled("isSelectionsPresent") && this
			.isEnabled(B.commands.queryState("selectedItems"), F))) {
	    if (B.commands && B.commands.queryEnabled()) {
		if (B.commands.queryEnabled(A)) {
		    var E = B.commands.queryState(A);
		    var G = document.getElementById(H);
		    this.simpleInitComboValue(G, E, C);
		}
	    }
	} else {
	    this.disableObj(H);
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrTabImpl.prototype.initColorPickerValue = function(B, A, G, E) {
    try {
	if (E == null
		|| (B.commands.queryEnabled("isSelectionsPresent") && this
			.isEnabled(B.commands.queryState("selectedItems"), E))) {
	    if (B.commands && B.commands.queryEnabled()) {
		var D;
		var F = document.getElementById(G);
		if (A == "bgcolor") {
		    D = F.getAttribute(microstrategy.HTMLATTR_CMD_VALUE);
		    if (!D && B.commands.queryEnabled("gradientcolor")) {
			D = B.commands.queryState("gradientcolor");
		    }
		}
		if (B.commands.queryEnabled(A)) {
		    if ((A == "bgcolor" && !D) || A != "bgcolor") {
			D = B.commands.queryState(A, this.tabManager
				.isPanelStackSelected()
				&& this.tabManager.targetAxis == 1);
		    }
		    this.updateColorPicker(F, D);
		}
	    }
	} else {
	    if (document.getElementById(G)) {
		document.getElementById(G).disabled = true;
		document.getElementById(G).className = "mstrPulldowndisabled";
	    }
	    if (document.getElementById(G + "_label")) {
		document.getElementById(G + "_label").className = "disabledLabel";
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrTabImpl.prototype.setAppliesTo = function(B) {
    if (B == null) {
	return true;
    }
    try {
	if (!this.appliesTo) {
	    this.appliesTo = (typeof (B) == "string") ? B : B.id;
	}
	B = microstrategy.bone(this.appliesTo);
	if (B.observer) {
	    B.observer.register(this.id);
	}
	return true;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrTabImpl.prototype.getAppliesTo = function(B) {
    try {
	if (this.appliesTo) {
	    var B = microstrategy.bone(this.appliesTo);
	    return B;
	}
	return null;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrTabImpl.prototype.isEnabled = function(A, D) {
    try {
	var B = microstrategy.isEnabled(A, D);
	return B;
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrTabImpl.prototype.updateList = function(A) {
};
mstrTabImpl.prototype.updateText = function(C, A) {
    try {
	if (C && (typeof (A) == "undefined" || !A)) {
	    C.setAttribute(microstrategy.HTMLATTR_CMD_VALUE, C.value);
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrTabImpl.prototype.updateCheck = function(C) {
    try {
	if (C) {
	    var B = (C.checked) ? "-1" : "0";
	    C.setAttribute(microstrategy.HTMLATTR_CMD_VALUE, B);
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrTabImpl.prototype.updateDropdown = function(E, C, D, A) {
    try {
	if (E) {
	    E.innerHTML = C;
	    if (typeof (A) == "undefined" || !A) {
		E.setAttribute(microstrategy.HTMLATTR_CMD_VALUE, D);
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrTabImpl.prototype.updateColorPicker = function(E, D, A) {
    try {
	if (D == null) {
	    D = "transparent";
	}
	if (E && (D != "-2")) {
	    var B = E.getElementsByTagName("span");
	    if (D && D.indexOf(",") >= 0 && D.indexOf("rgb") < 0) {
		this.updateColorPickerGradient(E.id + "|" + D);
	    } else {
		if (B.length > 0) {
		    B[0].style.backgroundColor = D;
		    if (!D || D == "transparent") {
			B[0].innerHTML = microstrategy.descriptors
				.getDescriptor(3779);
		    } else {
			B[0].innerHTML = "";
		    }
		} else {
		    E.style.backgroundColor = D;
		}
	    }
	    if (typeof (A) == "undefined" || !A) {
		E.setAttribute(microstrategy.HTMLATTR_CMD_VALUE, D);
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrTabImpl.prototype.getColorPickerValue = function(E) {
    try {
	var D = "";
	if (E) {
	    var A = E.getElementsByTagName("span");
	    var B = null;
	    if (A.length > 0) {
		B = A[0];
	    } else {
		B = E;
	    }
	    D = B.style.backgroundColor;
	}
	return D;
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrTabImpl.prototype.disableObj = function(A) {
    try {
	if (document.getElementById(A)) {
	    this.disableOptionAndLabel(document.getElementById(A));
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrTabImpl.prototype.enableObj = function(A) {
    try {
	if (document.getElementById(A)) {
	    this.enableOptionAndLabel(document.getElementById(A));
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrTabImpl.prototype.allSelectedItemsAreOfType = function(C) {
    try {
	var G = true;
	var A = this.getAppliesTo();
	var B = A.commands.queryState("selectedItems");
	for ( var E in B) {
	    var F = B[E].getAttribute("sty");
	    if (F != C) {
		G = false;
		break;
	    }
	}
	return G;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrTabImpl.prototype.cleanup = function(A) {
};
mstrTabImpl.prototype.getJSONProperty = function(A, E, D) {
    try {
	var B = "";
	if (A != null && E != null) {
	    E = (D) ? E : '"' + E + '"';
	    E = E.replace(/%5C/g, "%5C%5C");
	    E = E.replace(/%22/g, "%5C%22");
	    B += '"' + A + '":' + E + ",";
	}
	return B;
    } catch (C) {
	microstrategy.errors.log(C);
	return "";
    }
};
mstrTabImpl.prototype.getChanges = function() {
    try {
	var C = "";
	var B;
	for (B = 0; B < this.settings.length; B++) {
	    var A = this.settings[B];
	    var D = A.getAttribute(microstrategy.HTMLATTR_CMD_ID);
	    var F = this.getChangedValue(A);
	    C += this.getJSONProperty(D, F);
	}
	if (C.length > 0) {
	    C = C.substring(0, C.length - 1);
	}
	return C;
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrTabImpl.prototype.getChangedValue = function(A) {
    try {
	var C = A.getAttribute(microstrategy.HTMLATTR_CMD_VALUE);
	if (C == null) {
	    if (A.nodeName.toLowerCase() == "input"
		    && A.type.toLowerCase() == "checkbox") {
		C = A.checked;
	    }
	}
	return C;
    } catch (B) {
	microstrategy.errors.log(B);
	return null;
    }
};
mstrTabImpl.prototype.saveTabSelections = function() {
    var C = "{" + this.getChanges(true) + "}";
    var B = this.tabManager.selectedTabOptions || "";
    var A = B.length;
    if (A) {
	B = B.substring(1, A - 1) + ",";
    }
    this.tabManager.selectedTabOptions = "{" + B + '"' + this.id + '":' + C
	    + "}";
    microstrategy.updateManager.replaceURL("selectedTabOptions",
	    this.tabManager.selectedTabOptions);
};
mstrTabImpl.prototype.restorePreviousSelections = function(A) {
    try {
	for ( var B in A) {
	    var D = document.getElementById(this.id + B);
	    if (D != null && A[B] != null && D.id == this.id + B) {
		this.restoreEachSelection(D, B, A[B]);
	    } else {
		if (D == null || D.getAttribute("name") == this.id + B) {
		    this.updateSpecialCases(B, A[B]);
		}
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrTabImpl.prototype.restoreEachSelection = function(E, A, D) {
    try {
	if (A.indexOf("Color") > -1) {
	    this.updateColorPicker(E, D);
	} else {
	    var F = E.nodeName;
	    switch (F.toLowerCase()) {
	    case "select":
		this.updateComboBox(E, D);
		this.updateList(E);
		break;
	    case "input":
		var B = E.type.toLowerCase();
		switch (B) {
		case "checkbox":
		    this.reselectCheckBox(E, D);
		    this.updateCheck(E);
		    break;
		case "radio":
		    this.updateRadioButton(E, D);
		    break;
		case "text":
		    this.updateText(E);
		    break;
		}
		break;
	    default:
		E.setAttribute(microstrategy.HTMLATTR_CMD_VALUE, D);
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrTabImpl.prototype.updateRadioButton = function(B, A) {
};
mstrTabImpl.prototype.updateSpecialCases = function(A, B) {
};
mstrTabImpl.prototype.reselectCheckBox = function(field, value) {
    try {
	field.checked = eval(value);
    } catch (err) {
	microstrategy.errors.log(err);
	return false;
    }
};
mstrTabImpl.prototype.updateComboBox = function(F, E) {
    try {
	var B = F.childNodes;
	var A = -1;
	var G = 0;
	for ( var C = 0; C < B.length; C++) {
	    if (B[C] != null && B[C].nodeName.toLowerCase() == "option") {
		if (this.matchesListValue(B[C].value, E, F
			.getAttribute(microstrategy.HTMLATTR_CMD_ID))) {
		    A = G;
		    break;
		}
		G++;
	    }
	}
	F.selectedIndex = A;
	F.setAttribute(microstrategy.HTMLATTR_CMD_VALUE, E);
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrTabImpl.prototype.matchesListValue = function(B, D, A) {
    try {
	return (B == D);
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrTabImpl.prototype.openAdvancedColorPicker = function(B, A, C) {
    try {
	if (B && B.commands) {
	    var E = mstr.utils.Color.rgbStr2hex(C);
	    B.commands.exec("edtColorPicker", this.id + "|" + this.id + A + "|"
		    + E + "|" + this.tabManager.getChangedTabOptions());
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrTabImpl.prototype.openColorGradientEditor = function(A, B) {
    try {
	if (A && A.commands) {
	    A.commands.exec("edtColorGradient", B + "|"
		    + this.tabManager.getChangedTabOptions());
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrTabImpl.prototype.openColorGradientEditor = function(A, C, B) {
    try {
	if (A && A.commands) {
	    if (B == true) {
		A.commands.exec("graphEdtColorGradient", C + "|"
			+ this.tabManager.getChangedTabOptions());
	    } else {
		this.tabManager.adjustFormatType();
		A.commands.exec("edtColorGradient", C + "|"
			+ this.tabManager.getChangedTabOptions(),
			this.tabManager.isPanelStackSelected()
				&& this.tabManager.targetAxis == 1);
		microstrategy.formatType = microstrategy.FORMAT_TYPE_MAIN;
	    }
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrTabImpl.prototype.openGradientColorPicker = function(B, J, I, H, C, D, G, E) {
    try {
	if (B && B.commands) {
	    this.tabManager.adjustFormatType();
	    if (!C) {
		B.commands.exec("edtColorGradient", this.id + "|" + this.id + J
			+ "|" + 0 + "|" + I + "|" + H + "|"
			+ this.tabManager.getChangedTabOptions(),
			this.tabManager.isPanelStackSelected()
				&& this.tabManager.targetAxis == 1);
	    } else {
		var A = ((D == 0 && G == 0) || (D == 90 && E == 0)) ? 0 : 1;
		B.commands.exec("edtColorGradient", this.id + "|" + this.id + J
			+ "|" + A + "|" + I + "|" + H + "|" + C + "|" + D + "|"
			+ G + "|" + E + "|"
			+ this.tabManager.getChangedTabOptions(),
			this.tabManager.isPanelStackSelected()
				&& this.tabManager.targetAxis == 1);
	    }
	    microstrategy.formatType = microstrategy.FORMAT_TYPE_MAIN;
	}
    } catch (F) {
	microstrategy.errors.log(F);
	return false;
    }
};
mstrTabImpl.prototype.updateColorPickerGradient = function(J) {
    try {
	var N = J.split("|");
	var F = document.getElementById(N[0]);
	F.style.backgroundColor = "transparent";
	var K = F.getElementsByTagName("span");
	if (K.length > 0) {
	    F = K[0];
	} else {
	    return false;
	}
	F.innerHTML = "";
	var O = N[1].split(",");
	var H = getObjInnerWidth(F);
	var G = getObjInnerHeight(F);
	if (H % 2 == 1) {
	    H = H - 1;
	}
	if (G % 2 == 1) {
	    G = G - 1;
	}
	var S = gradientUtil.getRGBColor(O[0]);
	var A = gradientUtil.getRGBColor(O[1]);
	var Q = (O[3] == 0) ? gradientUtil.GRADIENTSHADING_STYLE_HORIZONTAL
		: gradientUtil.GRADIENTSHADING_STYLE_VERTICAL;
	var U = O[4];
	var D = O[5];
	var T = (Q == gradientUtil.GRADIENTSHADING_STYLE_HORIZONTAL && U != 100)
		|| (Q == gradientUtil.GRADIENTSHADING_STYLE_VERTICAL && D != 100) ? 1
		: 2;
	var R = (H / gradientUtil.PIXEL_WIDTH) * (G / gradientUtil.PIXEL_WIDTH);
	for ( var L = 0; L < R; L++) {
	    var B = document.createElement("div");
	    B.className = "pixel";
	    var P = gradientUtil.getColorPercent(gradientUtil.getXCoordinate(L,
		    H), gradientUtil.getYCoordinate(L, G), T, H, Q);
	    var E = parseInt(P * (A[0] - S[0])) + S[0];
	    var I = parseInt(P * (A[1] - S[1])) + S[1];
	    var M = parseInt(P * (A[2] - S[2])) + S[2];
	    B.style.backgroundColor = "rgb(" + E + ", " + I + ", " + M + ")";
	    F.appendChild(B);
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrTabImpl.prototype.initSettings = function() {
    try {
	if (this.settingsNameArray.length == 0) {
	    return;
	}
	this.settings = new Array();
	for ( var A = 0; A < this.settingsNameArray.length; A++) {
	    var C = document
		    .getElementById(this.id + this.settingsNameArray[A]);
	    if (C) {
		this.settings.push(C);
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrTabImpl.prototype.initCtrlValue = function(G, D) {
    try {
	var B = this.getAppliesTo();
	if (!B) {
	    return;
	}
	var A = G.getAttribute(microstrategy.HTMLATTR_CMD_ID);
	if (B.commands && B.commands.queryEnabled(A)) {
	    var F = B.commands.queryState(A);
	    var C = G.type || G.getAttribute("type");
	    switch (C) {
	    case "text":
		this.simpleInitTextValue(G, F, D);
		break;
	    case "checkbox":
		this.simpleInitCheckValue(G, (F == true), D);
		break;
	    case "colorpicker":
		this.updateColorPicker(G, F);
		break;
	    case "picker":
		break;
	    }
	} else {
	    this.disableObj(fieldName);
	}
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrTabImpl.prototype.updateCtrl = function(B) {
    try {
	if (!B) {
	    return;
	}
	if (this.initializing) {
	    return;
	}
	switch (B.type) {
	case "text":
	    B.setAttribute(microstrategy.HTMLATTR_CMD_VALUE, B.value);
	    break;
	case "checkbox":
	    B.setAttribute(microstrategy.HTMLATTR_CMD_VALUE,
		    (B.checked) ? microstrategy.TRUE : microstrategy.FALSE);
	    break;
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrTabImpl.prototype.getSwitchMode = function() {
    try {
	if (!this.tabSwitch) {
	    if (this.tabManager) {
		this.tabSwitch = microstrategy.findChildWithAtt(
			this.tabManager, "td", "tab", this.id);
	    }
	}
	if (this.tabSwitch) {
	    return this.tabSwitch.getAttribute(microstrategy.TAB_SWITCH_MODE);
	}
	return 0;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrTabImpl.prototype.setSwitchMode = function(B) {
    try {
	if (!this.tabSwitch) {
	    if (this.tabManager) {
		this.tabSwitch = microstrategy.findChildWithAtt(
			this.tabManager, "td", "tab", this.id);
	    }
	}
	if (this.tabSwitch) {
	    this.tabSwitch.setAttribute(microstrategy.TAB_SWITCH_MODE, B);
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrTabImpl.prototype.afterresize = function() {
    try {
	if (mstrEditorImpl.prototype.afterresize) {
	    mstrEditorImpl.prototype.afterresize.call(this);
	}
	var D = microstrategy.findChildrenWithAtt(this.elem, "div", "ty");
	for ( var B = 0; B < D.length; B++) {
	    var A = microstrategy.findBone(D[B]);
	    if (A && A.afterresize) {
		A.afterresize();
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrTabImpl.prototype.onwinresize = function() {
    try {
	if (mstrEditorImpl.prototype.onwinresize) {
	    mstrEditorImpl.prototype.onwinresize.call(this);
	}
	this.resize();
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrTabImpl.prototype.resize = function() {
    try {
	if (mstrEditorImpl.prototype.resize) {
	    mstrEditorImpl.prototype.resize.call(this);
	}
	var D = microstrategy.findChildrenWithAtt(this.elem, "div", "ty");
	if (D) {
	    for ( var B = 0; B < D.length; B++) {
		var A = microstrategy.findBone(D[B]);
		if (A && A.resize) {
		    A.resize();
		}
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrTabImpl.prototype.toggleCheck = function(C, A) {
    if (this.initializing != false) {
	return false;
    }
    var D = parseInt(C.getAttribute("cv"), 10) - 1;
    if (D < -2) {
	D = 0;
    }
    var B = "check_off.gif";
    if (D == -1) {
	B = "check_on.gif";
    } else {
	if (D == -2) {
	    if (A) {
		B = "Check_conflict.gif";
	    } else {
		D = 0;
	    }
	}
    }
    C.src = microstrategy.FOLDER_IMAGES + B;
    C.setAttribute("cv", D);
    C.setAttribute(microstrategy.HTMLATTR_CMD_VALUE, D);
    return true;
};
mstrTabImpl.prototype.unregister = function() {
    try {
	var C = microstrategy.findChildrenWithAtt(this.elem, "div", "ty");
	if (C) {
	    for ( var A = 0; A < C.length; A++) {
		microstrategy.unRegisterBone(C[A].getAttribute("id"));
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
function mstrTabImpl(A) {
    this.inherits = mstrEditorImpl;
    this.inherits(A);
    delete this.inherits;
    return this;
}
mstrObjectBrowserImplScript = true;
mstrObjectBrowserImpl.prototype = new mstrEditorImpl();
mstrObjectBrowserImpl.prototype.updateManager = microstrategy.updateManager;
mstrObjectBrowserImpl.prototype.tree = null;
mstrObjectBrowserImpl.prototype.selections = null;
mstrObjectBrowserImpl.prototype.mask = null;
mstrObjectBrowserImpl.prototype.dragSource = null;
mstrObjectBrowserImpl.prototype.dndHelper = null;
mstrObjectBrowserImpl.prototype.type = microstrategy.OBJTYPE_OBJBROWSER;
mstrObjectBrowserImpl.prototype.isRWTab = false;
mstrObjectBrowserImpl.prototype.onload = function() {
    try {
	this.dragSource = null;
	this.initEditor();
	this.initTree();
	if (typeof (mstrMaskImpl) != "undefined") {
	    this.mask = new mstrMaskImpl();
	}
	this.maskFor = microstrategy.OBJTYPE_ANY;
	this.updateManager = microstrategy.updateManager;
	this.dndHelper = new mstrDNDHelperImpl(this);
	var B = microstrategy.findAncestorWithAtt(this.elem, "scriptClass",
		"mstrAccordionTabManagerImpl");
	if (B) {
	    this.tabManager = microstrategy.findBone(B);
	}
	if (bIsIE4) {
	    this.elem.onselectstart = new Function(
		    "return microstrategy.bone('" + this.id
			    + "').onselectstart();");
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrObjectBrowserImpl.prototype.onpostload = function() {
    try {
	if ((microstrategy.IS_RELOAD || (bIsW3C && !bIsIE4)) && !this.isRWTab) {
	    microstrategy.eventManager.ondialogresize();
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrObjectBrowserImpl.prototype.cancelContextMenu = function(C) {
    try {
	if (!C) {
	    C = window.event;
	}
	var B = getEventTarget(C);
	if (B != null) {
	    if ((B.nodeName.toLowerCase() == "input" && (B.getAttribute("type") == "text" || B
		    .getAttribute("type") == "password"))
		    || (B.nodeName.toLowerCase() == "textarea")) {
		return true;
	    }
	}
	if (this.selections != null && !this.selections.isSameType()) {
	    if (bIsIE4) {
		C.cancelBubble = true;
	    }
	    return false;
	}
	return true;
    } catch (A) {
	microstrategy.errors.log(A);
	return true;
    }
};
mstrObjectBrowserImpl.prototype.resize = function() {
    try {
	if (!this.elem) {
	    return;
	}
	var C = 250;
	var A = Math.max(getClientHeight() - getObjSumTop(this.elem)
		- getFooterHeight(), C);
	if (A != parseInt(this.elem.style.height)) {
	    if (bIsIE7) {
		A = A - SCROLLBAR_SIZE;
	    }
	    this.elem.style.height = A + "px";
	    microstrategy.updateBrowserSetting("obH", getObjHeight(this.elem));
	}
	if (this.moveResizeHandles) {
	    this.moveResizeHandles();
	}
	if (this.resizeContents) {
	    this.resizeContents();
	}
	if (this.mask && this.mask.onmaskedobjectresize) {
	    this.mask.onmaskedobjectresize();
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrObjectBrowserImpl.prototype.onwinresize = function() {
    try {
	var B = function() {
	    var C = microstrategy.bone(this.id);
	    if (C && C.resizeObjectBrowser) {
		C.resizeObjectBrowser();
	    }
	};
	window.setTimeout(B, 0);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrObjectBrowserImpl.prototype.resizeObjectBrowser = function() {
    try {
	if ((!(this.elem)) || (!(this.elem.style))
		|| !(isInDocument(this.elem))) {
	    return false;
	}
	this.resize();
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrObjectBrowserImpl.prototype.hasMetrics = function() {
    try {
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrObjectBrowserImpl.prototype.afterresize = function() {
    try {
	if (this.resizeContents) {
	    this.resizeContents();
	}
	microstrategy.updateBrowserSetting("obW", getObjWidth(this.elem));
	microstrategy.updateBrowserSetting("obH", getObjHeight(this.elem));
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrObjectBrowserImpl.prototype.onnotifydrag = function(A, E, B) {
    try {
	if ((microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION)
		&& (microstrategy.DISPLAY_MODE == microstrategy.VIEW_MODE)
		&& !this
			.isFeatureAvailable(microstrategy.FEATURE_MODIFY_GRID_LEVEL_IN_DOCUMENTS)) {
	    return;
	}
	if (E != this && E.deleteItems) {
	    var C = false;
	    if (microstrategy.EXECUTION_SCOPE != microstrategy.RWD_EXECUTION) {
		if (microstrategy.getViewerBone()) {
		    if (!microstrategy.getViewerBone().isFeatureAvailable(
			    microstrategy.FEATURE_MODIFY_REPORT_LIST)) {
			return;
		    }
		}
		C = this.isFeatureAvailable(microstrategy.FEATURE_WEB_PIVOT);
	    } else {
		if (microstrategy.DISPLAY_MODE == microstrategy.DESIGN_MODE
			|| this
				.isFeatureAvailable(microstrategy.FEATURE_MODIFY_GRID_LEVEL_IN_DOCUMENTS)) {
		    C = true;
		}
	    }
	    if (C) {
		this.mask.toggle(true, microstrategy.OBJTYPE_ANY);
		this.dragSource = E;
	    }
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrObjectBrowserImpl.prototype.ondrop = function(C, A) {
    try {
	if (this.dragSource) {
	    this.dragSource.deleteItems(A.getItems());
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrObjectBrowserImpl.prototype.onselectstart = function(C) {
    try {
	if (!C) {
	    C = window.event;
	}
	var B = getEventTarget(C);
	if (B) {
	    if ((B.nodeName.toLowerCase() == "input" && (B.getAttribute("type") == "text" || B
		    .getAttribute("type") == "password"))
		    || (B.nodeName.toLowerCase() == "textarea")) {
		return true;
	    }
	}
	return false;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrObjectBrowserImpl.prototype.onselectionchange = function(B) {
    try {
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrObjectBrowserImpl.prototype.ondocumentclick = function(B) {
    try {
	if (this.selections && this.selections.ondocumentclick) {
	    this.selections.ondocumentclick(B);
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrObjectBrowserImpl.prototype.close = function() {
    try {
	mstrEditorImpl.prototype.close.call(this);
	if (bIsW3C && !bIsIE4 && !this.isRWTab) {
	    microstrategy.eventManager.ondialogresize();
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrObjectBrowserImpl.prototype.initTree = function() {
    try {
	var A = microstrategy.subObjectFind(this.elem, [ "DIV" ],
		microstrategy.SUBOBJTYPE_TREE);
	if (A != null) {
	    this.tree = new mstrTreeImpl(A.getAttribute("id"));
	    this.tree.parentBone = this;
	    this.tree.path = "microstrategy.bone('" + this.id + "').tree";
	    if (this.tree.onload) {
		this.tree.onload();
	    }
	}
	return true;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrObjectBrowserImpl.prototype.getAttributeForms = function(E) {
    try {
	var A = [];
	var C = findTargetTag(E, "LI");
	var B = C.lastChild;
	if (B != null && B.tagName.toLowerCase() == "ul") {
	    A = B.getElementsByTagName("span");
	}
	return A;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrObjectBrowserImpl.prototype.getDNDHelperImage = function(C, A) {
    try {
	return (C.id == this.id) ? null : microstrategy.FOLDER_IMAGES
		+ "XDelete.gif";
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return null;
};
function mstrObjectBrowserImpl(A) {
    this.inherits = mstrEditorImpl;
    this.inherits(A);
    delete this.inherits;
    return this;
}
mstrObjSelectionsImplScript = true;
mstrObjSelectionsImpl.prototype = new mstrSelectionsImpl();
mstrObjSelectionsImpl.prototype.updateManager = microstrategy.updateManager;
mstrObjSelectionsImpl.prototype.selectedClass = "selected";
mstrObjSelectionsImpl.prototype.onmouseup = function(B) {
    try {
	this.parentBone.dndHelper.onmouseup(this.path);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrObjSelectionsImpl.prototype.ondocumentclick = function(C) {
    try {
	if (!this.isActive()) {
	    return;
	}
	if (!C) {
	    C = window.event;
	}
	if (C.e) {
	    C = C.e;
	}
	var B = microstrategy.findAncestor(getEventTarget(C));
	if (B == null) {
	    this.clear();
	    return;
	}
	var D = B.getAttribute(microstrategy.HTMLATTR_OBJTYPE);
	if (D == microstrategy.OBJTYPE_CONTEXT_MENU
		|| D == microstrategy.OBJTYPE_MESSAGE_BOX) {
	    return;
	}
	if (this.needToClear(B)) {
	    this.clear();
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrObjSelectionsImpl.prototype.needToClear = function(B) {
    var A = findTarget(B, microstrategy.HTMLATTR_SCRIPTCLASS);
    return (A == null || A.getAttribute("id") != this.parentBone.id);
};
mstrObjSelectionsImpl.prototype.add = function(C, D) {
    try {
	C = (C.tagName.toLowerCase() == "span"
		&& C.parentNode.tagName.toLowerCase() == "span" && C.parentNode.className
		.indexOf("mstrIcon-lv") > -1) ? C.parentNode.nextSibling : C;
	if (D) {
	    if (D.length == 0) {
		D.push(C);
	    } else {
		D[0] = C;
	    }
	}
	mstrSelectionsImpl.prototype.add.call(this, C);
	var A = C.className;
	C.className = (typeof (A) == "undefined") ? this.selectedClass
		: this.selectedClass + " " + A;
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return false;
};
mstrObjSelectionsImpl.prototype.resetClassName = function(D) {
    try {
	var C = "";
	if (D) {
	    var A = D.className;
	    if ((A.length > 0) && (A.indexOf(this.selectedClass) == 0)) {
		C = A.substr(this.selectedClass.length);
	    } else {
		C = A;
	    }
	    D.className = C;
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return true;
};
mstrObjSelectionsImpl.prototype.remove = function(B) {
    try {
	mstrSelectionsImpl.prototype.remove.call(this, B);
	this.resetClassName(B);
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrObjSelectionsImpl.prototype.clear = function() {
    try {
	for ( var B in this.items) {
	    this.resetClassName(this.items[B]);
	}
	mstrSelectionsImpl.prototype.clear.call(this);
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrObjSelectionsImpl.prototype.getItems = function() {
    try {
	var A = mstrSelectionsImpl.prototype.getItems.call(this);
	if (A != null && A.length > 0) {
	    if (A[0].getAttribute(microstrategy.HTMLATTR_ID) != A[0]
		    .getAttribute(microstrategy.HTMLATTR_DSS_ID)) {
		A.sort(function(D, C) {
		    return parseInt(D.getAttribute("id").substr(32))
			    - parseInt(C.getAttribute("id").substr(32));
		});
	    }
	}
	return A;
    } catch (B) {
	microstrategy.errors.log(B);
	return null;
    }
};
function mstrObjSelectionsImpl() {
    this.inherits = mstrSelectionsImpl;
    this.inherits();
    delete this.inherits;
    return this;
}
var mstrGrid = mstrGridReport;
mstrGridReportScript = true;
mstrGridReport.prototype = new mstrGridStatic();
mstrGridReport.prototype.type = microstrategy.OBJTYPE_GRID;
mstrGridReport.prototype.um = microstrategy.updateManager;
mstrGridReport.prototype.mask = null;
mstrGridReport.prototype.maskFor = null;
mstrGridReport.prototype.maskArea = null;
mstrGridReport.prototype.gridTable = null;
mstrGridReport.prototype.selections = null;
mstrGridReport.prototype.activeElement = null;
mstrGridReport.prototype.hasNoMetrics = true;
mstrGridReport.prototype.metricsCount = -1;
mstrGridReport.prototype.metricsOnRows = false;
mstrGridReport.prototype.checkBanding = false;
mstrGridReport.prototype.hasThresholds = false;
mstrGridReport.prototype.thresholdsState = false;
mstrGridReport.prototype.disabled = false;
mstrGridReport.prototype.objId = null;
mstrGridReport.prototype.dragDisplay = null;
mstrGridReport.prototype.imgDisplay = null;
mstrGridReport.prototype.x = 0;
mstrGridReport.prototype.y = 0;
mstrGridReport.prototype.template = null;
mstrGridReport.prototype.viewerId = null;
mstrGridReport.prototype.bp = null;
mstrGridReport.prototype.fp = null;
mstrGridReport.prototype.parentSubsection = null;
mstrGridReport.prototype.useClientSideManipulations = false;
mstrGridReport.prototype.isEmptyTemplate = true;
mstrGridReport.prototype.dSetId = "";
mstrGridReport.prototype.dSetName = "";
mstrGridReport.prototype.doColWidths = false;
mstrGridReport.prototype.colWidths = null;
mstrGridReport.prototype.startCol = 0;
mstrGridReport.prototype.endCol = 0;
mstrGridReport.prototype.maxCols = -1;
mstrGridReport.prototype.gridStructureInfo = null;
mstrGridReport.prototype.showAttForms = false;
mstrGridReport.prototype.isDndEnabled = true;
mstrGridReport.prototype.isMdxCube = false;
mstrGridReport.prototype.isXDACustomSQLReport = false;
mstrGridReport.prototype.isViewReport = false;
mstrGridReport.prototype.useDNDMapping = false;
mstrGridReport.prototype.dndHelper = null;
mstrGridReport.prototype.overlapGridTitles = false;
mstrGridReport.prototype.showEmptyAxis = false;
mstrGridReport.prototype.emptyAxisVisible = false;
mstrGridReport.prototype.showGraphDropZones = false;
mstrGridReport.prototype.isFilterVisible = false;
mstrGridReport.prototype.gridFormatReqId = null;
mstrGridReport.prototype.gridSelections = "";
mstrGridReport.prototype.currentPageX = "";
mstrGridReport.prototype.currentPageY = "";
mstrGridReport.prototype.showColHeaders = true;
mstrGridReport.prototype.showRowHeaders = true;
mstrGridReport.prototype.rowAxis = null;
mstrGridReport.prototype.colAxis = null;
mstrGridReport.prototype.pagebyAxis = null;
mstrGridReport.prototype.metricsAxis = null;
mstrGridReport.prototype.copyAxes = false;
mstrGridReport.prototype.gridCellCssPrefix = "";
mstrGridReport.prototype.isReportRedoable = false;
mstrGridReport.prototype.isReportUndoable = false;
mstrGridReport.prototype.isOutlineMode = false;
mstrGridReport.prototype.isStaticOutlineMode = false;
mstrGridReport.prototype.outlineMode = null;
mstrGridReport.prototype.outlineModeStartRow = 0;
mstrGridReport.prototype.outlineModeEndRow = 0;
mstrGridReport.prototype.outlineModeExpandImage = "";
mstrGridReport.prototype.outlineModeContractImage = "";
mstrGridReport.prototype.outlineModeLevel = 0;
mstrGridReport.prototype.outlineModeWithLockHeaders = false;
mstrGridReport.prototype.isSaveBeforeDocCreate = false;
mstrGridReport.prototype.reportID = null;
mstrGridReport.prototype.parentFolderID = null;
mstrGridReport.prototype.messageID = null;
mstrGridReport.prototype.stateID = null;
mstrGridReport.prototype.objTypeReport = null;
mstrGridReport.prototype.outlineModeMaxLevels = -1;
mstrGridReport.prototype.currentView = microstrategy.DISPLAY_MODE_GRID;
mstrGridReport.prototype.isDrilled = false;
mstrGridReport.prototype.isNew = false;
mstrGridReport.prototype.saveStateID = null;
mstrGridReport.prototype.isReadOnly = false;
mstrGridReport.prototype.saveEnabled = false;
mstrGridReport.prototype.needSaveAs = false;
mstrGridReport.prototype.autostyleId = "";
mstrGridReport.prototype.selectedAxis = null;
mstrGridReport.prototype.selectedPosition = null;
mstrGridReport.prototype.selectedLevel = null;
mstrGridReport.prototype.selectedUnit = null;
mstrGridReport.prototype.positionForGradient = null;
mstrGridReport.prototype.gridArea = 0.5;
mstrGridReport.prototype.gridPosition = 1;
mstrGridReport.prototype.isGrid = false;
mstrGridReport.prototype.isGraph = false;
mstrGridReport.prototype.isVisualization = false;
mstrGridReport.prototype.major = 0;
mstrGridReport.prototype.minor = 0;
mstrGridReport.prototype.categories = 0;
mstrGridReport.prototype.series = 0;
mstrGridReport.prototype.enableLegends = false;
mstrGridReport.prototype.enableLabels = false;
mstrGridReport.prototype.legend = false;
mstrGridReport.prototype.dValues = false;
mstrGridReport.prototype.seriesLayout = 1;
mstrGridReport.prototype.allowedGraphTypes = null;
mstrGridReport.prototype.GRAPH_OBJECT_ID_FOOTNOTE = 3;
mstrGridReport.prototype.GRAPH_OBJECT_ID_TITLE = 5;
mstrGridReport.prototype.GRAPH_OBJECT_ID_SUBTITLE = 4;
mstrGridReport.prototype.GRAPH_OBJECT_ID_LEGEND_TEXT = 9;
mstrGridReport.prototype.GRAPH_OBJECT_ID_DATA_TEXT = 260;
mstrGridReport.prototype.GRAPH_OBJECT_ID_2DX_TITLE = 293;
mstrGridReport.prototype.GRAPH_OBJECT_ID_2DY1_TITLE = 299;
mstrGridReport.prototype.GRAPH_OBJECT_ID_2DY2_TITLE = 305;
mstrGridReport.prototype.GRAPH_OBJECT_ID_3DCOL_TITLE = 515;
mstrGridReport.prototype.GRAPH_OBJECT_ID_3DLY_TITLE = 534;
mstrGridReport.prototype.GRAPH_OBJECT_ID_3DROW_TITLE = 555;
mstrGridReport.prototype.GRAPH_OBJECT_ID_3DRY_TITLE = 561;
mstrGridReport.prototype.GRAPH_OBJECT_ID_NULL = 9999;
mstrGridReport.prototype.GRAPH_OBJECT_ID_OPILBL_VALUE = 418;
mstrGridReport.prototype.DEFAULT_GRAPH_MAJOR_TYPE = 4;
mstrGridReport.prototype.DEFAULT_GRAPH_MINOR_TYPE = 1;
mstrGridReport.prototype.Major_3D_surface = 131072;
mstrGridReport.prototype.Major_Hichert = 33554432;
mstrGridReport.prototype.Major_3D_scatter = 262144;
mstrGridReport.prototype.Major_Scatter = 128;
mstrGridReport.prototype.Major_Bubble = 1024;
mstrGridReport.prototype.Major_Gauge = 524288;
mstrGridReport.prototype.drillOpenInNewWindow = false;
mstrGridReport.prototype.drillIframeEnabled = false;
mstrGridReport.prototype.drillRetainParentValue = "";
mstrGridReport.prototype.drillKeepThreshValue = "";
mstrGridReport.prototype.oldFormatDrillPathImportance = null;
mstrGridReport.prototype.drillElementListName = "";
mstrGridReport.prototype.gradientColorId = "4225";
mstrGridReport.prototype.gradientAngleId = "4226";
mstrGridReport.prototype.gradientXOffsetId = "4229";
mstrGridReport.prototype.gradientYOffsetId = "4230";
mstrGridReport.prototype.quickSwitch = false;
mstrGridReport.prototype.isWidget = false;
mstrGridReport.prototype.widgetDescription = null;
mstrGridReport.prototype.widgetPreviewSrc = null;
mstrGridReport.prototype.widgetPreview = null;
mstrGridReport.prototype.needSaveBeforeNotes = true;
mstrGridReport.prototype.hiliteCell = [];
mstrGridReport.prototype.gridGraphUnitKeyContext = null;
mstrGridReport.prototype.visualizationsEnabled = false;
mstrGridReport.prototype.effectiveView = 1;
mstrGridReport.ALL_UNITS = microstrategy.GRID_OTHER;
mstrGridReport.ROW_UNITS = microstrategy.GRID_OTHER + 1;
mstrGridReport.COL_UNITS = microstrategy.GRID_OTHER + 2;
mstrGridReport.METRIC_UNITS = microstrategy.GRID_OTHER + 3;
mstrGridReport.ALL_FORMAT_VALUES = 5;
mstrGridReport.prototype.nonUnitCount = mstrGridReport.METRIC_UNITS + 1;
mstrGridReport.prototype.gridUnitFormat = mstrGridReport.ALL_UNITS;
mstrGridReport.prototype.gridValueFormat = 2;
mstrGridReport.prototype.formatMap = null;
mstrGridReport.prototype.toolbarFormatMap = {
    FontFamily : "fontFamily",
    FontSize : "fontSize",
    Bold : "fontWeight",
    Italic : "fontStyle",
    Underline : "textDecoration",
    FillColor : "backgroundColor",
    FontColor : "color"
};
mstrGridReport.prototype.saveFolderId = null;
mstrGridReport.prototype.allVisList = null;
mstrGridReport.prototype.isVFEmpty = false;
mstrGridReport.FMT_TYPE_TITLE = "2";
mstrGridReport.OPACITY_MOUSE_OVER = "0.6";
mstrGridReport.OPACITY_MOUSE_OUT = "1";
mstrGridReport.OPACITY_SELECTED = "0.5";
mstrGridReport.SELECTOR_HILITE_CLASS = "gridSelectorHilite";
mstrGridReport.SELECTOR_MOUSE_OVER_CLASS = "gridSelectorMouseOver";
mstrGridReport.SELECTOR_MOUSE_OUT_CLASS = "";
mstrGridReport.ELEMENT_HILITE_CLASS = "gridElementHilite";
mstrGridReport.ELEMENT_HILITE_CLEAR_CLASS = "";
mstrGridReport.GRAPH_IMAGE = microstrategy.FOLDER_IMAGES + "graph.gif";
mstrGridReport.GRID_GRAPH_IMAGE = microstrategy.FOLDER_IMAGES
	+ "gridGraphli.gif";
mstrGridReport.GRID_IMAGE = microstrategy.FOLDER_IMAGES + "iconGrid2.gif";
mstrGridReport.heightAndWidthAttMap = {
    hm : "heightMode",
    wm : "widthMode",
    ht : "height",
    wd : "width"
};
mstrGridReport.COL_WIDTH_FIT_TO_DISPLAY = 1;
mstrGridReport.COL_WIDTH_FIT_TO_CONTENT = 2;
mstrGridReport.COL_WIDTH_FIXED = 3;
mstrGridReport.prototype.gridWidthInfo = {
    colScenario : mstrGridReport.COL_WIDTH_FIT_TO_DISPLAY,
    rowScenario : mstrGridReport.COL_WIDTH_FIT_TO_CONTENT,
    rowHeight : ""
};
mstrGridReport.SAME_PROMPT = 1;
mstrGridReport.DO_NOT_ANSWER = 2;
mstrGridReport.CLOSE = 3;
mstrGridReport.DYNAMIC = 4;
mstrGridReport.STATIC = 5;
mstrGridReport.CURRENT_UNIT = 6;
mstrGridReport.ALL_VALID_UNITS = 7;
mstrGridReport.USE_DEFAULT_ANSWER = 8;
mstrGridReport.DYNAMIC_OR_SAME_PROMPT = 9;
mstrGridReport.CONSTANT_PROMPT_TYPE = 1;
mstrGridReport.TARGET_VALUE = "tval";
mstrGridReport.GRAPH_FONT_STYLE = "gfs";
mstrGridReport.GRAPH_FONT_FAMILY = "gff";
mstrGridReport.GRAPH_FONT_SIZE = "gfz";
mstrGridReport.GRAPH_FONT_COLOR = "gfc";
mstrGridReport.APPLICABLE_PROPERTY = "ap";
mstrGridReport.INDEX = "index";
mstrGridReport.IS_FOR_ALL = "forAll";
mstrGridReport.prototype.initObjId = function() {
    try {
	var A = this.id.split("_");
	this.objId = A[1] || A[0];
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.isModifyGridInDoc = function() {
    return false;
};
mstrGridReport.isDesignMode = function() {
    return (microstrategy.DISPLAY_MODE == microstrategy.DESIGN_MODE);
};
mstrGridReport.isReport = function() {
    return (microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION);
};
mstrGridReport.isRWD = function() {
    return (microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION);
};
mstrGridReport.allowEdit = function() {
    return (microstrategy.EDIT_MODE == microstrategy.ALLOW_EDIT_MODE);
};
mstrGridReport.isViewMode = function() {
    return (microstrategy.DISPLAY_MODE == microstrategy.VIEW_MODE);
};
mstrGridReport.updateNow = function() {
    return (mstrGridReport.isDesignMode()) ? mstrUpdateManager.UPDATE_LATER
	    : mstrUpdateManager.UPDATE_NOW;
};
mstrGridReport.prototype.addBoneHandler = function(B, A) {
    return new Function("e", "return microstrategy.bone('" + B + "')." + A
	    + "(e);");
};
mstrGridReport.prototype.onload = function() {
    try {
	this.isGridStatic = false;
	mstrGridStatic.prototype.onload.call(this);
	this.disabled = false;
	this.isGridPostLoaded = false;
	this.commands = new mstrGridCommands(this);
	if (this.objId == null) {
	    this.initObjId();
	}
	this.useDNDMapping = this.isDndMapping();
	if (mstrGridReport.allowEdit()) {
	    this.dndHelper = new mstrDNDHelperImpl(this);
	}
	this.initGrid();
	if (this.fp != null) {
	    if (mstrGridReport.isDesignMode()) {
		this.useClientSideManipulations = true;
		this.checkQuickSearchEnabled();
	    }
	    this.initTemplate();
	}
	if (this.isReportRedoable || this.isReportUndoable) {
	    microstrategy.eventManager
		    .notifyOrphanBones("onupdatemanagerchange");
	}
	var D = this.useLockset;
	var H = window.__expdRowPos;
	var K = this.expdRowOrd;
	var I;
	var B;
	var J;
	if (typeof (K) !== "undefined") {
	    if (D) {
		B = document.getElementById(this.id + "divLock4");
		J = B.getElementsByTagName("table")[0];
	    } else {
		J = this.elem.getElementsByTagName("table")[0];
	    }
	    tBody = J.tBodies[0], rows = J.rows;
	    for ( var F = 0; F < rows.length; F++) {
		var A = rows[F];
		var C = A.getAttribute("o");
		if (C == K) {
		    I = A;
		    break;
		}
	    }
	    if (window.__expdRowPos) {
		delete window.__expdRowPos;
	    }
	}
	if (I) {
	    var G = function() {
		if (D) {
		    var M = getObjSumTop(I, B);
		    var L = M - H;
		    B.scrollTop = L;
		} else {
		    var M = getObjSumTopScrolled(I);
		    var L = M - H;
		    window.scrollTo(window.pageXOffset, L);
		}
	    };
	    window.setTimeout(G, 0);
	} else {
	    if (mstrGridReport.isReport()
		    && getObjSumTopScrolled(this.elem)
			    - document.documentElement.scrollTop < 0) {
		window.scrollTo(0, 0);
	    }
	}
	this.elem.onscroll = this.addBoneHandler(this.id, "onscroll");
	this.isGridBone = true;
	if (mstrGridReport.isReport() && mstr) {
	    this.initNotesIcon();
	}
	this.initIncrementalFetchBoxes();
	this.initReportQuickSearch();
    } catch (E) {
	microstrategy.errors.log(E);
    } finally {
	if (window.__expdRowPos) {
	    delete window.__expdRowPos;
	}
    }
};
mstrGridReport.prototype.checkQuickSearchEnabled = function() {
    try {
	this.quickSearchEnabled = this
		.isFeatureAvailable(microstrategy.FEATURE_REPORT_TEMPLATE_SEARCH)
		&& this.isGrid
		&& mstrGridReport.isReport()
		&& (microstrategy.useQuickSearch())
		&& !(this.isViewReport || this.isMdxCube || this.isXDACustomSQLReport)
		&& (mstrGridReport.isDesignMode() || !mstrGridReport
			.isDesignMode()
			&& microstrategy.enableGridViewSearch);
	return this.quickSearchEnabled;
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.initReportQuickSearch = function() {
    try {
	this.checkQuickSearchEnabled();
	if (!this.quickSearchEnabled) {
	    return;
	}
	var B = this;
	mstrGridReport.createQuickSearchPlaceHolder = function(D) {
	    var C = document.createElement("div");
	    C.setAttribute("ty", "qs");
	    if (D) {
		C.setAttribute("ax", D);
	    }
	    C.className = "dummy-searchbox";
	    C.onmousedown = function() {
		microstrategy.openReportQuickSearchBox(this);
	    };
	    return C;
	};
	mstrGridReport.attachSearchBoxPlaceholderHandler = function(G) {
	    var D = microstrategy.findChildrenWithAtt(G || B.elem, "div", "ty",
		    "qs");
	    for ( var E = 0, C = D.length; E < C; E++) {
		var F = D[E];
		F.className = "dummy-searchbox";
		F.onmousedown = function(H) {
		    microstrategy.openReportQuickSearchBox(this);
		};
	    }
	};
	mstrGridReport.fnGetQuickSearchWidget = function(D) {
	    var C = B.quickSearch || window.mstrmojo
		    && mstrmojo.all.ReportQuickSearchBox;
	    if (C) {
		return C;
	    } else {
		var C = mstrmojo
			.insert({
			    scriptClass : "mstrmojo.ReportQuickSearchBox",
			    id : "ReportQuickSearchBox",
			    quicksearch : B.quickSearchEnabled,
			    enableOptions : true,
			    visible : false,
			    itemSelectCallback : function(H, I) {
				if (!microstrategy.checkACL(H, [
					microstrategy.ACL_EXECUTE,
					microstrategy.ACL_USE ])) {
				    return;
				}
				B = microstrategy.bone(B.id);
				var G = function(M, K, N) {
				    if (!K) {
					K = M
						.getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_METRIC ? microstrategy.GRIDCELL_AXIS_COLUMNS
						: microstrategy.GRIDCELL_AXIS_ROWS;
				    } else {
					if (K == microstrategy.GRIDCELL_AXIS_METRICS
						&& (!B.gridStructureInfo.hasMetrics || M
							.getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_ATTRIBUTE)) {
					    K = microstrategy.GRIDCELL_AXIS_COLUMNS;
					}
				    }
				    var J = microstrategy.updateManager, L = B.commands
					    .exec("addTemplateUnit", M, K, N
						    || -1, []);
				    J.add(L);
				    if (microstrategy.DISPLAY_MODE == microstrategy.VIEW_MODE) {
					J.flushAndSubmitChanges();
				    }
				};
				if (!this.axis
					|| this.axis
					&& (this.axis != microstrategy.GRIDCELL_AXIS_PAGE_BY)
					|| this.axis
					&& (this.axis == microstrategy.GRIDCELL_AXIS_PAGE_BY)
					&& mstrGridReport.isDesignMode()) {
				    G(H, this.axis, this.depth);
				}
				if (this.axis
					&& (this.axis == microstrategy.GRIDCELL_AXIS_PAGE_BY)) {
				    if (mstrGridReport.isDesignMode()) {
					microstrategy.activeCXMenu = microstrategy
						.findChildWithAtt(
							B.elem,
							"td",
							microstrategy.HTMLATTR_DSS_ID,
							H
								.getAttribute(microstrategy.HTMLATTR_DSS_ID));
					B.processContextMenus("p");
				    } else {
					var E = microstrategy
						.bone("pbb_PageByStyle");
					E.useClientSideManipulations = false;
					E
						.addUnit(
							H,
							microstrategy.GRIDCELL_AXIS_PAGE_BY,
							1, null);
				    }
				}
				var F = microstrategy
					.bone("tbWkSet_ObjectBrowserReportWorkingSetStyle");
				F && F.tree.addNode(H);
			    }
			});
		if (C && !C.hasRendered) {
		    C.render();
		    document.body.appendChild(C.domNode);
		}
		B.quickSearch = C;
		return B.quickSearch;
	    }
	};
	microstrategy.openReportQuickSearchBox = function(C) {
	    var D = function() {
		var F = mstrGridReport.fnGetQuickSearchWidget(C);
		if (!F) {
		    return;
		}
		var E = F.domNode;
		if (C.firstChild) {
		    window.setTimeout(function() {
			F.set("visible", true);
			F.inputNode.focus();
		    }, 10);
		    return;
		}
		F.axis = C.getAttribute("ax") || F.axis;
		switch (parseInt(F.axis, 10)) {
		case -1:
		    F.set("objectType", F.objectType || "4");
		    break;
		default:
		    F.set("objectType", F.objectType || F.ALL_TYPES);
		    break;
		}
		if (F.suggestionPopup && F.suggestionPopup.containerNode) {
		    F.suggestionPopup.containerNode.scrollTop = 0;
		}
		C.appendChild(E);
		F.set("visible", false);
		window.setTimeout(function() {
		    F.set("visible", true);
		    F.clearSearch();
		    F.inputNode.focus();
		}, 20);
	    };
	    microstrategy.mojoLoader.loadWidget({
		bundle : "mojo-ros.js",
		callback : D
	    });
	};
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.isDndMapping = function() {
    try {
	if (!this.showColHeaders && !this.showRowHeaders) {
	    return false;
	}
	if (!this.isDndEnabled) {
	    return false;
	}
	if (!this
		.isFeatureAvailable(microstrategy.FEATURE_EMBEDDED_TEMPLATE_NODE)) {
	    return false;
	}
	var C = this;
	var A = function(D) {
	    return C.isFeatureAvailable(microstrategy["FEATURE_" + D]);
	};
	return (this.isModifyGridInDoc() || A("DESIGN_MODE")
		|| A("OBJECT_BROWSER_EDITOR") || A("WEB_PIVOT"));
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return false;
};
mstrGridReport.prototype.onpostload = function() {
    try {
	mstrGridStatic.prototype.onpostload.call(this);
	if (mstrGridReport.allowEdit()
		&& !(this.visualizationMode == 50 && this.docViewer && !this.docViewer
			.isEditableViewModeEplus())) {
	    this.selections = null;
	    this.initSelections(true);
	}
	this.rowAxis = this.colAxis = this.pagebyAxis = this.metricsAxis = null;
	this.notifySelectionChange("ongridselectionschange");
	if (microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION) {
	    microstrategy.redoLayout();
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.onreload = function(e) {
    try {
	mstrRWUnitBoneImpl.prototype.onreload.call(this, e);
	if (bIsW3C && mstrGridReport.isReport()) {
	    if (document.getElementById("gridStyleIFrame")) {
		var gridStyle = document.getElementById("gridStyle");
		var t = gridStyle && gridStyle.parentNode
			&& gridStyle.parentNode.removeChild(gridStyle);
	    }
	}
	if (!!this.graphSelections) {
	    var ps = eval("(" + this.graphSelections + ")");
	    this.setGraphSelected(ps.graphSelected);
	    if (this.graphSelected) {
		this.selectedGraphUnit = ps.graphSelectedUnit;
		this.selectedGraphTargetValue = ps.graphSelectedValue;
	    }
	}
    } catch (err) {
	microstrategy.errors.log(err);
    }
};
mstrGridReport.prototype.onrepostload = function(B) {
    try {
	mstrGridStatic.prototype.onrepostload.call(this);
	if (mstrGridReport.isReport()) {
	    this.observer.notifyAll("onReportReload");
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.onscroll = function(B) {
    try {
	stopEventBubbling(B || window.event);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.initGrid = function() {
    try {
	mstrGridStatic.prototype.initGrid.call(this);
	if (this.copyAxes) {
	    var J = microstrategy.bone(this.id.substr(0, this.id
		    .lastIndexOf("_"))
		    + "_0");
	    this.rowAxis = J.rowAxis;
	    this.colAxis = J.colAxis;
	    this.pagebyAxis = J.pagebyAxis;
	    this.metricsAxis = J.metricsAxis;
	    this.copyAxes = false;
	}
	var I = this.gridStructureInfo;
	if (!this.gridStructureInfo) {
	    if (!this.isGrid && this.isGraph) {
		var B = this.elem.id;
		var E = B.slice(0, B.lastIndexOf("_"));
		var C = microstrategy.bone(E);
		if (C && C.gridStructureInfo) {
		    I = this.gridStructureInfo = C.gridStructureInfo;
		} else {
		    this.needsGridInfo = true;
		}
	    }
	}
	if (!I) {
	    I = this.gridStructureInfo = new mstrGridInfo(this);
	    I.init(this.elem);
	}
	if (this.isGrid && this.isGraph) {
	    var E = this.elem.id;
	    var B = E + "_graph";
	    var D = microstrategy.bone(B);
	    if (D && D.needsGridInfo) {
		D.gridStructureInfo = this.gridStructureInfo;
		D.needsGridInfo = false;
	    }
	}
	if (this.shouldInitMask()) {
	    this.initMask();
	}
	if (this.isGridBone || mstrGridReport.isDesignMode()) {
	    if (!I.emptyCase) {
		var G = this.elem.getElementsByTagName("table");
		if (G) {
		    this.gridTable = G[0];
		    for (i = 0; i < G.length; i++) {
			G[i].getElementsByTagName("tbody")[0].onmousedown = this
				.addBoneHandler(this.id, "onmousedown");
			if (!mstrGridReport.isDesignMode()) {
			    G[i].getElementsByTagName("tbody")[0].onclick = this
				    .addBoneHandler(this.id, "onclick");
			}
		    }
		}
		this.doColWidths = (!mstrGridReport.isDesignMode()
			&& I.enableColWidths() && this
			.isFeatureAvailable("enable-resize-columns-rows"));
		if (this.doColWidths && this.isGrid
			&& this.isFeatureAvailable("grid-layout")) {
		    var H = this;
		    window.setTimeout(function A() {
			H.initColResize();
		    }, 0);
		}
		if (this.isOutlineMode) {
		    this.outlineMode = new mstrOutlineModeImpl(
			    parseInt(this.outlineModeStartRow),
			    parseInt(this.outlineModeEndRow),
			    this.outlineModeExpandImage,
			    this.outlineModeContractImage,
			    this.outlineModeLevel, this.outlineModeMaxLevels,
			    this);
		}
		var H = this;
		window.setTimeout(function() {
		    if (mstr.utils.ISFF && H.elem
			    && H.elem.offsetHeight > 32768) {
			H.elem.style.overflowX = "";
		    }
		}, 0);
	    }
	}
	this.setDsetId(this.dSetId);
    } catch (F) {
	microstrategy.errors.log(F);
    }
};
mstrGridReport.prototype.initNotesIcon = function() {
    try {
	var A = mstr.$obj("NotesIconModel_model");
	if (A && !this.needSaveBeforeNotes) {
	    A.set("objectID", this.reportID);
	    A.set("objectType", this.objTypeReport);
	}
	if (this.needSaveBeforeNotes
		|| (microstrategy.bone("accordion_AccordionTabManagerStyle") && microstrategy
			.bone("accordion_AccordionTabManagerStyle").currentTabName == microstrategy.ACCORDION_REPORT_NOTES_PANEL)) {
	    var B = mstr.$obj("NotesIconView_view");
	    if (B) {
		B.set("visible", false);
	    }
	} else {
	    if (!this.inReload && A) {
		A.execCheck();
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.initMapper = function() {
    try {
	if (this.mapper) {
	    return;
	}
	if (this.useDNDMapping) {
	    this.getMapper();
	    this.maskArea = this.elem;
	    this.maskFor = microstrategy.DSSTYPE_METRIC
		    + microstrategy.HTMLATTR_MASKFOR_DELIM
		    + microstrategy.DSSTYPE_ATTRIBUTE;
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.getMapper = function() {
    try {
	this.mapper = new mstrGridMapperImpl();
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.initTemplate = function() {
    try {
	this.template = new mstrTemplateImpl();
	this.template.onload(this.gridTable, this, this.fp);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.addAction = function(F, G, E, C, A, D) {
    E = E || this.beanPath;
    C = C || [];
    A = A || [];
    var B = this.um.createActionObject(F, G, E, C, A, []);
    if (D) {
	D.push(B);
    } else {
	this.um.add([ B ]);
	this.um.flushAndSubmitChanges();
    }
};
mstrGridReport.prototype.handleDatasetExplorer = function(C) {
    try {
	var B = C.items[0];
	this.addAction(this.elem, mstrUpdateManager.ADD_DATASET_AND_TEMPLATE,
		mstr.$obj("mstrPageInfo").get("beanPath"), [ "2048032",
			"2048033", "2048012", "2048135" ], [ B.dssid, B.tp,
			this.objId, (C.formatting) ? 1 : 2 ]);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.onlockscroll = function() {
    try {
	if (this.colWidths != null) {
	    this.colWidths.syncCols();
	}
	if (this.mask != null) {
	    this.mask.onmaskedobjectresize();
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.onresize = function() {
    try {
	if (this.mask != null) {
	    this.mask.onmaskedobjectresize();
	}
	if (mstr.utils.ISIE8 || mstr.utils.ISIE9 || mstr.utils.ISIE10
		|| mstr.utils.ISW3CIE) {
	    var C = this;
	    window.setTimeout(function() {
		C.resizeLockSet(true);
	    }, 10);
	} else {
	    this.resizeLockSet();
	}
	if (this.colWidths) {
	    this.colWidths.syncCols();
	}
	if (mstr.utils.ISIE6 && mstrGridReport.isReport() && this.image
		&& !mstrGridReport.isDesignMode()) {
	    var A = microstrategy.bone("ReportFrame").elem;
	    if (document.body.clientWidth > mstr.utils.BoxModel
		    .getBrowserWindowWidth(document)) {
		A.style.width = Math.max(mstr.utils.BoxModel
			.getBrowserWindowWidth(document)
			- mstr.utils.BoxModel.getElementSumOffsetLeft(document
				.getElementById("reportViewAllModes")),
			this.image.clientWidth)
			+ "px";
	    } else {
		A.style.width = "auto";
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.copyBoneProperties = function(B) {
    try {
	if (B) {
	    this
		    .setFeature(
			    microstrategy.FEATURE_EMBEDDED_TEMPLATE_NODE,
			    B
				    .isFeatureAvailable(microstrategy.FEATURE_EMBEDDED_TEMPLATE_NODE));
	    if (this.gridStructureInfo && B.gridStructureInfo) {
		this.gridStructureInfo.dataSetId = B.gridStructureInfo.dataSetId;
	    }
	    this.editorProperties = B.editorProperties;
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.onwinresize = function() {
    try {
	if (this.isGridPostLoaded) {
	    this.ondialogresize();
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.ondocumentclick = function(D) {
    try {
	var B = this.selections;
	window.setTimeout(this.resetGridUnitSelections, 0);
	var A = B && B.ondocumentclick && B.ondocumentclick(D);
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.desp = function(A) {
    return microstrategy.descriptors.getDescriptor(A);
};
mstrGridReport.prototype.onObjectBrowserTabChange = function(A) {
    try {
	this.observer.notifyAll("onObjectBrowserTabChange");
	if (mstrGridReport.isDesignMode()) {
	    return;
	}
	var V = this.gridStructureInfo;
	if ((V.isEmptyTemplate && V.metricsAxis != microstrategy.GRIDCELL_AXIS_PAGE_BY)
		|| !this.showEmptyAxis || !V.hasEmptyAxis() || this.noData) {
	    return;
	}
	var G = false;
	var U, c, P, B;
	var H = function(d) {
	    return document.createTextNode(mstrGridReport.desp(d));
	};
	var O = function(d) {
	    return d.getElementsByTagName("tbody")[0].rows;
	};
	if (this.lockSet) {
	    var X = this.lockSet.quadrants;
	    U = X[0] ? O(X[0]) : null;
	    c = X[1] ? O(X[1]) : null;
	    P = X[2] ? O(X[2]) : null;
	    B = X[3] ? O(X[3]) : null;
	    G = true;
	} else {
	    U = O(this.elem);
	}
	var C, M, a, Y, Z, W;
	var R = (this.showAttForms) ? "totalSize" : "size";
	var T = this.getFixedRows();
	var F = T == U.length ? 1 : U.length - T;
	var D = function() {
	    W = [ U, c, B, P ];
	    for (a = 0; a < 4; a++) {
		if (W[a]) {
		    M = W[a][0].insertCell(0);
		    if (T > 0) {
			M.rowSpan = T;
		    }
		    M.className = "r-rowTitle r-cell";
		    M.innerHTML = "&nbsp;";
		}
	    }
	};
	var K = function(g) {
	    W = [ U, B ];
	    for (a = 0; a < 2; a++) {
		if (W[a]) {
		    C = g ? W[a][0].parentNode.insertRow(W[a].length) : W[a][T];
		    M = C.insertCell(0);
		    if (F > 0) {
			M.rowSpan = F;
		    }
		    M.className = "r-rowHeader r-cell";
		    M.appendChild(H("4500"));
		    if (g) {
			M = U[T].insertCell(1);
			var e = U[V.colAxis[R]() - 1];
			if (e && e.cells) {
			    var d = e.cells.length;
			    if (bIsIE8 || bIsIE6 || bIsIE7 && d > 1000) {
				M.colSpan = 250;
			    } else {
				M.colSpan = d;
			    }
			}
			M.className = "r-metricValue r-cell";
			M.appendChild(H("4501"));
		    }
		}
	    }
	};
	var L = this;
	var N = function(d) {
	    if (!L.gridTable) {
		return;
	    }
	    var e = L.gridTable.getElementsByTagName("colgroup")[0];
	    var g;
	    if (d) {
		g = e.firstChild;
	    } else {
		g = e.lastChild;
	    }
	    if (g) {
		e.removeChild(g);
	    }
	};
	var Q = function(d) {
	    if (!L.gridTable) {
		return;
	    }
	    var e = L.gridTable.getElementsByTagName("colgroup")[0];
	    var g = document.createElement("col");
	    g.setAttribute("key", "3");
	    if (d) {
		e.insertBefore(g, e.firstChild);
	    } else {
		e.appendChild(g);
	    }
	};
	var E = function(d) {
	    return (d && d.cells && d.cells.length > 0);
	};
	switch (A) {
	case "workingSet":
	case "objectBrowser":
	    if (this.emptyAxisVisible) {
		return;
	    }
	    if (V.rowAxis[R]() == 0 && V.metricAxis[R]() == 0) {
		Q(true);
		D();
		K(true);
	    } else {
		if (V.rowAxis[R]() == 0) {
		    Q(true);
		    D();
		    K();
		}
		if (V.metricAxis[R]() == 0) {
		    Q();
		    var J = V.colAxis[R]();
		    if (J == 0) {
			W = [ U, P ];
			for (a = 0; a < 2; a++) {
			    if (W[a]) {
				M = W[a][0].insertCell(W[a][0].cells.length);
				M.className = "r-colHeader r-cell";
				M.appendChild(H("4502"));
			    }
			}
			if (U[1]) {
			    M = U[1].insertCell(U[1].cells.length);
			    M.rowSpan = U.length - 1;
			    M.className = "r-metricValue r-cell";
			    M.appendChild(H("4501"));
			}
		    } else {
			C = U[J];
			M = C.cells[C.cells.length - 1];
			if (M.rowSpan == 1) {
			    for (a = J + 1, Z = U.length; a < Z; a++) {
				C = U[a];
				C.removeChild(C.cells[C.cells.length - 1]);
			    }
			    M.rowSpan = U.length - V.colAxis[R]();
			}
			M.className = "r-metricValue r-cell";
			M.appendChild(H("4501"));
		    }
		}
	    }
	    this.emptyAxisVisible = true;
	    break;
	default:
	    if (!this.emptyAxisVisible) {
		return;
	    }
	    if (V.rowAxis[R]() == 0) {
		N(true);
		W = [ U, c, P, B ];
		for (a = 0; a < 4; a++) {
		    if (W[a] && E(W[a][0])) {
			W[a][0].removeChild(W[a][0].cells[0]);
		    }
		}
		W = [ U, B ];
		for (a = 0; a < 2; a++) {
		    if (W[a]) {
			C = W[a][T];
			var b;
			if (E(C)) {
			    b = C && C.removeChild(C.cells[0]);
			}
		    }
		}
	    }
	    if (V.rowAxis[R]() == 0 && V.metricAxis[R]() == 0) {
		W = [ U, B ];
		for (a = 0; a < 2; a++) {
		    if (W[a]) {
			C = W[a][W[a].length - 1];
			C.parentNode.removeChild(C);
		    }
		}
	    } else {
		if (V.metricAxis[R]() == 0) {
		    if (V.colAxis[R]() == 0) {
			N();
			W = [ U, P ];
			for (a = 0; a < 2; a++) {
			    if (W[a]) {
				C = W[a][0];
				C.removeChild(C.cells[C.cells.length - 1]);
			    }
			}
			C = U[1];
			if (E(C)) {
			    C.removeChild(C.cells[C.cells.length - 1]);
			}
		    } else {
			C = U[V.colAxis[R]()];
			M = C.cells[C.cells.length - 1];
			while (M.hasChildNodes()) {
			    M.removeChild(M.lastChild);
			}
		    }
		}
	    }
	    this.emptyAxisVisible = false;
	    break;
	}
	if (G) {
	    W = [ U, c, B, P ];
	    for (a = 0; a < 4; a++) {
		if (W[a]) {
		    var S = W[a][0].parentNode.parentNode;
		    S.style.tableLayout = "auto";
		    S.style.width = "auto";
		}
	    }
	}
	this.onresize();
    } catch (I) {
	microstrategy.errors.log(I);
    }
};
mstrGridReport.prototype.ondialogresize = function(B) {
    try {
	if (this.gridWidthInfo != null
		&& this.gridWidthInfo.colScenario == mstrGridReport.COL_WIDTH_FIXED) {
	    this.resizeLockSet();
	} else {
	    this.onresize(B);
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.onQuickSwitchClick = function(A) {
};
mstrGridReport.isMetric = function(A, B) {
    var C = function(D, E) {
	E = !E ? "" : E + "_";
	return (D == microstrategy["DSSTYPE_" + E + "METRIC"]);
    };
    return (C(A) || C(A, "USER") || C(A, "USER_SUMMARY") || (B
	    && A == microstrategy.DSSTYPE_PROMPT && mstrGridReport
	    .isDesignMode()));
};
mstrGridReport.prototype.onnotifydrag = function(F, I, E) {
    try {
	if (this.mask == null || this.disabled || !this.useDNDMapping) {
	    return null;
	}
	var G = null;
	var K = true;
	if (I == this || I.type == microstrategy.OBJTYPE_PAGE_BY
		|| I.type == microstrategy.OBJTYPE_OBJBROWSER) {
	    if (!this.isFeatureAvailable(microstrategy.FEATURE_WEB_PIVOT)) {
		return null;
	    }
	    G = E[0];
	    var B = (mstrGridReport.isRWD() && this.dSetId) ? this.dSetId
		    : null;
	    for ( var J in F) {
		var H = new mstrObjectInfoImpl(F[J]);
		if (I.type == microstrategy.OBJTYPE_OBJBROWSER) {
		    if (H.dssType == microstrategy.DSSTYPE_RPT_DEFINITION) {
			if (mstrGridReport.isReport()
				|| (mstrGridReport.isRWD() && E.length > 1)) {
			    return null;
			}
		    } else {
			if (!this
				.isFeatureAvailable(microstrategy.FEATURE_MODIFY_GRID_LEVEL_IN_DOCUMENTS)) {
			    return null;
			}
		    }
		    if (H.dssType == microstrategy.DSSTYPE_FILTER
			    && H.dssSubType != microstrategy.DSSTYPE_CUSTOM_GROUP) {
			return null;
		    }
		    if (H.dssType == microstrategy.DSSTYPE_ATTRIBUTE_FORM
			    && !this
				    .isFeatureAvailable(microstrategy.FEATURE_SET_ATTRIBUTEFORM_DISPLAY)) {
			return null;
		    }
		    if (H.dssType == microstrategy.DSSTYPE_PROMPT
			    && H.dssSubType != microstrategy.DSSSUB_TYPE_PROMPT_OBJECTS) {
			return null;
		    }
		    if (!microstrategy
			    .checkACL(F[J], [ microstrategy.ACL_USE ])) {
			return null;
		    }
		    if (mstrGridReport.isRWD()
			    && microstrategy.bones.rwb_viewer
				    .isFeatureAvailable(microstrategy.FEATURE_SINGLE_SOURCE_GRID)) {
			if (B == null) {
			    B = H.dSetId;
			}
			if (H.dssType != microstrategy.DSSTYPE_RPT_DEFINITION
				&& H.dSetId != B) {
			    return null;
			}
		    }
		    G = F[J].getAttribute(microstrategy.HTMLATTR_OBJTYPE);
		    if (G != null && G == microstrategy.OBJTYPE_ELEMENT) {
			return null;
		    }
		    if (mstrGridReport.isReport() && this.isMdxCube
			    && !this.canAddMDXUnit(F[J])) {
			return null;
		    }
		}
		if (K && !mstrGridReport.isMetric(H.dssType)) {
		    K = false;
		}
	    }
	    E.sort(function(M, L) {
		return parseInt(M) - parseInt(L);
	    });
	    if (E[0] == E[E.length - 1]) {
		G = E[0];
	    } else {
		G = (K) ? microstrategy.DSSTYPE_METRIC
			: microstrategy.DSSTYPE_ATTRIBUTE;
	    }
	}
	if (G == null) {
	    return null;
	}
	switch (G) {
	case microstrategy.DSSTYPE_TEMPLATE:
	    G = mstrMaskMappedImpl.MASK_TYPE;
	    break;
	case microstrategy.DSSTYPE_METRIC:
	case microstrategy.DSSTYPE_USER_METRIC:
	case microstrategy.DSSTYPE_USER_SUMMARY_METRIC:
	    G = microstrategy.DSSTYPE_METRIC;
	    break;
	case microstrategy.DSSTYPE_RPT_DEFINITION:
	    G = microstrategy.DSSTYPE_RPT_DEFINITION;
	    break;
	default:
	    G = microstrategy.DSSTYPE_ATTRIBUTE;
	    break;
	}
	if (this.gridStructureInfo.emptyCase
		|| G == microstrategy.DSSTYPE_RPT_DEFINITION) {
	    G = mstrMaskMappedImpl.MASK_TYPE;
	}
	microstrategy.eventManager.notifyOrphanBones("onforcerepaint");
	this.dragSource = I;
	if (!this.mask.isLoaded) {
	    var A = this.mask;
	    var D = this;
	    if (mstrGridReport.isReport()) {
		this.initializeMapper(A, G);
	    } else {
		this.elem.onmouseover = function() {
		    D.elem.onmouseover = null;
		    D.initializeMapper(A, G);
		};
	    }
	} else {
	    this.mask.toggle(true, G);
	}
	this.dragSource = I;
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return null;
};
mstrGridReport.prototype.onnotifydragend = function() {
    try {
	if (this.mask && this.mask.isLoaded && this.mask.toggle) {
	    this.mask.toggle(false);
	    microstrategy.eventManager.notifyOrphanBones("onforcerepaint");
	} else {
	    if (this.dragSource) {
		var C = this.dragSource;
		var A = C.type;
		if (C == this || A == microstrategy.OBJTYPE_PAGE_BY
			|| A == microstrategy.OBJTYPE_OBJBROWSER) {
		    this.elem.onmouseover = null;
		}
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.initializeMapper = function(B, A) {
    if (microstrategy.midx == undefined) {
	microstrategy.midx = 0;
    }
    this.mask.midx = microstrategy.midx++;
    this.initMapper();
    B.onload(this);
    B.toggle(true, A);
    this.initializeDragDisplay();
};
mstrGridReport.prototype.adjustGridWidth = function(D) {
    try {
	if ((mstr.utils.Arrays.find([ "0", "2" ], D) > -1) && this.isGrid
		&& this.gridTable) {
	    var E = "auto";
	    var B = "auto";
	    if (D == "0") {
		if (this.gridWidthInfo.colScenario != "2") {
		    E = "fixed";
		    B = "100%";
		} else {
		    return true;
		}
	    }
	    var A = this.gridTable.style;
	    A.tableLayout = E;
	    A.width = B;
	}
	return true;
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrGridReport.prototype.processRedoUndo = function(A) {
    try {
	if (this.um.anyNonStatic(true)) {
	    this.um[A.toLowerCase()]();
	} else {
	    if (this["isReport" + A + "able"]) {
		this.addAction(this.elem, mstrUpdateManager["REPORT_"
			+ A.toUpperCase()]);
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.processRedo = function() {
    this.processRedoUndo("Redo");
};
mstrGridReport.prototype.processUndo = function() {
    this.processRedoUndo("Undo");
};
mstrGridReport.prototype.commonRedoUndoCode = function(D, G) {
    try {
	var E = this.colWidths;
	switch (D.id) {
	case mstrUpdateManager.RESIZE_SINGLE_COLUMN:
	    if (this.objId == D.cachedArray.objId
		    && E
		    && (G == "undo" || this.gridWidthInfo.colScenario == mstrGridReport.COL_WIDTH_FIXED)) {
		var K = D.args[0];
		if (K == "allcolumns") {
		    for ( var F = 0, A = E.widths.length; F < A; F++) {
			E.setColWidthByIndex(F, (G == "undo") ? D.args[1][F]
				: D.args[1], E.getColWidthByIndex(F));
		    }
		} else {
		    E.setColWidthByKey(K, D.args[1], E.getColWidthByKey(K));
		}
		E.syncCols();
	    }
	    break;
	case mstrUpdateManager.SET_RESIZE_ROW_SCENARIO:
	case mstrUpdateManager.SET_RESIZE_COLUMNS_SCENARIO:
	    if (this.objId != D.cachedArray.objId || !E) {
		break;
	    }
	    var I = (D.id == mstrUpdateManager.SET_RESIZE_ROW_SCENARIO);
	    var J = [ D.args[0] ];
	    if (I) {
		J.push(D.args[1]);
	    }
	    E[(I) ? "setRowHeightMode" : "setColWidthsMode"].apply(E, J);
	    this.gridWidthInfo[(I) ? "rowScenario" : "colScenario"] = D.args[0];
	    E.syncCols();
	    break;
	case mstrUpdateManager.PIVOT_TEMPLATE_UNIT:
	case mstrUpdateManager.PIVOT_TEMPLATE_METRIC:
	case mstrUpdateManager.ADD_TEMPLATE_UNIT:
	case mstrUpdateManager.ADD_TEMPLATE_METRIC:
	case mstrUpdateManager.REMOVE_TEMPLATE_UNIT:
	case mstrUpdateManager.REMOVE_TEMPLATE_METRIC:
	case mstrUpdateManager.ADD_FORM:
	case mstrUpdateManager.REMOVE_FORM:
	case mstrUpdateManager.SWAP_TEMPLATE_AXES:
	    if (D.cachedArray.id == this.id && this.useClientSideManipulations
		    && this.template) {
		if (D.id != mstrUpdateManager.SWAP_TEMPLATE_AXES || this.isGrid
			|| this.zonesEditor) {
		    this.template[G](D);
		    this.onresize();
		}
	    }
	    break;
	case mstrUpdateManager.PIVOT_MULTIPLE_UNITS:
	case mstrUpdateManager.REMOVE_MULTIPLE_UNITS:
	    var C = D.cachedArray;
	    if (C && C.id == this.id && this.useClientSideManipulations
		    && this.template) {
		var H = C.list;
		if (H && H.length) {
		    if (G == "undo") {
			H.reverse();
		    }
		    for ( var F = 0, A = H.length; F < A; F++) {
			H[F].args = H[F].oldArgs;
			this.template[G](H[F]);
		    }
		    if (G == "undo") {
			H.reverse();
		    }
		    this.onresize();
		}
	    }
	    break;
	}
	return true;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrGridReport.prototype.redoundo = function(A, C) {
    try {
	return this.commonRedoUndoCode(C, A);
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrGridReport.prototype.onredo = function(A) {
    this.redoundo("redo", A);
};
mstrGridReport.prototype.onundo = function(A) {
    this.redoundo("undo", A);
};
mstrGridReport.prototype.ondrop = function(b, I) {
    try {
	var T = I.getItems();
	var D = b.getAttribute(microstrategy.HTMLATTR_POINTS_TO);
	if (this.dragSource && D != null) {
	    var Q = this.um;
	    var d = [];
	    var c = this.gridStructureInfo;
	    var E = toDepth = toSubDepth = 1;
	    if (!c.emptyCase && D != this.id) {
		var C = D.split(",");
		if (C.length < 2) {
		    return null;
		}
		E = parseInt(C[0]);
		toDepth = parseInt(C[1]);
		toSubDepth = parseInt(C[2]);
		if (isNaN(toSubDepth)) {
		    toSubDepth = 1;
		}
	    }
	    if (this.dragSource.type == microstrategy.OBJTYPE_OBJBROWSER) {
		var N = I.isMulti();
		var O = (N) ? I.isOnlyMetrics() : true;
		var X = false;
		var H = c.metricAxis.size() + 1;
		for ( var Y = T.length - 1; Y >= 0; Y--) {
		    var a = T[Y].getAttribute(microstrategy.HTMLATTR_DSS_TYPE);
		    var G = T[Y].getAttribute(microstrategy.HTMLATTR_OBJTYPE);
		    if (G == microstrategy.OBJTYPE_ELEMENT) {
			continue;
		    }
		    if (a == microstrategy.DSSTYPE_TEMPLATE && D == this.id) {
			d = this.replaceTemplate(T[Y], true, d);
			continue;
		    }
		    if (N && !O && c.hasMetrics && (mstrGridReport.isMetric(a))) {
			if (!c.findUnit(T[Y]
				.getAttribute(microstrategy.HTMLATTR_DSS_ID))) {
			    d = this.addUnit(T[Y],
				    microstrategy.GRIDCELL_AXIS_METRICS, H, 1,
				    d);
			}
		    } else {
			var Z = toDepth;
			var W = toSubDepth;
			var P = (a == microstrategy.DSSTYPE_ATTRIBUTE_FORM) ? T[Y]
				.getAttribute(microstrategy.HTMLATTR_ATTRIBUTE_ID)
				: T[Y]
					.getAttribute(microstrategy.HTMLATTR_DSS_ID);
			if (toSubDepth > 1) {
			    if (a != microstrategy.DSSTYPE_ATTRIBUTE_FORM) {
				Z++;
				W = 1;
			    } else {
				var B = c.getUnit(E, toDepth, 1);
				if (B != null) {
				    if (P != B.parentDssId) {
					Z++;
					W = 1;
				    } else {
					if (this.showAttForms) {
					    var F = c.findUnit(P);
					    if (F != null && F.hasAttForms()) {
						var L = F
							.getSubUnit(T[Y]
								.getAttribute(microstrategy.HTMLATTR_DSS_ID));
						if (L != null && L.subDepth < W) {
						    W--;
						}
					    }
					}
				    }
				}
			    }
			}
			var A = c.findUnit(P);
			if (A != null) {
			    if (A.axis == E && A.depth < Z) {
				if (W > 1) {
				    W = 1;
				} else {
				    Z--;
				}
			    }
			}
			if (mstrGridReport.isMetric(a)) {
			    if (c.hasMetrics) {
				if (E != microstrategy.GRIDCELL_AXIS_METRICS) {
				    if (!X
					    && (E != c.metricsAxis || Z != c.metricsDepth)) {
					var S = c.getUnit(c.metricsAxis,
						c.metricsDepth, 1);
					if (S) {
					    var M = d.length;
					    d = this.pivotUnit(S, E, Z, 1, d);
					    var K = c.buildGridUnitInfo(T[Y],
						    E, Z, W);
					    if (mstrGridReport.isRWD()
						    && K.dssSetId != c.dataSetId
						    && d.length > M) {
						d = this.changeGridDataSource(
							K.dssSetId, d);
					    }
					    H = Z;
					}
					X = true;
				    }
				    if (c
					    .findUnit(T[Y]
						    .getAttribute(microstrategy.HTMLATTR_DSS_ID)) == null) {
					d = this
						.addUnit(
							T[Y],
							microstrategy.GRIDCELL_AXIS_METRICS,
							H, 1, d);
				    }
				} else {
				    d = this
					    .addUnit(
						    T[Y],
						    microstrategy.GRIDCELL_AXIS_METRICS,
						    Z, 1, d);
				}
			    } else {
				if (N
					&& !O
					&& E != microstrategy.GRIDCELL_AXIS_COLUMNS) {
				    d = this
					    .addUnit(
						    T[Y],
						    microstrategy.GRIDCELL_AXIS_COLUMNS,
						    c.colAxis.size() + 1, 1, d);
				} else {
				    d = this.addUnit(T[Y], E, Z, W, d);
				}
			    }
			} else {
			    d = this.addUnit(T[Y], E, Z, W, d);
			}
		    }
		}
	    } else {
		if (this.dragSource == this
			|| this.dragSource.type == microstrategy.OBJTYPE_PAGE_BY
			|| this.dragSource.type == microstrategy.OBJTYPE_GRAPH_ZONES) {
		    var V = this.getObjInfoList(T);
		    if (V.length == 1) {
			var R = V[0];
			var U = this.computeDepthsForPivot(R, E, toDepth,
				toSubDepth);
			d = this.pivotUnit(R, E, U.depth, U.subDepth, d);
		    } else {
			d = this.pivotUnits(V, E, toDepth, toSubDepth, d, true);
		    }
		}
	    }
	    if (d.length > 0) {
		Q.add(d);
		if (this.selections) {
		    this.selections.clearAll(true);
		}
		if (this.flush) {
		    Q.flushAndSubmitChanges();
		    this.flush = false;
		} else {
		    if (this.useClientSideManipulations) {
			microstrategy.eventManager.notifyOrphanBones(
				"ongridstructurechange", c);
		    } else {
			if (this.dragSource
				&& this.dragSource.type == microstrategy.OBJTYPE_GRAPH_ZONES) {
			    togglePulldowns(this.dragSource.elem, true);
			}
			Q.flushAndSubmitChanges();
		    }
		}
	    }
	}
	return false;
    } catch (J) {
	microstrategy.errors.log(J);
	return false;
    }
};
mstrGridReport.prototype.computeDepthsForPivot = function(B, E, D, F) {
    var A = {
	depth : D,
	subDepth : F
    };
    var H = D;
    var C = F;
    if (F > 1) {
	if (B.dssType == microstrategy.DSSTYPE_ATTRIBUTE_FORM
		&& this.showAttForms && B.axis == E && B.depth == H
		&& B.subDepth < C) {
	    C--;
	} else {
	    H++;
	    C = 1;
	}
    }
    if (B.axis == E && B.depth < H) {
	if (C > 1) {
	    C = 1;
	} else {
	    H--;
	}
    }
    var G = this.gridStructureInfo.getMaxAxisPosition(E);
    if (H > G || H == -1) {
	H = G;
    }
    A.depth = H;
    A.subDepth = C;
    return A;
};
mstrGridReport.prototype.sortByAxisDepth = function(D, C) {
    try {
	var F = this.gridStructureInfo;
	var B = F.getGridUnitInfo(D);
	var H = F.getGridUnitInfo(C);
	var A = (B.subtype == microstrategy.OBJTYPE_METRIC) ? F.metricsAxis
		: B.axis;
	var G = (H.subtype == microstrategy.OBJTYPE_METRIC) ? F.metricsAxis
		: H.axis;
	if (A == G) {
	    return this.sortByDepth(B, H);
	}
	return ((A < G) ? -1 : ((A > G) ? 1 : 0));
    } catch (E) {
	microstrategy.errors.log(E);
	return null;
    }
};
mstrGridReport.prototype.sortByDepth = function(C, B) {
    try {
	var A = C.depth;
	var E = B.depth;
	return ((A < E) ? -1 : ((A > E) ? 1 : 0));
    } catch (D) {
	microstrategy.errors.log(D);
	return null;
    }
};
mstrGridReport.prototype.pivotUnits = function(O, C, J, U, T, G) {
    try {
	var R = "";
	var M = this.um;
	var A = mstrGridReport.updateNow();
	var B = 0;
	var S = this.gridStructureInfo;
	var F = S.getMaxAxisPosition(C);
	if (J == -1) {
	    J = F;
	}
	for ( var N = 0; N < O.length; N++) {
	    R += this.buildPivotingSrc(O[N]);
	    if (O[N].dssType == microstrategy.DSSTYPE_ATTRIBUTE_FORM) {
		B++;
	    }
	}
	if (R.length > 0) {
	    var L = {
		depth : J,
		subDepth : U
	    };
	    if (G) {
		L = this.computeDepthsForPivot(O[0], C, J, U);
	    }
	    var H = L.depth;
	    var Q = C;
	    if (H == J && L.subDepth > 1) {
		if (B == O.length) {
		    Q = 0;
		    H = L.subDepth;
		}
	    }
	    var D = null;
	    if (A == mstrUpdateManager.UPDATE_LATER) {
		var P = [];
		var D = {
		    id : this.id,
		    list : P
		};
		var I = this;
		var K = function(V) {
		    var W = O[V];
		    P = I.pivotUnit(W, C, L.depth, L.subDepth, P);
		};
		if (this.pivotClientSideInReverseOrder(O, Q, H, U)) {
		    for (i = O.length - 1; i >= 0; --i) {
			K(i);
		    }
		} else {
		    for (i = 0; i < O.length; ++i) {
			K(i);
		    }
		}
		D.list = P;
	    }
	    T.push(M.createActionObject(null,
		    mstrUpdateManager.PIVOT_MULTIPLE_UNITS, this.beanPath, [
			    "4110", "4213", "4008", "4009" ], [ A, R, Q, H ],
		    null, D));
	}
	return T;
    } catch (E) {
	microstrategy.errors.log(E);
	return null;
    }
};
mstrGridReport.prototype.pivotClientSideInReverseOrder = function(E, B, A, D) {
    if (E && E.length) {
	var C = E[0];
	switch (C.dssType) {
	case microstrategy.DSSTYPE_METRIC:
	case microstrategy.DSSTYPE_USER_METRIC:
	case microstrategy.DSSTYPE_USER_SUMMARY_METRIC:
	case microstrategy.DSSTYPE_ATTRIBUTE_FORM:
	    if (C.depth < A) {
		return false;
	    }
	    break;
	case microstrategy.DSSTYPE_ATTRIBUTE:
	    if (C.axis == B && C.depth < A) {
		return false;
	    }
	    break;
	default:
	    return true;
	}
    }
    return true;
};
mstrGridReport.prototype.buildPivotingSrc = function(A) {
    try {
	var B = ",";
	var C = A.dssType;
	var E = null;
	if (A.subtype == microstrategy.SUBOBJTYPE_METRIC) {
	    E = A.depth;
	} else {
	    if (A.subtype == microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM) {
		E = A.parentDssId + B + A.attFormId;
	    } else {
		C = A.isMetricTemplateUnit ? "-1" : A.dssType;
		E = A.axis + B + A.depth;
	    }
	}
	return C + B + E + "!";
    } catch (D) {
	microstrategy.errors.log(D);
	return null;
    }
};
mstrGridReport.prototype.buildDeletingFromReportSrc = function(A) {
    try {
	var B = ",";
	var C = A.dssType;
	var E = null;
	if (A.subtype == microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM) {
	    E = A.parentDssId + B + A.attFormId;
	} else {
	    C = A.isMetricTemplateUnit ? "-1" : A.dssType;
	    E = A.dssId;
	}
	return C + B + E + "!";
    } catch (D) {
	microstrategy.errors.log(D);
	return null;
    }
};
mstrGridReport.prototype.onmouseover = function(D) {
    try {
	D = D || window.event;
	var E = getEventTarget(D);
	var F = E && E.nodeName && E.nodeName.toLowerCase();
	if (!F) {
	    return;
	}
	if ((F != "td")) {
	    E = microstrategy.findParentWithTag(E, "td");
	}
	var C = this.gridStructureInfo
		&& this.gridStructureInfo.getGridCellProps(E);
	if (E && !E.getAttribute("title")) {
	    if (C && C.getCellTooltip()) {
		E.setAttribute("title", C.getCellTooltip());
	    }
	}
	if (this.quickSearchEnabled && E) {
	    var B = microstrategy.findParentWithTag(E, "tr");
	    if (B.getAttribute(microstrategy.HTMLATTR_GRIDROW_ORDINAL)) {
		this.hideQuickSearchIcon();
		return;
	    } else {
		this.showQuickSearchIcon(E);
	    }
	}
	mstrGridStatic.prototype.onmouseover.apply(this, arguments);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.onmouseout = function(B) {
    try {
	this.hideQuickSearchIcon();
	this.hideToolbarOnMouseOut();
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.hideQuickSearchIcon = function(B) {
    try {
	var C = this.qsPopupIcon;
	if (C) {
	    C.style.display = "none";
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.canShowQuickSearchIcon = function(J) {
    try {
	var H = this.quickSearch && this.quickSearch.searchBoxPopup;
	if (H && H.modal) {
	    return false;
	}
	var G = microstrategy.findParentWithTag(J, "tr");
	if (G.getAttribute(microstrategy.HTMLATTR_GRIDROW_ORDINAL)) {
	    return false;
	}
	var I = J.getAttribute(microstrategy.HTMLATTR_GRIDCELL_DEPTH), A = J
		.getAttribute(microstrategy.HTMLATTR_GRIDCELL_AXIS), E = J
		.getAttribute(microstrategy.HTMLATTR_GRID_UNIT_POS), D = J
		.getAttribute(microstrategy.HTMLATTR_ORIENTATION), C = J
		.getAttribute(microstrategy.HTMLATTR_SUBOBJTYPE);
	this.qsDepthInfo = {};
	this.qsCssName = "row";
	if (D == microstrategy.GRIDCELL_ORIENTATION_VERTICAL) {
	    this.qsCssName = C == microstrategy.SUBOBJTYPE_ATTRIBUTE ? "row"
		    : "metric";
	} else {
	    if (D == microstrategy.GRIDCELL_ORIENTATION_HORIZONTAL
		    && C == microstrategy.SUBOBJTYPE_ATTRIBUTE) {
		this.qsCssName = "col";
	    }
	}
	if (E) {
	    if (D == microstrategy.GRIDCELL_ORIENTATION_VERTICAL
		    && C == microstrategy.SUBOBJTYPE_METRIC) {
		A = microstrategy.GRIDCELL_AXIS_METRICS;
		this.qsDepthInfo.upt = E;
	    } else {
		var F = J.previousSibling;
		while (F && F.tagName && F.tagName.toLowerCase() == "td") {
		    I = F.getAttribute(microstrategy.HTMLATTR_GRIDCELL_DEPTH);
		    A = F.getAttribute(microstrategy.HTMLATTR_GRIDCELL_AXIS);
		    D = F.getAttribute(microstrategy.HTMLATTR_ORIENTATION) == microstrategy.GRIDCELL_ORIENTATION_HORIZONTAL;
		    if (A && I && D) {
			break;
		    }
		    F = F.previousSibling;
		}
	    }
	}
	if (A && I) {
	    this.qsDepthInfo.axis = A;
	    this.qsDepthInfo.depth = parseInt(I) + 1;
	    return true;
	}
	return false;
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.showQuickSearchIcon = function(K) {
    try {
	if (!this.canShowQuickSearchIcon(K)) {
	    return;
	}
	var B = "mstrQSIcon", E = w = 20;
	var I = this.qsPopupIcon;
	if (!I) {
	    var D = this.id;
	    var A = document.createElement("div");
	    A.id = B;
	    A.onclick = function() {
		microstrategy.bone(D).showQuickSearchPopup();
	    };
	    A.onmouseover = function() {
		this.style.display = "block";
	    };
	    A.onmouseout = function() {
		this.style.display = "none";
	    };
	    var J = document.createElement("div");
	    J.className = "mstrQSIcon-axis";
	    A.appendChild(J);
	    var F = document.createElement("div");
	    F.className = "mstrQSIcon-line";
	    A.appendChild(F);
	    document.body.appendChild(A);
	    this.qsPopupIcon = I = A;
	}
	var G = mstr.utils.BoxModel, H = G.position(K), L = I.style;
	L.display = "block";
	L.left = Math.min(G.getBrowserWindowWidth(document) - w, H.left
		+ K.offsetWidth)
		- w + "px";
	L.top = H.top - E + "px";
	I.className = this.qsCssName;
	I.lastChild.style.top = (this.qsCssName == "col" && this.qsDepthInfo.axis == 2) ? E
		+ K.offsetHeight + "px"
		: "";
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.showQuickSearchPopup = function() {
    try {
	var B = this, C = function() {
	    var D = (B.quickSearch = mstrGridReport.fnGetQuickSearchWidget());
	    var E = B.qsDepthInfo;
	    D.axis = E.axis;
	    D.depth = E.depth;
	    D.openPlaceholderPopup(mstr.utils.BoxModel.position(B.qsPopupIcon,
		    true));
	};
	microstrategy.mojoLoader.loadWidget({
	    bundle : "mojo-ros.js",
	    callback : C
	});
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrGridReport.prototype.onclick = function(A) {
    return null;
};
mstrGridReport.prototype.onmousedown = function(J) {
    try {
	microstrategy.hidePopups();
	if (this.gridStructureInfo.isEmptyTemplate || !this.isGrid) {
	    return null;
	}
	J = J || window.event;
	var E = getEventTarget(J);
	var L = E.nodeName.toLowerCase();
	if (L == "select" && E.name == "WBV") {
	    return null;
	}
	if ((L != "td") && J.button == 2) {
	    E = microstrategy.findParentWithTag(E, "td");
	}
	var N = E;
	if ((N.nodeName.toLowerCase() != "td")) {
	    N = microstrategy.findParentWithTag(N, "td");
	}
	var I = N.getAttribute("cx");
	var B = N.getAttribute("D1");
	var K = N.getAttribute("ctm");
	if (N.getAttribute(microstrategy.HTMLATTR_GRIDCELL_ID)
		&& (!I || !B || !K)) {
	    var D = this.gridStructureInfo.getGridCellProps(N);
	    if (D) {
		if (!I && D.getCellCx()) {
		    N.setAttribute("cx", D.getCellCx());
		}
		if (!B
			&& N
				.getAttribute(microstrategy.HTMLATTR_GRIDCELL_ORDINAL)) {
		    N.setAttribute("D1", D.getCellDrillElement(N));
		}
		if (!K && D.getAttColTitleMissing()) {
		    N.setAttribute("ctm", "1");
		    N.setAttribute("AX", "2");
		    N.setAttribute("DPT", String(D.depth));
		    N.setAttribute("STY", microstrategy.SUBOBJTYPE_ATTRIBUTE);
		    var M = this.gridStructureInfo.getUnit(2, D.depth);
		    var C = M && M.dssId;
		    if (C) {
			N.setAttribute(microstrategy.HTMLATTR_DSS_ID, C);
		    }
		}
	    }
	}
	if (L.toLowerCase() == "a") {
	    var F = microstrategy.findParentWithTag(E, "td");
	    var A = 7;
	    if (F.getAttribute("ts") == A) {
		E.href = microstrategy.addCSRFTokenToURL(E.href);
	    }
	}
	if (J.button == 2) {
	    this.processRightMouseClick(J, E);
	}
	var H = null;
	if (J.button != 2) {
	    H = this.processMousedown(J, E);
	    if (H != null) {
		return H;
	    }
	    return this.postmousedown(J, E);
	} else {
	    return true;
	}
    } catch (G) {
	microstrategy.errors.log(G);
	return false;
    }
};
mstrGridReport.prototype.processRightMouseClick = function(D, B) {
    try {
	D.cancelBubble = true;
	var A = (B != null && this.selections) ? this.selections
		.isCellSelected(B) : false;
	if (!A && this.selections != null) {
	    this.selections.addToSelections(D, B);
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.processMousedown = function(G, C) {
    try {
	var B = findTarget(C, microstrategy.HTMLATTR_SUBOBJTYPE);
	if (B) {
	    getMouse(G);
	    this.x = lMouseX;
	    this.y = lMouseY;
	    this.activeElement = B;
	    var F = this.activeElement
		    .getAttribute(microstrategy.HTMLATTR_SUBOBJTYPE);
	    G.cancelBubble = true;
	    switch (F) {
	    case microstrategy.SUBOBJTYPE_RESIZE_VLINE:
		this.bindingEvents(this, {
		    mousemove : {
			s : "onresizestart"
		    },
		    mouseup : {
			s : "onmouseup"
		    }
		});
		return false;
	    case microstrategy.SUBOBJTYPE_BTN:
		if (getButtonId(G) == 1) {
		    var K = B.getAttribute("id");
		    var J = findTarget(B.parentNode,
			    microstrategy.HTMLATTR_SUBOBJTYPE);
		    if (K && J) {
			return this.processPivotButtons(J, K);
		    }
		}
		break;
	    case microstrategy.SUBOBJTYPE_OUTLINE_MODE_IMG:
		var E = B.getAttribute("dpt");
		var I = B.getAttribute("rcnt");
		var H = B.getAttribute("ist");
		if (this.outlineMode) {
		    this.outlineMode.showHideRows(this.id, parseInt(E),
			    parseInt(I), H);
		}
		return true;
	    case microstrategy.SUBOBJTYPE_RA_BTN:
		this.raOutlineModeImpl = new mstrRaOutlineModeImpl(0,
			this.gridTable.rows.length - 1, this);
		this.raOutlineModeImpl.showHideRows(B);
		return true;
	    case microstrategy.SUBOBJTYPE_ATTRIBUTE:
	    case microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM:
	    case microstrategy.SUBOBJTYPE_METRIC:
		stopEventBubbling(G);
		var A = B.getAttribute("dg");
		if (A
			&& A.toLowerCase() == "true"
			&& this
				.isFeatureAvailable(microstrategy.FEATURE_EMBEDDED_TEMPLATE_NODE)) {
		    this.bindingEvents(this, {
			mousemove : {
			    s : "ondragstart"
			},
			mouseup : {
			    s : "ondragcancel"
			}
		    });
		}
		break;
	    }
	}
	if (C && this.selections != null && C.nodeName.toLowerCase() == "td") {
	    this.selections.addToSelections(G, C);
	}
	return null;
    } catch (D) {
	microstrategy.errors.log(D);
	return null;
    }
};
mstrGridReport.prototype.postmousedown = function(C, A) {
    try {
	stopEventBubbling(C);
	return false;
    } catch (B) {
	microstrategy.errors.log(B);
	return null;
    }
};
mstrGridReport.prototype.onresizestart = function(B) {
    try {
	this.detachWinListener(this, "mousemove");
	this.saveEnabled = true;
	this.isSaveBeforeDocCreate = true;
	this.notifySelectionChange("ongridselectionschange");
	return this.colWidths.onresizestart(B);
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrGridReport.prototype.createDrillActions = function(G, F, A, C, E, I) {
    try {
	var B = [ "4034", "4134", "4035", "4212" ];
	var H = [ G, F, A, C, E ];
	if (!this.oldFormatDrillPathImportance) {
	    B = [ "4178" ].concat(B);
	} else {
	    B = [ "4033", "4124" ].concat(B);
	    H.splice(1, 0, this.oldFormatDrillPathImportance);
	}
	if (I && this.sliceID) {
	    B.push("4254");
	    H.push(this.sliceID);
	}
	return this.um.createActionObject(this.elem,
		mstrUpdateManager.GRID_DRILL, this.beanPath, B, H, []);
    } catch (D) {
	microstrategy.errors.log(D);
	return null;
    }
};
mstrGridReport.prototype.showAdvDrillEditor = function(C, B, A) {
    this.um.useIframe = A ? true : false;
    this.addAction(null, mstrUpdateManager.OPEN_ADV_DRILL_EDITOR,
	    this.beanPath, [ "6011", "6012", "6010", "6031" ], [ C, B, 1,
		    "drillEditor" ]);
};
mstrGridReport.prototype.drill = function(G, E, B, H) {
    try {
	var F = "";
	if (this.drillRetainParentValue != "3") {
	    F = this.drillRetainParentValue;
	}
	var A = "";
	if (this.drillKeepThreshValue != "3") {
	    A = this.drillKeepThreshValue;
	}
	var I = this.commands.queryState("selectedDrillElements");
	if (B == null) {
	    B = I;
	} else {
	    if (I && (!this.isReportMdxCube())) {
		B = B + "," + I;
	    }
	}
	var D = this.createDrillActions(G, F, A, B, E, H);
	if (this.drillOpenInNewWindow && !(parseInt(H))) {
	    this.um.newWindow = true;
	}
	this.um.useIframe = this.drillIframeEnabled;
	this.commands.exec("clearAllGridSelections");
	if (D) {
	    this.um.add([ D ]);
	    this.um.flushAndSubmitChanges();
	    this.um.acknowledgeRequest();
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return false;
};
mstrGridReport.createDragDisplay = function() {
    var A = document.createElement("span");
    A.className = "mstrDnDReportDragItem";
    A.appendChild(document.createTextNode(""));
    return document.body.appendChild(A);
};
mstrGridReport.prototype.initializeDragDisplay = function() {
    try {
	this.dragDisplay = this.dragDisplay
		|| mstrGridReport.createDragDisplay();
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.ondragstart = function(H) {
    try {
	H = this.initEvent(H, true);
	var M = this.selections;
	var K = Math.abs(lMouseX - this.x);
	var J = Math.abs(lMouseY - this.y);
	if (K > 3 || J > 3) {
	    var B = getEventTarget(H);
	    var L = (B != null && M) ? M.isCellSelected(B) : false;
	    if (!L) {
		M.addToSelections(H, B);
	    }
	    var A = (M != null) ? M.getSelectedCellsWithAttr("dg", "true")
		    : new Array;
	    if (M.isEmpty() || A == null || A.length < 1) {
		M.clearAll(true);
	    }
	    if (!M.isCellSelected(this.activeElement)) {
		M.add(this.activeElement);
		A.push(this.activeElement);
	    }
	    A.sort(new Function("a", "b", "return microstrategy.bone('"
		    + this.id + "').sortByAxisDepth(a,b);"));
	    var I = new Array;
	    this.dragItems = new Array;
	    var G = "";
	    var D = 0;
	    for ( var F in A) {
		var E = A[F];
		this.dragItems[D] = E;
		I[D++] = (E.getAttribute(microstrategy.HTMLATTR_SUBOBJTYPE) == microstrategy.SUBOBJTYPE_METRIC) ? microstrategy.DSSTYPE_METRIC
			: microstrategy.DSSTYPE_ATTRIBUTE;
		G += E.getAttribute(microstrategy.HTMLATTR_DESCRIPTION) + ",";
	    }
	    this.initializeDragDisplay();
	    this.dragDisplay.replaceChild(document.createTextNode(G.substring(
		    0, G.length - 1)), this.dragDisplay.firstChild);
	    this.initMapper();
	    M.clearAll();
	    for (F in this.dragItems) {
		M.add(this.dragItems[F]);
	    }
	    M.clearDeferredSrc();
	    microstrategy.eventManager.onnotifydrag(this.dragItems, this, I);
	    this.bindingEvents(this, {
		mousemove : {
		    s : "ondrag"
		},
		mouseup : {
		    s : "ondragend"
		}
	    });
	    this.ondrag(H);
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return false;
};
mstrGridReport.prototype.ondrag = function(B) {
    try {
	B = this.initEvent(B, true);
	if (lMouseX > Math.max(document.documentElement.scrollWidth,
		document.body.scrollWidth) - 25) {
	    return;
	}
	moveObjTo(this.dragDisplay, lMouseX - getObjWidth(this.dragDisplay)
		- microstrategy.CURSOR_OFFSET, lMouseY
		- getObjHeight(this.dragDisplay) - microstrategy.CURSOR_OFFSET);
	this.dndHelper.moveHelperImage(B);
	microstrategy.scrollPageHorizontally(lMouseX);
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrGridReport.prototype.ondragend = function(C) {
    try {
	C = this.initEvent(C);
	microstrategy.eventManager.notifyOrphanBones("onnotifydragend");
	this.onmouseup(C);
	this.dndHelper.parkObject(this.dragDisplay);
	var D = microstrategy.findAncestor(getEventTarget(C));
	if (D) {
	    var B = microstrategy.boneForMask(D);
	    if (B && B.ondrop) {
		if (B.id == "UniqueReportID"
			&& D.tagName.toLowerCase() != "area" && !B.isGraph) {
		    return;
		}
		B.ondrop(D, this.selections);
		if (this.selections) {
		    this.selections.clearAll(true);
		}
		if (this.useClientSideManipulations) {
		    microstrategy.eventManager.notifyOrphanBones(
			    "ongridstructurechange", this.gridStructureInfo);
		}
	    }
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.ondragcancel = function(B) {
    try {
	B = this.initEvent(B, true);
	this.onmouseup(B);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.onmouseup = function(C, B) {
    try {
	if (C && C.e) {
	    C = C.e;
	}
	this.activeElement = null;
	if (this.dndHelper) {
	    this.dndHelper.onmouseup((B) ? B : this.id);
	}
	if (!this.isDropZoneEditor && this.selections) {
	    this.selections.onmouseup(C);
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.shouldInitMask = function() {
    try {
	return (this.useDNDMapping);
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrGridReport.prototype.initMask = function() {
    try {
	this.mask = new mstrMaskMappedImpl(
		function(D) {
		    try {
			D = D || {};
			var B = this.maskedBone
				&& this.maskedBone.elem
					.getElementsByTagName("tbody")[0];
			if (B != null && B.rows != null) {
			    D.height = parseInt(B.offsetHeight);
			    D.width = parseInt(B.offsetWidth);
			}
			return D;
		    } catch (C) {
			microstrategy.errors.log(C);
		    }
		});
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.initSelections = function(restoreState) {
    try {
	if (this.isGrid) {
	    var s = this.selections = new mstrGridSelectionsImpl();
	    s.parentBone = this;
	    s.path = "microstrategy.bone('" + this.id + "').selections";
	    s.onload();
	    if (restoreState
		    && this.gridSelections
		    && !(microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION && microstrategy.DISPLAY_MODE == microstrategy.DESIGN_MODE)) {
		var gs = eval("(" + this.gridSelections + ")");
		if (gs && gs.src == true) {
		    this.setGridUnitSelections(gs.unit, gs.value);
		} else {
		    s.repopulateSelections();
		}
	    }
	}
    } catch (err) {
	microstrategy.errors.log(err);
    }
};
mstrGridReport.prototype.getExecTarget = function() {
    try {
	return microstrategy;
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrGridReport.prototype.exec = function(I, S, V) {
    try {
	var M = false;
	var a = this.getExecTarget();
	if (a != null) {
	    var H;
	    if (typeof (S) == "string" || typeof (S) == "number") {
		if (I == "lncolor") {
		    H = [ "borderTopColor", S ];
		} else {
		    H = a.setSingleFormat(I, S);
		}
	    } else {
		if (S != null) {
		    H = new Array(2);
		    if (I == "lncolor") {
			H[0] = "borderTopColor";
		    }
		    H[1] = S[1];
		} else {
		    return (M = false);
		}
	    }
	    var O = this.um;
	    I = H[0];
	    S = H[1];
	    if (I && S) {
		var T = null;
		if (this.isGraph) {
		    var b = null;
		    var C = [];
		    var D = [];
		    D.push(S);
		    switch (I) {
		    case "changeChartWindow_horizontal":
		    case "changeChartWindow_vertical":
			b = S.split("|");
			var N = (I == "changeChartWindow_vertical") ? "series"
				: "categories";
			this.changeChartWindow(O, N, b[0], b[1]);
			O.flushAndSubmitChanges();
			M = true;
			break;
		    default:
		    }
		    if (C.length > 0 && T != null) {
			O.add([ O.createActionObject(this.elem, T,
				this.beanPath, C, D, [], []) ]);
			if (!this.useClientSideManipulations && !V) {
			    O.flushAndSubmitChanges();
			}
			M = true;
		    }
		}
		if (this.isGrid && !M) {
		    var Z = mstrFormatObject;
		    if ((I != "backgroundColor" && I != "Gradient")
			    || S.indexOf(",") < 0 || S.indexOf("rgb") >= 0) {
			S = Z.encodeValue(I, S);
		    }
		    var J = null;
		    var L = S;
		    var W = null;
		    var P = null;
		    var K = null;
		    T = null;
		    if (I == "Gradient") {
			I = "backgroundColor";
		    }
		    var E = Z[I];
		    if (E != null) {
			E = E[0];
			switch (E) {
			case "FormattingFont":
			    T = mstrUpdateManager.SAVE_GRID_FONT_PROPERTIES;
			    J = {
				fontFamily : "4042",
				fontSize : "4045",
				color : "4048"
			    }[I];
			    break;
			case "FormattingAlignment":
			    T = mstrUpdateManager.SAVE_GRID_ALIGNMENT_PROPERTIES;
			    switch (I) {
			    case "textAlign":
				L = this.adjustTextAlignValueForGrid(L);
				J = "4056";
				break;
			    }
			    break;
			case "FormattingBorder":
			    T = mstrUpdateManager.SAVE_GRID_BORDER_PROPERTIES;
			    switch (I) {
			    case "borderTopColor":
			    case "borderLeftColor":
			    case "borderRightColor":
			    case "borderBottomColor":
				var F = this.selections
					.getSelectedGridTargetGridLevel();
				for ( var Y in F) {
				    var U = F[Y].split(",");
				    var B = U[0];
				    var c = U[1];
				    var R = U[2];
				    var A = U[3];
				    if (this.isTargetUnitLevelValid(R, A)) {
					O.add([ O.createActionObject(this.elem,
						T, this.beanPath,
						[ "4006", "4007", "4109",
							"4108", "4067", "4068",
							"4069", "4070", "4223",
							"4126" ], [ B, c, A, R,
							L, L, L, L, "0",
							this.styleName ], [],
						[]) ]);
				    }
				}
				if (!this.useClientSideManipulations && !V) {
				    O.flushAndSubmitChanges();
				}
				M = true;
				break;
			    }
			    break;
			case "FormattingPatterns":
			    T = mstrUpdateManager.SAVE_GRID_PATTERN_PROPERTIES;
			    break;
			default:
			}
		    }
		    var Q = this.selections.getSelectedGridTargetGridLevel();
		    if (Q.length == 0) {
			this.setGridUnitSelections(this.gridUnitFormat,
				this.gridValueFormat);
			Q = this.selections.getSelectedGridTargetGridLevel();
		    }
		    for (Y in Q) {
			U = Q[Y].split(",");
			B = U[0];
			c = U[1];
			R = U[2];
			A = U[3];
			if (J != null && T != null) {
			    var X = O.createActionObject(this.elem, T,
				    this.beanPath, [ "4006", "4007", "4109",
					    "4108", J, "4126", W ], [ B, c, A,
					    R, L, this.styleName, P ], [], []);
			    if (!(W && P && K && K.length > 0)) {
				O.add([ X ]);
			    }
			    M = true;
			}
		    }
		    if (!this.useClientSideManipulations && !V) {
			O.flushAndSubmitChanges();
		    }
		}
	    }
	}
    } catch (G) {
	microstrategy.errors.log(G);
	M = false;
    }
    return M;
};
mstrGridReport.prototype.changeChartWindow = function(G, A, H, C) {
    var F = (C - H + 1) < 1 ? 1 : C - H + 1;
    var D = (this.isGrid && this.isGraph) ? H : "";
    var B = (this.isGrid && this.isGraph) ? F : "";
    if (this.seriesLayout != "1") {
	A = (A == "categories") ? "series" : "categories";
    }
    var E = (A == "categories") ? [ "4018", "4020", "4022", "4024" ] : [
	    "4019", "4021", "4023", "4025" ];
    G.add([ G.createActionObject(this.elem,
	    mstrUpdateManager.SET_RESULT_WINDOW, this.beanPath, E,
	    [ D, B, H, F ]) ]);
};
mstrGridReport.prototype.isTargetUnitLevelValid = function(C, E) {
    try {
	var A = (C == 2) || (C == 6);
	var D = (E == 3) || (E == 4);
	return (!A || !D);
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrGridReport.prototype.adjustTextAlignValueForGrid = function(A) {
    return {
	0 : "2",
	1 : "4",
	2 : "3"
    }[A] || A;
};
mstrGridReport.prototype.getDNDHelperImage = function(D, A) {
    if (!A) {
	return null;
    }
    if (D.type != this.type || D.id == this.id) {
	var E = A.split(",");
	if (!isNaN(E[0])) {
	    var C = parseInt(E[0]);
	    var B = microstrategy.FOLDER_IMAGES;
	    if (C == microstrategy.GRIDCELL_AXIS_ROWS) {
		B += "dRows.gif";
	    } else {
		if (C == microstrategy.GRIDCELL_AXIS_COLUMNS) {
		    B += "dcols.gif";
		} else {
		    if (C == microstrategy.GRIDCELL_AXIS_METRICS) {
			B += "dMetrics.gif";
		    }
		}
	    }
	    return B;
	}
    }
    return null;
};
mstrGridReport.prototype.isRemoveFromGrid = function(B) {
    try {
	return (B) ? this.isFeatureAvailable(B) : false;
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrGridReport.prototype.deleteItems = function(B) {
    try {
	if (this.selections) {
	    this.selections.clearAll(true);
	}
	var C = microstrategy.updateManager;
	var E = [];
	var F = this
		.isRemoveFromGrid(microstrategy.FEATURE_WEB_REMOVE_FROM_GRID);
	var A = (B.length == 1);
	E = this[(A) ? "deleteItemSrc" : "deleteMultiItemSrc"](
		((A) ? B[0] : B), E, !F);
	if (E.length > 0) {
	    C.add(E);
	    if (!this.useClientSideManipulations) {
		if (this.dragSource
			&& this.dragSource.type == microstrategy.OBJTYPE_GRAPH_ZONES) {
		    togglePulldowns(this.dragSource.elem, true);
		}
		C.flushAndSubmitChanges();
	    }
	}
	return true;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrGridReport.prototype.processPivotButtons = function(J, L) {
    try {
	var G = microstrategy.updateManager;
	if (!G) {
	    return false;
	}
	var K = [];
	if (L == "x") {
	    K = this.deleteItemSrc(J, K);
	} else {
	    if (L == "xx") {
		if (this.useClientSideManipulations) {
		    microstrategy.eventManager.notifyOrphanBones(
			    "onunitremoved", this.gridStructureInfo
				    .buildGridUnitInfo(J));
		}
		K = this.deleteItemSrc(J, K, true);
	    } else {
		var H = this.gridStructureInfo.getGridUnitInfo(J);
		var C = H.axis;
		var E = H.depth;
		var A = H.subDepth;
		if (L == "c") {
		    C = (C == microstrategy.GRIDCELL_AXIS_ROWS) ? microstrategy.GRIDCELL_AXIS_COLUMNS
			    : microstrategy.GRIDCELL_AXIS_ROWS;
		    K = this.pivotUnit(H, C, 1, 1, K);
		} else {
		    if (L == "p") {
			K = this.pivotUnit(H,
				microstrategy.GRIDCELL_AXIS_PAGE_BY, -1, 1, K);
		    } else {
			if (H.dssType == microstrategy.DSSTYPE_ATTRIBUTE_FORM) {
			    if (this
				    .isFeatureAvailable(microstrategy.FEATURE_SET_ATTRIBUTEFORM_DISPLAY)
				    && this.showAttForms) {
				if (L == "l" || L == "u") {
				    (A == 1) ? E-- : A--;
				} else {
				    var B = this.gridStructureInfo
					    .findUnit(H.parentDssId);
				    (A == B.attForms.size()) ? E++ : A++;
				}
			    } else {
				A = 1;
				(L == "l" || L == "u") ? E-- : E++;
			    }
			} else {
			    H = this.gridStructureInfo.getGridUnitInfoBySrc(J);
			    var F = H ? H.index : -1;
			    C = H.axis;
			    E = H.depth;
			    A = H.subDepth;
			    if (F > -1) {
				(L == "l" || L == "u") ? F-- : F++;
				var I = this.gridStructureInfo.allAxes[(C == microstrategy.GRIDCELL_AXIS_METRICS) ? 0
					: C].units[F];
				E = I ? I.depth : H.depth;
			    } else {
				(L == "l" || L == "u") ? E-- : E++;
			    }
			}
			K = this.pivotUnit(H, C, E, A, K);
		    }
		}
	    }
	}
	if (K.length > 0) {
	    G.add(K);
	    this.selections.clearAll(true);
	    if (this.useClientSideManipulations) {
		microstrategy.eventManager.notifyOrphanBones(
			"ongridstructurechange", this.gridStructureInfo);
	    } else {
		G.flushAndSubmitChanges();
		if (bIsChrome) {
		    window.setTimeout(function() {
			window.getSelection().removeAllRanges();
		    }, 0);
		}
	    }
	}
	return true;
    } catch (D) {
	microstrategy.errors.log(D);
	return null;
    }
};
mstrGridReport.prototype.processContextMenus = function(P, D) {
    try {
	var V = microstrategy.updateManager;
	if (!V) {
	    return false;
	}
	var N = microstrategy.activeCXMenu;
	var S = function(a) {
	    return N.getAttribute(microstrategy["HTMLATTR_DSS_" + a]);
	};
	if (N) {
	    var I = false;
	    var H = [];
	    var e = [];
	    var AA, Z;
	    switch (P) {
	    case "pttm":
		e = D.split(",");
		switch (e[0]) {
		case "r":
		case "c":
		case "p":
		case "g":
		    var o = {
			r : 1,
			c : 2,
			p : 4,
			g : 0
		    };
		    this.addPercentToTotal(N, o[e[0]], null);
		    break;
		case "a":
		    this.addPercentToTotal(N, 0, e[1]);
		    break;
		}
		break;
	    case "rm":
		e = D.split(",");
		var y = mstr.utils.Arrays.find([ "a", "n" ], e[1]);
		if (y > -1) {
		    var t = null;
		    if (y == 0) {
			t = e[2];
		    }
		    this.addRankMetric(N, t, e[0]);
		}
		break;
	    case "tm":
		e = D.split(",");
		this.addTransformationMetric(N, e[0], e[1]);
		break;
	    case "xx":
		if (this.useClientSideManipulations) {
		    var Q = [ N ];
		    if (this.selections) {
			Q = this.getObjInfoList(this.selections
				.getSelectedUnitHeaders());
		    }
		    microstrategy.eventManager.notifyOrphanBones(
			    "onunitsremoved", Q);
		}
	    case "x":
		var x = this.selections
			&& this.selections.getSelectedUnitHeaders();
		if (this.selections && x && x.length > 1) {
		    var Y = (P == "xx");
		    H = this.deleteMultiItemSrc(x, H, Y);
		} else {
		    H = this.deleteItemSrc(N, H, P == "xx");
		}
		if (this.selections) {
		    this.selections.clearAll(true);
		}
		if (H.length > 0 && this.useClientSideManipulations) {
		    microstrategy.eventManager.notifyOrphanBones(
			    "ongridstructurechange", this.gridStructureInfo);
		}
		I = (P == "xx");
		break;
	    case "keepOnGrid":
		var x = this.selections
			&& this.selections.getSelectedUnitHeaders();
		if (this.selections && x && x.length >= 1) {
		    H = this.keepUnits(x, H);
		}
		if (this.selections) {
		    this.selections.clearAll(true);
		}
		if (H.length > 0 && this.useClientSideManipulations) {
		    microstrategy.eventManager.notifyOrphanBones(
			    "ongridstructurechange", this.gridStructureInfo);
		}
		break;
	    case "p":
	    case "c":
	    case "l":
	    case "r":
	    case "u":
	    case "d":
		var K = this.selections.getSelectedCellsWithAttr("dg", "true");
		K.sort(new Function("a", "b", "return microstrategy.bone('"
			+ this.id + "').sortByAxisDepth(a,b);"));
		var Q = this.getObjInfoList(K);
		var R;
		if (K.length <= 1) {
		    R = N;
		} else {
		    if (P == "l" || P == "u") {
			R = K[0];
		    } else {
			if (P == "r" || P == "d") {
			    R = K[K.length - 1];
			} else {
			    R = N;
			}
		    }
		}
		U = this.gridStructureInfo.getGridUnitInfo(R);
		var O = U.axis;
		var F = U.depth;
		var h = U.subDepth;
		if (P == "p") {
		    O = microstrategy.GRIDCELL_AXIS_PAGE_BY;
		    F = -1;
		    h = 1;
		} else {
		    if (P == "c") {
			O = (O == microstrategy.GRIDCELL_AXIS_ROWS) ? microstrategy.GRIDCELL_AXIS_COLUMNS
				: microstrategy.GRIDCELL_AXIS_ROWS;
			F = 1;
			h = 1;
		    } else {
			if (U.dssType == microstrategy.DSSTYPE_ATTRIBUTE_FORM) {
			    if (this
				    .isFeatureAvailable(microstrategy.FEATURE_SET_ATTRIBUTEFORM_DISPLAY)
				    && this.showAttForms) {
				if (P == "l" || P == "u") {
				    (h == 1) ? F-- : h--;
				} else {
				    var A = this.gridStructureInfo
					    .findUnit(U.parentDssId);
				    (h == A.attForms.size()) ? F++ : h++;
				}
			    } else {
				h = 1;
				(P == "l" || P == "u") ? F-- : F++;
			    }
			} else {
			    U = this.gridStructureInfo.getGridUnitInfoBySrc(R);
			    var T = U ? U.index : -1;
			    O = U.axis;
			    F = U.depth;
			    h = U.subDepth;
			    if (T > -1) {
				(P == "l" || P == "u") ? T-- : T++;
				var b = this.gridStructureInfo.allAxes[(O == microstrategy.GRIDCELL_AXIS_METRICS) ? 0
					: O].units[T];
				F = b ? b.depth : U.depth;
			    } else {
				(P == "l" || P == "u") ? F-- : F++;
			    }
			}
		    }
		}
		if (P == "l" || P == "r" || P == "u" || P == "d") {
		    var AB = this.gridStructureInfo.getMaxAxisPosition(O);
		    if (F < 1 || F >= AB) {
			return false;
		    }
		}
		H = (Q.length > 1) ? this.pivotUnits(Q, O, F, h, H) : this
			.pivotUnit(U, O, F, h, H);
		var l = this.selections && this.selections.clearAll(true);
		l = (H.length > 0)
			&& microstrategy.eventManager
				.notifyOrphanBones("ongridstructurechange",
					this.gridStructureInfo);
		break;
	    case "atfa":
		e = D.split(EXPRESSION_SEPARATOR);
		var r = e[0];
		var L = e[1];
		U = this.gridStructureInfo.buildGridUnitInfo(N);
		var X = this.gridStructureInfo.buildFormSrcFromCM(U, L, r);
		h = this.gridStructureInfo
			&& this.gridStructureInfo.getAttrFormPos(X);
		H = this.addUnit(X, U.axis, U.depth, h, H);
		l = this.selections && this.selections.clearAll(true);
		l = (H.length > 0)
			&& this.useClientSideManipulations
			&& microstrategy.eventManager
				.notifyOrphanBones("ongridstructurechange",
					this.gridStructureInfo);
		break;
	    case "atfr":
		var E = this.gridStructureInfo.findUnit(S("ID"));
		if (E == null) {
		    break;
		}
		if (E.hasAttForms() && E.attForms.size() > 1) {
		    var C = E.attForms.findUnit(D);
		    H = this.deleteUnit(C, H);
		    l = this.selections && this.selections.clearAll(true);
		    l = (H.length > 0 && this.useClientSideManipulations)
			    && microstrategy.eventManager.notifyOrphanBones(
				    "ongridstructurechange",
				    this.gridStructureInfo);
		} else {
		    showMessage({
			contents : mstrGridReport.desp("3626"),
			elements : microstrategy.OK_BUTTON,
			type : mstrMsgBoxImpl.MSG_WARNING
		    });
		}
		break;
	    case "atfm":
		this
			.addAction(null,
				mstrUpdateManager.OPEN_ATT_FORMS_EDITOR,
				this.beanPath, [ "6042", "6044" ], [ S("ID"),
					"false" ]);
		break;
	    case "gridFormat":
		var s = this.gridStructureInfo.getGridUnitInfo(N);
		this.gridUnitFormat = this.resolveGridUnitId(s.axis, s.depth);
		this.gridValueFormat = 1;
		window
			.setTimeout(
				"microstrategy.bone('"
					+ this.viewerId
					+ "').commands.exec('openFormatGrid', { selectedIndicesList : 9 });",
				20);
		break;
	    case "rename":
		var d = "formulaMode=0&activeViewID=" + this.objId
			+ "&activeDatasetID=" + this.dSetId;
		d = d + "&activeElemIndx=" + D;
		toggleShowBean("formula", true, d);
		break;
	    case "mfc":
	    case "mftop":
	    case "mfbottom":
	    case "mfedit":
	    case "mfadd":
		var G = {
		    mfc : "CLEAR_UNIT_LIMIT",
		    mfedit : "EDIT_UNIT_LIMIT",
		    mfadd : "ADD_SUBEXPRESSION"
		}[P] || "SET_UNIT_LIMIT";
		AA = [ "1001" ];
		Z = [ S("ID") ];
		if (P == "mftop" || P == "mfbottom") {
		    AA = AA.concat([ "1002", "262144011", "262144017",
			    "262144014" ]);
		    Z = Z.concat([ S("TYPE"), ((P == "mftop") ? "1" : "2"),
			    "2", "10" ]);
		}
		var g = mstrUpdateManager[G];
		this.addAction(null, g, this.bp[g], AA, Z);
		break;
	    case "fos":
		var n = this.commands.queryState("selectedDrillElements");
		this.commands.exec("clearAllGridSelections");
		var AC = [ "4035" ];
		var z = [ n ];
		if (this.sliceID) {
		    AC.push("4254");
		    z.push(this.sliceID);
		}
		AC.push("4134");
		z.push("1");
		this.addAction(null, mstrUpdateManager.FILTER_ON_SELECTIONS,
			this.beanPath, AC, z);
		break;
	    case "deopenNewSort":
		var U = this.gridStructureInfo.getGridUnitInfo(N), W = {
		    dssId : U.dssType == 21 ? U.parentDssId : U.dssId,
		    dssSetId : U.dssSetId
		};
		var J = this;
		microstrategy.openCustomSortEditor({
		    mid : this.messageID || mstrApp.oi.mid,
		    uKey : this.RWUnitId,
		    att : W,
		    bp : this.beanPath,
		    onSave : function(c) {
			var a = mstrmojo.hash.copy(c, {
			    attId : W.dssId
			});
			J.addAction(null,
				mstrUpdateManager.VIEW_EVENT_CUSTOM_SORT,
				J.beanPath, [ 409606622 ],
				[ JSON.stringify(a) ]);
		    }
		});
		break;
	    case "deopenSort":
	    case "deopen":
		AA = [ "1001" ];
		Z = [ S("ID") ];
		if (P === "deopenSort") {
		    AA.push("6048");
		    Z.push("1");
		}
		this
			.addAction(
				null,
				mstrUpdateManager.OPEN_DERIVED_ELEMENTS_EDITOR,
				this.bp[mstrUpdateManager.OPEN_DERIVED_ELEMENTS_EDITOR],
				AA, Z);
		break;
	    case "declear":
		showMessage({
		    contents : mstrGridReport.desp("5776"),
		    elements : microstrategy.OK_BUTTON
			    + microstrategy.CANCEL_BUTTON,
		    okEval : "microstrategy.bones['" + this.id
			    + "'].clearDerivedElements('" + S("ID") + "')",
		    title : mstrGridReport.desp("5950")
		});
		break;
	    case "deSum":
	    case "deAvg":
	    case "deMin":
	    case "deMax":
	    case "deMinus":
	    case "deDivide":
	    case "deList":
		this.addCalculationQuickGroup(P);
		return null;
	    case "WebHyperLinkEditor":
		var B = "activeUnitID=" + S("ID") + "&activeUnitType="
			+ S("TYPE") + "&renderPromptsOnly=false";
		toggleShowBean("webHyperLinkEditor", true, B);
		break;
	    case "edtSimpleThresholds":
	    case "edtAdvancedThresholds":
		var M = P;
		if (microstrategy.EXECUTION_SCOPE != microstrategy.RWD_EXECUTION) {
		    M = M.replace("edtSim", "edtReportSim");
		}
		toggleShowBean(M, true, "&activeViewID=" + this.objId
			+ "&container=" + D);
		break;
	    case "alert":
		d = "&activeViewID=" + this.objId + "&container=" + D;
		toggleShowBean("alertsEditor", true, d);
		break;
	    case "alertMobile":
		d = "&activeViewID=" + this.objId + "&container=" + D;
		this.um.replaceURL("deliveryMode", "128");
		toggleShowBean("mobileAlertsEditor", true, d);
		break;
	    case "alertEmail":
		d = "&activeViewID=" + this.objId + "&container=" + D;
		this.um.replaceURL("deliveryMode", "1");
		toggleShowBean("alertsEditor", true, d);
		break;
	    }
	    if (H.length > 0) {
		V.add(H);
		if (!this.useClientSideManipulations || I) {
		    V.flushAndSubmitChanges();
		}
	    }
	    return true;
	}
    } catch (q) {
	microstrategy.errors.log(q);
    }
    return false;
};
mstrGridReport.prototype.clearDerivedElements = function(A) {
    try {
	this.addAction(null, mstrUpdateManager.CLEAR_DERIVED_ELEMENTS,
		this.beanPath, [ "1001" ], [ A ]);
	return true;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrGridReport.prototype.pivotUnit = function(K, E, I, C, O) {
    try {
	var J = this.um;
	var H = {
	    id : this.id,
	    pivot : true
	};
	var L = this.gridStructureInfo;
	var A = L.getMaxAxisPosition(E);
	if (K.axis != E) {
	    if (I > A || I == -1) {
		I = A;
	    }
	} else {
	    if (I >= A || I == -1) {
		I = A - 1;
	    }
	}
	var B = false;
	if (K.subtype == microstrategy.SUBOBJTYPE_METRIC
		|| K.isMetricTemplateUnit) {
	    if (K.axis != E) {
		B = (L.metricsAxis != E || L.metricsDepth != I);
	    } else {
		B = (K.depth != I);
	    }
	} else {
	    B = (K.axis != E || K.depth != I);
	    if (this
		    .isFeatureAvailable(microstrategy.FEATURE_SET_ATTRIBUTEFORM_DISPLAY)
		    && this.showAttForms) {
		B = (B || K.subDepth != C);
	    }
	}
	var N = K.src;
	if (B) {
	    var G = mstrGridReport.updateNow();
	    switch (K.subtype) {
	    case microstrategy.SUBOBJTYPE_ATTRIBUTE:
		O.push(J.createActionObject(K,
			mstrUpdateManager.PIVOT_TEMPLATE_UNIT, this.beanPath, [
				"4110", "4006", "4007", "4008", "4009" ], [ G,
				K.axis, K.depth, E, I ], [ G, K.axis, K.depth,
				E, I ], H));
		break;
	    case microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM:
		if (K.axis != E || K.depth != I) {
		    var D = L.findUnit(K.parentDssId);
		    O.push(J.createActionObject(D,
			    mstrUpdateManager.PIVOT_TEMPLATE_UNIT,
			    this.beanPath, [ "4110", "4006", "4007", "4008",
				    "4009" ], [ G, K.axis, K.depth, E, I ], [
				    G, K.axis, K.depth, E, I ], H));
		} else {
		    O.push(J.createActionObject(K, mstrUpdateManager.ADD_FORM,
			    this.beanPath, [ "4110", "4165", "4166", "4008",
				    "4009", "4168", "4096001" ], [ G,
				    K.parentDssId, K.dssId, E, I, C,
				    this.dSetId ], [ G, K.parentDssId, K.dssId,
				    K.axis, K.depth, K.subDepth, this.dSetId ],
			    H));
		}
		break;
	    case microstrategy.SUBOBJTYPE_METRIC:
		if (K.axis != E) {
		    K = L.getUnit(L.metricsAxis, L.metricsDepth, 1);
		    N = K.src;
		    O.push(J.createActionObject(K,
			    mstrUpdateManager.PIVOT_TEMPLATE_UNIT,
			    this.beanPath, [ "4110", "4006", "4007", "4008",
				    "4009" ], [ G, K.axis, K.depth, E, I ], [
				    G, K.axis, K.depth, E, I ], H));
		} else {
		    O.push(J.createActionObject(K,
			    mstrUpdateManager.PIVOT_TEMPLATE_METRIC,
			    this.beanPath, [ "4110", "4028", "4029" ], [ G,
				    K.depth, I ], [ G, K.depth, I ], H));
		}
		break;
	    }
	    if (this.useClientSideManipulations) {
		this.template.pivot(N, E, I, C);
		if (mstrGridReport.isReport()) {
		    var M = null;
		    if (this.id.indexOf("_graph") > -1) {
			var M = microstrategy.bone(this.id.substr(0, this.id
				.indexOf("_graph")));
		    } else {
			var M = microstrategy.bone(this.id + "_graph");
		    }
		}
		if (M) {
		    M.template.generateTemplate();
		    M.template.sendUpdate();
		}
		if (this.useDNDMapping && this.mask != null) {
		    this.mask.onmaskedobjectresize();
		}
	    }
	}
	return O;
    } catch (F) {
	microstrategy.errors.log(F);
	return false;
    }
};
mstrGridReport.prototype.addUnit = function(R, B, T, O, S, C) {
    try {
	var N = this.um;
	var P = {
	    id : this.id,
	    allForms : false,
	    pivot : false
	};
	if (this.isGraph && !this.gridStructureInfo.hasMetrics && B == -1) {
	    B = 2;
	}
	var G = this.gridStructureInfo;
	var M = G.getMaxAxisPosition(B);
	if (!C && (T > M || T == -1)) {
	    T = M;
	}
	var H = G.buildGridUnitInfo(R, B, T, O);
	var K = subUnitInfo = null;
	var L = S.length;
	if (H.dssType == microstrategy.DSSTYPE_ATTRIBUTE_FORM) {
	    K = G.findUnit(H.parentDssId);
	    if (K != null) {
		if (K.attFormId == H.dssId) {
		    S = this.pivotUnit(K, B, T, O, S);
		    if (mstrGridReport.isRWD() && H.dssSetId != G.dataSetId
			    && S.length > L) {
			S = this.changeGridDataSource(H.dssSetId, S);
		    }
		    return S;
		} else {
		    subUnitInfo = K.attForms.findUnit(H.dssId);
		    if (subUnitInfo != null) {
			S = this.pivotUnit(subUnitInfo, B, T, O, S);
			if (mstrGridReport.isRWD() && H.dssSetId != G.dataSetId
				&& S.length > L) {
			    S = this.changeGridDataSource(H.dssSetId, S);
			}
			return S;
		    } else {
			if (K.axis != B || K.depth != T) {
			    S = this.pivotUnit(K, B, T, 1, S);
			    T = K.depth;
			    O = K.hasAttForms() ? Math.max(
				    K.attForms.size() + 1, 2) : 2;
			}
		    }
		}
	    } else {
		P.allForms = true;
	    }
	} else {
	    K = G.findUnit(H.dssId);
	    if (K != null) {
		S = this.pivotUnit(K, B, T, O, S);
		if (mstrGridReport.isRWD() && H.dssSetId != G.dataSetId
			&& S.length > L) {
		    S = this.changeGridDataSource(H.dssSetId, S);
		}
		return S;
	    }
	}
	var A = mstrGridReport.updateNow();
	var D = microstrategy.bone("pbb_GroupByStyle");
	var F = D && D.hasAllSelected;
	var J = F ? "1" : "0";
	switch (H.dssType) {
	case microstrategy.DSSTYPE_ATTRIBUTE:
	case microstrategy.DSSTYPE_HIERARCHY:
	    if (R.getAttribute(microstrategy.HTMLATTR_OBJTYPE) == microstrategy.OBJTYPE_XDA_DATA_ELEMENT) {
		S.push(N.createActionObject(H,
			mstrUpdateManager.ADD_TEMPLATE_UNIT, this.beanPath, [
				"4110", "4008", "4009", "4026", "4027", "4177",
				"4200", "4220", "4221", "4229" ], [ A, B,
				H.depth, H.dssType, H.dssId, H.dssSetId,
				H.alias, R.getAttribute("did"),
				R.getAttribute("hid"), J ], [], P));
		break;
	    }
	case microstrategy.DSSTYPE_PROMPT:
	    if (H.dssType == microstrategy.DSSTYPE_PROMPT) {
		iframe.showWaitPage();
		var Q = false;
		mstr.$XHR.request(mstrConfig.taskURL, {
		    taskId : "validatePromptForTemplate",
		    objectID : H.dssId
		}, {
		    success : function(U) {
			Q = U.v || false;
		    }
		}, false);
		iframe.hideWaitPage();
		if (!Q) {
		    showMessage({
			contents : mstrGridReport.desp(8946),
			elements : microstrategy.OK_BUTTON,
			type : mstrMsgBoxImpl.MSG_ERROR
		    });
		    break;
		}
	    }
	case microstrategy.DSSTYPE_CONSOLIDATION:
	case microstrategy.DSSTYPE_FILTER:
	    S.push(N
		    .createActionObject(H, mstrUpdateManager.ADD_TEMPLATE_UNIT,
			    this.beanPath, [ "4110", "4008", "4009", "4026",
				    "4027", "4177", "4200", "4229" ], [ A, B,
				    H.depth, H.dssType, H.dssId, H.dssSetId,
				    H.alias, J ], [], P));
	    break;
	case microstrategy.DSSTYPE_ATTRIBUTE_FORM:
	    S.push(N.createActionObject(H, mstrUpdateManager.ADD_FORM,
		    this.beanPath, [ "4110", "4165", "4166", "4008", "4009",
			    "4168", "4177", "4200" ],
		    [ A, H.parentDssId, H.dssId, B, H.depth, O, H.dssSetId,
			    H.parentAlias ], [], P));
	    break;
	case microstrategy.DSSTYPE_METRIC:
	case microstrategy.DSSTYPE_USER_METRIC:
	case microstrategy.DSSTYPE_USER_SUMMARY_METRIC:
	    if (!G.hasMetrics) {
		S.push(N.createActionObject(H,
			mstrUpdateManager.ADD_TEMPLATE_METRIC, this.beanPath, [
				"4110", "4029", "4008", "4009", "4122", "4201",
				"4177", "4164", "4229" ],
			[ A, "0", B, H.depth, H.dssId, H.alias, H.dssSetId,
				H.dssSubtype, J ], [], P));
	    } else {
		S.push(N.createActionObject(H,
			mstrUpdateManager.ADD_TEMPLATE_METRIC, this.beanPath, [
				"4110", "4029", "4122", "4201", "4177", "4164",
				"4229" ], [ A, H.depth, H.dssId, H.alias,
				H.dssSetId, H.dssSubtype, J ], [], P));
	    }
	    if (H.dssType == microstrategy.DSSTYPE_USER_METRIC
		    && mstrGridReport.isRWD()) {
		this.flush = true;
		S.push(N.createActionObject(null,
			mstrUpdateManager.APPLY_CHANGES,
			mstrUpdateManager.applyChangesBeanPath, [], [], [],
			null));
	    }
	    break;
	}
	if (this.useClientSideManipulations && S.length > 0) {
	    this.template.add(R, B, H.depth, O);
	    if (mstrGridReport.isReport()) {
		var I = null;
		if (this.id.indexOf("_graph") > -1) {
		    I = microstrategy.bone(this.id.substr(0, this.id
			    .indexOf("_graph")));
		} else {
		    I = microstrategy.bone(this.id + "_graph");
		}
		if (I) {
		    I.template.generateTemplate();
		    I.template.sendUpdate();
		}
	    }
	    if (this.useDNDMapping && this.mask != null) {
		this.mask.onmaskedobjectresize();
	    }
	}
	this.dSetId = H.dssSetId || this.dSetId;
	return S;
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrGridReport.prototype.canAddMDXUnit = function(F) {
    try {
	if (this.reportObjs) {
	    var D = this.reportObjs, H = F
		    .getAttribute(microstrategy.HTMLATTR_DSS_TYPE), G = F
		    .getAttribute("hid"), B = F.getAttribute("did");
	    if (H == microstrategy.DSSTYPE_DIMENSION) {
		for ( var C = 0, A = D.length; C < A; C++) {
		    if (D[C].oty == microstrategy.DSSTYPE_ATTRIBUTE
			    && D[C].hid == G && D[C].did == B) {
			return false;
		    }
		}
	    } else {
		if (H == microstrategy.DSSTYPE_ATTRIBUTE) {
		    for ( var C = 0, A = D.length; C < A; C++) {
			if (D[C].oty == microstrategy.DSSTYPE_DIMENSION
				&& D[C].hid == G && D[C].did == B) {
			    return false;
			}
		    }
		}
	    }
	}
	return true;
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrGridReport.prototype.changeGridDataSource = function(A, B) {
    if (A == this.gridStructureInfo.dataSetId) {
	return B;
    }
    B.push(this.um.createActionObject(this.elem,
	    mstrUpdateManager.CHANGE_DATA_SET, this.beanPath, [ "2048031",
		    "2048012" ], [ A, this.objId ]));
    this.gridStructureInfo.dataSetId = A;
    if (this.useClientSideManipulations) {
	microstrategy.eventManager.notifyOrphanBones("ongriddatasourcechange");
    }
    return B;
};
mstrGridReport.prototype.replaceTemplate = function(D, E, C) {
    try {
	var A = new mstrObjectInfoImpl(D);
	alert("Sorry, this feature has not been implemented yet.");
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return C;
};
mstrGridReport.prototype.isGridInCellSelectionMode = function() {
    try {
	return (this.selections && this.selections.hasHilitedCells());
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrGridReport.prototype.getObjInfoList = function(F) {
    try {
	var E = [];
	for ( var C = 0, B = F.length; C < B; ++C) {
	    var A = this.gridStructureInfo.getGridUnitInfo(F[C],
		    (microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM == F[C]
			    .getAttribute(microstrategy.HTMLATTR_SUBOBJTYPE)));
	    if (A) {
		E.push(A);
	    }
	}
	return E;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrGridReport.prototype._updateObjInfoList = function(E) {
    if (!E) {
	return;
    }
    if (!mstrGridReport.isDesignMode() && this.overlapGridTitles) {
	return;
    }
    var C = false;
    var D = false;
    for ( var B = 0; B < E.length; B++) {
	var A = E[B];
	if (A.isMetricTemplateUnit) {
	    C = true;
	} else {
	    if (A.subtype == microstrategy.SUBOBJTYPE_METRIC) {
		D = true;
	    }
	}
	if (C && D) {
	    break;
	}
    }
    B = 0;
    if (C && D) {
	while (B < E.length) {
	    var A = E[B];
	    if (A.subtype == microstrategy.SUBOBJTYPE_METRIC) {
		E.splice(B, 1);
	    } else {
		B++;
	    }
	}
    }
};
mstrGridReport.prototype.keepUnits = function(G, K) {
    try {
	var F = this.getObjInfoList(G), J = this.gridStructureInfo, A = [], B = {
	    metricCount : 0,
	    hasRowAxis : false,
	    hasColAxis : false,
	    hasMetricTemplateUnit : false
	};
	for ( var E = 0, C = F.length; E < C; E++) {
	    switch (F[E].axis) {
	    case microstrategy.GRIDCELL_AXIS_METRICS:
		B[F[E].dssId] = true;
		B.metricCount++;
		break;
	    case microstrategy.GRIDCELL_AXIS_ROWS:
	    case microstrategy.GRIDCELL_AXIS_COLUMNS:
		if (F[E].isMetricTemplateUnit) {
		    B.hasMetricTemplateUnit = true;
		} else {
		    if (F[E].subtype == microstrategy.SUBOBJTYPE_ATTRIBUTE) {
			B.hasRowAxis = B.hasRowAxis
				|| (F[E].axis == microstrategy.GRIDCELL_AXIS_ROWS);
			B.hasColAxis = B.hasColAxis
				|| (F[E].axis == microstrategy.GRIDCELL_AXIS_COLUMNS);
			B[F[E].dssId] = true;
		    } else {
			if (F[E].subtype == microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM) {
			    B.hasRowAxis = B.hasRowAxis
				    || (F[E].axis == microstrategy.GRIDCELL_AXIS_ROWS);
			    B.hasColAxis = B.hasColAxis
				    || (F[E].axis == microstrategy.GRIDCELL_AXIS_COLUMNS);
			    B[F[E].dssId + F[E].parentDssId] = true;
			}
		    }
		}
		break;
	    default:
		break;
	    }
	}
	if (!B.hasMetricTemplateUnit && B.metricCount > 0
		&& B.metricCount < J.metricAxis.units.length) {
	    for ( var E = 0, C = J.metricAxis.units.length; E < C; E++) {
		var I = J.metricAxis.units[E];
		if (!B.hasOwnProperty(I.dssId)) {
		    A.push(I);
		}
	    }
	}
	function H(O) {
	    if (O.isMetricTemplateUnit) {
		return;
	    }
	    if (!B.hasOwnProperty(O.dssId)) {
		if (O.hasAttForms()) {
		    for ( var N = 0, M = O.attForms.size(); N < M; N++) {
			var L = O.attForms.units[N];
			if (!B.hasOwnProperty(L.dssId + L.parentDssId)) {
			    A.push(L);
			}
		    }
		} else {
		    A.push(O);
		}
	    }
	}
	if (B.hasRowAxis) {
	    for ( var E = 0, C = J.rowAxis.units.length; E < C; E++) {
		H(J.rowAxis.units[E]);
	    }
	}
	if (B.hasColAxis) {
	    for ( var E = 0, C = J.colAxis.units.length; E < C; E++) {
		H(J.colAxis.units[E]);
	    }
	}
	K = this.deleteUnits(A, K, false);
    } catch (D) {
	microstrategy.errors.log(D);
    }
    return K;
};
mstrGridReport.prototype.deleteMultiItemSrc = function(A, C, E) {
    try {
	var D = this.getObjInfoList(A);
	C = this.deleteUnits(D, C, E);
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return C;
};
mstrGridReport.prototype.deleteUnits = function(E, Q, H) {
    try {
	var M = !!H;
	var O = this
		.isRemoveFromGrid(microstrategy.FEATURE_WEB_REMOVE_FROM_GRID);
	var F = mstrGridReport.updateNow();
	var B = "";
	var N = [];
	var P = {
	    id : this.id
	};
	if (this.isGridObjectLocked(E)) {
	    return Q;
	}
	this._updateObjInfoList(E);
	var J = this.um;
	for ( var G = 0, C = E.length; G < C; G++) {
	    var L = E[G];
	    if (!M && O) {
		B += this.buildPivotingSrc(L);
	    } else {
		B += this.buildDeletingFromReportSrc(L);
	    }
	}
	if (F == mstrUpdateManager.UPDATE_LATER && !M) {
	    for ( var G = 0, C = E.length; G < C; G++) {
		var L = E[G];
		N = this.deleteUnit(L, N, H);
	    }
	}
	if (B.length > 0) {
	    P.list = N;
	    var A = mstrUpdateManager.REMOVE_MULTIPLE_UNITS_FROM_WORKING_SET;
	    var K = [ "4213" ];
	    var I = [ B ];
	    if (!M && O) {
		A = mstrUpdateManager.REMOVE_MULTIPLE_UNITS;
		K = [ "4110" ].concat(K);
		I = [ F ].concat(I);
		if (mstrGridReport.isRWD()) {
		    K = [ "4179" ].concat(K);
		    I = [ "true" ].concat(I);
		}
	    }
	    Q.push(J.createActionObject(null, A, this.beanPath, K, I, null, P));
	}
    } catch (D) {
	microstrategy.errors.log(D);
    }
    return Q;
};
mstrGridReport.prototype.deleteItemSrc = function(D, C, E) {
    try {
	var A = this.gridStructureInfo.buildGridUnitInfo(D);
	this.deleteUnit(A, C, E);
	return C;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrGridReport.prototype.deleteUnit = function(K, N, G) {
    try {
	var H = this.um;
	var E = {
	    id : this.id
	};
	var D = mstrGridReport.updateNow();
	var J = !!G;
	var M = this
		.isRemoveFromGrid(microstrategy.FEATURE_WEB_REMOVE_FROM_GRID);
	if (K.subtype == microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM) {
	    M = this
		    .isRemoveFromGrid(microstrategy.FEATURE_USE_REPORT_OBJECT_WINDOW);
	}
	if (this.isGridObjectLocked([ K ])) {
	    return N;
	}
	if (!J && M) {
	    var L = mstrGridReport.isRWD();
	    var P = microstrategy.bone("pbb_GroupByStyle");
	    var C = P && P.hasAllSelected;
	    var A = C ? "1" : "0";
	    switch (K.subtype) {
	    case microstrategy.SUBOBJTYPE_ATTRIBUTE:
		if (this.useClientSideManipulations) {
		    if (K.isMetricTemplateUnit) {
			var I = [];
			for ( var F = 0; F < this.gridStructureInfo.metricAxis
				.size(); F++) {
			    I.push(this.gridStructureInfo.metricAxis.units[F]);
			}
			E.metrics = I;
			if (this.controlLinks && this.controlLinks.Metrics) {
			    delete this.controlLinks.Metrics;
			}
		    }
		}
		if (this.controlLinks && this.controlLinks[K.dssId]) {
		    delete this.controlLinks[K.dssId];
		}
		if (K.depth > 2) {
		    var O = this.gridStructureInfo.allAxes[K.axis].units;
		    for ( var F = 0; F < O.length; F++) {
			if (K.dssId == O[F].dssId) {
			    K.depth = O[F].depth;
			    break;
			}
		    }
		}
		N.push(H.createActionObject(K,
			mstrUpdateManager.REMOVE_TEMPLATE_UNIT, this.beanPath,
			[ "4110", "4006", "4007", "4179", "4229" ], [ D,
				K.axis, K.depth, L, A ], [ D, K.axis, K.depth,
				L, A ], E));
		break;
	    case microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM:
		if (this
			.isFeatureAvailable(microstrategy.FEATURE_SET_ATTRIBUTEFORM_DISPLAY)) {
		    N.push(H.createActionObject(K,
			    mstrUpdateManager.REMOVE_FORM, this.beanPath, [
				    "4110", "4165", "4166" ], [ D,
				    K.parentDssId, K.dssId ], [ D,
				    K.parentDssId, K.dssId ], E));
		} else {
		    K = this.gridStructureInfo.findUnit(K.parentDssId);
		    N.push(H.createActionObject(K,
			    mstrUpdateManager.REMOVE_TEMPLATE_UNIT,
			    this.beanPath, [ "4110", "4006", "4007", "4179" ],
			    [ D, K.axis, K.depth, L ],
			    [ D, K.axis, K.depth, L ], E));
		}
		break;
	    case microstrategy.SUBOBJTYPE_METRIC:
		E.metricsAxis = this.gridStructureInfo.metricsAxis;
		E.metricsDepth = (this.gridStructureInfo.metricAxis.size() > 1) ? null
			: this.gridStructureInfo.metricsDepth;
		N.push(H.createActionObject(K,
			mstrUpdateManager.REMOVE_TEMPLATE_METRIC,
			this.beanPath, [ "4110", "4028", "4179", "4229" ], [ D,
				K.depth, L, A ], [ D, K.depth, L, A ], E));
		break;
	    }
	} else {
	    if (K.isMetricTemplateUnit) {
		N.push(H.createActionObject(K,
			mstrUpdateManager.REMOVE_ALL_WORKINGSET_METRICS,
			this.beanPath, [ "4110" ], [ D ], [ D ], E));
	    } else {
		switch (K.subtype) {
		case microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM:
		    if (this
			    .isFeatureAvailable(microstrategy.FEATURE_MODIFY_REPORT_LIST)) {
			if (this
				.isFeatureAvailable(microstrategy.FEATURE_SET_ATTRIBUTEFORM_DISPLAY)) {
			    N.push(H.createActionObject(K,
				    mstrUpdateManager.REMOVE_FORM,
				    this.beanPath, [ "4110", "4165", "4166" ],
				    [ D, K.parentDssId, K.dssId ], [ D,
					    K.parentDssId, K.dssId ], E));
			} else {
			    N.push(H.createActionObject(K,
				    mstrUpdateManager.REMOVE_WORKINGSET_OBJECT,
				    this.beanPath, [ "4110", "4165", "4166" ],
				    [ D, K.dssId, K.dssType ], [ D, K.dssId,
					    K.dssType ], E));
			}
		    } else {
			showMessage({
			    contents : "You do not have the necessary privileges to perform the selected action.",
			    elements : microstrategy.OK_BUTTON,
			    type : mstrMsgBoxImpl.MSG_WARNING
			});
		    }
		    break;
		default:
		    N.push(H.createActionObject(K,
			    mstrUpdateManager.REMOVE_WORKINGSET_OBJECT,
			    this.beanPath, [ "4110", "4165", "4166" ], [ D,
				    K.dssId, K.dssType ], [ D, K.dssId,
				    K.dssType ], E));
		    break;
		}
	    }
	}
	if (this.isMdxCube) {
	    this.useClientSideManipulations = false;
	}
	if (this.useClientSideManipulations) {
	    this.template.remove(K);
	    if (this.useDNDMapping && this.mask != null) {
		this.mask.onmaskedobjectresize();
	    }
	    if (this.gridStructureInfo.isEmptyTemplate) {
		this.dSetId = null;
	    }
	}
	return N;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrGridReport.prototype.isGridObjectLocked = function(A) {
    if (A) {
	var C = A.length;
	for ( var B = 0; B < C; B++) {
	    var D = A[B];
	    if (D.isLocked
		    && (D.subtype != microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM || !this
			    .isFeatureAvailable(microstrategy.FEATURE_SET_ATTRIBUTEFORM_DISPLAY))) {
		var E = (C == 1) ? "3807" : "3811";
		showMessage({
		    contents : mstrGridReport.desp(E),
		    elements : microstrategy.OK_BUTTON,
		    type : mstrMsgBoxImpl.MSG_WARNING
		});
		return true;
	    }
	}
    }
    return false;
};
mstrGridReport.prototype.swapAxes = function() {
    try {
	this.um.add([ this.um.createActionObject(this.elem,
		mstrUpdateManager.SWAP_TEMPLATE_AXES, this.beanPath, [], [],
		[], {
		    id : this.id
		}) ]);
	if (this.useClientSideManipulations) {
	    if (this.isGrid || this.zonesEditor) {
		this.template.swapAxes();
	    }
	} else {
	    this.um.flushAndSubmitChanges();
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.addPercentToTotal = function(F, G, D) {
    try {
	var A = this.gridStructureInfo.buildGridUnitInfo(F);
	var C = [ "4176", "4122" ];
	var B = [ G, A.dssId ];
	if (D != null) {
	    C.splice(1, 0, "4165");
	    B.splice(1, 0, D);
	}
	this.addAction(A, mstrUpdateManager.INSERT_PERCENT_TO_TOTAL_METRIC,
		this.beanPath, C, B);
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrGridReport.prototype.addRankMetric = function(G, E, D) {
    try {
	var A = this.gridStructureInfo.buildGridUnitInfo(G);
	var C = [ "4122", "4012" ];
	var B = [ A.dssId, D ];
	if (E != null) {
	    C.splice(0, 0, "4165");
	    B.splice(0, 0, E);
	}
	this.addAction(A, mstrUpdateManager.INSERT_RANK_METRIC, this.beanPath,
		C, B);
    } catch (F) {
	microstrategy.errors.log(F);
    }
};
mstrGridReport.prototype.addTransformationMetric = function(D, B, E) {
    try {
	var A = this.gridStructureInfo.buildGridUnitInfo(D);
	this.addAction(A, mstrUpdateManager.INSERT_TRANSFORMATION_METRIC,
		this.beanPath, [ "4175", "4122", "4032" ], [ B, A.dssId, E ]);
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.handleBanding = function(E, D) {
    try {
	if (!E) {
	    E = (this.checkBanding) ? 0 : 1;
	}
	this.checkBanding = !this.checkBanding;
	var A = [ "4125" ];
	var C = [ E ];
	if (this.styleName && this.styleName.length > 0) {
	    A.push("4126");
	    C.push(this.styleName);
	}
	this.addAction(this.elem, mstrUpdateManager.TOGGLE_BANDING,
		this.beanPath, A, C, D);
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.setSubtotalDisplayOption = function(B, A, D) {
    try {
	this.addAction(this.elem, mstrUpdateManager.SET_SUBTOTAL_POSITION,
		this.beanPath, [ "4006", "4217" ], [ B, A ], D);
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.setSubtotalAxisStyle = function(A, F) {
    try {
	var G = A.split("|");
	if (!G) {
	    return false;
	}
	var D = G[0];
	var B = G[1];
	var C = G[2];
	this.addAction(null, mstrUpdateManager.ADD_AXIS_SUBTOTAL,
		this.beanPath, [ "4006", "4218", "4016", "4110" ], [ D, B, C,
			"1" ], F);
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrGridReport.prototype.setSubtotalSelectedUnit = function(A, D) {
    try {
	var F = A.split("|");
	if (!F) {
	    return false;
	}
	var B = F[0];
	var E = F[1];
	this.addAction(null, mstrUpdateManager.ADD_UNIT_SUBTOTAL,
		this.beanPath, [ "4215", "4218" ], [ E, B ], D);
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.disableSubtotal = function(A, D) {
    try {
	var C = A;
	this.addAction(null, mstrUpdateManager.DISABLE_SUB_TOTALS,
		this.beanPath, [ "4218", "4110" ], [ C, "1" ], D);
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.handleChangeStyle = function(A, C) {
    try {
	this.addAction(this.elem, mstrUpdateManager.CHANGE_STYLE,
		this.beanPath, [ "4041" ], [ A ], C);
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.setVisualizationSettings = function(K, N, M, E, P, I,
	C, O, D, F) {
    try {
	var A = mstrUpdateManager.SET_VISUALIZATION_PROPERTIES;
	var H = mstrGridReport.updateNow();
	var L = [];
	var J = [];
	if (K) {
	    L.push("4096048");
	    J.push(K);
	}
	var B;
	if (N != null) {
	    L.push("4096049");
	    J.push(N);
	    B = this.getAllVisList()[N];
	    if (B) {
		L.push("4255");
		J.push((typeof (B.ip) != "undefined") ? B.ip : "0");
		L.push("409606615");
		J.push((typeof (B.im) != "undefined") ? B.im : "");
	    }
	}
	if (M != null) {
	    L.push("4096050");
	    J.push(M);
	}
	if (E) {
	    L.push("4096051");
	    J.push(E);
	}
	if (I != null) {
	    L.push("409606616");
	    J.push(I);
	}
	if (C != null) {
	    L.push("409606617");
	    J.push(C);
	}
	if (O != null) {
	    L.push("409606618");
	    J.push(O);
	}
	if (D != null) {
	    L.push("409606619");
	    J.push(D);
	}
	if (D != null) {
	    L.push("409606621");
	    J.push(F);
	}
	microstrategy.updateVisProps(K, N, M, E, this);
	if (mstrGridReport.isRWD() && (B || N == "")) {
	    this.curWgtId = N == "" ? "" : B.id;
	}
	L.push("4110");
	J.push(H);
	this.addAction(this.elem, A, this.beanPath, L, J, P);
	if (P) {
	    this.notifySelectionChange("onvischange");
	}
	return true;
    } catch (G) {
	microstrategy.errors.log(G);
	return false;
    }
};
mstrGridReport.prototype.getAllVisList = function() {
    return (this.allVisList) ? this.allVisList : this.docViewer.allVisList;
};
mstrGridReport.prototype.handleViewMode = function(A, D, E) {
    try {
	var B = (mstrGridReport.isReport()) ? mstrUpdateManager.REPORT_CHANGE_VIEW_MODE
		: mstrUpdateManager.CHANGE_VIEW_MODE;
	this.addAction(this.elem, B, this.beanPath, [ "4115" ], [ A ], D);
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.updateViewMode = function(A) {
    try {
	var C = parseInt(A);
	if (this.isTemplateEmpty() && !this.quickSwitch) {
	    this.isGrid = true;
	    this.isGraph = false;
	    this.isVisualization = false;
	} else {
	    this.isGrid = (C == microstrategy.DISPLAY_MODE_GRID_AND_GRAPH || C == microstrategy.DISPLAY_MODE_GRID);
	    this.isGraph = (C == microstrategy.DISPLAY_MODE_GRID_AND_GRAPH || C == microstrategy.DISPLAY_MODE_GRAPH);
	    this.isVisualization = (C >= microstrategy.FIRST_VISUALIZATION_VIEW_MODE);
	}
	if (this.isGraph && !this.quickSwitch) {
	    this.major = this.DEFAULT_GRAPH_MAJOR_TYPE;
	    this.minor = this.DEFAULT_GRAPH_MINOR_TYPE;
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.toggleSubtotals = function() {
    try {
	var B = (this
		.isFeatureAvailable(microstrategy.FEATURE_CHECK_SHOW_SUBTOTALS)) ? 0
		: 1;
	this.addAction(this.elem, mstrUpdateManager.TOGGLE_SUBTOTALS,
		this.beanPath, [ "4116" ], [ B ]);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.displayThresholds = function(C, B) {
    try {
	this.addAction(this.elem, mstrUpdateManager.TOGGLE_GRID_THRESHOLDS,
		this.beanPath, [ "4171" ], [ C ], B);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.addQuickThresholds = function(T, U) {
    try {
	if (U == null || U.indexOf("|") < 1) {
	    return false;
	}
	var M = U.split("|");
	var F = M[0];
	var S = M[1];
	var H = microstrategy.servletName + "." + microstrategy.pageName + "."
		+ S;
	var N = this.selections.selectedUnits;
	var V = "";
	var K = "";
	for ( var R in N) {
	    if (N[R] != null && N[R].isMetric) {
		if (N[R].gridTarget != null && N[R].gridTarget.length > 0) {
		    var L = N[R].gridTarget.split(",");
		    var P = this.gridStructureInfo.getUnitIndex(
			    microstrategy.GRIDCELL_AXIS_METRICS,
			    parseInt(L[0]) + 1);
		    if (P != null) {
			V += P + ",";
		    }
		    var J = this.gridStructureInfo.getUnit(
			    microstrategy.GRIDCELL_AXIS_METRICS,
			    parseInt(L[0]) + 1);
		    if (J != null) {
			K += J.dssId + ",";
		    }
		}
	    }
	}
	if (V.length > 0) {
	    V = V.slice(0, -1);
	}
	if (K.length > 0) {
	    K = K.slice(0, -1);
	}
	var I = mstrQuickThresholds[F];
	var G = (T) ? T : [];
	if (I) {
	    G.push(this.um.createActionObject(this.elem,
		    mstrUpdateManager.CLEAR_THRESHOLDS, H, [ "111009",
			    "111013", "111018" ], [ V, "0", "1" ]));
	    var C = I.length;
	    for (R = 0; R < C; R++) {
		var D = I[R];
		var A = ((C - 1) == R) ? 1 : 0;
		var Q = null;
		var O = [ "111002", "111003", "111004", "111005", "111007",
			"111008", "111009", "111010", "111013" ];
		var B = [ D.formatProps, D.replaceType, D.replaceValue,
			D.floor, D.thresholdType, K, V, D.thresholdName, A ];
		if (D.ceiling != null && D.ceiling.length > 0
			&& D.floor != null && D.floor.length > 0) {
		    O.splice(4, 0, "111006");
		    B.splice(4, 0, D.ceiling);
		} else {
		    if (D.ceiling != null && D.ceiling.length > 0) {
			O.splice(3, 1, "111006");
			B.splice(3, 1, D.ceiling);
		    } else {
			if (D.floor != null && D.floor.length > 0) {
			} else {
			    O = null;
			    B = null;
			}
		    }
		}
		if (O != null && B != null) {
		    Q = this.um.createActionObject(this.elem,
			    mstrUpdateManager.ADD_THRESHOLD, H, O, B);
		}
		if (Q != null) {
		    G.push(Q);
		}
	    }
	    if (T == null) {
		this.um.add(G);
	    }
	    this.applyAddQuickThresholds();
	    return true;
	}
    } catch (E) {
	microstrategy.errors.log(E);
    }
    return false;
};
mstrGridReport.prototype.isReportCustomSQL = function() {
    try {
	return this.isXDACustomSQLReport;
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.isReportMdxCube = function() {
    try {
	return this.isMdxCube;
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.isReportViewReport = function() {
    try {
	return this.isViewReport;
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.applyAddQuickThresholds = function() {
    try {
	this.um.flushAndSubmitChanges();
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.submitSetPropertyValueAction = function(B, A) {
    this
	    .addAction(this.elem, mstrUpdateManager.SET_PROPERTY_VALUES,
		    this.beanPath, [ "4146" ], [ "Template Formatting!" + B
			    + "!" + A ]);
};
mstrGridReport.prototype.toggleAttForms = function() {
    try {
	this.submitSetPropertyValueAction("LongNames!", this.showAttForms ? 0
		: 4);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.toggleMergeHeaders = function(C) {
    try {
	var B = C.substr(10, 3);
	this.submitSetPropertyValueAction("Merge"
		+ ((B == "Col") ? "Column" : "") + "Cells", (this
		.isFeatureAvailable(microstrategy["FEATURE_CHECK_MERGE_"
			+ B.toUpperCase() + "_HEADER"])) ? 0 : -1);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.toggleLockHeaders = function(A) {
    try {
	var E = A.substr(9, 3) == "Col" ? "Column" : "Row", J = microstrategy.FEATURE_CHECK_LOCK_COLUMN_HEADERS, D = microstrategy.FEATURE_CHECK_LOCK_ROW_HEADERS, F = (E == "Row" ? D
		: J), C = this.lockSet, I = this.isFeatureAvailable(F), B = I ? 0
		: -1, H;
	H = this.um.createActionObject(this.elem,
		mstrUpdateManager.SET_PROPERTY_VALUES, this.beanPath,
		[ "4146" ],
		[ "Template Formatting!Lock" + E + "Headers!" + B ], []);
	this.um.add([ H ]);
	this.setFeature(F, !I);
	this.useLockset = this.isFeatureAvailable(D)
		|| this.isFeatureAvailable(J);
	iframe.showWaitPage(true);
	if (C) {
	    C.removeQuadrants();
	    delete this.lockSet;
	}
	this.initLockHeaders();
	this.resizeLockSet();
	this.saveEnabled = true;
	this.notifySelectionChange("ongridselectionschange");
	iframe.hideWaitPage();
    } catch (G) {
	microstrategy.errors.log(G);
    }
};
mstrGridReport.prototype.oncolresize = function(F, A, E, D) {
    try {
	if (F.objId == this.objId) {
	    if (F != this && this.isGridBone && this.colWidths) {
		this.colWidths.oncolresize(A, E, D);
	    }
	    window.setTimeout("microstrategy.bone('" + F.id
		    + "').resizeLockSet(true)", 1);
	    var B = this.mask && this.mask.onmaskedobjectresize();
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.raiseColResizeEvent = function(A, C, B) {
    this.oncolresize(this, A, C, B);
};
mstrGridReport.prototype.initColResize = function(A) {
    try {
	this.setupColResize(A);
	this.nowrapHiddenColumn();
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.setupColResize = function(A) {
    try {
	if (!this.gridTable || !this.isResizable) {
	    return;
	}
	this.gridWidthInfo.useExtraColTag = A;
	this.colWidths = new mstrColResizeImpl(this.gridTable,
		"microstrategy.bone('" + this.id + "').colWidths", this);
	this.colWidths.syncCols();
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.nowrapHiddenColumn = function() {
    var D = this.gridTable;
    this.nowrapHidColOnGrid(D);
    if (this.lockSet) {
	var B = this.lockSet.quadrants;
	for ( var C = 1; C < B.length; C++) {
	    var A = B[C] && B[C].firstChild;
	    if (A) {
		this.nowrapHidColOnGrid(A);
	    }
	}
    }
};
mstrGridReport.prototype.nowrapHidColOnGrid = function(A) {
    try {
	var H = A.getElementsByTagName("TBODY")[0];
	if (!H || A.style.tableLayout != "fixed") {
	    return;
	}
	var L, D, G;
	if (!this.colWidths) {
	    if (A.childNodes[0].tagName.toUpperCase() != "COLGROUP") {
		return;
	    }
	    var J = A.childNodes[0].childNodes;
	    L = J.length;
	    D = [];
	    for (G = 0; G < L; G++) {
		D.push(parseInt(J[G].style.width, 10));
	    }
	} else {
	    L = this.colWidths.colCount;
	    D = this.colWidths.widths;
	}
	var F, M, K, I, B, C;
	for (G = 0; G < H.rows.length; G++) {
	    M = H.rows[G];
	    I = L - 1;
	    B = 0;
	    for (F = M.cells.length - 1; F >= 0; F--) {
		K = M.cells[F];
		B = K.getAttribute("colspan") || 1;
		if (B > 1) {
		    C = 0;
		    for (k = 0; k < B; k++) {
			C += D[I];
			I--;
		    }
		    if (C <= 0) {
			K.className = K.className + " nwFixedWidth0";
		    }
		} else {
		    if (D[I] <= 0) {
			K.className = K.className + " nwFixedWidth0";
		    }
		    I--;
		}
	    }
	}
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrGridReport.prototype.processGridFormattingProperties = function(O) {
    try {
	var V = this.um;
	var J = [];
	var I = null;
	var S = mstrFormatObject;
	var X = this.styleName;
	var G = false;
	for ( var c = 0; c < O.length; c++) {
	    var F = O[c].split("|");
	    var m = F[0];
	    var R = F[1];
	    var Z = "", T = "", b = "";
	    var B = null;
	    var D = null;
	    var h = this.selections.getSelectedGridTargetGridLevel();
	    for ( var N in h) {
		var M = h[N].split(",");
		var Q = M[0];
		var Y = M[1];
		var a = M[2];
		var C = M[3];
		if (a == 2) {
		    Y = Q;
		    Q = "0";
		}
		var L = [];
		var U = {
		    Name : [ "4042" ],
		    Size : [ "4045", "fontSize" ],
		    Color : [ "4048", "color" ],
		    Bold : [ "4043" ],
		    Italic : [ "4044" ],
		    Underline : [ "4047" ],
		    Strikeout : [ "4046" ]
		};
		if (!!U[m]) {
		    b = mstrUpdateManager.SAVE_GRID_FONT_PROPERTIES;
		    L = U[m];
		} else {
		    var H = {
			Horizontal : [ "4056" ],
			Vertical : [ "4057" ],
			TextWrap : [ "4058" ],
			TextDirection : [ "4222" ],
			LeftPadding : [ "4223" ],
			TopPadding : [ "4224" ],
			RightPadding : [ "4225" ],
			BottomPadding : [ "4226" ]
		    };
		    if (!!H[m]) {
			b = mstrUpdateManager.SAVE_GRID_ALIGNMENT_PROPERTIES;
			L = H[m];
		    } else {
			var e = {
			    TopColor : [ "4067", "borderTopColor" ],
			    LeftColor : [ "4068", "borderLeftColor" ],
			    BottomColor : [ "4069", "borderBottomColor" ],
			    RightColor : [ "4070", "borderRightColor" ],
			    TopStyle : [ "4061" ],
			    LeftStyle : [ "4062" ],
			    BottomStyle : [ "4063" ],
			    RightStyle : [ "4064" ],
			    b3dweight : [ "4222" ],
			    b3dstyle : [ "4223" ]
			};
			if (!!e[m]) {
			    b = mstrUpdateManager.SAVE_GRID_BORDER_PROPERTIES;
			    L = e[m];
			} else {
			    var o = {
				Category : [ "4050" ],
				DecimalPlaces : [ "4051" ],
				ThousandSeparator : [ "4052" ],
				CurrencySymbol : [ "4053" ],
				CurrencyPosition : [ "4054" ],
				NegativeNumbers : [ "4111" ],
				Format : [ "4055" ]
			    };
			    if (!!o[m]) {
				b = mstrUpdateManager.SAVE_GRID_NUMBER_PROPERTIES;
				L = o[m];
			    } else {
				var P = {
				    FillColor : [ "4071" ]
				};
				if (!!P[m]) {
				    b = mstrUpdateManager.SAVE_GRID_PATTERN_PROPERTIES;
				    L = P[m];
				    B = "4224";
				    if (!R || R == "") {
					L[1] = "backgroundColor";
					D = "1";
				    } else {
					if (R.indexOf(",") < 0) {
					    L[1] = "backgroundColor";
					    D = "0";
					} else {
					    D = "2";
					}
				    }
				}
			    }
			}
		    }
		}
		Z = L[0];
		T = !L[1] ? R : S.encodeValue(L[1], R);
		if (b != "") {
		    var n = [ "4006", "4007", "4109", "4108", Z, "4126" ];
		    var l = [ Q, Y, C, a, T, X ];
		    if (Z == "4071") {
			n = n.concat(B);
			l = l.concat(D);
			if (R.indexOf && R.indexOf(",") >= 0) {
			    var K = this.convertGradientInfo(R);
			    T = S.encodeValue("backgroundColor", T);
			    l[4] = T;
			    n = n.concat(this.gradientColorId,
				    this.gradientAngleId,
				    this.gradientXOffsetId,
				    this.gradientYOffsetId);
			    l = l.concat(K[this.gradientColorId],
				    K[this.gradientAngleId],
				    K[this.gradientXOffsetId],
				    K[this.gradientYOffsetId]);
			}
		    } else {
			if (Z == "4223") {
			    var g = mstr.utils.Color.hex2rgb("#FFFFFF");
			    var W = mstr.utils.Color
				    .get3DBorderColor(g, "dark");
			    var A = mstr.utils.Color.get3DBorderColor(g,
				    "light");
			    if (T != "1") {
				var E = A;
				A = W;
				W = E;
			    }
			    A = S.encodeValue("borderTopColor2", A);
			    W = S.encodeValue("borderBottomColor2", W);
			    n.splice(5, 1, "4229", "4231", "4230", "4232");
			    l.splice(5, 1, A, A, W, W);
			}
		    }
		    J.push(V.createActionObject(this.elem, b, this.beanPath, n,
			    l, [], []));
		    X = "";
		}
	    }
	}
	if (J.length > 0) {
	    V.add(J);
	    if (!this.useClientSideManipulations) {
		V.flushAndSubmitChanges();
	    }
	}
    } catch (d) {
	microstrategy.errors.log(d);
    }
};
mstrGridReport.prototype.processSingleFormattingProperty = function(A, E) {
    if (this.graphSelected) {
	if (this.processSingleFormattingPropertyGraph) {
	    this.processSingleFormattingPropertyGraph(A, E);
	} else {
	    var C = microstrategy.bone(this.id + "_gb");
	    C.graphFontStyle = this.graphFontStyle;
	    C.selectedGraphTargetValue = this.selectedGraphTargetValue;
	    if (C.processSingleFormattingPropertyGraph) {
		C.processSingleFormattingPropertyGraph(A, E);
	    }
	}
    } else {
	var D = true;
	for ( var B in this.selections.selectedUnits) {
	    D = false;
	    break;
	}
	if (D) {
	    this.setGridUnitSelections(this.gridUnitFormat,
		    this.gridValueFormat);
	}
	this.processSingleFormattingPropertyGrid(A, E);
    }
};
mstrGridReport.prototype.processSingleFormattingPropertyGrid = function(A, G) {
    try {
	var F = [ "4006", "4007", "4108", "4109", "4126" ];
	var E = {
	    n : A,
	    v : G
	};
	var D = [];
	if (A in this.toolbarFormatMap) {
	    E.n = this.toolbarFormatMap[A];
	}
	switch (A) {
	case "IncreaseDecimal":
	case "DecreaseDecimal":
	case "Currency":
	case "IntlCurrency":
	case "Percent":
	case "Comma":
	    if (A.indexOf("Decimal") > -1) {
		E.n = "409606611";
		E.v = (A.indexOf("Increase") > -1) ? 1 : -1;
	    } else {
		var B = 1;
		if (A == "Percent") {
		    B++;
		} else {
		    if (A == "Comma") {
			B = B + 2;
		    }
		}
		E.n = String(409606611 + B);
		E.v = 1;
	    }
	    break;
	}
	this.saveGridFormattingChange(F, E, D);
	if (D.length > 0) {
	    this.um.add(D);
	    this.um.flushAndSubmitChanges();
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.saveGridFormattingChange = function(K, V, Y) {
    try {
	var D = [];
	var T = "";
	if (V.m) {
	    var c = this.resolveGridTargetProperties(V.m);
	    D = [ [ c.axis, c.position, c.unit, c.level, this.styleName ] ];
	} else {
	    var O = this.styleName;
	    var N = this.selections.getSelectedGridTargetGridLevel();
	    for ( var M in N) {
		D.push(N[M].split(",").concat(O));
		O = "";
	    }
	}
	var I = this.getGridFormatMap();
	var G = I.getArgId(V.n) || V.n;
	var P = I.encode(V.n, V.v);
	if (!P && isNaN(P)) {
	    P = V.v;
	}
	var Z = {
	    1 : {
		i : 0
	    },
	    2 : {
		i : 2
	    },
	    4 : {
		i : 1
	    },
	    8 : {
		i : 3
	    }
	};
	for ( var S = 0, R = D.length; S < R; S++) {
	    var L = [].concat(K);
	    var H = [].concat(D[S]);
	    switch (V.n) {
	    case "backgroundColor":
	    case "Gradient":
		T = mstrUpdateManager.SAVE_GRID_PATTERN_PROPERTIES;
		L = L.concat("4224");
		if (V.n.indexOf("Gradient") > -1 || V.v.indexOf(",") > -1) {
		    H = H.concat("2");
		    L = L.concat([ 4071, 4225, 4226, 4229, 4230 ]);
		    H = H.concat(P);
		} else {
		    H = H.concat((V.v == "transparent") ? "1" : "0");
		    if (V.v == "transparent" && V.n == "backgroundColor") {
			P = null;
		    }
		}
		break;
	    case "fontFamily":
	    case "fontSize":
	    case "color":
	    case "fontWeight":
	    case "fontStyle":
	    case "textDecoration":
	    case "textDecoration2":
		T = mstrUpdateManager.SAVE_GRID_FONT_PROPERTIES;
		break;
	    case "Category":
	    case "DecimalPlaces":
	    case "CurrencySymbol":
	    case "CurrencyPosition":
	    case "NegativeNumbers":
	    case "ThousandSeparator":
	    case "Format":
		T = mstrUpdateManager.SAVE_GRID_NUMBER_PROPERTIES;
		break;
	    case "GridHorizontal":
	    case "Vertical":
	    case "Vertical2":
	    case "TextWrap":
	    case "TextDirection":
	    case "paddingLeft":
	    case "paddingTop":
	    case "paddingRight":
	    case "paddingBottom":
		T = mstrUpdateManager.SAVE_GRID_ALIGNMENT_PROPERTIES;
		break;
	    case "409606611":
	    case "409606612":
	    case "409606613":
	    case "409606614":
		T = mstrUpdateManager.NUMBER_FORMAT;
		break;
	    case "borders":
	    case "lncolor":
	    case "lnstyle":
		G = null;
		P = null;
		T = mstrUpdateManager.SAVE_GRID_BORDER_PROPERTIES;
		var A = 4061;
		var a = 4067;
		var U = this.convertSelectToUnitMemo(D[S]);
		var J, Q, X;
		var C = [ "Top", "Left", "Bottom", "Right" ];
		if (V.n == "borders") {
		    X = V.v[0];
		    var B = parseInt(X.v[0], 10);
		    if (B == 0) {
			J = 0;
		    } else {
			if (B == 16) {
			    J = 1;
			} else {
			    J = (X.cl) ? 1 : 0;
			    for (Q = 0; Q < 4; Q++) {
				if (Z[B].i != Q) {
				    C[Q] = null;
				}
			    }
			}
		    }
		}
		var W, F;
		for (Q = 0; Q < 4; Q++) {
		    if (!C[Q]) {
			continue;
		    }
		    L.push(String(A + Q));
		    L.push(String(a + Q));
		    W = C[Q] + "Style";
		    F = C[Q] + "Color";
		    if (V.n == "lncolor") {
			H.push(this.getGridFormatValue(U, W, false));
			H.push(I.encode(F, V.v));
			this.setGridFormatValue(U, F, V.v);
		    } else {
			if (V.n == "borders") {
			    H.push(String(J));
			    this.setGridFormatValue(U, W, J);
			} else {
			    J = this.getGridFormatValue(U, W, true);
			    if (J > 0) {
				this
					.setGridFormatValue(U, W, parseInt(V.v,
						10));
				H.push(V.v);
			    } else {
				H.push(J);
			    }
			}
			H
				.push(I.encode(F, this.getGridFormatValue(U, F,
					false)));
		    }
		}
		break;
	    default:
		continue;
	    }
	    if (G != null && P != null) {
		L.push(G);
		H.push(P);
	    }
	    var b = this.bp[T] || this.beanPath;
	    this.packageGridFormat(Y, T, L, H, b, this
		    .convertSelectToUnitMemo(D[S]), V.n, V.v);
	}
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrGridReport.prototype.isSelectionUnit = function(A) {
    try {
	return (A >= this.nonUnitCount);
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrGridReport.prototype.resolveGridTargetProperties = function(C) {
    try {
	var B;
	var G;
	var D;
	var A = parseInt(C.format);
	if (this.isSelectionUnit(C.unit)) {
	    var F = this.getSelectedGridUnitByIndex(C.unit);
	    if (F) {
		B = Math.max(F.axis, 0);
		G = (B == 0) ? F.depth - 1 : F.depth;
		D = (B == 0) ? 2 : 1;
	    }
	} else {
	    B = 0;
	    G = 0;
	    D = parseInt(C.unit);
	    switch (D) {
	    case microstrategy.GRID_BORDERS:
		D = 2;
		A = 6;
		break;
	    case mstrGridReport.ALL_UNITS:
		G = -9999;
		D = 7;
		break;
	    case mstrGridReport.ROW_UNITS:
		B = 1;
		D = 3;
		break;
	    case mstrGridReport.COL_UNITS:
		B = 2;
		D = 4;
		break;
	    case mstrGridReport.METRIC_UNITS:
		G = -999;
		D = 6;
		break;
	    }
	}
	return {
	    axis : B,
	    position : G,
	    unit : D,
	    level : A
	};
    } catch (E) {
	microstrategy.errors.log(E);
	return null;
    }
};
mstrGridReport.prototype.convertSelectToUnitMemo = function(B) {
    try {
	var E = parseInt(B[1], 10);
	var D = {
	    unit : -1,
	    format : parseInt(B[3], 10)
	};
	switch (E) {
	case -9999:
	    D.unit = mstrGridReport.ALL_UNITS;
	    break;
	case -999:
	    D.unit = mstrGridReport.METRIC_UNITS;
	    break;
	case -99:
	    D.unit = microstrategy.GRID_BORDERS;
	    break;
	default:
	    var A = parseInt(B[0], 10);
	    if (E == 0 && A != 0) {
		D.unit = (parseInt(B[2], 10) == 3) ? mstrGridReport.ROW_UNITS
			: mstrGridReport.COL_UNITS;
	    } else {
		if (A < 1) {
		    E++;
		}
		D.unit = this.resolveGridUnitId(A, E);
	    }
	    break;
	}
	return D;
    } catch (C) {
	microstrategy.errors.log(C);
	return {};
    }
};
mstrGridReport.prototype.packageGridFormat = function(H, C, B, E, A, G, F, I) {
    try {
	H.push(this.um.createActionObject(this.elem, C, A || this.beanPath, B,
		E, [], []));
	this.setGridFormatValue(G, F, I);
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrGridReport.prototype.getCellsWithAttr = function(D, B) {
    var A = [], C = this.elem.getElementsByTagName("table")[0];
    if (C) {
	A = microstrategy.findChildrenWithAtt(C, "td", D, B) || [];
    }
    return A;
};
mstrGridReport.prototype.findAllCells = function(C, B, A) {
    try {
	var J = [];
	var G = this.elem.getElementsByTagName("table")[0];
	var H = C.axis + "," + C.depth;
	if (C.subtype == microstrategy.SUBOBJTYPE_METRIC) {
	    H = microstrategy.GRIDCELL_AXIS_METRICS + "," + parseInt(C.depth);
	}
	var I = microstrategy.findChildrenWithAtt(G, "td",
		microstrategy.HTMLATTR_GRID_UNIT_POS, H)
		|| [];
	if (!I || I.length == 0 || A) {
	    var D = ((C.axis == -1) ? 0 : C.axis) + "A" + C.depth;
	    I = I.concat(microstrategy.findChildrenWithAtt(G, "td",
		    microstrategy.HTMLATTR_GRIDCELL_ID, D));
	}
	for ( var F in I) {
	    if (this.gridStructureInfo.getCellType(I[F]) == B) {
		J.push(I[F]);
	    }
	}
	return J;
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrGridReport.prototype.setGridProp = function(J, D, F, L, K, H) {
    try {
	var I = J + "!" + D + "!" + F;
	var E = this.um;
	var A = [ "4146" ];
	var G = [ I ];
	if (H && this.styleName && this.styleName.length > 0) {
	    A.splice(1, 0, "4126");
	    G.splice(1, 0, this.styleName);
	}
	K
		.push(E.createActionObject(this.elem,
			mstrUpdateManager.SET_PROPERTY_VALUES, this.beanPath,
			A, G, []));
	if (L && L.length > 0) {
	    var B = (F == "-1") ? true : false;
	    this.setFeature(L, B);
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.setReportProp = function(A, F, E, D) {
    try {
	var B = "1!" + A + "!" + F + "!" + E;
	D.push(this.um.createActionObject(this.elem,
		mstrUpdateManager.SET_REPORT_PROPERTY_VALUES, this.beanPath,
		[ "4146" ], [ B ], []));
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.processGridPropertyChanges = function(H, B, N) {
    try {
	if (this.selections) {
	    this.selections.clearAll(true);
	}
	if (this.getDocSelections && this.getDocSelections()) {
	    this.getDocSelections().add(this.activeRWUnit, true, true);
	}
	var J = false;
	var K = function(O) {
	    return microstrategy["FEATURE_CHECK_" + O];
	};
	switch (H) {
	case "RHS":
	case "CHS":
	case "RHM":
	case "CHM":
	case "RHL":
	case "CHL":
	case "Outline":
	case "AttForms":
	case "TitleOverlap":
	    var E = {
		RHS : {
		    p : "ShowRowHeaders"
		},
		CHS : {
		    p : "ShowColumnHeaders"
		},
		RHM : {
		    p : "MergeCells",
		    f : K("MERGE_ROW_HEADER")
		},
		CHM : {
		    p : "MergeColumnCells",
		    f : K("MERGE_COL_HEADER")
		},
		RHL : {
		    p : "LockRowHeaders",
		    f : K("LOCK_ROW_HEADERS")
		},
		CHL : {
		    p : "LockColumnHeaders",
		    f : K("LOCK_COLUMN_HEADERS")
		},
		Outline : {
		    p : "Indented",
		    f : K("OUTLINE_MODE")
		},
		AttForms : {
		    p : "LongNames"
		},
		TitleOverlap : {
		    p : "TitleOverlapViewMode"
		}
	    };
	    var C = E[H];
	    C.f = C.f || "";
	    this.setGridProp("Template Formatting", C.p, B, C.f, N, false);
	    J = true;
	    break;
	case "HideNullZeroValues":
	    this.setGridProp("AnalyticalEngineProperties",
		    "HideNullZeroValues", B, "", N, false);
	    break;
	case "HideNullsOrZeros":
	    this.setGridProp("AnalyticalEngineProperties", "ShowAllRows", B,
		    "", N, false);
	    break;
	case "ExecutionFullScreenMode":
	    this
		    .setReportProp("WebProperties", "ExecutionFullScreenMode",
			    B, N);
	    break;
	case "View":
	    this.setReportProp("Mobile", "View", B, N);
	    break;
	case "EnableBookStylePagebyNavigation":
	    this.setGridProp("Mobile", H, B, "", N, false);
	    break;
	case "EnableZoom":
	    this.setReportProp("Mobile", "EnableZoom", B, N);
	    break;
	case "EnableCopyForGridCell":
	    this.setReportProp("Mobile", "EnableCopyForGridCell", B, N);
	    break;
	case "Banding":
	    J = true;
	    this.handleBanding(B, N);
	    break;
	case "ShowThreshold":
	    J = true;
	    this.displayThresholds(B, N);
	    break;
	case "DrillOptions":
	    J = true;
	    var I = this;
	    var D = function(P, O) {
		I.setGridProp("GeneralTemplateProperties", "Drilling" + P, O,
			"", N, false);
	    };
	    D("Options", B);
	    var A = microstrategy.TRUE;
	    if (B == 0) {
		A = microstrategy.FALSE;
	    }
	    D("EnableRWDDrilling", A);
	    D("EnableReportDrilling", A);
	    if (mstr.$obj("dcmmID")) {
		mstr.$obj("dcmmID").clearMenuItems(this.objId);
	    }
	    break;
	case "assoNodesDrill":
	    var G = {
		assoNodesDrill : "1"
	    }[H];
	    this["associatedNodes"] = this["associatedNodes"] || {};
	    this["associatedNodes"][G] = B.split(CLIPBOARD_ITEM_SEPARATOR);
	    break;
	case "subtotalDisplayrowSec":
	case "subtotalDisplaycolSec":
	case "subtotalDisplaypageSec":
	    var M = {
		subtotalDisplayrowSec : "ROWS",
		subtotalDisplaycolSec : "COLUMNS",
		subtotalDisplaypageSec : "PAGE_BY"
	    };
	    this.setSubtotalDisplayOption(
		    microstrategy["GRIDCELL_AXIS_" + M[H]], B, N);
	    break;
	case "setSubtotalAxisStyle":
	    this.setSubtotalAxisStyle(B, N);
	    break;
	case "setSubtotalSelectedUnit":
	    this.setSubtotalSelectedUnit(B, N);
	    break;
	case "disableSubtotal":
	    this.disableSubtotal(B, N);
	    break;
	case "DefaultViewMode":
	    this.setViewMedia(null, B, N);
	    break;
	case "AvailableViewModes":
	    if (B.indexOf(",") > 0) {
		var L = B.split(",");
		this.setViewMedia("", null, N, L[0], L[1]);
	    } else {
		this.setViewMedia(B, null, N);
	    }
	    break;
	case "MakePrivate":
	    if (B !== "0") {
		this.setViewMedia("", null, N, mstr.Enum.VIEWMEDIA.PRIVATE);
	    } else {
		this.setViewMedia("", null, N, null,
			mstr.Enum.VIEWMEDIA.PRIVATE);
	    }
	    break;
	case "ControlGroupByList":
	    this.setControlGroupByList(B, N);
	    break;
	case "GraphExportOverflow":
	case "GraphExportOverflowSpacing":
	    this.xgovf = B;
	    var L = (H == "GraphExportOverflow") ? "" : "Spacing";
	    this.setGridProp("GraphInfo", "RepeatGraph" + L, B, "", N, false);
	    break;
	case "IfRowMode":
	    J = true;
	    this.setGridProp("GeneralTemplateProperties", "IFRowMode", B, "",
		    N, false);
	    break;
	case "IfMaxRows":
	    J = true;
	    this.setGridProp("GeneralTemplateProperties", "IFMaxRows", B, "",
		    N, false);
	    break;
	case "IfColMode":
	    J = true;
	    this.setGridProp("GeneralTemplateProperties", "IFColumnMode", B,
		    "", N, false);
	    break;
	case "IfMaxCols":
	    J = true;
	    this.setGridProp("GeneralTemplateProperties", "IFMaxColumns", B,
		    "", N, false);
	    break;
	}
	if (J && this.editorProperties) {
	    this.editorProperties[H] = B;
	}
	microstrategy.eventManager.notifyOrphanBones("onpropertychange");
    } catch (F) {
	microstrategy.errors.log(F);
    }
};
mstrGridReport.prototype.setControlGroupByList = function(F, E) {
    try {
	var A = "";
	for ( var C = 0, B = F.length; C < B; C++) {
	    A += (C > 0) ? "!" : "";
	    A += F[C].dssid;
	}
	this.addAction(this.elem,
		mstrUpdateManager.RW_REORDER_CONTROL_GROUP_BY, this.beanPath, [
			"2048012", "2048173" ], [ this.objId, A ], E);
	this.ControlGroupByList = F;
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrGridReport.prototype.setViewMedia = function(D, F, C, E, B) {
    try {
	if (D == null) {
	    D = "";
	}
	if (F == null) {
	    F = "";
	}
	this.addAction(this.elem, mstrUpdateManager.SET_REPORT_VIEW_MEDIA,
		this.beanPath, [ "4228", "4229", "4243", "4244" ], [ D, F,
			E || "", B || "" ], C);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.hiliteObj = function(F, B, A) {
    try {
	var C = F.className;
	var E = C.lastIndexOf(" ");
	if (E > -1) {
	    F.className = C.substr(0, E);
	}
	if (A.length > 0) {
	    F.className += " " + A;
	}
	if (bIsIE6) {
	    setFilter(F, "Alpha", {
		opacity : B * 100
	    });
	} else {
	    if (bIsW3C) {
		F.style.MozOpacity = B;
	    }
	}
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrGridReport.prototype.restoreHiliteIfCurrent = function(C) {
    try {
	if (this.hiliteCell) {
	    for ( var A in this.hiliteCell) {
		if (this.hiliteCell[A] == C) {
		    this.hiliteObj(C, mstrGridReport.OPACITY_SELECTED,
			    mstrGridReport.SELECTOR_HILITE_CLASS);
		    return true;
		}
	    }
	    return false;
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return false;
};
mstrGridReport.prototype.hiliteIfNotCurrent = function(A, C, B) {
    try {
	if (A) {
	    var F = microstrategy.findAncestorWithTag(A, "TD");
	    if (this.hiliteCell) {
		for ( var D in this.hiliteCell) {
		    if (this.hiliteCell[D] == F) {
			return;
		    }
		}
		F.className = F.className.replace(B, "") + " " + B;
	    }
	}
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrGridReport.prototype.mouseOverSelector = function(A) {
    try {
	this.hiliteIfNotCurrent(A, mstrGridReport.OPACITY_MOUSE_OVER,
		mstrGridReport.SELECTOR_MOUSE_OVER_CLASS);
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.mouseOutSelector = function(A) {
    try {
	this.hiliteIfNotCurrent(A, mstrGridReport.OPACITY_MOUSE_OUT,
		mstrGridReport.SELECTOR_MOUSE_OUT_CLASS);
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.processHL = function(E, A, B, C) {
    try {
	var H = [];
	var D;
	if (B) {
	    var G = B.getAttribute("peix") || B.parentNode.getAttribute("peix");
	    H.push(this.parsePeix(G));
	    D = this.parsePfvix(B.getAttribute("pfvix")
		    || B.parentNode.getAttribute("pfvix"));
	}
	this.execHL(E, A, H, C, D);
    } catch (F) {
	microstrategy.errors.log(F);
    }
};
mstrGridReport.prototype.executeCMHyperLink = function(C, H, K) {
    try {
	var E = this.selections.getItems();
	var F = [];
	if (E != null) {
	    var B = {};
	    for ( var G = 0, J = E.length; G < J; G++) {
		var L = E[G].getAttribute("peix");
		if (!B[L]) {
		    B[L] = true;
		    F.push(this.parsePeix(L));
		}
	    }
	}
	var A = microstrategy.activeCXMenu;
	var I = this.parsePfvix(A && A.getAttribute("pfvix"));
	this.execHL(C, H, F, K, I);
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrGridReport.prototype.parsePeix = function(A) {
    return this.parsePix(A, true);
};
mstrGridReport.prototype.parsePfvix = function(A) {
    return this.parsePix(A, false);
};
mstrGridReport.prototype.parsePix = function(F, G) {
    try {
	var E = {};
	E.elements = [];
	if (F) {
	    var C = F.split("_");
	    for ( var A = 0, D = C.length; A < D; A++) {
		var B = C[A].split(":");
		E.elements[B[0]] = B[1];
		if (A == 0 && G) {
		    E.currAtt = B[0];
		}
	    }
	}
	return E;
    } catch (H) {
	microstrategy.errors.log(H);
	return null;
    }
};
mstrGridReport.prototype.getElementId = function(A, E) {
    try {
	if (A >= 0) {
	    var D = this.attMap[A];
	    var C;
	    C = (D.isPageBy) ? 0 : E.elements[A];
	    if (C >= 0) {
		return D.elementMap[C];
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return null;
};
mstrGridReport.prototype.getFormId = function(A, E) {
    try {
	if (A >= 0) {
	    var D = this.formMap[A];
	    var C;
	    C = (D.isPageBy) ? 0 : E.elements[A];
	    if (C >= 0) {
		return D.elementMap[C];
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return null;
};
mstrGridReport.prototype.execHL = function(A, C, H, F, D) {
    try {
	var I = this.linkMap[A][C][0];
	var G = I.links;
	var E = G[F];
	E = E ? E : G[I.def];
	if (E) {
	    if (this.selections) {
		this.selections.clearAll(true);
	    }
	    this[!E.url ? "execDynamiclLink" : "execUrlLink"](I, E, H, D);
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.execLinkDrill = function(B, F, A, H) {
    try {
	var K = this.linkMap[B][F][0];
	var I = K.links;
	var G = I[H];
	G = G ? G : I[K.def];
	if (G) {
	    var J = {};
	    for ( var D = 0; (A != null) && D < A.length; D++) {
		J[A[D].id] = A[D].ans;
	    }
	    if (D > 0) {
		J.nAns = A[0].ans.length;
	    }
	    var E = this.buildLinkXml(K, G, null, null, J);
	    microstrategy.execDynamiclLink(G, E, K && K.nw);
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.getLinkMap = function() {
    try {
	return this.linkMap;
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrGridReport.prototype.execUrlLink = function(A, D, H) {
    try {
	var G = null;
	var C = D.url;
	if (C.indexOf("&CurrentElement") > -1 && H) {
	    var B = H[0] ? H[0] : H;
	    var F = this.getElementId(B.currAtt, B);
	    C = D.url.replace("&CurrentElement", F);
	}
	G = createDynamicForm(C);
	if (A.nw) {
	    G.target = "_blank";
	}
	microstrategy.submitForm(G);
	return;
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrGridReport.prototype.execDynamiclLink = function(A, C, F, D) {
    try {
	var B = this.buildLinkXml(A, C, F, D);
	microstrategy.execDynamiclLink(C, B, A && A.nw);
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrGridReport.prototype.buildLinkXml = function(b, G, J, X, H) {
    try {
	var K = function(c, d) {
	    return microstrategy.addXmlAttr(c, d);
	};
	var V = function(c, d) {
	    return microstrategy.addXmlAttrEncoded(c, d);
	};
	var E = "<hl" + K("mid", G.msg)
		+ K("srct", microstrategy.EXECUTION_SCOPE)
		+ K("aopam", G.daMode) + ">";
	var D = G.ans;
	if (D != null) {
	    E += "<prms>";
	    for ( var Y = 0, W = D.length; Y < W; Y++) {
		var R = D[Y];
		var O = R.pid;
		var P = R.aty;
		var Z = R.pty;
		var I = R.values;
		var N = R.dispNames;
		E += "<prm" + K("id", O) + K("am", P);
		if (R.orId) {
		    E += K("orid", R.orId) + K("ortp", R.orTp);
		    if (Z == mstrGridReport.CONSTANT_PROMPT_TYPE
			    && P == mstrGridReport.DYNAMIC && R.bfi) {
			E += K("pt", Z) + K("bfi", R.bfi);
		    }
		}
		E += ">";
		var C = null;
		var A = null;
		var M = null;
		var Q = null;
		switch (P) {
		case mstrGridReport.DO_NOT_ANSWER:
		case mstrGridReport.CLOSE:
		case mstrGridReport.USE_DEFAULT_ANSWER:
		case mstrGridReport.SAME_PROMPT:
		    break;
		case mstrGridReport.STATIC:
		    if (I != null) {
			E += '<pa ia="1"><es>';
			for ( var S = 0; S < I.length; S++) {
			    E += "<e" + K("ei", I[S]) + V("disp_n", N[S])
				    + K("emt", "1") + "/>";
			}
			E += "</es></pa>";
		    }
		    break;
		case mstrGridReport.DYNAMIC:
		case mstrGridReport.DYNAMIC_OR_SAME_PROMPT:
		    A = R.attrs;
		    if (A != null && A.length == 1) {
			M = A[0];
			E += '<pa ia="1">';
			if (Z == mstrGridReport.CONSTANT_PROMPT_TYPE && X) {
			    Q = this.formMap[M];
			    var B = this.getFormId(M, X);
			    if (B) {
				E += mstr.utils.String
					.encodeXMLAttribute(mstr.utils.String
						.decodeHtmlString(B, false));
			    }
			} else {
			    if (H) {
				Q = this.attMap[M];
				E += "<es "
					+ K("dispForms", Q ? Q.displayFormsMap
						: "") + ">";
				var T = H[Q.id];
				for ( var L = 0; T && L < T.length; L++) {
				    C = T[L];
				    if (!C) {
					continue;
				    }
				    E += "<e" + V("ei", C) + K("emt", "1")
					    + "/>";
				}
				E += "</es>";
			    } else {
				if (J) {
				    Q = this.attMap[M];
				    E += "<es "
					    + K("dispForms",
						    Q ? Q.displayFormsMap : "")
					    + ">";
				    for ( var L = 0; J != null && L < J.length; L++) {
					var U = J[L];
					C = this.getElementId(M, U);
					if (!C) {
					    continue;
					}
					E += "<e" + V("ei", C) + K("emt", "1")
						+ "/>";
				    }
				    E += "</es>";
				}
			    }
			}
			E += "</pa>";
		    }
		    break;
		case mstrGridReport.ALL_VALID_UNITS:
		    A = R.attrs;
		    if (A != null && A.length > 0 && (J || H)) {
			E += '<pa ia="1"><attGroups>';
			if (H) {
			    for ( var L = 0; L < H.nAns; L++) {
				E += "<attGroup>";
				for ( var a = 0; a < A.length; a++) {
				    M = A[a];
				    Q = this.attMap[M];
				    if (!H[Q.id]) {
					continue;
				    }
				    C = H[Q.id][L];
				    if (!C) {
					continue;
				    }
				    E += "<a" + K("id", Q.id) + V("n", Q.n)
					    + "><es "
					    + K("dispForms", Q.displayFormsMap)
					    + "><e" + V("ei", C)
					    + K("emt", "1") + "/></es></a>";
				}
				E += "</attGroup>";
			    }
			} else {
			    for ( var L = 0; J != null && L < J.length; L++) {
				E += "<attGroup>";
				var U = J[L];
				for ( var a = 0; a < A.length; a++) {
				    M = A[a];
				    Q = this.attMap[M];
				    C = this.getElementId(M, U);
				    if (!C) {
					continue;
				    }
				    E += "<a" + K("id", Q.id) + V("n", Q.n)
					    + "><es "
					    + K("dispForms", Q.displayFormsMap)
					    + "><e" + V("ei", C)
					    + K("emt", "1") + "/></es></a>";
				}
				E += "</attGroup>";
			    }
			}
			E += "</attGroups></pa>";
		    }
		    break;
		case mstrGridReport.CURRENT_UNIT:
		    A = R.attrs;
		    if (A != null && A.length == 1 && (J || H)) {
			M = A[0];
			Q = this.attMap[M];
			E += '<pa ia="1">';
			E += "<a" + K("id", Q.id) + V("n", Q.n) + ">";
			E += "<es " + K("dispForms", Q.displayFormsMap) + ">";
			if (H) {
			    for ( var L = 0; H[Q.id] && L < H[Q.id].length; L++) {
				C = H[Q.id][L];
				if (C) {
				    E += "<e" + V("ei", C) + K("emt", "1")
					    + "/>";
				}
			    }
			} else {
			    for ( var L = 0; L < J.length; L++) {
				C = this.getElementId(M, J[L]);
				if (C) {
				    E += "<e" + V("ei", C) + K("emt", "1")
					    + "/>";
				}
			    }
			}
			E += "</es>";
			E += "</a></pa>";
		    }
		    break;
		}
		E += "</prm>";
	    }
	    E += "</prms>";
	}
	E += "</hl>";
	return E;
    } catch (F) {
	microstrategy.errors.log(F);
	return null;
    }
};
mstrGridReport.prototype.applySelector = function(G, K, I, B, A, E, H, J) {
    try {
	this.hiliteControlElem(H, K);
	var F = this.controlLinks && this.controlLinks[G];
	if (F) {
	    B = this.getVisibleTargets(F);
	}
	var D = F && F.dsTargets && F.dsTargets.length > 0;
	var A = D ? "0" : A;
	this.addAction(null, mstrUpdateManager.SET_CUR_CTL_ELEMENTS,
		this.docViewer.beanPath, [ "2048130", "2048127", "2048137",
			"2048138", "2048018" ], [ K, I, E, A, "false" ], J);
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.hiliteControlElem = function(A, B) {
    try {
	var E = this.hiliteCell;
	if (E[B]) {
	    this.hiliteObj(E[B], mstrGridReport.OPACITY_MOUSE_OUT,
		    mstrGridReport.SELECTOR_MOUSE_OUT_CLASS);
	    if (E.filter) {
		E[B].style.filter = E.filter;
	    }
	}
	if (A) {
	    var D = microstrategy.findAncestorWithTag(A, "TD");
	    if (D) {
		E[B] = D;
		E.filter = getFilter(D);
		this.hiliteObj(D, mstrGridReport.OPACITY_SELECTED,
			mstrGridReport.SELECTOR_HILITE_CLASS);
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.getVisibleTargets = function(B) {
    try {
	var F = "";
	if (B.gbTargets) {
	    B.targets = [];
	    if (this.docViewer.targetGroupBys) {
		for ( var D = 0, C = B.gbTargets.length; D < C; ++D) {
		    var A = this.docViewer.targetGroupBys[B.gbTargets[D]];
		    if (A) {
			B.targets.push(A);
		    }
		}
	    }
	    delete B.gbTargets;
	}
	if (B.targets) {
	    for ( var D = 0, C = B.targets.length; D < C; ++D) {
		if (mstrDocImpl.shallRenderTarget(B.targets[D])) {
		    if (D > 0) {
			F += CLIPBOARD_ITEM_SEPARATOR;
		    }
		    F += B.targets[D];
		}
	    }
	}
	return F;
    } catch (E) {
	microstrategy.errors.log(E);
	return null;
    }
};
mstrGridReport.prototype.sliceMetric = function(B, D) {
    try {
	var C = this.controlLinks && this.controlLinks.Metrics;
	if (!C) {
	    return;
	}
	var E = C.ck;
	this.hiliteControlElem(B, E);
	var A = this.getVisibleTargets(C);
	this.addAction(null, mstrUpdateManager.SET_CUR_CTL_ELEMENTS,
		this.docViewer.beanPath, [ "2048130", "2048127", "2048137",
			"2048138" ], [ E, D, C.ctxt, C.partialUpdate ], null,
		!A);
    } catch (F) {
	microstrategy.errors.log(F);
    }
};
mstrGridReport.prototype.sliceElem = function(L, C, Q, I, B) {
    try {
	var H = this.gridStructureInfo.getUnit(parseInt(C), parseInt(Q));
	if (H != null) {
	    var M = this.controlLinks && this.controlLinks[H.dssId];
	    if (!M) {
		return;
	    }
	    var D = M.ck;
	    this.hiliteControlElem(L, D);
	    if (I >= 0) {
		var J = this.attMap[I];
		if (B >= 0) {
		    var R = J.elementMap[B];
		    var O = this.getVisibleTargets(M);
		    var A = O || (!M.partialUpdate) ? "1" : "0";
		    var N = [];
		    var E = microstrategy.bone("pbb_GroupByStyle");
		    var G = E && E.hasAllSelected;
		    var P = M.dsTargets && M.dsTargets.length > 0;
		    var K = G || P ? "0" : M.partialUpdate;
		    this.addAction(null,
			    mstrUpdateManager.SET_CUR_CTL_ELEMENTS,
			    this.docViewer.beanPath, [ "2048130", "2048127",
				    "2048137", "2048138", "2048018" ], [ D, R,
				    M.ctxt, K, A ], N);
		    this.um.add(N);
		    if (A) {
			this.um.flushAndSubmitChanges();
		    }
		}
	    }
	}
    } catch (F) {
	microstrategy.errors.log(F);
    }
};
mstrGridReport.prototype.processGraphFormattingProperties = function(I) {
    try {
	var Q = this.um;
	var h = [];
	for ( var b = 0, a = I.length; b < a; b++) {
	    var R = I[b];
	    var C = null;
	    var S = null;
	    var E = [];
	    var B = [];
	    var g = R[0];
	    var D = null;
	    var G = null;
	    var Z, A;
	    function M(n) {
		var m = n[0].split("_");
		E.push("4085");
		B.push(m[0]);
		if (m[1]) {
		    E.unshift("4209");
		    B.unshift(m[1]);
		}
		G = m[0];
	    }
	    var d = null;
	    var L = function(o, q) {
		E.push("4202");
		B.push(o);
		E.push("4203");
		if (q) {
		    d = q;
		}
	    };
	    switch (g) {
	    case "formatGraphSetting":
		S = mstrUpdateManager.EDIT_GRAPH_PROPS;
		C = R[1];
		E.push("4085");
		B.push(C[0]);
		E.push("4202");
		B.push(C[1]);
		E.push("4203");
		B.push(C[2]);
		break;
	    case "formatGraphPropertyBulk":
	    case "formatGraphWindowSizeBulk":
		S = mstrUpdateManager.EDIT_GRAPH_PROPS;
		if (g == "formatGraphWindowSizeBulk") {
		    S = mstrUpdateManager.EDIT_GRAPH_WINDOW_SIZE;
		}
		C = R[1];
		for (Z = 0, A = C.length; Z < A; Z++) {
		    var P = C[Z];
		    switch (P[0]) {
		    case "major":
			E.push("4082");
			this.major = P[1];
			break;
		    case "minor":
			E.push("4083");
			this.minor = P[1];
			break;
		    case "seriesLayout":
			E.push("4175");
			this.seriesLayout = P[1];
			break;
		    case "showSubtotals":
			E.push("4176");
			break;
		    case "useCurvedLines":
		    case "roundedEffect":
		    case "useFontAntiAliasing":
			var W = {
			    useCurvedLines : "804",
			    roundedEffect : "10123",
			    useFontAntiAliasing : "881"
			}[P[0]];
			E.push("4085");
			B.push("9999");
			E.push("4202");
			B.push(W);
			E.push("4203");
			break;
		    case "categories":
			E.push("4025");
			this.categories = P[1];
			break;
		    case "series":
			E.push("4024");
			this.series = P[1];
			break;
		    }
		    if (E.length > B.length) {
			B.push(P[1]);
		    }
		    if (S != null) {
			h.push(Q.createActionObject(this.elem, S,
				this.beanPath, E, B, [], []));
			B = [];
			E = [];
		    }
		}
		S = null;
		break;
	    case "formatGraphObjectBulk":
		S = mstrUpdateManager.EDIT_GRAPH_TEXT_PROPS;
		C = R[1];
		M(C);
		C = C[1];
		for (Z = 0; Z < C.length; Z++) {
		    switch (C[Z][0]) {
		    case "titleShow":
			E.push("4084");
			break;
		    case "titleColor":
			E.push("4087");
			break;
		    case "titleFillColor":
			E.push("4211");
			break;
		    case "titleName":
			E.push("4088");
			break;
		    case "titleStyle":
			E.push("4089");
			break;
		    case "titleSize":
			E.push("4090");
			break;
		    case "titleContent":
			E.push("4091");
			break;
		    case "relativeSize":
			E.push("4202");
			B.push("604");
			E.push("4203");
			if (C[Z][1] == "1") {
			    C[Z][1] = C[Z][1] + "," + this.graphWidth + ","
				    + this.graphHeight;
			}
			break;
		    case "titlePosition":
			E.push("4202");
			B.push("644");
			E.push("4203");
			break;
		    case "tooltipsShow":
			E.push("4202");
			if (D) {
			    B.push("10004");
			} else {
			    B.push("10041");
			}
			E.push("4203");
			break;
		    case "tooltipsEditor":
			E.push("4202");
			if (D) {
			    B.push("10005");
			} else {
			    B.push("10042");
			}
			E.push("4203");
			break;
		    }
		    if (E.length > B.length) {
			B.push(C[Z][1]);
		    }
		}
		break;
	    case "saveGraphProperties":
		var V = 255;
		S = mstrUpdateManager.EDIT_GRAPH_PROPS;
		C = R[1];
		M(C);
		C = C[1];
		for (Z = 0; Z < C.length; Z++) {
		    var P = C[Z];
		    switch (P[0]) {
		    case "titleGradient":
		    case "titleColorFillEffect":
		    case "titleFillEffect":
		    case "titleTransparency":
		    case "titleContent":
			var W = {
			    titleGradient : "567",
			    titleColorFillEffect : "10002",
			    titleFillEffect : "4203",
			    titleTransparency : "608"
			}[P[0]] || "9999";
			L(W);
			break;
		    case "titleFillColor":
		    case "titleLineColor":
		    case "titleColor":
			var U = {
			    titleFillColor : [ "564", "608" ],
			    titleLineColor : [ "588", "609" ],
			    titleColor : [ "574", "610" ]
			}[P[0]];
			if (D && G == "286" && P[0] == "titleFillColor") {
			    B.push("556");
			}
			L(U[0], U[1]);
			break;
		    }
		    if (E.length > B.length) {
			B.push(P[1]);
		    }
		    if ((P[0] == "titleFillColor" || P[0] == "titleLineColor" || P[0] == "titleColor")
			    && (P[1] == "-1" || P[1] == "transparent")) {
			V = 0;
			S = null;
		    }
		    if (d) {
			if (!D) {
			    D = "-1";
			}
			h.push(Q.createActionObject(this.currentArea,
				mstrUpdateManager.EDIT_GRAPH_PROPS,
				this.beanPath,
				[ "4085", "4209", "4202", "4203" ], [ G, D, d,
					V ]));
		    }
		}
		break;
	    case "formatGraphNumberBulk":
		S = mstrUpdateManager.EDIT_GRAPH_PROPS;
		C = R[1];
		if (!C || C.length == 0) {
		    return false;
		}
		G = C[0];
		attributeId = "-616";
		if (G.indexOf("_") > 0) {
		    M(C);
		} else {
		    switch (G) {
		    case "272":
		    case "290":
			attributeId = "618";
			break;
		    case "531":
		    case "558":
		    case "296":
			attributeId = "619";
			break;
		    case "302":
			attributeId = "620";
			break;
		    case "512":
		    case "552":
			attributeId = "621";
			break;
		    case "10002":
			attributeId = "10077";
			break;
		    }
		    G = G == "10002" ? G : "9999";
		    E.push("4085");
		    B.push(G);
		}
		var K, O, l, Y, T, N, e, c;
		for (Z = 1; Z < C.length; Z++) {
		    var W = C[Z].split("|");
		    var U = W[1];
		    switch (W[0]) {
		    case "Category":
			K = U + ",";
			break;
		    case "DecimalPlaces":
			O = U + ",";
			break;
		    case "ThousandSeparator":
			var J = (U > 0) ? "3" : "0";
			l = J + ",";
			break;
		    case "CurrencySymbol":
			T = U + ",";
			break;
		    case "CurrencyPosition":
			N = U + ",";
			break;
		    case "NegativeNumbers":
			e = U + ",";
			break;
		    case "Format":
			c = U;
			break;
		    }
		}
		E.push("4202");
		B.push(attributeId);
		E.push("4203");
		B.push(K + O + l + N + e + T + c);
		break;
	    case "formatGraphColorGradient":
		S = mstrUpdateManager.EDIT_GRAPH_PROPS;
		C = R[1];
		M(C);
		C = C[1];
		for (Z = 0; Z < C.length; Z++) {
		    var P = C[Z];
		    if (P[0] == "titleGradient") {
			L("567");
		    } else {
			L("10002");
		    }
		    if (E.length > B.length) {
			B.push(C[Z][1]);
		    }
		}
		break;
	    case "formatGraphDualAxis":
		S = mstrUpdateManager.EDIT_GRAPH_PROPS;
		C = R[1];
		M(C);
		B[B.length - 1] = "9999";
		var F = C[1];
		if (F[0] == "titleSeriesOnAxis") {
		    L("140");
		} else {
		    L("10054");
		}
		if (E.length > B.length) {
		    B.push(F[1]);
		}
		break;
	    case "formatGraphAxisBulk":
		S = mstrUpdateManager.EDIT_GRAPH_AXIS_PROPS;
		C = R[1];
		var X = {
		    gShow_318 : "4096",
		    gShow_325 : "4099",
		    gShow_117 : "4092",
		    gShow_321 : "4097",
		    gShow_127 : "4093",
		    gShow_128 : "4094",
		    gShow_129 : "4095",
		    gScale_127 : "4104",
		    gScale_129 : "4106",
		    gStep_321 : "4101",
		    gStep_128 : "4101",
		    gStep_127 : "4100",
		    gStep_129 : "4102"
		};
		for (Z = 0; Z < C.length; Z++) {
		    var P = C[Z];
		    E.push(X[P[0]] || "4105");
		    if (E.length > B.length) {
			B.push(C[Z][1]);
		    }
		}
		break;
	    case "formatTemplateObjectBulk":
		C = R[1];
		for (Z = 0; Z < C.length; Z++) {
		    if (C[Z][0] == "showMetrics") {
			S = mstrUpdateManager.SET_PROPERTY_VALUES;
			E = [ "4146" ];
			B = [ "Template Formatting!ShowMetricObjectInGraphZone!"
				+ C[Z][1] ];
		    }
		}
		break;
	    }
	    if (S != null) {
		h.push(Q.createActionObject(this.elem, S, this.beanPath, E, B,
			[], []));
	    }
	}
	if (h.length > 0) {
	    Q.add(h);
	    if (!this.useClientSideManipulations) {
		Q.flushAndSubmitChanges();
	    } else {
		this.notifySelectionChange("ongridselectionchange");
	    }
	}
    } catch (H) {
	microstrategy.errors.log(H);
    }
    return null;
};
mstrGridReport.prototype.setDsetId = function(B) {
    try {
	this.dSetId = (this.gridStructureInfo && this.gridStructureInfo.hasNoUnits) ? null
		: B;
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.openDialog = function(F, B, E, C, A) {
    try {
	microstrategy.openDialog(F, B, E, C, A);
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrGridReport.prototype.convertToDoc = function(E, A) {
    try {
	var C = [];
	if (!E) {
	    var D;
	    if (this.isGraph && this.isGrid) {
		D = microstrategy.DISPLAY_MODE_GRID_AND_GRAPH;
	    } else {
		if (this.isGraph) {
		    D = microstrategy.DISPLAY_MODE_GRAPH;
		} else {
		    if (this.isGrid) {
			D = microstrategy.DISPLAY_MODE_GRID;
		    }
		}
	    }
	    this.addAction(this.elem, mstrUpdateManager.EXECUTE_RWDOC,
		    microstrategy.servletName, [ "2048001", "2048002",
			    "2048092", "2048143", "2048009", "4115" ], [
			    this.reportID, this.messageID,
			    microstrategy.RWD_EXECUTION_MODE_DATA,
			    this.stateID, this.objTypeReport, D ], C);
	    var F = "currentViewMedia=" + microstrategy.RW_VIEW_MODE_EDITABLE;
	    this.um.addURL(F);
	} else {
	    if (A) {
		this.addAction(this.elem,
			mstrUpdateManager.CONVERT_TO_DOCUMENT,
			microstrategy.servletName, [ "3001", "3010", "3115",
				"2048143", "3007", "3158", "3163", "3017" ], [
				this.reportID, this.messageID,
				microstrategy.RWD_EXECUTION_MODE_DATA,
				this.stateID, this.objTypeReport,
				microstrategy.RW_VIEW_MODE_VIEWANALYSIS,
				microstrategy.RWD_EASE_CREATION_ANALYSIS,
				microstrategy.APP_BEAN_VIEW_EXECUTION ], C);
	    } else {
		if (mstr.utils.ISIE6 || mstr.utils.ISIE7 || mstr.utils.ISIE8) {
		    showMessage({
			contents : mstrGridReport.desp(12187),
			elements : microstrategy.OK_BUTTON,
			type : mstrMsgBoxImpl.MSG_ERROR
		    });
		    return;
		} else {
		    this
			    .addAction(
				    this.elem,
				    mstrUpdateManager.CREATE_HTML5_VI,
				    microstrategy.servletName,
				    [ "3001", "3010", "3115", "3007", "3163" ],
				    [
					    this.reportID,
					    this.messageID,
					    microstrategy.RWD_EXECUTION_MODE_DATA,
					    this.objTypeReport,
					    microstrategy.RWD_EASE_CREATION_HTML5_DASHBOARD_WITH_TEMPLATE ],
				    C);
		}
	    }
	}
	this.um.add(C);
	this.um.useIframe = false;
	this.um.flushAndSubmitChanges();
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.saveReport = function() {
    try {
	var H = document.getElementById("askBeforeSaveCheckbox");
	if (H && H.checked) {
	    this.commands.exec("forceSaveAs");
	}
	var G = [], D = [], B = [];
	var A = this.saveCmdId, E = 7;
	if (A) {
	    switch (A) {
	    case "createIVEFromRpt":
		E = 15;
		break;
	    case "createHTML5IVEFromRpt":
		if (mstr.utils.ISIE6 || mstr.utils.ISIE7 || mstr.utils.ISIE8) {
		    showMessage({
			contents : mstrGridReport.desp(12187),
			elements : microstrategy.OK_BUTTON,
			type : mstrMsgBoxImpl.MSG_ERROR
		    });
		    return;
		}
		E = 16;
		break;
	    default:
		E = 7;
	    }
	    delete this.saveCmdId;
	}
	var C = this.getSaveFolderId();
	if (mstrGridReport.isViewMode()) {
	    D = [ "3013", "3031", "3017" ];
	    B = [ false, E, "false" ];
	    if (C && !(A)) {
		D.splice(1, 0, "3014");
		B.splice(1, 1, C, C);
	    } else {
		D.push("3014");
		B.push(C);
	    }
	} else {
	    D = [ "3013", "3017" ];
	    B = [ "1", "true" ];
	    this.addAction(this.elem, mstrUpdateManager.DESIGN_MODE_PROCESS,
		    this.beanPath, [ "6032", "6018" ], [ "1", "1" ], G);
	    if (C) {
		D.push("3014");
		B.push(C);
	    }
	}
	this.addAction(this.elem, mstrUpdateManager.SAVE_GRID,
		microstrategy.servletName, D, B, G);
	this.um.useIframe = false;
	this.um.add(G);
	this.um.flushAndSubmitChanges();
    } catch (F) {
	microstrategy.errors.log(F);
    }
};
mstrGridReport.prototype.save = function() {
    try {
	if (this.isNew || this.isReadonly || this.isDrilled || this.needSaveAs) {
	    return this.saveReport();
	} else {
	    this.um.add([ this.um.createActionObject(null,
		    mstrUpdateManager.APPLY_CHANGES, this.beanPath, [], [], [],
		    null) ]);
	    this.um.add([ this.um.createActionObject(null,
		    mstrUpdateManager.SAVE_OBJECT, this.beanPath, [ "89001" ],
		    [ "0" ], [], null) ]);
	    this.um.flushAndSubmitChanges();
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.submitSave = function() {
    try {
	var B = document.getElementById("askBeforeSaveCheckbox");
	if (B
		&& B.checked
		&& this
			.isFeatureAvailable(microstrategy.FEATURE_ASK_BEFORE_SAVE_CHANGES)) {
	    this.commands.exec("dontAskAgain");
	}
	this.um.add([ this.um.createActionObject(null,
		mstrUpdateManager.APPLY_CHANGES, this.beanPath, [], [], [],
		null) ]);
	this.um.add([ this.um.createActionObject(null,
		mstrUpdateManager.SAVE_OBJECT, this.beanPath, [ "89001" ],
		[ "0" ], [], null) ]);
	this.um.flushAndSubmitChanges();
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.getSaveFolderId = function() {
    try {
	if (this.saveFolderId) {
	    return this.saveFolderId;
	} else {
	    return this.parentFolderID;
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.addAllLevel = function(C, D) {
    var A = [ "UNIT_HEADER", "UNIT_VALUE", "SUBTOTAL_HEADER", "SUBTOTAL_VALUE" ];
    for ( var B in A) {
	C.addToSelectedUnits(null, D, microstrategy["GRIDCELLTYPE_" + B], true);
    }
};
mstrGridReport.prototype.selectAxis = function(D, F) {
    try {
	if (F == null || F == "none") {
	    return false;
	}
	var C = this.selections;
	if (D != null && D.size() > 0) {
	    for ( var B in D.units) {
		var A = D.units[B].src;
		if (A == null) {
		    continue;
		}
		if (F == microstrategy.GRIDCELLTYPE_LEVEL_ALL) {
		    mstrGridReport.addAllLevel(C, A);
		} else {
		    C.addToSelectedUnits(null, A, F, true);
		}
	    }
	}
	return true;
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrGridReport.prototype.getGridUnitItems = function() {
    try {
	var A = [];
	var F = this.gridStructureInfo;
	var G = [ F.rowAxis.units, F.colAxis.units, F.metricAxis.units ];
	for ( var D = 0; D < 3; D++) {
	    for ( var B = 0, C = G[D].length; B < C; B++) {
		if (!G[D][B].isMetricTemplateUnit) {
		    A.push(G[D][B]);
		}
	    }
	}
	return A;
    } catch (E) {
	microstrategy.errors.log(E);
	return null;
    }
};
mstrGridReport.prototype.getGridUnitSelectorItems = function(D) {
    try {
	var E = this.nonUnitCount;
	var F = [];
	var G = this.getGridUnitItems();
	var H = 0;
	for ( var C = 0, A = G.length; C < A; C++) {
	    var J = G[C], I;
	    if (D && J.dssType != microstrategy.DSSTYPE_METRIC) {
		E++;
		continue;
	    }
	    if (!!J.dssType) {
		F[H++] = I = {
		    dssid : E++,
		    n : G[C].alias,
		    tp : G[C].dssType,
		    cssClass : "ToolbarList U" + G[C].dssType
		};
		if (J.dssSubtype == 3076) {
		    I.cssClass += "R";
		}
	    } else {
		E++;
	    }
	}
	return F;
    } catch (B) {
	microstrategy.errors.log(B);
	return null;
    }
};
mstrGridReport.prototype.getSelectedGridUnitByIndex = function(B) {
    try {
	var A = this.getGridUnitItems();
	return A[B - this.nonUnitCount];
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return null;
};
mstrGridReport.prototype.getGridFormats = function() {
    try {
	return this.gridFormat || {};
    } catch (A) {
	microstrategy.errors.log(A);
	return {};
    }
};
mstrGridReport.prototype.getGridFormatMap = function() {
    try {
	if (!this.formatMap) {
	    this.formatMap = {
		unitMap : {},
		valueMap : {
		    1 : "h",
		    2 : "v",
		    3 : "sn",
		    4 : "sv",
		    5 : "a"
		},
		fontFamily : {
		    n : "ff",
		    id : "4042"
		},
		fontWeight : {
		    n : "fw",
		    id : "4043"
		},
		fontStyle : {
		    n : "fs",
		    id : "4044"
		},
		fontSize : {
		    n : "fz",
		    id : "4045"
		},
		textDecoration2 : {
		    n : "ft",
		    id : "4046"
		},
		textDecoration : {
		    n : "fu",
		    id : "4047"
		},
		color : {
		    n : "c",
		    id : "4048"
		},
		textAlign : {
		    n : "hz",
		    id : "4056"
		},
		textAlign2 : {
		    n : "hz",
		    id : "4056"
		},
		GridHorizontal : {
		    n : "hz",
		    id : "4056"
		},
		verticalAlign : {
		    n : "vt",
		    id : "4057"
		},
		Vertical : {
		    n : "vt",
		    id : "4057"
		},
		Vertical2 : {
		    n : "vt",
		    id : "4057"
		},
		whiteSpace : {
		    n : "tw",
		    id : "4058"
		},
		TextWrap : {
		    n : "tw",
		    id : "4058"
		},
		TextDirection : {
		    n : "td",
		    id : "4222"
		},
		paddingLeft : {
		    n : "lp",
		    id : "4223"
		},
		paddingTop : {
		    n : "tp",
		    id : "4224"
		},
		paddingRight : {
		    n : "rp",
		    id : "4225"
		},
		paddingBottom : {
		    n : "bp",
		    id : "4226"
		},
		Category : {
		    n : "nct",
		    id : "4050"
		},
		DecimalPlaces : {
		    n : "ndp",
		    id : "4051"
		},
		ThousandSeparator : {
		    n : "nth",
		    id : "4052"
		},
		CurrencySymbol : {
		    n : "ncs",
		    id : "4053"
		},
		CurrencyPosition : {
		    n : "ncp",
		    id : "4054"
		},
		NegativeNumbers : {
		    n : "nnn",
		    id : "4111"
		},
		Format : {
		    n : "nfs",
		    id : "4055"
		},
		propBorderStyle : {
		    n : "bd",
		    id : ""
		},
		TopStyle : {
		    n : "bts",
		    id : "4061"
		},
		LeftStyle : {
		    n : "bls",
		    id : "4062"
		},
		BottomStyle : {
		    n : "bbs",
		    id : "4063"
		},
		RightStyle : {
		    n : "brs",
		    id : "4064"
		},
		TopColor : {
		    n : "btc",
		    id : "4067"
		},
		LeftColor : {
		    n : "blc",
		    id : "4068"
		},
		BottomColor : {
		    n : "bbc",
		    id : "4069"
		},
		RightColor : {
		    n : "brc",
		    id : "4070"
		},
		fillStyle : {
		    n : "fty",
		    id : "4224"
		},
		backgroundColor : {
		    n : "bg",
		    id : "4071"
		},
		gradientcolor : {
		    n : "gr",
		    id : [ "4071", "4225", "4226", "4229", "4230" ]
		},
		Gradient : {
		    n : "gr",
		    id : [ "4071", "4225", "4226", "4229", "4230" ]
		}
	    };
	    this.formatMap.unitMap[microstrategy.GRID_BORDERS] = "gb";
	    this.formatMap.unitMap[mstrGridReport.ALL_UNITS] = "agc";
	    this.formatMap.unitMap[mstrGridReport.ROW_UNITS] = "ra";
	    this.formatMap.unitMap[mstrGridReport.COL_UNITS] = "ca";
	    this.formatMap.unitMap[mstrGridReport.METRIC_UNITS] = "am";
	    this.formatMap.getName = function(B) {
		return (this[B] && this[B]["n"]) || B;
	    };
	    this.formatMap.getArgId = function(B) {
		return (this[B] && this[B]["id"]) || null;
	    };
	    this.formatMap.decode = function(C, B) {
		switch (C) {
		case "fontWeight":
		    return (B == -2) ? "default"
			    : (B == microstrategy.TRUE ? "bold" : "");
		case "fontStyle":
		    return (B == -2) ? "default"
			    : (B == microstrategy.TRUE ? "italic" : "");
		case "textDecoration":
		    return (B) ? "underline" : "";
		case "textDecoration2":
		    return (B) ? "line-through" : "";
		case "whiteSpace":
		    return (B) ? "normal" : "nowrap";
		}
		return B;
	    };
	    this.formatMap.encode = function(E, B) {
		var D = mstrFormatObject;
		switch (E) {
		case "textDecoration":
		case "textDecoration2":
		case "TextWrap":
		    return (B) ? microstrategy.TRUE : microstrategy.FALSE;
		case "color":
		case "TopColor":
		case "LeftColor":
		case "BottomColor":
		case "RightColor":
		    return (B == "transparent") ? 0 : D.encodeValue("color", B);
		case "backgroundColor":
		case "Gradient":
		    if (B.indexOf(",") == -1) {
			return (B == "transparent") ? 0 : D.encodeValue(
				"color", B);
		    }
		    var C = B.split(",");
		    return [
			    D
				    .encodeValue(
					    "color",
					    "#"
						    + C[gradientUtil.GRADIENT_START_COLOR_INDEX]),
			    D.encodeValue("color", "#"
				    + C[gradientUtil.GRADIENT_END_COLOR_INDEX]),
			    C[gradientUtil.GRADIENT_ANGLE_INDEX],
			    C[gradientUtil.GRADIENT_XOFFSET_INDEX],
			    C[gradientUtil.GRADIENT_YOFFSET_INDEX] ];
		}
		return B;
	    };
	}
	return this.formatMap;
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrGridReport.prototype.getGridFormatNode = function(G, H) {
    try {
	var C = this.getGridFormats();
	if (!C) {
	    return null;
	}
	var B = this.getGridFormatMap();
	var D;
	if (G.unit > mstrGridReport.METRIC_UNITS) {
	    var F = C.u[G.unit - mstrGridReport.METRIC_UNITS - 1];
	    D = F ? F[B.valueMap[G.format]] : null;
	} else {
	    var A = C[B.unitMap[G.unit]];
	    if (G.unit == microstrategy.GRID_BORDERS) {
		D = A;
		D.defaultsApplied = true;
	    } else {
		if (A) {
		    D = A[B.valueMap[G.format]];
		}
	    }
	}
	if (!D || !D.defaultsApplied) {
	    D = mstr.utils.Hash.applydefault(D, C.de);
	    D.defaultsApplied = true;
	}
	return D;
    } catch (E) {
	microstrategy.errors.log(E);
	return null;
    }
};
mstrGridReport.prototype.getGridFormatValue = function(E, H, F) {
    try {
	if ((E.unit == -1 && E.format == -1) || (E.unit == 0)) {
	    return "";
	}
	var A = this.getGridFormatMap();
	var G = A.getName(H);
	var D = this.getGridFormatNode(E);
	if (!D) {
	    return "";
	}
	var B = "";
	if (H == "borders") {
	    B = microstrategy.resolveBorderFlags(this.checkBorders(A, D), true);
	} else {
	    if ((G in D) && H == "propBorderStyle") {
		B = this.checkBorderStyle(A, D);
	    } else {
		B = (G in D) ? D[G] : "";
	    }
	}
	if (H == "backgroundColor") {
	    B = D.fty == 1 ? "transparent" : B;
	}
	if (F) {
	    B = A.decode(H, B);
	}
	return isNaN(B) ? B || "" : B;
    } catch (C) {
	microstrategy.errors.log(C);
	return "";
    }
};
mstrGridReport.prototype.checkBorderStyle = function(D, E) {
    var A = 0;
    var B = function(F) {
	return E[D.getName(F)];
    };
    try {
	if (B("propBorderStyle") == 0) {
	    return 0;
	}
	if (B("TopStyle") != 0 && B("BottomStyle") != 0 && B("LeftStyle") != 0
		&& B("RightStyle") != 0) {
	    return B("propBorderStyle");
	} else {
	    return 0;
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return A;
};
mstrGridReport.prototype.checkBorders = function(D, E) {
    var A = 0;
    var B = function(F) {
	return E[D.getName(F)];
    };
    try {
	if (B("propBorderStyle") == 0) {
	    return 0;
	}
	if (B("propBorderStyle") == 1) {
	    return 31;
	}
	if (B("TopStyle") != 0) {
	    A += 1;
	}
	if (B("BottomStyle") != 0) {
	    A += 2;
	}
	if (B("LeftStyle") != 0) {
	    A += 4;
	}
	if (B("RightStyle") != 0) {
	    A += 8;
	}
	A = (A == 15) ? 31 : A;
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return A;
};
mstrGridReport.prototype.setGridFormatValue = function(F, H, E, D) {
    try {
	var A = this.getGridFormatMap();
	var G = A.getName(H);
	var C = this.getGridFormatNode(F);
	if (C && C[G] != E) {
	    C[G] = E;
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.updateSelected = function(Q, A, B) {
    try {
	if (A == null || A == "none") {
	    return;
	}
	var M = Q.split(",");
	var C = M[0];
	var F = M[1];
	var I = M[2];
	var R = F;
	this.positionForGradient = F;
	if (B) {
	    C = "0";
	    R = parseInt(F, 10) + 1;
	}
	this.selectedAxis = C;
	this.selectedPosition = F;
	this.selectedUnit = I;
	this.selectedLevel = A;
	this.gridValueFormat = A;
	var D = false;
	var N = this.gridStructureInfo;
	if (!D) {
	    this.selections.clearSelectionsFromOtherPages();
	}
	var G = this;
	var H = function(S) {
	    G.selectAxis(S, A);
	};
	switch (Q) {
	case "0,-9999,7":
	    this.gridUnitFormat = mstrGridReport.ALL_UNITS;
	    if (D) {
		H(N.rowAxis);
		H(N.colAxis);
		H(N.metricAxis);
	    }
	    break;
	case "1,0,3":
	    this.gridUnitFormat = mstrGridReport.ROW_UNITS;
	    if (D) {
		H(N.rowAxis);
	    }
	    break;
	case "2,0,4":
	    this.gridUnitFormat = mstrGridReport.COL_UNITS;
	    if (D) {
		H(N.colAxis);
	    }
	    break;
	case "0,-999,6":
	    this.gridUnitFormat = mstrGridReport.METRIC_UNITS;
	    if (D) {
		H(N.metricAxis);
	    }
	    break;
	case "0,-9,7":
	    this.gridUnitFormat = microstrategy.GRID_UNIT_CONTAINER;
	    this.gridValueFormat = 0;
	    break;
	case "0,-99,7":
	    this.gridUnitFormat = microstrategy.GRID_BORDERS;
	    this.gridValueFormat = 0;
	    break;
	default:
	    I = N.getUnit(this.selectedAxis, R, this.selectedUnit);
	    var L = (I != null) ? I.src : null;
	    if (L == null) {
		break;
	    }
	    var J = Q.split(",");
	    var P = parseInt(J[0]);
	    var K = parseInt(J[1]);
	    var O = (K == -1 || P < 1);
	    this.gridUnitFormat = this.resolveGridUnitId((O == true ? -1 : P),
		    (O == true ? K + 1 : K));
	    if (this.selectedLevel == microstrategy.GRIDCELLTYPE_LEVEL_ALL) {
		this.gridValueFormat = this.selectedLevel;
		if (D) {
		    mstrGridReport.addAllLevel(this.selections, L);
		}
	    } else {
		this.gridValueFormat = this.selectedLevel;
		if (D) {
		    this.selections.addToSelectedUnits(null, L,
			    this.selectedLevel, true);
		}
	    }
	    break;
	}
	this.notifySelectionChange("ongridselectionschange");
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrGridReport.prototype.resolveGridUnitId = function(E, H) {
    try {
	var G = this.gridStructureInfo;
	var A = (E < 1);
	if (A) {
	    E = G.metricsAxis;
	}
	var B = mstrGridReport.METRIC_UNITS;
	if (A || (E != G.metricsAxis || H != G.metricsDepth)) {
	    var D = false;
	    if (A) {
		B += G.rowAxis.size();
		B += G.colAxis.size();
		D = (G.metricsAxis != microstrategy.GRIDCELL_AXIS_PAGE_BY);
	    } else {
		var C = function(L) {
		    var K = G.hasMetrics
			    && G.metricsAxis == microstrategy.GRIDCELL_AXIS_ROWS;
		    var J = G.metricsDepth < H;
		    var I = G.metricsAxis == microstrategy.GRIDCELL_AXIS_COLUMNS;
		    if (L) {
			return (K || (J && I));
		    } else {
			return (K && J);
		    }
		};
		switch (E) {
		case microstrategy.GRIDCELL_AXIS_ROWS:
		    D = C();
		    break;
		case microstrategy.GRIDCELL_AXIS_COLUMNS:
		    B += G.rowAxis.size();
		    D = C(true);
		    break;
		}
	    }
	    B += H;
	    if (D) {
		B -= 1;
	    }
	}
	return B;
    } catch (F) {
	microstrategy.errors.log(F);
	return mstrGridReport.METRIC_UNITS;
    }
};
mstrGridReport.prototype.resetSelections = function() {
    try {
	var A = [ "Axis", "Level", "Position", "Unit" ];
	for ( var B in A) {
	    this["selected" + A[B]] = null;
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.setGridUnitSelections = function(E, F) {
    try {
	this.gridUnitFormat = E;
	this.gridValueFormat = F;
	if (!this.selections) {
	    return;
	}
	var B = this.resolveGridTargetProperties({
	    unit : this.gridUnitFormat,
	    format : this.gridValueFormat
	});
	this.selections.clearAll(true);
	if (E < mstrGridReport.ALL_UNITS) {
	    return;
	}
	var A = false;
	if (E >= this.nonUnitCount) {
	    var D = this.getGridUnitSelectorItems()[E - this.nonUnitCount];
	    A = !!(D && D.tp == microstrategy.DSSTYPE_METRIC);
	}
	this.updateSelected(B.axis + "," + B.position + "," + B.unit, B.level,
		A);
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.resetGridUnitSelections = function() {
    this.gridUnitFormat = mstrGridReport.ALL_UNITS;
    this.gridValueFormat = 2;
};
mstrGridReport.prototype.notifySelectionChange = function(A) {
    try {
	if (this.observer) {
	    this.observer.notifyAll(A);
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.getSelectedUnit = function() {
    var D = null;
    if (this.selections && this.selections.getSelectedGridTarget) {
	var B = this.selections.getSelectedGridTarget();
	if (B && B.length > 0) {
	    var A = B.split(",");
	    if (A != null && A.length >= 2) {
		var C = A[0];
		var F = A[1];
		var E = A[2];
		D = this.gridStructureInfo.getUnit(C, F, E);
	    }
	}
    }
    return D;
};
mstrGridReport.prototype.addCalculationQuickGroup = function(Q) {
    try {
	var H = "";
	var I = "";
	var B = "";
	var N = null;
	var J = "";
	var F = "";
	var L = "";
	var A = "";
	if (this.selections && this.selections.getSelectedGridTarget) {
	    var E = this.selections.getSelectedGridTarget();
	    if (E && E.length > 0) {
		var O = E.split(",");
		if (O != null && O.length >= 2) {
		    F = O[0];
		    I = O[1];
		    B = O[2];
		    N = this.gridStructureInfo.getUnit(F, I, B);
		    if (N != null) {
			if (N.dssType == microstrategy.DSSTYPE_ATTRIBUTE_FORM) {
			    N = this.gridStructureInfo.findUnit(N.parentDssId);
			}
			J = N.dssId;
			L = N.alias;
			if (N.src) {
			    I = parseInt(N.src
				    .getAttribute(microstrategy.HTMLATTR_GRIDCELL_DEPTH));
			} else {
			    if (N.depth) {
				I = N.depth;
			    }
			}
		    }
		}
	    }
	}
	var K = [];
	var D = this.selections.getSelectedElementsOrdinals(K);
	var C = mstrGridReport.desp("5207");
	var P = mstrGridReport.desp("5422");
	var M = function(R) {
	    return "[" + L + "] " + mstrGridReport.desp(R) + " ";
	};
	switch (Q) {
	case "deSum":
	    H = M("2131");
	    A = 134;
	    break;
	case "deAvg":
	    H = M("2122");
	    A = 135;
	    break;
	case "deMin":
	    H = M("5416");
	    A = 116;
	    break;
	case "deMax":
	    H = M("5417");
	    A = 115;
	    break;
	case "deMinus":
	    H = K.join(" - ");
	    A = 2;
	    break;
	case "deDivide":
	    H = K.join(" / ");
	    A = 4;
	    break;
	case "deList":
	    P = mstrGridReport.desp("6177");
	    break;
	}
	this.getNewListName(Q, J, I, D.join(","), A, C, P);
    } catch (G) {
	microstrategy.errors.log(G);
    }
};
mstrGridReport.prototype.submitQuickGroupEvent = function(J, F, H, G, D, A) {
    try {
	if (this.selections) {
	    this.selections.clearAll(true);
	}
	var B = [ "4233", "4234", "4235", "4236" ];
	var I = [ F, H, G, D ];
	if (this.sliceID) {
	    B.push("4254");
	    I.push(this.sliceID);
	}
	var C = mstrUpdateManager.DE_ADD_QUICK_LIST;
	if (J != "deList") {
	    B.splice(4, 0, "4237");
	    I.splice(4, 0, A);
	    C = mstrUpdateManager.DE_ADD_QUICK_CALCULATION;
	}
	this.addAction(this.elem, C, this.beanPath, B, I);
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrGridReport.prototype.getNewListName = function(L, G, F, B, A, C, K) {
    try {
	var I = "<label for='gname' id='glabel'> " + C + " </label>";
	var E = "onpropertychange";
	if (!bIsIE4) {
	    E = "oninput";
	}
	var J = "<input name='gname' id='gname' type='text' size='35' value='"
		+ K
		+ "' "
		+ E
		+ "= \"var gnamev = document.getElementById('gname').value;if((!gnamev) || gnamev.replace(/^\\s+/g,'').length <= 0){microstrategy.bones['msgBox'].okButton.disabled = true ;}else{ microstrategy.bones['msgBox'].okButton.disabled = false ;}\"/> ";
	var H = mstrGridReport.desp(A ? "5415" : "5414");
	showMessage({
	    contents : "<div style='overflow:auto'>" + I + J + "</div>",
	    elements : microstrategy.OK_BUTTON + microstrategy.CANCEL_BUTTON,
	    okEval : "microstrategy.bones['" + this.id
		    + "'].submitQuickGroupEvent('" + L
		    + "', document.getElementById('gname').value || '" + K
		    + "','" + G + "', " + F + ", '" + B + "', '" + A + "')",
	    title : H
	});
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrGridReport.prototype.getUnitInfo = function(B) {
    try {
	return this.gridStructureInfo.getGridUnitInfo(B);
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrGridReport.prototype.getItemFormats = function() {
    try {
	return this.itemFormats;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrGridReport.prototype.getAttValue = function(C, A) {
    try {
	if (C == mstrGridReport.FMT_TYPE_TITLE && this.titleBarObj) {
	    var D = microstrategy.styleObj.formattingAttributes[this.titleBarObj
		    .getAttribute("id")];
	    if (D != null && typeof (D[A]) != "undefined") {
		return D[A];
	    }
	    return this.titleBarObj.getAttribute(A, 0);
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return null;
};
mstrGridReport.prototype.getFormatValue = function(B, C) {
    try {
	if (!this.itemFormats) {
	    return null;
	}
	if (C == "gradientcolor" && B == mstrGridReport.FMT_TYPE_TITLE) {
	    return (this.titleBarObj) ? this.titleBarObj.getAttribute(C) : null;
	}
	if (B == microstrategy.FORMAT_TYPE_CONTROL_TITLE) {
	    B = microstrategy.FORMAT_TYPE_TITLE;
	}
	return this.itemFormats[B][C];
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrGridReport.prototype.setAttValue = function(E, B, D) {
    try {
	this.itemFormats[E][B] = D;
	if (E == mstrGridReport.FMT_TYPE_TITLE) {
	    if (this.titleBarObj) {
		var G = this.titleBarObj.getAttribute("id");
		var F = microstrategy.styleObj.formattingAttributes[G];
		if (typeof (F) == "undefined") {
		    F = microstrategy.styleObj.formattingAttributes[G] = {};
		}
		F[B] = D;
		var A = mstrGridReport.heightAndWidthAttMap[B];
		this.titleBarObj.style[A] = microstrategy.getFormatObject()
			.decodeValue(A, D);
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.setFormatValue = function(E, G, D, C) {
    try {
	if (typeof (E) == "object" && "unit" in E) {
	    this.setGridFormatValue(E, G, D);
	} else {
	    if (this.itemFormats) {
		this.itemFormats[E][G] = D;
		if (E == mstrGridReport.FMT_TYPE_TITLE) {
		    if (G == "Gradient") {
			return;
		    }
		    if (this.titleBarObj) {
			var B = this.titleBarObj;
			var F = G && G.toLowerCase();
			if (F == "textdecoration" || F == "textdecoration2"
				|| F == "textalign") {
			    B = microstrategy.findChildWithAtt(
				    this.titleBarObj, "div", "id", "titleBar");
			}
			microstrategy.bone("rwb_viewer").doc.styleObj
				.formatElem(B, G, D);
			if (G && G.toLowerCase() == "backgroundcolor") {
			    this.titleBarObj.setAttribute("bgstyle",
				    (D == "transparent") ? 1 : 0);
			    if (this.titleBarObj.getAttribute("gradientcolor")) {
				this.titleBarObj
					.removeAttribute("gradientcolor");
			    }
			}
		    }
		}
	    }
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.isContainerSelected = function() {
    try {
	return (this.selectedAxis == 0 && (this.selectedLevel == 8 || this.selectedLevel == 9));
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrGridReport.prototype.isTemplateEmpty = function(B) {
    try {
	return (this.gridStructureInfo.hasNoUnits);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrGridReport.prototype.convertGradientInfo = function(D) {
    try {
	var A = [];
	var F = D.split(",");
	var E = mstrFormatObject;
	var B = function(G) {
	    return F[gradientUtil["GRADIENT_" + G]];
	};
	A[this.gradientColorId] = E.encodeValue("gradientColor", D);
	A[this.gradientAngleId] = B("ANGLE_INDEX");
	A[this.gradientXOffsetId] = B("XOFFSET_INDEX");
	A[this.gradientYOffsetId] = B("YOFFSET_INDEX");
    } catch (C) {
	microstrategy.errors.log(C);
    }
    return A;
};
mstrGridReport.prototype.makeSelectionByName = function(E, B, A, D) {
    var F = this.getSelectionData(B);
    if (F && F.el && E && F.el[E]) {
	var C = new Array(F.el[E].id);
	this.makeSelection(C, B, A, D, true);
    }
};
mstrGridReport.prototype.makeSelection = function(I, G, H, J) {
    try {
	var A = "\x1e";
	var E = this.getSelectionData(G);
	if (E && I && I.length > 0) {
	    var K = I.join(A);
	    E.sel = I;
	    E.ias = false;
	    for ( var D in I) {
		if (D == "u;") {
		    E.ias = true;
		    break;
		}
	    }
	    var C = this.controlLinks && this.controlLinks[G];
	    if (!C && this.controlLinks) {
		for ( var F in this.controlLinks) {
		    C = this.controlLinks[F];
		    break;
		}
	    }
	    if (C) {
		this.applySelector(G, C.ck, K, this.getVisibleTargets(C),
			C.partialUpdate, C.ctxt, H, J);
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.makeSelections = function(B) {
    try {
	var D = [];
	for ( var A = 0; A < B.length; A++) {
	    this.makeSelection(B[A].values, B[A].attId, null, D);
	}
	if (D.length > 0) {
	    this.um.add(D);
	    this.um.flushAndSubmitChanges();
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridReport.prototype.handleFitToAction = function(C) {
    try {
	var B = [];
	this.saveEnabled = true;
	this.isSaveBeforeDocCreate = true;
	this.notifySelectionChange("ongridselectionschange");
	this.commands.exec("setColWidthsMode", parseInt(C));
	this.colWidths.saveColWidthsMode(parseInt(C), B);
	this.colWidths.syncCols();
	this.um.add(B);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridReport.prototype.handleFitToWindow = function() {
    this.handleFitToAction("1");
};
mstrGridReport.prototype.handleFitToContent = function() {
    this.handleFitToAction("2");
};
mstrGridReport.prototype.setGraphSelected = function(A) {
    this.graphSelected = A;
};
mstrGridReport.prototype.getFixedRC = function(B) {
    try {
	if (this.gridStructureInfo) {
	    return this.gridStructureInfo["getFixed" + B]();
	} else {
	    return mstrGridStatic.prototype["getFixed" + B].apply(this);
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return 0;
};
mstrGridReport.prototype.getFixedRows = function() {
    return this.getFixedRC("Rows");
};
mstrGridReport.prototype.getFixedColumns = function() {
    return this.getFixedRC("Columns");
};
mstrGridReport.prototype.addRefreshEvent = function() {
    try {
	var A = this.um;
	var C = A.createActionObject(null, mstrUpdateManager.PAGE_REFRESH,
		microstrategy.servletName + "." + microstrategy.pageName, [],
		[], [], null);
	A.add([ C ], true);
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridReport.prototype.isADrillElemCheckBoxOrARadio = function(A) {
    return (A.name
	    && (A.name.indexOf(microstrategy.DRILL_BOX_NAME) == 0 || A.name
		    .indexOf(microstrategy.FILTER_BOX_NAME) == 0) && (A.type == "checkbox" || A.type == "radio"));
};
mstrGridReport.prototype.submitIncrementalFetch = function(G, H) {
    if (!H) {
	H = window.event;
    }
    if (H && H.ctrlKey) {
	return false;
    }
    if (G.getAttribute("useIframe")) {
	G.href = replaceURLParameter(G.href, "iframe", "true");
    }
    var B = G.target;
    var I = getObj("ReportEditorGrid");
    var C = "";
    var A = G.href;
    if (I) {
	var E = createDynamicForm(A);
	if (B) {
	    E.target = B;
	}
	for ( var F = 0; F < I.elements.length; F++) {
	    var J = I.elements[F];
	    if (this.isADrillElemCheckBoxOrARadio(J) && J.checked) {
		if (J.type == "radio") {
		    C = J.value;
		    break;
		}
		C = C + J.value + ",";
	    }
	}
	var D = document.createElement("INPUT");
	D.type = "HIDDEN";
	D.name = "hiddenDrillValues";
	D.id = "hiddenDrillValues";
	if (this.hiddenDrillValues) {
	    D.value = C + this.hiddenDrillValues;
	} else {
	    D.value = C;
	}
	E.insertAdjacentElement("beforeEnd", D);
	submitForm(E);
    }
};
mstrGridReport.prototype.submitDrillFromEditor = function(A) {
    var C = A.form;
    var B = document.createElement("input");
    B.type = "hidden";
    B.name = A.name;
    B.value = A.value;
    C.appendChild(B);
    C.onsubmit();
    C.submit();
};
mstrGridReport.prototype.initIncrementalFetchBoxes = function() {
    var A = this.hiddenDrillValues;
    var C = A ? A.split(",") : [];
    var G = getObj("ReportEditorGrid");
    var H = "";
    var I;
    var F = false;
    if (G) {
	for ( var E = 0; E < G.elements.length; E++) {
	    I = G.elements[E];
	    if (I.name && I.name.indexOf(microstrategy.DRILL_BOX_NAME) == 0
		    && I.type == "radio") {
		F = true;
		break;
	    }
	}
	for ( var E = 0; E < G.elements.length; E++) {
	    I = G.elements[E];
	    if (this.isADrillElemCheckBoxOrARadio(I)) {
		for ( var D = 0; D < C.length; D++) {
		    if (I.value == C[D]) {
			I.checked = true;
			if (I.type == "radio") {
			    return;
			}
			break;
		    }
		}
	    }
	}
	if (F) {
	    H = C[0];
	} else {
	    var B = false;
	    for ( var D = 0; D < C.length; D++) {
		B = false;
		for ( var E = 0; E < G.elements.length; E++) {
		    I = G.elements[E];
		    if (I.name
			    && I.name.indexOf(microstrategy.DRILL_BOX_NAME) == 0
			    && I.type == "checkbox") {
			if (I.value == C[D]) {
			    B = true;
			    break;
			}
		    }
		}
		if (B == false) {
		    H = H + C[D] + ",";
		}
	    }
	    if (H.substr(H.length - 1) == ",") {
		H = H.substr(0, H.length - 1);
	    }
	}
	if (G.hiddendrillvalues) {
	    G.hiddendrillvalues.value = H;
	}
    }
};
mstrGridReport.styAttrValue = function(B, A) {
    return microstrategy.styleObj
	    .getAttValue(B, microstrategy["HTMLATTR_" + A]);
};
mstrGridReport.prototype.getFilterBone = function() {
    try {
	return microstrategy.bone("rfe_pane") || microstrategy.bone("rle_pane")
		|| microstrategy.bone("vfe_pane");
    } catch (A) {
	microstrategy.errors.log(A);
	return null;
    }
};
mstrGridReport.prototype.prompt2ApplyFilter = function() {
    try {
	if (this.isFilterVisible) {
	    var B = this.getFilterBone();
	    if (B) {
		return B.prompt2ApplyFilter();
	    }
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
function mstrGridReport(A) {
    this.inherits = mstrGridStatic;
    this.inherits(A);
    delete this.inherits;
    this.primaryBone = true;
    return this;
}
mstrGridCommands.prototype = new mstrGridStaticCommands();
mstrGridCommands.prototype.exec = function(L, e, d, a, Y) {
    try {
	var C = null;
	var R = null;
	var u = this.parentBone.um;
	var T = [];
	var Z = this.parentBone;
	if (L && L.match(/exportMenu;/)) {
	    return this.exec("exportMenu", L.substring(11, L.length));
	}
	if ((Z.isGraph && mstrGridStatic.isGraphCommand(L))
		|| (Z.graphSelected && mstrGridStatic.isGridGraphCommand(L))) {
	    var x = microstrategy.bone(Z.id + "_graph");
	    return x && x.commands.exec(L, e, d, a, Y);
	}
	switch (L) {
	case "clearAllGridSelections":
	    if (Z.selections) {
		Z.selections.clearAll();
	    }
	    return true;
	case "clearAllGridSelectionsWithOutNotify":
	    if (Z.selections) {
		Z.selections.clearAll(true);
	    }
	    return true;
	case "updateSelected":
	    Z.updateSelected(e, d, a);
	    return true;
	case "setColWidthsMode":
	    this.exec("ensureColWidthsReady");
	    if (Z.colWidths) {
		Z.colWidths.setColWidthsMode(e);
	    }
	    return true;
	case "setColWidth":
	    this.exec("ensureColWidthsReady");
	    if (Z.colWidths) {
		Z.colWidths.setColWidthByKey(e, d, a);
	    }
	    return true;
	case "setRowHeightMode":
	    this.exec("ensureColWidthsReady");
	    if (Z.colWidths) {
		Z.colWidths.setRowHeightMode(e, d);
	    }
	    return true;
	case "saveColWidthsMode":
	    this.exec("ensureColWidthsReady");
	    if (Z.colWidths) {
		return Z.colWidths.saveColWidthsMode(e, d);
	    }
	case "saveColWidths":
	    this.exec("ensureColWidthsReady");
	    if (Z.colWidths) {
		return Z.colWidths.saveAllColWidths(e, d);
	    }
	case "saveRowHeightMode":
	    this.exec("ensureColWidthsReady");
	    if (Z.colWidths) {
		return Z.colWidths.saveRowHeightMode(e, d, a);
	    }
	case "cancelAllWidthsChanges":
	    this.exec("ensureColWidthsReady");
	    if (Z.colWidths) {
		Z.colWidths.cancelAllOperations();
	    }
	    return true;
	case "syncColumns":
	    this.exec("ensureColWidthsReady");
	    if (Z.colWidths) {
		Z.colWidths.syncCols();
	    }
	    return true;
	case "ensureColWidthsReady":
	    if (Z.doColWidths && !Z.colWidths) {
		Z.setupColResize(Z.colResizeExtraTag);
	    }
	    return;
	case "saveActionCollection":
	    Z.um.add(e);
	    return true;
	case "restoreColumnWidths":
	    this.exec("ensureColWidthsReady");
	    if (Z.colWidths) {
		Z.colWidths.restoreColumns();
	    }
	    return true;
	case "createIVEFromRpt":
	case "createHTML5IVEFromRpt":
	case "createDocFromRpt":
	    var M = L !== "createDocFromRpt";
	    var W = M ? 14333 : 5867;
	    if ((Z.isNew || Z.isReadonly || Z.isDrilled)
		    || Z.isSaveBeforeDocCreate) {
		microstrategy.bone(Z.id).saveCmdId = L;
		var h = "microstrategy.bone('" + Z.id + "').save()";
		var J = microstrategy.OK_BUTTON + microstrategy.CANCEL_BUTTON;
		showMessage({
		    contents : mstrGridReport.desp(W),
		    elements : J,
		    okEval : h,
		    type : mstrMsgBoxImpl.MSG_WARNING
		});
	    } else {
		if (Z.stateID > 0 && Z.stateID != Z.saveStateID) {
		    var t = L === "createIVEFromRpt", h = "microstrategy.bone('"
			    + Z.id + "').save()", I = "microstrategy.bone('"
			    + Z.id + "').convertToDoc(" + M + "," + t + ")", H = {
			Ok : microstrategy.descriptors.getDescriptor("218"),
			Cancel : microstrategy.descriptors.getDescriptor("221"),
			Apply : microstrategy.descriptors.getDescriptor("219")
		    };
		    J = microstrategy.APPLY_BUTTON + microstrategy.OK_BUTTON
			    + microstrategy.CANCEL_BUTTON;
		    showMessage({
			contents : mstrGridReport.desp(5956),
			elements : J,
			applyEval : h,
			okEval : I,
			type : mstrMsgBoxImpl.MSG_WARNING,
			buttonLabels : H
		    });
		} else {
		    Z.convertToDoc(L !== "createDocFromRpt",
			    L === "createIVEFromRpt");
		}
	    }
	    return true;
	case "addTemplateUnitAttForm":
	case "addTemplateUnit":
	    var AA = e.getAttribute(microstrategy.HTMLATTR_PARENT_ID);
	    if (AA != null) {
		var AI = Z.gridStructureInfo.findUnit(AA);
		if (AI != null) {
		    d = AI.axis;
		    a = AI.depth;
		}
	    }
	    var AB = (L == "addTemplateUnitAttForm") || (a != -1);
	    T = Z.addUnit(e, d, a, -1, Y, AB);
	    if (this.selections) {
		this.selections.clearAll(true);
	    }
	    if (T.length > 0 && Z.useClientSideManipulations) {
		microstrategy.eventManager.notifyOrphanBones(
			"ongridstructurechange", Z.gridStructureInfo);
	    }
	    return T;
	case "edtColorPicker":
	    C = e.split("|");
	    Z.openDialog("edtColorPicker", null, null,
		    microstrategy.servletName + "." + microstrategy.pageName, {
			activeBoneID : C[0],
			activeControlID : C[1],
			currentColor : C[2]
		    });
	    Z.um.replaceURL("selectedTabOptions", C[3]);
	    Z.um.flushAndSubmitChanges();
	    break;
	case "graphEdtColorGradient":
	case "edtColorGradient":
	case "rwdEdtColorGradient":
	    C = e.split("|");
	    var n = (L == "graphEdtColorGradient");
	    var AC = function(AR, m, AS) {
		Z.openDialog(AR, m, null, microstrategy.servletName + "."
			+ microstrategy.pageName);
		if (AS) {
		    Z.um.replaceURL("selectedTabOptions", AS);
		}
	    };
	    var o = null;
	    var S = "parentBoneID=" + C[0] + "&controlID=" + C[1]
		    + "&activeViewKey=";
	    if (!Z.isGrid || n) {
		S += ((this.objId) ? this.objId : C[2]) + "&graphObjectID="
			+ C[3] + "&graphSeriesID=" + parseInt(C[4]);
		if (C.length > 5) {
		    S += "&color1=" + C[5] + "&color2=" + C[6]
			    + "&transitionType=" + C[7] + "&angle=" + C[8]
			    + "&xOffset=" + C[9] + "&yOffset=" + C[10];
		    o = C[11];
		}
		AC("edtColorGradient", S, o);
	    } else {
		var q = (L == "edtColorGradient") ? "gridEdtColorGradient"
			: "rwdEdtColorGradient";
		if (C.length > 6) {
		    S += this.objId + "startFromSolid=" + false
			    + "&retrieveGradient=" + C[3] + "&color1=" + C[4]
			    + "&color2=" + C[5] + "&angle=" + C[6]
			    + "&xOffset=" + C[7] + "&yOffset=" + C[8]
			    + "&formatType=" + microstrategy.formatType;
		    o = C[9];
		} else {
		    if (C.length == 6) {
			var V = (C[4] == "transparent") ? "#FFFFFF" : C[4];
			S += C[2] + "&retrieveGradient=" + C[3] + "&color1="
				+ V + "&startFromSolid=" + true
				+ "&formatType=" + microstrategy.formatType;
			o = C[5];
		    } else {
			S += C[2] + "&retrieveGradient=" + C[3] + "&color1="
				+ C[4] + "&startFromSolid=" + true
				+ "&targetAxis=" + Z.selectedAxis
				+ "&targetPosition=" + Z.positionForGradient
				+ "&targetLevel=" + Z.selectedLevel
				+ "&formatType=" + microstrategy.formatType;
		    }
		}
		AC(q, S, o);
	    }
	    Z.um.flushAndSubmitChanges();
	    break;
	case "bgcolorgradient":
	    Z.exec("backgroundColor", e);
	    break;
	case "removeTemplateUnit":
	    T = null;
	    var r = Z.gridStructureInfo.findUnit(d);
	    if (r != null) {
		if (a != null) {
		    var D = r.attForms.findUnit(a);
		    T = (D != null) ? Z.deleteUnit(D, Y) : Z.deleteUnit(r, Y);
		} else {
		    T = Z.deleteUnit(r, Y);
		}
		if (this.selections) {
		    this.selections.clearAll(true);
		}
		if (T.length > 0 && !this.queryState("graphMode")
			&& Z.useClientSideManipulations) {
		    microstrategy.eventManager.notifyOrphanBones(
			    "ongridstructurechange", Z.gridStructureInfo);
		}
	    }
	    return T;
	case "getGridUnits":
	    if (Z.gridStructureInfo) {
		return Z.gridStructureInfo.getGridUnits();
	    }
	    break;
	case "formatGridBulk":
	    Z.processGridFormattingProperties(e);
	    return true;
	case "formatGraphBulk":
	    Z.processGraphFormattingProperties(e);
	    return true;
	case "redo":
	    Z.processRedo();
	    return true;
	case "undo":
	    Z.processUndo();
	    return true;
	case "subtotalChanges":
	case "PropertyChanges":
	    R = [];
	    for ( var AO = 0, X = e.length; AO < X; AO++) {
		var AJ = e[AO].cmdId;
		var P = e[AO].value;
		Z.processGridPropertyChanges(AJ, P, R);
	    }
	    Z.um.add(R);
	    Z.um.flushAndSubmitChanges();
	    return true;
	case "ShowThreshold":
	    Z.displayThresholds(Z.thresholdsState ? "0" : "1");
	    return true;
	case "quickThresholds":
	    Z.addQuickThresholds(R, e + "|edtAdvancedThresholds");
	    return true;
	case "swapAxes":
	    Z.swapAxes();
	    return true;
	case "gridMode":
	case "graphMode":
	    var AL = {
		gridMode : 1,
		graphMode : 2
	    }[L];
	    if (Z.isGraph) {
		var x = microstrategy.bone(Z.id + "_graph");
		if (x && x.zonesEditor) {
		    x.toggleZonesEditor(null, false);
		}
	    }
	    if (Z.quickSwitch && !Z.hasResized && (!Z.isGrid || !Z.isGraph)) {
		if ((AL == 1 && Z.isGraph) || (AL == 2 && Z.isGrid)) {
		    Z.onQuickSwitchClick();
		} else {
		    Z.notifySelectionChange("onselectionchange");
		}
	    } else {
		Z.updateViewMode(AL);
		Z.handleViewMode(AL);
	    }
	    return true;
	case "gridGraphMode":
	    Z.updateViewMode(3);
	    Z.handleViewMode(3);
	    return true;
	case "visFlashMode":
	case "visAjaxMode":
	    var F = ((L == "visFlashMode") ? 50 : 51);
	    microstrategy.adjustSelectedVisualization(Z, F);
	    Z.updateViewMode(F);
	    Z.handleViewMode(F);
	    return true;
	case "visualizationMode":
	    microstrategy.adjustSelectedVisualization(Z, e);
	    Z.updateViewMode(e);
	    Z.handleViewMode(e);
	    return true;
	case "autostyle":
	    Z.handleChangeStyle(e);
	    return true;
	case "selectedVisualization":
	    R = [];
	    C = e.split("|");
	    Z.setVisualizationSettings(null, C[0], null, C[1], R);
	    Z.um.add(R);
	    if ((mstrGridReport.isRWD() && microstrategy.EDIT_MODE == microstrategy.NOT_ALLOW_EDIT_MODE)
		    || (mstrGridReport.isReport() && mstrGridReport
			    .isViewMode())) {
		Z.um.flushAndSubmitChanges();
	    }
	    return true;
	case "setVisProps":
	    R = [];
	    Z.setVisualizationSettings(null, null, null, null, R, e);
	    Z.um.add(R);
	    return true;
	case "raiseGridResize":
	    Z.onresize();
	    return true;
	case "tbanding":
	    Z.handleBanding();
	    return true;
	case "tOutline":
	    R = [];
	    var AF = 1;
	    if (this.queryState("tOutline")) {
		AF = 0;
	    }
	    Z.processGridPropertyChanges("Outline", AF, R);
	    Z.um.add(R);
	    Z.um.flushAndSubmitChanges();
	    return true;
	case "fittocontent":
	    Z.handleFitToContent();
	    return true;
	case "fittowindow":
	    Z.handleFitToWindow();
	    return true;
	case "checkMergeRowHeader":
	case "checkMergeColHeader":
	    Z.toggleMergeHeaders(L);
	    return true;
	case "checkLockRowHeader":
	case "checkLockColHeader":
	    Z.toggleLockHeaders(L);
	    return true;
	case "pageBy":
	    microstrategy.toggleEditor("pbb_PageByStyle", "pbb");
	    return true;
	case "reportFilter":
	    microstrategy.toggleEditor("rfe_pane", "rfe");
	    return true;
	case "viewFilter":
	    microstrategy.toggleEditor("vfep_pane", "vfep");
	    return true;
	case "replaceTemplate":
	    return Z.replaceTemplate(e, d, a);
	case "promptDetails":
	    microstrategy.toggleEditor("promptDetails_PromptDetailsStyle",
		    "promptDetails");
	    return true;
	case "simpleThresholds":
	    microstrategy
		    .toggleEditor(
			    "edtReportSimpleThresholds_SimpleThresholdsReportEditorStyle",
			    "edtReportSimpleThresholds");
	    return true;
	case "addQuickTotals":
	    Z.addAction(this.elem, mstrUpdateManager.ADD_QUICK_SUBTOTAL,
		    Z.beanPath);
	    return true;
	case "save":
	    if (mstrGridReport.isDesignMode()) {
		return this.exec("dmSave", e, d, a, Y);
	    } else {
		var B = Z.getSaveFolderId();
		var AH = [ "3013", "3017" ];
		var AG = [ "false", "false" ];
		if (B) {
		    AH.splice(1, 0, "3014");
		    AG.splice(1, 0, B);
		}
		u.useIframe = false;
		this.submitAction(this.elem,
			mstrUpdateManager.DESIGN_MODE_SAVE_AS,
			microstrategy.servletName, AH, AG);
		break;
	    }
	case "menuDirectSave":
	case "dSave":
	    if (Z.prompt2ApplyFilter()) {
		return;
	    }
	    if (Z.isNew || Z.isReadonly || Z.isDrilled || Z.needSaveAs) {
		return this.exec("save", e, d, a, Y);
	    } else {
		if (Z
			.isFeatureAvailable(microstrategy.FEATURE_ASK_BEFORE_SAVE_CHANGES)) {
		    Z.askBeforeSaveOverwrite();
		} else {
		    if (Z
			    .isFeatureAvailable(microstrategy.FEATURE_FORCE_SAVE_AS)
			    && L == "dSave") {
			Z.saveReport();
		    } else {
			Z.submitSave();
		    }
		}
		break;
	    }
	case "dmFilters":
	    var g = microstrategy.findBone(Z.elem.parentNode);
	    if (g) {
		g.toggleFilterViewers(null, (e < 0));
		Z.isFilterVisible = (e > 0);
	    }
	    break;
	case "dmSave":
	    if (Z.prompt2ApplyFilter()) {
		return;
	    }
	    if (Z.isNew || Z.isReadonly || Z.isDrilled) {
		return this.exec("dmSaveAs", e, d, a, Y);
	    } else {
		Z.submitSave();
	    }
	    break;
	case "dmSaveAs":
	    if (Z.prompt2ApplyFilter()) {
		return;
	    }
	    T.push(u.createActionObject(this.elem,
		    mstrUpdateManager.DESIGN_MODE_PROCESS, Z.beanPath, [
			    "6032", "6018" ], [ "1", "1" ], []));
	    var B = Z.getSaveFolderId();
	    var AH = [ "3013", "3017" ];
	    var AG = [ "1", "true" ];
	    if (B) {
		AH.splice(1, 0, "3014");
		AG.splice(1, 0, B);
	    }
	    if (e && e.origin) {
		AH.push("3031");
		AG.push(e.origin);
	    }
	    T.push(u.createActionObject(this.elem,
		    mstrUpdateManager.DESIGN_MODE_SAVE_AS,
		    microstrategy.servletName, AH, AG, []));
	    u.add(T);
	    u.useIframe = false;
	    u.flushAndSubmitChanges();
	    break;
	case "dmRun":
	    if (Z.prompt2ApplyFilter()) {
		return;
	    }
	    u.useIframe = false;
	    this.submitAction(this.elem, mstrUpdateManager.DESIGN_MODE_PROCESS,
		    Z.beanPath, [ "6017" ], [ "1" ]);
	    break;
	case "Shortcut":
	case "isLinkedTemplate":
	    Z.setFeature(microstrategy.FEATURE_EMBEDDED_TEMPLATE_NODE, !e);
	    break;
	case "cancelGridFormatRequest":
	    Z.cancelGridFormatRequest();
	    break;
	case "FilterDetailsFormat":
	    microstrategy.openDataBasedBlockEditor("FilterDetailsEditor",
		    "FilterDetailsEditorBlockLoader", Z.beanPath, {});
	    break;
	case "fos":
	    u = Z.um;
	    var O = Z.commands.queryState("selectedDrillElements");
	    if (O) {
		u.add([ u.createActionObject(null,
			mstrUpdateManager.FILTER_ON_SELECTIONS, Z.beanPath, [
				"4035", "4134" ], [ O, "1" ], [], null) ]);
		Z.commands.exec("clearAllGridSelections");
		u.flushAndSubmitChanges();
	    }
	    break;
	case "togglePivot":
	case "toggleSort":
	case "toggleGraphZones":
	case "dontAskAgain":
	case "forceSaveAs":
	    var AE = "showGraphZones";
	    var s = microstrategy.FEATURE_CHECK_SHOW_GRAPH_ZONES;
	    if (L == "togglePivot") {
		AE = "showPivot";
		s = microstrategy.FEATURE_CHECK_SHOW_PIVOT_BUTTONS;
	    } else {
		if (L == "toggleSort") {
		    AE = "sSrt";
		    s = microstrategy.FEATURE_CHECK_SHOW_SORT_BUTTONS;
		} else {
		    if (L == "dontAskAgain") {
			AE = "askBeforeSaveChanges";
			s = microstrategy.FEATURE_ASK_BEFORE_SAVE_CHANGES;
			if (this.observer) {
			    this.observer.notifyAll("onstatechange");
			}
			this.submitAction(this.elem,
				mstrUpdateManager.SET_PREFERENCE, Z.beanPath, [
					"5003", "5004" ], [ AE, 0 ]);
			break;
		    } else {
			if (L == "forceSaveAs") {
			    AE = "askBeforeSaveChanges";
			    s = microstrategy.FEATURE_FORCE_SAVE_AS;
			    if (this.observer) {
				this.observer.notifyAll("onstatechange");
			    }
			    this.submitAction(this.elem,
				    mstrUpdateManager.SET_PREFERENCE,
				    Z.beanPath, [ "5003", "5004" ], [ AE, 2 ]);
			    break;
			}
		    }
		}
	    }
	    if (this.observer) {
		this.observer.notifyAll("onstatechange");
	    }
	    this.submitAction(this.elem, mstrUpdateManager.SET_PREFERENCE,
		    Z.beanPath, [ "5003", "5004" ], [ AE,
			    Z.isFeatureAvailable(s) ? 0 : 1 ]);
	    break;
	case "comboToggleButton":
	    if (this.queryEnabled("toggleSubtotals")) {
		this.exec("toggleSubtotals");
	    } else {
		this.exec("quickTotals");
	    }
	    break;
	case "tsubtotals":
	case "toggleSubtotals":
	    Z.toggleSubtotals();
	    break;
	case "showBean":
	    this.submitAction(this.elem, mstrUpdateManager.SHOW_BEAN,
		    Z.beanPath, [ "5018", "5017" ], [ e, d ]);
	    break;
	case "openFormulaEditor":
	    this.submitAction(this.elem, mstrUpdateManager.OPEN_FORMULA_EDITOR,
		    Z.beanPath, [ "6036", "6037" ], [ e, d ]);
	    break;
	case "setPropertyValues":
	    this.submitAction(this.elem,
		    mstrUpdateManager.REPORT_EVENT_SET_PROPERTY_VALUES,
		    Z.beanPath, [ "4146" ], [ e ]);
	    break;
	case "quickTotals":
	case "addViewFilterCondition":
	case "toggleThresholds":
	case "banding":
	case "outline":
	case "mergeCols":
	case "mergeRows":
	case "lockCols":
	case "lockRows":
	case "fitContents":
	case "fitWindow":
	case "attForms":
	    var AL = this.getActionMap(L);
	    this.submitAction(AL.e, AL.id, Z.beanPath, AL.s, AL.v);
	    break;
	case "saveReport":
	    var B = Z.getSaveFolderId();
	    var AH = [ "3013" ];
	    var AG = [ false ];
	    if (B) {
		AH.push("3014");
		AG.push(B);
	    }
	    u.useIframe = false;
	    this.submitAction(this.elem, mstrUpdateManager.SAVE_GRID,
		    microstrategy.servletName, AH, AG);
	    break;
	case "optimizedMode":
	    u.useIframe = false;
	    this.submitAction(this.elem,
		    mstrUpdateManager.CHANGE_OPTIMIZED_MODE,
		    microstrategy.servletName, [ "3017" ], [ "1" ]);
	    break;
	case "designMode":
	    u.useIframe = false;
	    this.submitAction(this.elem, mstrUpdateManager.CHANGE_DESIGN_MODE,
		    Z.beanPath, [ "3017" ], [ "1" ]);
	    break;
	case "browseParent":
	    if (!Z.parentFolderID || Z.isParentFolderHidden) {
		return this.exec("openHome");
	    }
	    u.useIframe = false;
	    this
		    .submitAction(null, mstrUpdateManager.BROWSE_FOLDER,
			    microstrategy.servletName, [ "1001" ],
			    [ Z.parentFolderID ]);
	    break;
	case "openHome":
	    u.useIframe = false;
	    this.submitAction(null, mstrUpdateManager.OPEN_DESKTOP,
		    microstrategy.servletName, [], []);
	    break;
	    
	case "print": 
	case "printPDF":
	case "export":
	case "buttonPDF":
	    //alert('가나다라');
	    // 배우의
	    var G = 1;
	    G = Z.isGraph ? G + 1 : G;
	    G = Z.isGrid && Z.isGraph ? G + 1 : G;
	    var A = Z.isFeatureAvailable("export-new-window") ? "_blank"
		    : "popupWin";
	    
	    //alert(A + "," + L + ","+ G);
	    A =  "popupWin";
	    window.open("" ,"popupWin",  "toolbar=no, width=1024, height=480, directories=no, status=no, scrollbars=auto, resizable=yes");
	    exportReport(null, A, L, G);
	    
	    break;

	case "buttonFlash":
 
	    var G = 1;
	    G = Z.isGraph ? G + 1 : G;
	    G = Z.isGrid && Z.isGraph ? G + 1 : G;
	    var A = Z.isFeatureAvailable("export-new-window") ? "_blank"
		    : "mstrExportWindow";
	    exportReport(null, A, L, G);
	    break;
	case "toggleScreenMode":
	    toggleScreenMode();
	    break;
	case "gridEditor":
	case "graphEditor":
	case "gridOptions":
	case "resizeEditor":
	    this.exec("showBean", L, true);
	    break;
	case "sort":
	    microstrategy.openAdvSortEditor({
		beanPath : Z.beanPath,
		subtotalPosition : Z.subtotalPosition,
		isReportDesignMode : mstrGridReport.isDesignMode(),
		isReportBlank : Z.isReportBlank,
		sourceAxis : e && e[0],
		sourceType : e && e[1],
		targetGrid : Z,
		taskParams : {
		    taskId : "reportExecute",
		    styleName : "AdvSortDataStyle",
		    startCol : Z.startCol,
		    maxCols : Z.maxCols,
		    msgID : mstrApp.getMsgID()
		}
	    });
	    break;
	case "drill":
	    toggleShowBean("drillEditor", !this.queryState("drill"));
	    break;
	case "editDM":
	case "newMetric":
	    var E = mstrApp.getMsgID(), y = [ Z.wksInfos ], c = microstrategy.activeCXMenu, b = Z.gridStructureInfo, AM = "", l = "", N = 1, z = {
		datasets : y,
		msgID : E
	    }, AD = [];
	    if (c) {
		AM = c.getAttribute(microstrategy.HTMLATTR_DSS_ID);
		l = c.getAttribute(microstrategy.HTMLATTR_DISPLAY_NAME);
		N = c.getAttribute(microstrategy.HTMLATTR_GRIDCELL_DEPTH);
	    } else {
		var K = b && b.metricAxis && b.metricAxis.units
			&& b.metricAxis.units[0];
		if (K) {
		    AM = K.dssId;
		    l = K.alias;
		    N = K.depth;
		}
	    }
	    var AN = function(m) {
		u.add(m);
		u.flushAndSubmitChanges();
	    };
	    if (L === "newMetric") {
		z.metricId = "";
		z.action = {
		    cmd : "editNew",
		    refOi : {
			did : AM,
			n : l
		    }
		};
		z.onApplyMetricCallback = function(AR) {
		    var m = [ "4031", "4032", "4259", "4029" ], AS = [
			    AR.alias, AR.tokenStreamXML,
			    !mstrmojo.string.isEmpty(AR.tokenStreamXML), N + 1 ];
		    if (AR.afb !== undefined) {
			m.push("4260");
			AS.push(AR.afb);
		    }
		    if (AR.sfb !== undefined) {
			m.push("4258");
			AS.push(AR.sfb);
		    }
		    AD.push(u.createActionObject(null,
			    mstrUpdateManager.ADD_DERIVED_METRIC, Z.beanPath,
			    m, AS));
		    AN.call(this, AD);
		};
	    } else {
		z.metricId = AM;
		z.action = {
		    cmd : "edit",
		    n : l
		};
		z.onApplyMetricCallback = function(AR) {
		    var m = [ "4248", "4031", "4032", "4259" ], AS = [ AM,
			    AR.alias, AR.tokenStreamXML,
			    !mstrmojo.string.isEmpty(AR.tokenStreamXML) ];
		    if (AR.afb !== undefined) {
			m.push("4260");
			AS.push(AR.afb);
		    }
		    if (AR.sfb !== undefined) {
			m.push("4258");
			AS.push(AR.sfb);
		    }
		    AD.push(u.createActionObject(null,
			    mstrUpdateManager.CHANGE_METRIC_FORMULA,
			    Z.beanPath, m, AS));
		    AN.call(this, AD);
		};
	    }
	    microstrategy.openDerivedMetricEditor(z);
	    break;
	case "renameEditObjects":
	    this.exec("openFormulaEditor", "1", false);
	    break;
	case "toggleattforms":
	case "toggleAttributeForms":
	    Z.toggleAttForms();
	    break;
	case "editTotals":
	    this.exec("showBean", "ReportSubtotalsDHTMLEditor", true);
	    break;
	case "advancedThresholds":
	    this.exec("showBean", "edtAdvancedThresholds", true);
	    break;
	case "setGridUnitSelections":
	    Z.setGridUnitSelections(e.unit, e.value);
	    break;
	case "tbGridUnitSelector":
	    Z.setGridUnitSelections(e, Math.max(Z.gridValueFormat,
		    microstrategy.GRID_BORDERS));
	    break;
	case "tbGridValueSelector":
	    Z.setGridUnitSelections(Z.gridUnitFormat, e);
	    break;
	case "tbGraphUnitSelector":
	    var U = (Z.isGraph && !Z.isGrid) ? Z : microstrategy.bone(Z.id
		    + "_graph");
	    if (U) {
		Z.setGraphSelected(true);
		U.commands.exec(L, e);
		Z.notifySelectionChange("ongridselectionschange");
	    }
	    break;
	case "tbUnitSelector":
	    if (e != "-1") {
		if (e.indexOf("**grid") > -1) {
		    Z.setGraphSelected(false);
		    this.exec("tbGridUnitSelector", e.replace("**grid", ""));
		} else {
		    if (e.indexOf("**graph") > -1) {
			if (Z.selections && Z.selections.removeAllHilites) {
			    Z.selections.removeAllHilites(true);
			}
			this.exec("tbGraphUnitSelector", e.replace("**graph",
				""));
		    }
		}
	    } else {
		Z.notifySelectionChange("ongridselectionschange");
	    }
	    break;
	case "tbValueSelector":
	    Z.graphSelected ? this.exec("tbGraphValueSelector", e) : this.exec(
		    "tbGridValueSelector", e);
	    break;
	case "FontFamily":
	case "FontSize":
	case "Underline":
	case "GridHorizontal":
	case "IncreaseDecimal":
	case "DecreaseDecimal":
	case "Currency":
	case "IntlCurrency":
	case "Percent":
	case "Comma":
	case "FillColor":
	case "lncolor":
	case "borders":
	case "FontColor":
	case "lnstyle":
	    Z.processSingleFormattingProperty(L, e);
	    break;
	case "Bold":
	case "Italic":
	    Z.processSingleFormattingProperty(L, e ? microstrategy.TRUE
		    : microstrategy.FALSE);
	    break;
	case "autoArrange":
	    var x = microstrategy.bone(Z.id + "_gb");
	    if (x) {
		x.submitAutoArrange(Z.id);
	    }
	    break;
	case "major":
	case "minor":
	    if (Z.isGrid && Z.isGraph) {
		microstrategy.bones[Z.id + "_graph"].exec(L, e);
	    }
	    return true;
	case "toggleReportBar":
	    var AQ = this.queryState("toggleReportBar") ? "0" : "1";
	    this.submitAction(this.elem, mstrUpdateManager.TOGGLE_REPORT_BAR,
		    Z.beanPath, [ "6050" ], [ AQ ]);
	    break;
	case "exportMenu":
	    var A = mstr.behaviors.featureResolver
		    .featAvailable("export-new-window") ? "_blank"
		    : "mstrExportWindow";
	    exportReport(e, A, "export", Z.currentView);
	    break;
	case "customVisualizations":
	    this.exec("openReportFrameElement", "visualizationsEditor");
	    break;
	case "visPropsEditor":
	    var AH = "scope=" + e[0] + "&selVis=" + e[1] + "&visEditorId="
		    + e[2];
	    if (mstrGridReport.isRWD()) {
		AH += "&activeViewID=" + Z.objId;
	    }
	    if (e[3]) {
		AH += "&widgetPropsXml=" + escape(e[3]);
	    }
	    if (e[4]) {
		AH += "&secDataProv=" + escape(e[4]);
	    }
	    if (mstrGridReport.isRWD() && mstrGridReport.isDesignMode()) {
		R = [];
		R.push(u
			.createActionObject(this.elem,
				mstrUpdateManager.APPLY_CHANGES, Z.beanPath,
				[], [], []));
		Z.um.add(R);
	    }
	    toggleShowBean("visPropsEditor", true, AH);
	    break;
	case "drillEditor":
	case "drillFilterEditor":
	    this.exec("openReportFrameElement", L);
	    break;
	case "forwardPicker":
	case "backPicker":
	    u.useIframe = false;
	    var AK = new Array();
	    AK.push(u.createActionObject(this.elem,
		    mstrUpdateManager.OPEN_HISTORY_PAGE,
		    microstrategy.servletName + "." + microstrategy.pageName,
		    [ "3140" ], [ e ]));
	    u.add(AK, true);
	    u.flushAndSubmitChanges();
	    return true;
	case "toggleHideNullsOrZeros":
	    var Q = this.queryState("HideNullsOrZeros"), R = [];
	    R.push(u.createActionObject(this.elem,
		    mstrUpdateManager.TOGGLE_HIDE_NULLS, Z.beanPath,
		    [ "4261" ], [ (Q) ? microstrategy.TRUE
			    : microstrategy.FALSE ], [], null));
	    u.add(R, true);
	    u.flushAndSubmitChanges();
	    break;
	default:
	    if (Z.exec(L, e)) {
		return true;
	    }
	    mstrGridStaticCommands.prototype.exec.call(this, L, e, d, a, Y);
	}
	return false;
    } catch (AP) {
	microstrategy.errors.log(AP);
	return false;
    }
};
 
mstrGridReport.prototype.askBeforeSaveOverwrite = function() {
    try {
	var C = mstrGridReport.desp("11165").replace(/##/,
		"<b>" + this.objName + "</b>");
	var A = "<label for='askBeforeSaveCheckbox' id='glabel'> "
		+ mstrGridReport.desp("211") + " </label>";
	var D = "<input name='askBeforeSave' id='askBeforeSaveCheckbox' type='checkbox'/> ";
	showMessage({
	    contents : "<div style='overflow:auto'>"
		    + C
		    + "</div><br/><br/><div style='overflow:auto' text-align:center>"
		    + D + A + "</div>",
	    elements : microstrategy.APPLY_BUTTON + microstrategy.OK_BUTTON
		    + microstrategy.CANCEL_BUTTON,
	    applyEval : "microstrategy.bones['" + this.id + "'].submitSave()",
	    okEval : "microstrategy.bones['" + this.id + "'].saveReport()",
	    buttonLabels : {
		Apply : microstrategy.descriptors.getDescriptor("219"),
		Ok : microstrategy.descriptors.getDescriptor("218")
	    },
	    title : mstrGridReport.desp("5728"),
	    type : mstrMsgBoxImpl.MSG_TEXT_ONLY
	});
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridCommands.prototype.submitAction = function(D, E, C, B, A) {
    this.parentBone.addAction(D, E, C, B, A);
};
mstrGridCommands.prototype.getActionMap = function(B) {
    var E = this.am;
    var D = this.parentBone;
    var C = mstrUpdateManager;
    if (!E) {
	E = {
	    quickTotals : {
		id : C.ADD_QUICK_SUBTOTAL
	    },
	    addViewFilterCondition : {
		id : C.ADD_VIEW_FILTER_CONDITION
	    },
	    attForms : {
		id : C.OPEN_ATT_FORMS_EDITOR
	    },
	    toggleThresholds : {
		id : C.REPORT_EVENT_SET_THRESHOLDS_DISPLAY,
		s : [ "4193" ],
		v : [ D.thresholdsState ? 0 : 1 ]
	    },
	    banding : {
		id : C.REPORT_EVENT_SHOW_BANDING,
		s : [ "4125" ],
		v : [ D
			.isFeatureAvailable(microstrategy.FEATURE_CHECK_SHOW_BANDING) ? 0
			: 1 ]
	    },
	    outline : {
		id : C.REPORT_EVENT_SHOW_OUTLINE_MODE,
		s : [ "4121" ],
		v : [ D
			.isFeatureAvailable(microstrategy.FEATURE_CHECK_OUTLINE_MODE) ? 0
			: 1 ]
	    },
	    mergeCols : {
		id : C.MERGE_COLUMN_HEADERS,
		s : [ "6038" ],
		v : [ !D
			.isFeatureAvailable(microstrategy.FEATURE_CHECK_MERGE_COL_HEADER) ]
	    },
	    mergeRows : {
		id : C.REPORT_EVENT_SET_PROPERTY_VALUES,
		s : [ "4126", "4146" ],
		v : [
			D.styleName,
			"4!Template Formatting!MergeCells!"
				+ (D
					.isFeatureAvailable(microstrategy.FEATURE_CHECK_MERGE_ROW_HEADER) ? 0
					: -1) ]
	    },
	    lockCols : {
		id : C.REPORT_EVENT_SET_PROPERTY_VALUES,
		s : [ "4146" ],
		v : [ "4!Template Formatting!LockColumnHeaders!"
			+ (D.isFeatureAvailable("check-lock-column-headers") ? 0
				: 1) ]
	    },
	    lockRows : {
		id : C.REPORT_EVENT_SET_PROPERTY_VALUES,
		s : [ "4146" ],
		v : [ "4!Template Formatting!LockRowHeaders!"
			+ (D.isFeatureAvailable("check-lock-row-headers") ? 0
				: 1) ]
	    },
	    fitContents : {
		id : C.REPORT_EVENT_SET_COLUMN_SCENARIO,
		s : [ "4153", "4154", "4155", "4056" ],
		v : [ "2", "2", "1", "1" ]
	    },
	    fitWindow : {
		id : C.REPORT_EVENT_SET_COLUMN_SCENARIO,
		s : [ "4153", "4154", "4155", "4056" ],
		v : [ "1", "2", "1", "1" ]
	    }
	};
	this.am = E;
    }
    var A = E[B];
    A.e = this.elem;
    if (!A.s) {
	A.s = [];
    }
    if (!A.v) {
	A.v = [];
    }
    return A;
};
mstrGridCommands.prototype.queryEnabled = function(J, R) {
    try {
	var B = this.parentBone;
	if (!R
		&& ((B.isGraph && mstrGridStatic.isGraphCommand(J)) || (B.graphSelected && mstrGridStatic
			.isGridGraphCommand(J)))) {
	    var C = microstrategy.bone(B.id + "_graph");
	    return C && C.commands.queryEnabled(J);
	}
	var D = null;
	var K;
	if (J && (K = J.match(/exportMenu;/)) && K.index == 0) {
	    return true;
	}
	var L = function(d, b) {
	    var h = true;
	    if (b) {
		h = !B.isVisualization;
	    }
	    return (B.isFeatureAvailable(microstrategy["FEATURE_" + d]) && h);
	};
	var G = function(b) {
	    return mstr.behaviors.featureResolver.featAvailable(b
		    + "-formatting");
	};
	switch (J) {
	case "Hmode":
	    return !(microstrategy.formatType == mstrGridReport.FMT_TYPE_TITLE);
	case "Height":
	    return (microstrategy.formatType == mstrGridReport.FMT_TYPE_TITLE && B
		    .showTitleBar() == true);
	case "number":
	case "IntlCurrency":
	case "Currency":
	case "deltaDecimal":
	case "IncreaseDecimal":
	case "DecreaseDecimal":
	case "Percent":
	case "Comma":
	    if ((G("number") || G("grid-graph"))
		    && this.queryEnabled("canUseGridFormatting")) {
		return !(B.selectedPosition == "-9" || B.selectedPosition == "-99");
	    } else {
		return false;
	    }
	case "TextAlign":
	case "align":
	case "font":
	case "FontFamily":
	case "fsize":
	case "FontSize":
	case "color":
	case "FontColor":
	case "fstyle":
	case "Bold":
	case "Italic":
	case "Underline":
	case "GridHorizontal":
	    return this.queryEnabled("canUseGridFormatting")
		    && G("grid-graph")
		    && !((B.selectedPosition == "-9" && B.selectedLevel == "8") || B.gridUnitFormat == microstrategy.GRID_BORDERS);
	case "FillColor":
	case "bgcolor":
	    return this.queryEnabled("canUseGridFormatting")
		    && (G("grid-graph") && B.gridUnitFormat != microstrategy.GRID_BORDERS);
	case "lncolor":
	case "borders":
	case "lnstyle":
	    return this.queryEnabled("canUseGridFormatting") && G("grid-graph")
		    && !(B.selectedPosition == "-9" && B.selectedLevel == "9");
	case "canUseGridFormatting":
	    var P = !this.queryState("Shortcut")
		    && !(B.selectedPosition == "-999"
			    && (B.selectedLevel == "1" || B.selectedLevel == "5") && B.hasNoMetrics);
	    return P
		    && (B.graphSelected || mstr.behaviors.featureResolver
			    .featAvailable("change-grid-autostyle"));
	case "lineColor":
	case "borderLeftStyle":
	case "lineStyle":
	    return (microstrategy.formatType == microstrategy.FORMAT_TYPE_MAIN);
	case "advColorPicker":
	case "onegrid":
	case "edtSort":
	case "edtRename":
	case "level":
	case "target":
	//case "graphCategory":
	//case "graphTarget":
	case "reportFilter":
	case "promptDetails":
	case "fmtToolbar":
	case "visualizationsEditor":
	case "edtColorGradient":
	case "gradientcolor":
	case "export":
	case "saveReport":
	case "designMode":
	case "save":
	case "print":
	case "printPDF":
	case "browseParent":
	case "toggleScreenMode":
	case "createDocFromRpt":
	case "createIVEFromRpt":
	case "createHTML5IVEFromRpt":
	case "gridOptions":
	case "addViewFilterCondition":
	case "visFlashMode":
	case "visAjaxMode":
	case "toggleGraphZones":
	case "toggleReportBar":
	case "buttonPDF":
	case "buttonFlash":
	case "FilterDetailsFormat":
	case "drillFilterEditor":
	case "optimizedMode":
	    return true;
	case "menuDirectSave":
	    if (mstrGridReport.isDesignMode()) {
		return B.gridStructureInfo != null
			&& !B.gridStructureInfo.hasNoUnits;
	    } else {
		return B.saveEnabled;
	    }
	case "dSave":
	    if (B.isFeatureAvailable(microstrategy.FEATURE_FORCE_SAVE_AS)) {
		return true;
	    } else {
		return B.saveEnabled;
	    }
	case "togglePivot":
	case "toggleSort":
	    return B.isGrid;
	case "renameEditObjects":
	    return L("ENABLE_RENAME_EDIT_OBJECT", true);
	case "newMetric":
	    return L("ENABLE_INSERT_NEW_METRIC", true);
	case "editTotals":
	    return L("ENABLE_SHOW_TOTALS", true);
	case "toggleSubtotals":
	    return L("ENABLE_SHOW_SUBTOTALS");
	case "sort":
	    return L("ENABLE_SORT", true);
	case "drill":
	case "drillEditor":
	    return L("ENABLE_DRILL_EDITOR", true);
	case "viewFilter":
	    return L("ENABLE_VIEW_FILTER_EDITOR");
	case "pageBy":
	    return L("ENABLE_PAGE_BY");
	case "allObjects":
	    return !L("IS_VIEW_REPORT") && L("ENABLE_OBJECT_BROWSER");
	case "objBrowser":
	    return L("ENABLE_OBJECT_BROWSER");
	case "ncSendNow":
	    return L("ENABLE_SEND_NOW");
	case "gridMode":
	    return L("ENABLE_GRID_MODE");
	case "graphMode":
	    return L("ENABLE_GRAPH_MODE");
	case "gridGraphMode":
	    return L("ENABLE_GRID_GRAPH_MODE");
	case "redo":
	    return ((B.um.anyNonStatic(true) || B.isReportRedoable) && !B.isVisualization);
	case "undo":
	    return ((B.um.anyNonStatic(false) || B.isReportUndoable) && !B.isVisualization);
	case "gridGraphCategory":
	    return B.isGrid && B.isGraph;
	case "autoArrange":
	    var C = microstrategy.bone(B.id + "_gb");
	    return C && !C.autoArrange;
	case "edtDMetric":
	    return !B.isTemplateEmpty();
	case "quickThresholds":
	    return B.isGrid
		    && B.selections
		    && B.selections.hasMetricsSelected
		    && B.selections.hasMetricsSelected()
		    && B
			    .isFeatureAvailable(microstrategy.FEATURE_EMBEDDED_TEMPLATE_NODE);
	case "checkMergeRowHeader":
	    return this.queryEnabled("mergeHeader")
		    && !this.queryState("tOutline")
		    && mstr.behaviors.featureResolver
			    .featAvailable("enable-grid-format-editor");
	case "checkMergeColHeader":
	    return this.queryEnabled("mergeHeader");
	case "mergeHeader":
	case "autostyle":
	case "tbanding":
	case "tOutline":
	case "checkLockColHeader":
	case "checkLockRowHeader":
	case "fittocontent":
	case "fittowindow":
	case "edtSortGridMenu":
	case "edtSortGrid":
	case "vfeRWGrid":
	case "gridNoVisNoEmpty":
	    return B.isGrid
		    && B
			    .isFeatureAvailable(microstrategy.FEATURE_EMBEDDED_TEMPLATE_NODE)
		    && !((B.isVisualization && B.docViewer && !B.docViewer
			    .isEditableViewModeEplus()) || B.isTemplateEmpty());
	case "toggleAttributeForms":
	case "toggleattforms":
	    if (!this.queryEnabled("gridNoVisNoEmpty")) {
		return false;
	    }
	    var S = B.gridStructureInfo && B.gridStructureInfo.getAttributes();
	    var M = false;
	    if (!S) {
		return false;
	    }
	    for ( var U = 0; U < S.length; U++) {
		M |= S[U].hasAttForms();
		if (M) {
		    return true;
		}
	    }
	    return false;
	case "graphCategory":
	case "graphTarget":
	case "graphZones":
	    return B.isGraph && L("EMBEDDED_TEMPLATE_NODE")
		    && !(B.isVisualization || B.isTemplateEmpty());
	case "visualizationMode":
	    return B.visualizationsEnabled;
	case "selectedVisualization":
	    return B.visualizationList && B.visualizationList.length > 0;
	case "isLinkedGrid":
	    return !L("EMBEDDED_TEMPLATE_NODE");
	case "toggleThresholds":
	case "ShowThreshold":
	    return B && (B.isGrid || B.isGraph) && B.hasThresholds
		    && L("EMBEDDED_TEMPLATE_NODE");
	case "edtSubtotals":
	case "addQuickTotals":
	case "edtSubtotalsOldIServer":
	    return this.queryEnabled("hasmetrics")
		    && L("EMBEDDED_TEMPLATE_NODE");
	case "simpleThresholds":
	case "openSimpleThresholdEditor":
	case "advancedThresholds":
	case "openAdvThresholdEditor":
	    var H = true;
	    var e = B.selections && B.selections.getSelectedUnitHeaders();
	    if (e && e.length > 0) {
		var Q = B.getObjInfoList(e);
		if (Q && Q.length > 0) {
		    var X = Q[0];
		    switch (X.dssType) {
		    case microstrategy.DSSTYPE_ATTRIBUTE:
			H = X.canAddThresholds;
			break;
		    case microstrategy.DSSTYPE_METRIC:
			H = true;
			break;
		    default:
			H = false;
		    }
		}
	    }
	    return H && this.queryEnabled("hasmetrics")
		    && L("EMBEDDED_TEMPLATE_NODE");
	case "comboToggleButton":
	    return this.queryEnabled("addQuickTotals")
		    && (this.queryEnabled("toggleSubtotals") || L("SHOW_TOTALS"));
	case "hasmetrics":
	    return !B.hasNoMetrics;
	case "tsubtotals":
	    return L("ENABLE_SHOW_SUBTOTALS") && L("EMBEDDED_TEMPLATE_NODE");
	case "edtResize":
	    return B.isGrid && this.queryEnabled("notEmptyTemplate");
	case "notEmptyTemplate":
	case "swapAxes":
	    return (B.gridStructureInfo != null && L("EMBEDDED_TEMPLATE_NODE")) ? !B.gridStructureInfo.isEmptyTemplate
		    : false;
	case "attForms":
	    return L("ENABLE_MODIFY_ATTRIBUTE_FORMS") && B.gridStructureInfo
		    && B.gridStructureInfo.getAttributes()
		    && B.gridStructureInfo.getAttributes().length > 0;
	case "fos":
	    D = mstr.behaviors.featureResolver
		    .featAvailable("is-not-single-row-report")
		    && this.queryEnabled("mdxOneSelection") && B.selections;
	    return (D != null && D.getSelectedDrillElementsCount
		    && D.getSelectedDrillElementsCount() > 0 && D
		    .anyAttributeElementSelected());
	case "b3dstyle":
	case "b3dweight":
	case "enabled3d":
	    return (B.selectedPosition == "-9" && B.selectedLevel == "8")
		    || B.selectedPosition == "-99";
	case "fontprops":
	case "numberprops":
	case "alignprops":
	case "colorprops":
	    return true;
	case "moveLeft":
	case "moveRight":
	case "moveUp":
	case "moveDown":
	    return (B.selections != null && B.selections.allOnOneAxis());
	case "showRight":
	    var D = B && B.selections;
	    if (D) {
		var Q = D.getSelectedCellsWithAttr("dg", "true");
		if (Q.length == 0) {
		    return false;
		}
		Q
			.sort(function(d, c) {
			    return (parseInt(d
				    .getAttribute(microstrategy.HTMLATTR_GRIDCELL_DEPTH)) - parseInt(c
				    .getAttribute(microstrategy.HTMLATTR_GRIDCELL_DEPTH)));
			});
		var g = Q[Q.length - 1]
			.getAttribute(microstrategy.HTMLATTR_GRIDCELL_DEPTH);
		var V = B.gridStructureInfo
			.getGridUnitInfoBySrc(Q[Q.length - 1]);
		return V.index < (B.gridStructureInfo.allAxes[(V.axis == microstrategy.GRIDCELL_AXIS_METRICS) ? 0
			: V.axis].units.length - 1);
	    }
	    return false;
	case "showLeft":
	    var D = B && B.selections;
	    if (D) {
		var Q = D.getSelectedCellsWithAttr("dg", "true");
		if (Q.length == 0) {
		    return false;
		}
		Q
			.sort(function(d, c) {
			    return (parseInt(c
				    .getAttribute(microstrategy.HTMLATTR_GRIDCELL_DEPTH)) - parseInt(d
				    .getAttribute(microstrategy.HTMLATTR_GRIDCELL_DEPTH)));
			});
		var g = Q[Q.length - 1]
			.getAttribute(microstrategy.HTMLATTR_GRIDCELL_DEPTH);
		var V = B.gridStructureInfo
			.getGridUnitInfoBySrc(Q[Q.length - 1]);
		return V.index > 0;
	    }
	    return false;
	case "dmFilters":
	case "dmCancel":
	    return mstrGridReport.isDesignMode();
	case "dmRun":
	case "dmSave":
	case "dmSaveAs":
	    return mstrGridReport.isDesignMode()
		    && (B.gridStructureInfo != null && !B.gridStructureInfo.hasNoUnits);
	case "deList":
	case "deCalc":
	case "deSum":
	case "deAvg":
	case "deMin":
	case "deMax":
	case "deMinus":
	case "deDivide":
	case "editSelector":
	case "links":
	case "dynLinks":
	    D = B.selections;
	    var Z = D.singleAttributeElementsAreSelected();
	    var Y = D.getSelectedItemCount();
	    var W = !D.containsDerivedElements();
	    var N = B.getSelectedUnit();
	    var A = {
		deList : Z && Y >= 1 && W,
		dynLinks : W || (!Z && Y == 1),
		deCalc : Z && Y > 1
			&& (W || !(N && N.src.getAttribute("pthr"))),
		deSum : Z && Y > 1,
		deAvg : Z && Y > 1,
		deMin : Z && Y > 1,
		deMax : Z && Y > 1,
		deMinus : Z && Y == 2,
		deDivide : Z && Y == 2,
		editSelector : Y == 1,
		links : Y >= 1
	    }[J];
	    return D != null && A;
	case "WebHyperLinkEditor":
	case "showWebHyperLinkEditor":
	    if (B.selections && B.selections.getSelectedItemCount() == 1) {
		var T = B.selections.getItems();
		if (T && T[0]) {
		    var O = T[0].getAttribute(microstrategy.HTMLATTR_DSS_TYPE);
		    return (O == microstrategy.DSSTYPE_METRIC
			    || O == microstrategy.DSSTYPE_ATTRIBUTE
			    || O == microstrategy.DSSTYPE_CONSOLIDATION || O == microstrategy.DSSTYPE_CUSTOM_GROUP);
		}
	    }
	    return false;
	case "showPageByHyperLinkEditor":
	    return true;
	case "isGraph":
	    return B.isGraph;
	case "graphEditor":
	    return (G("grid-graph") || G("simple-graph")) && B.isGraph;
	case "gridEditor":
	    return (G("grid-graph") || G("number"))
		    && B.isGrid
		    && mstr.behaviors.featureResolver
			    .featAvailable("enable-grid-format-editor");
	case "tbGridUnitSelector":
	case "tbGridValueSelector":
	    return B.isGrid && !B.isGraph;
	case "tbGraphUnitSelector":
	case "tbGraphValueSelector":
	    return !B.isGrid && B.isGraph;
	case "tbUnitSelector":
	case "tbValueSelector":
	    return B.isGrid || B.isGraph;
	case "rmcDrilling":
	case "rmcPageByDrilling":
	case "mdxOneSelection":
	    if (B.isMdxCube) {
		D = B.selections;
		var Y = D ? D.getSelectedItemCount() : 0;
		var F = Y == 0;
		if (J == "rmcDrilling" || J == "mdxOneSelection") {
		    F = Y == 1;
		    if (!F && B.gridStructureInfo
			    && B.gridStructureInfo.showAttForms) {
			F = D && D.getSelectedDrillElementsCount
				&& D.getSelectedDrillElementsCount() == 1;
		    }
		}
		return D != null && F;
	    }
	    if ("rmcDrilling" == J) {
		var a = (B.selections && B.selections.getItems()) || [], I = a[0];
		return I != null && I.getAttribute ? I.getAttribute("emp") != "1"
			: true;
	    }
	    return true;
	case "resizeEditor":
	    return mstr.behaviors.featureResolver
		    .resolveFeatSet("enable-resize-columns-rows;is-not-visualization-mode");
	case "vfeRWView":
	    return !B.isVFEmpty;
	case "toggleHideNullsOrZeros":
	    return mstrGridReport.isViewMode() && L("EMBEDDED_TEMPLATE_NODE");
	default:
	    return mstrGridStaticCommands.prototype.queryEnabled.call(this, J);
	}
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrGridCommands.prototype.queryState = function(E, B, t) {
    try {
	var O = this.parentBone;
	if (!t
		&& ((O.isGraph && mstrGridStatic.isGraphCommand(E)) || (O.graphSelected && mstrGridStatic
			.isGridGraphCommand(E)))) {
	    var c = microstrategy.bone(O.id + "_graph");
	    return c && c.commands.queryState(E, B, t);
	}
	var N = null;
	var W = mstrFormatObject;
	var q, n, L, c;
	var V = function(u) {
	    return O.isFeatureAvailable(microstrategy["FEATURE_" + u]);
	};
	var T = function(x, u) {
	    return O.getGridFormatValue({
		unit : O.gridUnitFormat,
		format : O.gridValueFormat
	    }, x, u);
	};
	var h = O.selections;
	switch (E) {
	case "isGraphSelected":
	    return O.graphSelected;
	case "isLocked":
	    var m = O.gridStructureInfo.findUnit(B);
	    return (m) ? m.isLocked : false;
	case "existSelectedUnits":
	    return (h && h.getSelectedUnitsCount() > 0);
	case "selectedTarget":
	    return (h) ? h.getSelectedGridTarget() : null;
	case "selectedLevel":
	    return (h) ? h.getSelectedGridLevel() : null;
	case "selected":
	case "SubType":
	    if (O.isWidget) {
		return mstrGridReport.desp("4921");
	    }
	    switch (parseInt(O.effectiveView) - 1) {
	    case microstrategy.GRID_EFFECTIVE_VIEW_GRAPH:
		return mstrGridReport.desp("3479");
	    case microstrategy.GRID_EFFECTIVE_VIEW_GRID_GRAPH:
		return mstrGridReport.desp("3702");
	    default:
		return mstrGridReport.desp("3624");
	    }
	case "isOnGrid":
	    var a = O.gridStructureInfo.buildGridUnitInfo(B);
	    return (O.gridStructureInfo.findUnitInfo(a) != null);
	case "getRowHeight":
	    return O.colWidths.getRowHeight();
	case "getGridWidthsObj":
	    if (O.colWidths == null) {
		O.setupColResize();
	    }
	    return O.colWidths != null ? O.colWidths.getColWidthsObj() : null;
	case "selectedGrid":
	    return O.elem;
	case "tbanding":
	    return O.checkBanding;
	case "checkLockRowHeader":
	    return V("CHECK_LOCK_ROW_HEADERS");
	case "checkLockColHeader":
	    return V("CHECK_LOCK_COLUMN_HEADERS");
	case "checkMergeRowHeader":
	    return V("CHECK_MERGE_ROW_HEADER") || this.queryState("tOutline");
	case "checkMergeColHeader":
	    return V("CHECK_MERGE_COL_HEADER");
	case "tsubtotals":
	case "checkSubtotals":
	    return V("CHECK_SHOW_SUBTOTALS");
	case "tOutline":
	    return V("CHECK_OUTLINE_MODE");
	case "checkBanding":
	case "enableLegends":
	case "enableLabels":
	case "allowedGraphTypes":
	case "styleName":
	    return O[E];
	case "assoNodesDrill":
	    var C = {
		assoNodesDrill : "1"
	    }[E];
	    return ("associatedNodes" in O) ? O.associatedNodes[C] : false;
	case "target":
	    return O.selectedAxis + "," + O.selectedPosition + ","
		    + O.selectedUnit;
	case "level":
	    return O.selectedLevel;
	case "autostyle":
	    return O.autostyleId || "custom";
	case "selectedVisualization":
	    var l = [];
	    var S = -1;
	    var G = O.visualizationList;
	    if (G && G.length > 0) {
		for (q = 0; q < G.length; q++) {
		    if (O.selectedVisualization == G[q].name) {
			S = q;
		    }
		    l.push({
			dssid : G[q].name + "|" + G[q].vm,
			n : G[q].desc
		    });
		}
		return {
		    items : l,
		    value : G[S].name + "|" + G[S].vm
		};
	    }
	    return {
		items : []
	    };
	case "toggleThresholds":
	case "ShowThreshold":
	    return O.thresholdsState;
	case "toggleAttributeForms":
	case "toggleattforms":
	    return O.showAttForms;
	case "fittocontent":
	    return (O.gridWidthInfo) ? O.gridWidthInfo.colScenario == mstrGridReport.COL_WIDTH_FIT_TO_CONTENT
		    : false;
	case "fittowindow":
	    return (O.gridWidthInfo) ? O.gridWidthInfo.colScenario == mstrGridReport.COL_WIDTH_FIT_TO_DISPLAY
		    : false;
	case "objBrowser":
	    N = microstrategy.bone("accordion_AccordionTabManagerStyle");
	    return (N && N.currentTabName == microstrategy.ACCORDION_REPORT_RP_OBJECT_PANEL);
	case "allObjects":
	    N = microstrategy.bone("accordion_AccordionTabManagerStyle");
	    return (N && N.currentTabName == microstrategy.ACCORDION_REPORT_ALL_OBJECT_PANEL);
	case "pageBy":
	    N = microstrategy.bone("pbb_PageByStyle");
	    return (N && isInDocument(N.elem));
	case "reportFilter":
	    N = microstrategy.bone("rfe_pane");
	    return (N && isInDocument(N.elem));
	case "viewFilter":
	    N = microstrategy.bone("vfep_pane");
	    return (N && isInDocument(N.elem));
	case "promptDetails":
	    N = microstrategy.bone("promptDetails_PromptDetailsStyle");
	    return (N && isInDocument(N.elem));
	case "simpleThresholds":
	    N = microstrategy
		    .bone("edtReportSimpleThresholds_SimpleThresholdsReportEditorStyle");
	    return (N && isInDocument(N.elem));
	case "formatToolbar":
	    return (microstrategy.bone("reportFormatToolbar")) ? true : false;
	case "gridPosition":
	case "gridFactor":
	    var b = microstrategy.findAncestor(O.elem.parentNode);
	    if (b) {
		return (E == "gridPosition") ? mstrGridReport.styAttrValue(b,
			"GRID_POS") : mstrGridReport.styAttrValue(b,
			"GRID_AREA_PCT");
	    }
	    break;
	case "selections":
	    var P = h && h.lastSelectionIsFromToolbar
		    && h.lastSelectionIsFromToolbar();
	    var H = O.gridUnitFormat;
	    var Q = O.gridValueFormat;
	    var U = (H != -1) && (Q != -1);
	    if (P && U) {
		return "{ src: true, unit: " + H + ", value: " + Q + " }";
	    } else {
		return (h && h.getSelections) ? h.getSelections() : null;
	    }
	case "graphSelections":
	    var K = "'graphSelected':" + (O.graphSelected ? "true" : "false");
	    if (O.graphSelected && O.selectedGraphUnit
		    && O.selectedGraphTargetValue) {
		K += ",'graphSelectedUnit':'" + O.selectedGraphUnit
			+ "','graphSelectedValue':'"
			+ O.selectedGraphTargetValue + "'";
	    }
	    return "{" + K + "}";
	case "selectedDrillElements":
	    return (h != null && h.getSelectedDrillElements) ? h
		    .getSelectedDrillElements() : "";
	case "dmFilters":
	    return O.isFilterVisible;
	case "ShowDrillingOptions":
	    return V("SHOW_GRID_OPTIONS_DRILL");
	case "RHS":
	case "RHM":
	case "RHL":
	case "CHS":
	case "CHM":
	case "Outline":
	case "Banding":
	case "ShowThreshold":
	case "TitleOverlap":
	case "enableAttForms":
	case "enableThresholds":
	    return ("editorProperties" in O && O.editorProperties[E] == microstrategy.TRUE);
	case "CHL":
	    return ("editorProperties" in O && O.editorProperties[E] !== microstrategy.FALSE);
	case "HideNullsOrZeros":
	    return O.ShowAllRows === microstrategy.FALSE;
	case "HideNullZeroValues":
	    return O.HideNullZeroValues;
	case "AttForms":
	case "DrillOptions":
	    return ("editorProperties" in O) ? O.editorProperties[E] : "";
	case "isShowHeadersAvailable":
	    return (mstrGridReport.isRWD());
	case "isMergeHeadersAvailable":
	    return this.queryState("isGridFormattingEnabled");
	case "isLockHeadersAvailable":
	    return O.isFeatureAvailable("lock-grid-headers");
	case "isNonLinkedTemplate":
	    return !this.queryState("isLinkedTemplate");
	case "Shortcut":
	case "isLinkedTemplate":
	    return !V("EMBEDDED_TEMPLATE_NODE");
	case "isGridFormattingEnabled":
	    return (microstrategy.EXECUTION_SCOPE != microstrategy.REPORT_EXECUTION || O
		    .isFeatureAvailable("enable-grid-format-editor"));
	case "DataSource":
	    return O.gridStructureInfo.dataSetId;
	case "effectiveView":
	    return O.effectiveView;
	case "areGridFormatsReady":
	    return (O.getGridFormats() != null);
	case "getControlGroupByList":
	    return O.ControlGroupByList;
	case "GraphExportOverflow":
	    return O.xgovf;
	case "GraphExportOverflowSpacing":
	    return O.xgovfs;
	case "togglePivot":
	    return V("CHECK_SHOW_PIVOT_BUTTONS");
	case "toggleSort":
	    return V("CHECK_SHOW_SORT_BUTTONS");
	case "toggleGraphZones":
	    return V("CHECK_SHOW_GRAPH_ZONES");
	case "promptDetails":
	    return !!microstrategy.bone("promptDetails_PromptDetailsStyle");
	case "viewFilter":
	    return !!microstrategy.bone("vfep_pane");
	case "pageBy":
	    return !!microstrategy.bone("pbb_PageByStyle");
	case "reportFilter":
	    return !!microstrategy.bone("rfe_pane");
	case "drill":
	    var F = document
		    .getElementById("drillEditor_BeanGeneratedOutputStyle");
	    return F && F.hasChildNodes()
		    && F.firstChild.style.display != "none";
	case "comboToggleButton":
	case "toggleSubtotals":
	    return V("CHECK_SHOW_SUBTOTALS");
	case "gridMode":
	    return O.isGrid && !O.isGraph && !this.queryState("visFlashMode")
		    && !this.queryState("visAjaxMode");
	case "graphMode":
	    return !O.isGrid && O.isGraph && !this.queryState("visFlashMode")
		    && !this.queryState("visAjaxMode");
	case "gridGraphMode":
	    return O.isGrid && O.isGraph && !this.queryState("visFlashMode")
		    && !this.queryState("visAjaxMode");
	case "visFlashMode":
	    return O.isVisualization && O.visualizationMode == 50;
	case "visAjaxMode":
	    return O.isVisualization && O.visualizationMode == 51;
	case "XTabView":
	    if (this.queryState("gridMode")) {
		return "1";
	    }
	    if (this.queryState("graphMode")) {
		return "2";
	    }
	    if (this.queryState("gridGraphMode")) {
		return "3";
	    }
	    if (this.queryState("visFlashMode")) {
		return "50";
	    }
	    if (this.queryState("visAjaxMode")) {
		return "51";
	    }
	    return "1";
	case "GridSelections":
	    return {
		unit : O.gridUnitFormat,
		value : O.gridValueFormat
	    };
	case "AllGridUnitSelector":
	case "tbGridUnitSelector":
	case "GridUnitSelector":
	    var A = mstr.behaviors.featureResolver.featAvailable;
	    var R = !A("grid-graph-formatting") && A("number-formatting");
	    n = O.getGridUnitSelectorItems(R);
	    var M = [];
	    if (!R) {
		M.push({
		    dssid : mstrGridReport.ALL_UNITS,
		    n : mstrGridReport.desp("4754"),
		    cssClass : "ToolbarList UAC"
		}, {
		    dssid : mstrGridReport.ROW_UNITS,
		    n : mstrGridReport.desp("2185"),
		    cssClass : "ToolbarList URA"
		}, {
		    dssid : mstrGridReport.COL_UNITS,
		    n : mstrGridReport.desp("2184"),
		    cssClass : "ToolbarList UCA"
		});
	    }
	    M.push({
		dssid : mstrGridReport.METRIC_UNITS,
		n : mstrGridReport.desp("2460"),
		tp : parseInt(microstrategy.DSSTYPE_METRIC, 10),
		cssClass : "ToolbarList UMA"
	    });
	    L = {
		items : M.concat(n),
		value : O.gridUnitFormat,
		isFetching : !this.queryState("areGridFormatsReady")
	    };
	    if (E == "tbGridUnitSelector" && L.value == -1) {
		L.items.splice(0, 0, {
		    dssid : -1,
		    n : mstrGridReport.desp("3625")
		});
	    }
	    return L;
	case "tbGridValueSelector":
	case "AllGridUnitValueSelector":
	case "GridUnitValueSelector":
	    var o = {
		items : [ {
		    dssid : 5,
		    n : mstrGridReport.desp("2461")
		}, {
		    dssid : 1,
		    n : mstrGridReport.desp("2033")
		}, {
		    dssid : 2,
		    n : mstrGridReport.desp("2175")
		} ],
		value : O.gridValueFormat,
		isFetching : !this.queryState("areGridFormatsReady")
	    };
	    if (E == "tbGridValueSelector" && o.value == -1) {
		o.items.splice(0, 0, {
		    dssid : -1,
		    n : mstrGridReport.desp("3625")
		});
	    }
	    var g = O.getSelectedGridUnitByIndex(O.gridUnitFormat);
	    if (O.gridUnitFormat == mstrGridReport.METRIC_UNITS
		    || (g && g.dssType == microstrategy.DSSTYPE_METRIC)) {
		return o;
	    }
	    o.items = o.items.concat([ {
		dssid : 3,
		n : mstrGridReport.desp("2034")
	    }, {
		dssid : 4,
		n : mstrGridReport.desp("2035")
	    } ]);
	    return o;
	case "tbGraphUnitSelector":
	    var J = microstrategy.bone(O.id + "_graph");
	    if (J) {
		return J.commands.queryState(E);
	    }
	    return {
		items : [],
		value : ""
	    };
	case "tbUnitSelector":
	    var s = {
		items : [],
		value : ""
	    };
	    var D, I;
	    var d = this;
	    var Z = function(z) {
		var AA;
		var y = (z == "Grid");
		var AB = y ? "Graph" : "Grid";
		var AC = y ? "3478" : "3479";
		if (O["is" + z]) {
		    if (O["is" + AB]) {
			s.items = s.items.concat({
			    dssid : "-1",
			    n : mstrGridReport.desp(AC),
			    cssClass : "ToolbarListH"
			});
		    }
		    AA = d.queryState("tb" + z + "UnitSelector");
		    for ( var u in AA.items) {
			AA.items[u].dssid += "**" + z.toLowerCase();
		    }
		    s.items = s.items.concat(AA.items);
		}
		return AA;
	    };
	    I = Z("Grid");
	    if (O.isFeatureAvailable("grid-graph-formatting")) {
		D = Z("Graph");
	    }
	    O.setGraphSelected(O.graphSelected || !I);
	    s.value = O.graphSelected ? (D ? D.value += "**graph" : s.value)
		    : I.value += "**grid";
	    return s;
	case "tbValueSelector":
	    if (O.graphSelected || !O.isGrid) {
		return this.queryState("tbGraphValueSelector");
	    } else {
		return this.queryState("tbGridValueSelector");
	    }
	case "FillColor_vf":
	    return (mstr.Enum.ColorPickerFlags.NO_COLOR
		    + mstr.Enum.ColorPickerFlags.MORE_COLORS
		    + mstr.Enum.ColorPickerFlags.GRADIENT_COLORS + mstr.Enum.ColorPickerFlags.USER_COLORS);
	case "lncolor_vf":
	    return (mstr.Enum.ColorPickerFlags.MORE_COLORS + mstr.Enum.ColorPickerFlags.USER_COLORS);
	case "FillColor":
	    return T("backgroundColor", true);
	case "FontColor":
	    return T("color", true);
	case "Bold":
	    return T("fontWeight", true) == "bold";
	case "Italic":
	    return T("fontStyle", true) == "italic";
	case "Underline":
	    var e = T("textDecoration", true);
	    return (e && e.indexOf("underline") > -1);
	case "FontSize":
	    return W.encodeValue("fontSize", T("fontSize", true));
	case "FontFamily":
	    return T("fontFamily", true);
	case "TextAlign":
	    var Y = T("textAlign", true);
	    if (Y in [ 3, 4, 2 ]) {
		return {
		    3 : 2,
		    4 : 1,
		    2 : 0
		}[Y];
	    }
	    return -1;
	case "borders":
	    return T("borders", false);
	case "toggleReportBar":
	    var X = document.getElementById("report_toolbar");
	    return X && X.childNodes.length != 0;
	case "forwardPicker":
	    return O.forwardHistory;
	case "backPicker":
	    return O.backHistory;
	case "toggleHideNullsOrZeros":
	    return this.queryState("HideNullsOrZeros");
	default:
	    return mstrGridStaticCommands.prototype.queryState.call(this, E, B);
	}
    } catch (r) {
	microstrategy.errors.log(r);
    }
    return "";
};
mstrGridCommands.prototype.queryVisible = function(A) {
    var D = this.parentBone;
    switch (A) {
    case "visFlashMode":
    case "visAjaxMode":
	if (!D.visualizationsEnabled) {
	    return false;
	}
	var B = D.visualizationList;
	for ( var C = 0; C < B.length; C++) {
	    if (B[C].vm == ((A == "visFlashMode") ? 50 : 51)) {
		return true;
	    }
	}
	return false;
    case "toggleGraphZones":
	return D.isGraph;
    case "selectedVisualization":
	if (!D.visualizationsEnabled) {
	    return false;
	}
	var B = D.visualizationList;
	if (B) {
	    return B.length > 1;
	}
	return false;
    case "tbGridUnitSelector":
    case "tbGridValueSelector":
	return D.isGrid && !D.isGraph;
    case "tbGraphUnitSelector":
    case "tbGraphValueSelector":
	return !D.isGrid && D.isGraph;
    case "tbUnitSelector":
    case "tbValueSelector":
	return (D.isGrid || D.isGraph) && !D.isVisualization;
    case "drillEditor":
	return mstr.behaviors.featureResolver
		.resolveFeatSet("drill-editor;enable-drill-editor;is-not-visualization-mode;show-filter-on-selections-checks");
    case "drill":
	return mstr.behaviors.featureResolver
		.resolveFeatSet("drill-editor;enable-drill-editor;is-not-visualization-mode;!show-filter-on-selections-checks");
    default:
	if (mstrGridStaticScript && mstrGridStatic.isGraphCommand(A)) {
	    if (D.isGrid && D.isGraph) {
		var E = microstrategy.bone(D.id + "_graph");
		return E && E.commands.queryVisible(A);
	    }
	}
	return mstrGridStaticCommands.prototype.queryVisible.call(this, A);
    }
};
function mstrGridCommands(A) {
    this.parentBone = A;
    return this;
}
mstrGridInfo.prototype = {};
mstrGridInfo.prototype.dataSetId = "";
mstrGridInfo.prototype.hasNoUnits = true;
mstrGridInfo.prototype.isEmptyTemplate = true;
mstrGridInfo.prototype.hasMetrics = false;
mstrGridInfo.prototype.metricsAxis = -1;
mstrGridInfo.prototype.metricsDepth = -1;
mstrGridInfo.prototype.showAttForms = false;
mstrGridInfo.prototype.showColHeaders = true;
mstrGridInfo.prototype.showRowHeaders = true;
mstrGridInfo.prototype.metricAxis = null;
mstrGridInfo.prototype.rowAxis = null;
mstrGridInfo.prototype.colAxis = null;
mstrGridInfo.prototype.pageAxis = null;
mstrGridInfo.prototype.allAxes = [];
mstrGridInfo.prototype.overlapGridTitles = false;
mstrGridInfo.prototype.emptyCase = false;
mstrGridInfo.prototype.toString = function() {
    return "";
};
mstrGridInfo.prototype.enableColWidths = function() {
    try {
	return (this.rowAxis.size() > 0 || this.colAxis.size() > 0 || this.metricsAxis == microstrategy.GRIDCELL_AXIS_PAGE_BY);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrGridInfo.prototype.useExtraColTag = function() {
    try {
	return (this.rowAxis.size() == 0 && this.colAxis.size() == 0 && this.metricsAxis == microstrategy.GRIDCELL_AXIS_PAGE_BY);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrGridInfo.prototype.hasNonMetricUnitsOnAxis = function(B) {
    try {
	var C = false;
	if (!this.isEmptyTemplate && B != null) {
	    var A = this.getAxisFromType(B);
	    if (A != null) {
		var D = A.size();
		if (D > 0 && (D > 1 || this.metricsAxis != B)) {
		    C = true;
		}
	    }
	}
	return C;
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrGridInfo.prototype.getAttributes = function() {
    try {
	var A = [];
	for ( var E = 0, D = this.allAxes.length; E < D; E++) {
	    var H = this.allAxes[E];
	    for ( var B = 0, F = H.size(); B < F; B++) {
		var C = H.units[B];
		if (C != null && C.dssType == microstrategy.DSSTYPE_ATTRIBUTE) {
		    A.push(H.units[B]);
		}
	    }
	}
	return A;
    } catch (G) {
	microstrategy.errors.log(G);
	return null;
    }
};
mstrGridInfo.prototype.getFixedColumns = function() {
    try {
	if (!this.showRowHeaders) {
	    return 0;
	}
	var A = (this.parentBone.isOutlineMode) ? this.rowAxis.size()
		: this.rowAxis.totalSize();
	if (this.showColHeaders && (this.colAxis.size() > 0)
		&& !this.overlapGridTitles) {
	    A++;
	}
	return A;
    } catch (B) {
	microstrategy.errors.log(B);
	return -1;
    }
};
mstrGridInfo.prototype.getFixedRows = function() {
    try {
	var A = 0;
	if (this.showColHeaders) {
	    A = this.colAxis.totalSize();
	    A = (A == 0) ? 1 : A;
	} else {
	    A = util_getFixedRows(this.parentBone.gridTable);
	}
	return A;
    } catch (B) {
	microstrategy.errors.log(B);
	return -1;
    }
};
mstrGridInfo.prototype.getAxisFromType = function(B) {
    var A = null;
    switch (B) {
    case microstrategy.GRIDCELL_AXIS_ROWS:
	A = 1;
	break;
    case microstrategy.GRIDCELL_AXIS_COLUMNS:
	A = 2;
	break;
    case microstrategy.GRIDCELL_AXIS_PAGE_BY:
	A = 3;
	break;
    }
    return A && this.allAxes[A];
};
mstrGridInfo.prototype.unitTypeExistsOnAxis = function(I, D) {
    try {
	var E = false;
	if (!this.isEmptyTemplate && I != null) {
	    var H = this.getAxisFromType(I);
	    if (H != null) {
		for ( var F = 0, A = H.units.length; F < A; F++) {
		    if (H.units[F] != null) {
			for ( var C = 0, G = D.length; C < G; C++) {
			    if (H.units[F].dssType == D[C]) {
				return true;
			    }
			}
		    }
		}
	    }
	}
	return E;
    } catch (B) {
	microstrategy.errors.log(B);
	return null;
    }
};
mstrGridInfo.prototype.findUnit = function(E) {
    try {
	var A = null;
	for ( var C = 0, B = this.allAxes.length; C < B; C++) {
	    A = this.allAxes[C].findUnit(E);
	    if (A != null) {
		break;
	    }
	}
	return A;
    } catch (D) {
	microstrategy.errors.log(D);
	return null;
    }
};
mstrGridInfo.prototype.findUnitInfo = function(B) {
    try {
	var A = null;
	if (B.dssType != microstrategy.DSSTYPE_ATTRIBUTE_FORM) {
	    A = this.findUnit(B.dssId);
	} else {
	    var D = this.findUnit(B.parentDssId);
	    if (D) {
		if (D.hasAttForms()) {
		    A = D.attForms.findUnit(B.dssId);
		} else {
		    if (D.attFormId == B.dssId) {
			A = D;
		    }
		}
	    }
	}
	return A;
    } catch (C) {
	microstrategy.errors.log(C);
	return null;
    }
};
mstrGridInfo.prototype.getUnitIndex = function(C, F, E) {
    try {
	var A = 0;
	var B = function(G) {
	    if (G > 1) {
		A += G - 1;
	    }
	};
	if (C == microstrategy.GRIDCELL_AXIS_ROWS) {
	    A += this.rowAxis.unitLength(F);
	    B(E);
	    if (this.metricsAxis == microstrategy.GRIDCELL_AXIS_ROWS
		    && this.metricsDepth <= F) {
		A += this.metricAxis.size() - 1;
	    }
	    return A;
	}
	if (C == microstrategy.GRIDCELL_AXIS_COLUMNS) {
	    A += this.rowAxis.headerSize();
	    if (this.metricsAxis == microstrategy.GRIDCELL_AXIS_ROWS) {
		A--;
		A += this.metricAxis.size();
	    }
	    A += this.colAxis.unitLength(F);
	    B(E);
	    if (this.metricsAxis == microstrategy.GRIDCELL_AXIS_COLUMNS
		    && this.metricsDepth <= F) {
		A += this.metricAxis.size() - 1;
	    }
	    return A;
	}
	if (C == microstrategy.GRIDCELL_AXIS_METRICS) {
	    if (this.metricsAxis == microstrategy.GRIDCELL_AXIS_ROWS) {
		A += this.metricsDepth;
		B(F);
		return A;
	    }
	    if (this.metricsAxis == microstrategy.GRIDCELL_AXIS_COLUMNS) {
		A += this.rowAxis.size();
		A += this.metricsDepth;
		B(F);
		return A;
	    }
	}
    } catch (D) {
	microstrategy.errors.log(D);
    }
    return null;
};
mstrGridInfo.prototype.getMaxAxisPosition = function(A) {
    try {
	if ((A == microstrategy.GRIDCELL_AXIS_METRICS)
		&& mstrGridReport.isViewMode()) {
	    return this.parentBone.metricsCount + 1;
	}
	return (A == microstrategy.GRIDCELL_AXIS_METRICS) ? this.allAxes[0]
		.size() + 1 : this.allAxes[A].size() + 1;
    } catch (B) {
	microstrategy.errors.log(B);
	return null;
    }
};
mstrGridInfo.prototype.getGridUnitInfo = function(M, K) {
    try {
	var D = microstrategy.GRIDCELL_AXIS_METRICS;
	var L = function(O) {
	    return M.getAttribute(microstrategy["HTMLATTR_" + O]);
	};
	var I = L("SUBOBJTYPE");
	var G = L("DSS_TYPE");
	if (!mstrGridReport
		.isMetric(
			G,
			(I == microstrategy.SUBOBJTYPE_METRIC && G == microstrategy.DSSTYPE_PROMPT))) {
	    D = parseInt(L("GRIDCELL_AXIS"));
	}
	var B = null;
	if (K == undefined || K) {
	    B = Math.max(parseInt(this.getAttrFormPos(M)), 1);
	}
	var C = L("DSS_ID");
	var A = C && this.findUnit(C);
	var H = null;
	if (mstr.utils.String.isEmpty(A)) {
	    if (M.getAttribute("MH")
		    && M.getAttribute("MH").toLowerCase() == "true") {
		var N = this.allAxes[D].units;
		for ( var F = 0; F < N.length; F++) {
		    if (N[F].isMetricTemplateUnit) {
			return N[F];
		    }
		}
	    } else {
		H = L("GRIDCELL_DEPTH");
	    }
	} else {
	    H = A.depth;
	}
	var J = this.getUnit(D, parseInt(H), B);
	if (!J) {
	    J = A;
	}
	return J;
    } catch (E) {
	microstrategy.errors.log(E);
	return null;
    }
};
mstrGridInfo.prototype.getGridUnitInfoBySrc = function(F) {
    var C = microstrategy.GRIDCELL_AXIS_METRICS;
    var G = function(H) {
	return F.getAttribute(microstrategy["HTMLATTR_" + H]);
    };
    var A = G("SUBOBJTYPE");
    var B = G("DSS_TYPE");
    if (!mstrGridReport
	    .isMetric(
		    B,
		    (A == microstrategy.SUBOBJTYPE_METRIC && B == microstrategy.DSSTYPE_PROMPT))) {
	C = parseInt(G("GRIDCELL_AXIS"));
    }
    subDepth = Math.max(parseInt(this.getAttrFormPos(F)), 1);
    var E = this.getUnitByLocation(C, parseInt(G("GRIDCELL_DEPTH")), subDepth);
    if (!E) {
	var D = G("DSS_ID");
	E = D && this.findUnit(D);
    }
    return E;
};
mstrGridInfo.prototype.getUnitByLocation = function(B, E, A) {
    try {
	var D = null;
	var G = (B == microstrategy.GRIDCELL_AXIS_METRICS) ? 0 : B;
	var H = this.allAxes[G];
	if (H != null) {
	    var I = null;
	    for ( var F in H.units) {
		var J = H.units[F];
		if (J.depth == E) {
		    I = J;
		    J.index = F;
		    break;
		}
	    }
	    D = (I && I.hasAttForms() && A != null && A > 0 && I.attForms
		    .size() >= A) ? I.attForms.units[A - 1] : I;
	}
	return D;
    } catch (C) {
	microstrategy.errors.log(C);
	return null;
    }
};
mstrGridInfo.prototype.getUnit = function(D, H, G) {
    try {
	var A = null;
	var B = (D == microstrategy.GRIDCELL_AXIS_METRICS) ? 0 : D;
	var C = this.allAxes[B];
	if (C != null && C.size() >= H) {
	    var F = C.units[H - 1];
	    A = (F && F.hasAttForms() && G != null && G > 0 && F.attForms
		    .size() >= G) ? F.attForms.units[G - 1] : F;
	}
	return A;
    } catch (E) {
	microstrategy.errors.log(E);
	return null;
    }
};
mstrGridInfo.prototype.getGridUnits = function() {
    try {
	var A = [];
	var G = new Array(this.rowAxis, this.colAxis, this.metricAxis);
	for ( var D = 0, C = G.length; D < C; D++) {
	    for ( var B = 0, E = G[D].size(); B < E; B++) {
		A.push(G[D].units[B]);
	    }
	}
	return A;
    } catch (F) {
	microstrategy.errors.log(F);
	return [];
    }
};
mstrGridInfo.prototype.getAxisObj = function(B) {
    try {
	var A = (B.subtype == microstrategy.SUBOBJTYPE_METRIC && B.dssType == microstrategy.DSSTYPE_PROMPT);
	return ((this.hasMetrics || (B.axis == this.metricAxis.axisType)) && (mstrGridReport
		.isMetric(B.dssType, A))) ? this.metricAxis
		: this.allAxes[B.axis];
    } catch (C) {
	microstrategy.errors.log(C);
	return null;
    }
};
mstrGridInfo.prototype.add = function(I, G) {
    try {
	var K = this.getAxisObj(I);
	if (K) {
	    switch (I.subtype) {
	    case microstrategy.SUBOBJTYPE_ATTRIBUTE:
		if (I.isMetricTemplateUnit
			&& I.axis == microstrategy.GRIDCELL_AXIS_PAGE_BY) {
		    var H = this.buildPageByMetrics(I.src);
		    for ( var F = 0, B = H.length; F < B; F++) {
			this.metricAxis.add(H[F]);
		    }
		}
		K.add(I);
		break;
	    case microstrategy.SUBOBJTYPE_METRIC:
		if (!this.hasMetrics) {
		    var J = this.parentBone.metricsPosInGrid
			    && this.parentBone.metricsPosInGrid.split("A");
		    if (!J || J.length < 2) {
			J = I.src.getAttribute("upt")
				&& I.src.getAttribute("upt").split(",");
		    }
		    if (J && J.length >= 2) {
			var L = this.buildGridMetricsHeaderInfo(parseInt(J[0]),
				parseInt(J[1]));
			this.allAxes[parseInt(J[0])].add(L);
		    } else {
			var L = this
				.buildGridMetricsHeaderInfo(I.axis, I.depth);
			K.add(L);
		    }
		    if (G) {
			I.depth = 1;
		    }
		}
		I.axis = microstrategy.GRIDCELL_AXIS_METRICS;
		this.metricAxis.add(I);
		break;
	    case microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM:
		L = K.findUnit(I.parentDssId);
		if (L == null) {
		    L = this.buildGridAttUnitInfoFromForm(I);
		    K.add(L);
		} else {
		    if (L.attForms.size() == 0) {
			var A = this.buildGridAttFormInfoFromUnit(L);
			L.attForms.add(A);
		    }
		}
		var E = L.attForms.findUnit(I.dssId);
		if (E == null) {
		    L.attForms.add(I);
		}
		if (!L.attFormList) {
		    L.attFormList = new mstrAttFormListObj(null);
		}
		L.attFormList.addForm(I.dssId);
		for ( var D = 0, B = L.attForms.units.length; D < B; D++) {
		    L.attForms.units[D].attFormList = L.attFormList;
		}
		this.dataSetId = (I.dssSetId) ? I.dssSetId : this.dataSetId;
		break;
	    }
	    if (this.parentBone.useClientSideManipulations) {
		microstrategy.eventManager
			.notifyOrphanBones("ongriddatasourcechange");
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridInfo.prototype.pivot = function(A, F) {
    try {
	var E = this.getAxisObj(A);
	var B = this.getAxisObj(F);
	switch (A.subtype) {
	case microstrategy.SUBOBJTYPE_ATTRIBUTE:
	case microstrategy.SUBOBJTYPE_METRIC:
	    E.remove(A.depth);
	    B.add(F);
	    break;
	case microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM:
	    var D = E.findUnit(A.parentDssId);
	    if (A.axis != F.axis || A.depth != F.depth) {
		D = E.remove(A.depth);
		E.setAxis(D, F.axis);
		E.setDepth(D, F.depth);
		B.add(D);
	    } else {
		D.attForms.remove(A.subDepth);
		D.attForms.add(F);
	    }
	    break;
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridInfo.prototype.pivotUnit = function(I, H, J, F, D, G) {
    try {
	var C = this.getUnit(I, H, J);
	var A = this.allAxes[I];
	var B = this.allAxes[F];
	A.remove(H);
	C.axis = F;
	C.depth = D;
	C.subDepth = G;
	B.add(C);
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrGridInfo.prototype.remove = function(H) {
    try {
	var J = this.getAxisObj(H);
	switch (H.subtype) {
	case microstrategy.SUBOBJTYPE_ATTRIBUTE:
	    J.remove(H.depth);
	    if (H.isMetricTemplateUnit) {
		this.allAxes[0] = this.metricAxis = new mstrGridAxisObj(this,
			microstrategy.GRIDCELL_AXIS_METRICS);
	    }
	    break;
	case microstrategy.SUBOBJTYPE_METRIC:
	    J.remove(H.depth);
	    if (this.metricAxis.size() == 0) {
		var I = this.metricsAxis == microstrategy.GRIDCELL_AXIS_ROWS ? "rowAxis"
			: "colAxis";
		if (this[I].size() >= this.metricsDepth) {
		    this[I].remove(this.metricsDepth);
		}
	    }
	    break;
	case microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM:
	    var C = J.findUnit(H.parentDssId);
	    var K = C.attForms;
	    K.remove(H.subDepth);
	    var A = K.size();
	    if (A == 0) {
		J.remove(C.depth);
	    } else {
		if (A == 1) {
		    var G = C.depth;
		    var F = this.buildGridAttUnitInfoFromForm(K.units[0]);
		    J.remove(C.depth);
		    J.add(F);
		    C = F;
		} else {
		    C.attFormName = K.units[0].alias;
		    C.attFormId = K.units[0].dssId;
		}
	    }
	    C.attFormList.removeForm(H.dssId);
	    for ( var E = 0, B = K.units.length; E < B; E++) {
		K.units[E].attFormList = C.attFormList;
	    }
	    break;
	}
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrGridInfo.prototype.swapAxes = function() {
    try {
	if (!this.isEmptyTemplate) {
	    var H = microstrategy.GRIDCELL_AXIS_ROWS;
	    var L = microstrategy.GRIDCELL_AXIS_COLUMNS;
	    var C = (!this.hasNonMetricUnitsOnAxis(H) || !this
		    .hasNonMetricUnitsOnAxis(L));
	    var E = (this.metricsAxis == H || this.metricsAxis == L);
	    if (E && !C) {
		var F = this.metricsDepth;
		var B = this.getUnit(this.metricsAxis, this.metricsDepth, 1);
		if (F == this.getAxisObj(B).size()) {
		    F = -1;
		}
		var I = this.metricAxis.clear();
		this.remove(B);
	    }
	    this.rowAxis.setEntireAxis(L);
	    var K = this.rowAxis.clear();
	    this.colAxis.setEntireAxis(H);
	    var M = this.colAxis.clear();
	    var G = this;
	    var J = function(N) {
		for ( var P = 0, O = N.length; P < O; P++) {
		    G.add(N[P]);
		}
	    };
	    J(K);
	    J(M);
	    if (E && !C) {
		var A = this.getAxisObj(B);
		if (F == -1 || F > A.size()) {
		    B.depth = A.size() + 1;
		}
		this.add(B);
		for (i = 0, cnt = I.length; i < cnt; i++) {
		    this.add(I[i]);
		}
	    }
	}
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrGridInfo.prototype.init = function(B) {
    try {
	var E = this;
	var C = function(F) {
	    return new mstrGridAxisObj(E, microstrategy["GRIDCELL_AXIS_" + F]);
	};
	this.rowAxis = C("ROWS");
	this.colAxis = C("COLUMNS");
	this.metricAxis = C("METRICS");
	this.pageAxis = C("PAGE_BY");
	this.allAxes = new Array(this.metricAxis, this.rowAxis, this.colAxis,
		this.pageAxis);
	this.emptyCase = (B.getAttribute("ept") == "-1");
	var A = this.parentBone;
	if (A.rowAxis || A.colAxis || A.pagebyAxis || A.metricsAxis) {
	    this.initFromProp();
	} else {
	    this.initFromHTML(B);
	}
	this.initSharedCellProperties();
	this.isEmptyTemplate = (this.rowAxis.size() == 0 && this.colAxis.size() == 0);
	this.hasNoUnits = (this.isEmptyTemplate && this.pageAxis.size() == 0);
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrGridInfo.prototype.initFromProp = function() {
    try {
	var H = this.parentBone;
	var G = new Array(H.rowAxis, H.colAxis, H.pagebyAxis, H.metricsAxis);
	for ( var E = 0, A = G.length; E < A; E++) {
	    var B = G[E];
	    if (B != null) {
		for ( var D = 0, F = B.length; D < F; D++) {
		    var I = new mstrGridUnitInfo();
		    I.populate(B[D], this);
		    this.add(I);
		}
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridInfo.prototype.initFromHTML = function(F) {
    try {
	var H = F.getElementsByTagName("table")[0];
	var E = (H && H.getAttribute("id") === (this.parentBone.id + "_gdz"));
	if (E) {
	    this.initFromGraphHtml(F);
	} else {
	    this.initFromGridHtml(F);
	}
	if (mstrGridReport.isReport()) {
	    var D = document.getElementById("pbb_PageByStyle");
	    if (!D) {
		return;
	    }
	    var A = D.getElementsByTagName("span");
	    for ( var C = 0, B = A.length; C < B; C++) {
		if (A[C].getAttribute(microstrategy.HTMLATTR_OBJTYPE) != microstrategy.OBJTYPE_PAGE_BY_ELEM) {
		    continue;
		}
		this.add(this.buildGridUnitInfo(A[C]));
	    }
	}
    } catch (G) {
	microstrategy.errors.log(G);
    }
};
mstrGridInfo.prototype.initFromGraphHtml = function(D) {
    try {
	var A = D.getElementsByTagName("span");
	for ( var C = 0, B = A.length; C < B; C++) {
	    var F = A[C].getAttribute(microstrategy.HTMLATTR_GRIDCELL_AXIS);
	    if (!F) {
		continue;
	    }
	    if (A[C].getAttribute(microstrategy.HTMLATTR_SUBOBJTYPE) == microstrategy.OBJTYPE_METRIC) {
		this.hasMetrics = true;
		this.metricsAxis = F;
	    }
	    this.add(this.buildGridUnitInfo(A[C]));
	}
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrGridInfo.prototype.initFromGridHtml = function(B) {
    try {
	var I = B.getElementsByTagName("TBODY")[0];
	if (!I) {
	    return;
	}
	if (mstrGridReport.isReport()) {
	    var L = this;
	    I.onmouseover = function(Q) {
		return L.parentBone.onmouseover(Q);
	    };
	    I.onmouseout = function(Q) {
		return L.parentBone.onmouseout(Q);
	    };
	}
	var J = 0;
	outer: for ( var H = 0, C = I.rows.length; H < C; H++) {
	    var P = I.rows[H];
	    if (P.getAttribute("o") != null && !this.parentBone.metricsOnRows) {
		break;
	    }
	    for ( var F = 0, G = P.cells.length; F < G; F++) {
		var N = P.cells[F];
		if (N.nodeType == 1) {
		    var A = N
			    .getAttribute(microstrategy.HTMLATTR_GRIDCELL_AXIS);
		    if (A != null
			    && (N.getAttribute(microstrategy.HTMLATTR_DSS_ID) != null || N
				    .getAttribute("mh") == "TRUE")) {
			var K = this.buildGridUnitInfo(N);
			var O = (K.subtype == microstrategy.OBJTYPE_METRIC);
			var M = (O) ? M = this.findUnit(K.dssId) : null;
			if (A == microstrategy.GRIDCELL_AXIS_ROWS && O && M) {
			    if (J == this.parentBone.metricsCount) {
				break outer;
			    }
			    break;
			}
			if (!M) {
			    if (O && A == microstrategy.GRIDCELL_AXIS_ROWS) {
				J++;
			    }
			    this.add(K);
			    if (this.colAxis.units && this.colAxis.units[0]
				    && this.colAxis.units[0].src == null && O) {
				this.colAxis.units[0].src = K.src;
				this.colAxis.units[0].isVisible = true;
				this.colAxis.units[0].needBuildColMetricAreas = true;
			    }
			}
		    }
		}
	    }
	}
	if (this.parentBone.hiddenUnitInfo) {
	    var D = new mstrGridUnitInfo();
	    D.populate(this.parentBone.hiddenUnitInfo, this);
	    this.add(D);
	}
    } catch (E) {
	microstrategy.errors.log(E);
    }
};
mstrGridInfo.prototype.syncUnitSources = function(H, C, B) {
    try {
	for ( var E = 0, D = this.allAxes.length; E < D; E++) {
	    for ( var A = 0, F = this.allAxes[E].size(); A < F; A++) {
		this.allAxes[E].units[A].populateUnitSrc(H, C, B);
	    }
	}
    } catch (G) {
	microstrategy.errors.log(G);
    }
};
mstrGridInfo.prototype.getAttValue = function(B, A, E) {
    try {
	var D = B && B.getAttribute(A);
	return (D ? D : E);
    } catch (C) {
	microstrategy.errors.log(C);
	return null;
    }
};
mstrGridInfo.prototype.getAttrFormPos = function(A) {
    return this.getAttValue(A, microstrategy.HTMLATTR_FORM_POS, "1");
};
mstrGridInfo.prototype.getCellType = function(A) {
    return this.getAttValue(A, microstrategy.HTMLATTR_GRID_CELL_TYPE,
	    microstrategy.GRIDCELLTYPE_UNIT_VALUE);
};
mstrGridInfo.prototype.buildGridUnitInfo = function(A, C, V, G) {
    try {
	var H = new mstrGridUnitInfo();
	if (A != null) {
	    if (A.nodeType == 1) {
		var L = function(W) {
		    return A.getAttribute(microstrategy["HTMLATTR_" + W]);
		};
		H.subtype = L("SUBOBJTYPE");
		H.dssSubtype = L("DSS_SUBTYPE");
		var F = L("DESCRIPTION");
		H.alias = (F != null) ? trim(F) : A.firstChild
			&& A.firstChild.data;
		if (!H.alias) {
		    H.alias = "";
		}
		var T = L("DSS_DESCRIPTION");
		if (T != null) {
		    H.description = T;
		}
		H.src = A;
		var S = microstrategy.SUBOBJTYPE_ATTRIBUTE;
		var M = microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM;
		var R = microstrategy.SUBOBJTYPE_METRIC;
		var N = "|" + S + "|" + M + "|" + R + "|";
		function B(a, W) {
		    for ( var Y = 0, X = a.length; Y < X; Y++) {
			var Z = new mstrGridUnitInfo();
			Z.axis = W.axis;
			Z.depth = W.depth;
			Z.subDepth = Y + 1;
			Z.subtype = M;
			Z.dssSetId = W.dssSetId;
			Z.dssId = Z.attFormId = a[Y][mstrAttFormListObj.FORM_ID];
			Z.dssType = microstrategy.DSSTYPE_ATTRIBUTE_FORM;
			Z.alias = Z.attFormName = a[Y][mstrAttFormListObj.FORM_NAME];
			Z.parentDssId = W.dssId;
			Z.parentAlias = W.alias;
			Z.attFormList = W.attFormList;
			Z.isVisible = true;
			Z.src = W.src;
			W.attForms.add(Z);
		    }
		}
		if (N.indexOf("|" + H.subtype + "|") > -1) {
		    H.axis = (C != null) ? parseInt(C)
			    : (H.subtype == microstrategy.OBJTYPE_METRIC) ? microstrategy.GRIDCELL_AXIS_METRICS
				    : parseInt(L("GRIDCELL_AXIS"));
		    H.depth = (V != null) ? parseInt(V)
			    : parseInt(L("GRIDCELL_DEPTH"));
		    H.subDepth = (G != null) ? parseInt(G) : parseInt(this
			    .getAttrFormPos(A));
		    H.isMetricTemplateUnit = (A.getAttribute("MH") && A
			    .getAttribute("MH").toLowerCase() == "true");
		    H.dssSetId = this.dataSetId;
		    H.isLocked = (L("IS_LOCKED") == microstrategy.TRUE);
		    H.canAddThresholds = (L("CAN_ADD_THRESHOLDS") == microstrategy.TRUE);
		    if (H.subtype == M) {
			H.dssId = H.attFormId = L("FORM_ID");
			H.dssType = microstrategy.DSSTYPE_ATTRIBUTE_FORM;
			H.parentDssId = L("DSS_ID");
			var O = H.alias;
			H.alias = H.attFormName = L("FORM_NAME");
			if (O.indexOf(H.alias) > -1) {
			    H.parentAlias = trim(O
				    .substr(0, O.indexOf(H.alias)));
			}
			H.attFormList = new mstrAttFormListObj(L("FORM_LIST"));
		    } else {
			if (!H.isMetricTemplateUnit) {
			    H.dssId = L("DSS_ID");
			    H.dssType = L("DSS_TYPE");
			}
			if (H.subtype == S && !H.isMetricTemplateUnit) {
			    H.attForms = new mstrGridAxisObj(null, 0);
			    var U = L("FORM_ID");
			    var Q = L("FORM_NAME");
			    if (U != null && Q != null) {
				H.attFormId = U;
				H.attFormName = Q;
			    }
			    H.attFormList = new mstrAttFormListObj(
				    L("FORM_LIST"));
			    if (!this.showAttForms
				    || this.parentBone.isOutlineMode
				    || this.parentBone.isStaticOutlineMode) {
				var P = H.attFormList.getFormsOnView();
				if (P && P.length > 1) {
				    B(P, H);
				}
			    }
			}
		    }
		} else {
		    H.dssId = L("DSS_ID");
		    H.dssType = L("DSS_TYPE");
		    H.dssSetId = (A.getAttribute("id")) ? A.getAttribute("id")
			    .slice(0, 32) : "";
		    H.axis = parseInt(C);
		    H.depth = parseInt(V);
		    H.isMetricTemplateUnit = false;
		    if (H.dssType == microstrategy.DSSTYPE_ATTRIBUTE_FORM) {
			H.attFormName = L("DESCRIPTION");
			H.attFormId = L("DSS_ID");
			H.attFormList = new mstrAttFormListObj(L("FORM_LIST"));
			var K = findTargetTag(A, "UL");
			if (K) {
			    var J = findTargetTag(K, "LI");
			    if (J && J.getElementsByTagName("span")[0]) {
				var I = J.getElementsByTagName("span")[0];
				H.parentDssId = I
					.getAttribute(microstrategy.HTMLATTR_DSS_ID);
				H.parentAlias = I
					.getAttribute(microstrategy.HTMLATTR_DESCRIPTION);
			    }
			}
		    } else {
			if (H.dssType == microstrategy.DSSTYPE_ATTRIBUTE) {
			    H.attForms = new mstrGridAxisObj(null, 0);
			    H.attFormList = new mstrAttFormListObj(
				    L("FORM_LIST"));
			    H.attFormList.addDefaultForms();
			    var D = H.attFormList.getDefaultForms();
			    if (D.length <= 1) {
				for (i = 0, cnt = D.length; i < cnt; i++) {
				    H.attFormName = D[i][mstrAttFormListObj.FORM_NAME];
				    H.attFormId = D[i][mstrAttFormListObj.FORM_ID];
				}
			    } else {
				B(D, H);
			    }
			}
		    }
		    H.subDepth = 1;
		    if (mstrGridReport.isMetric(H.dssType)) {
			H.subtype = R;
		    } else {
			if (H.dssType == microstrategy.DSSTYPE_ATTRIBUTE_FORM) {
			    H.subtype = M;
			    H.subDepth = parseInt(G);
			} else {
			    H.subtype = S;
			}
		    }
		}
	    }
	} else {
	    H.subtype = S;
	    H.axis = C;
	    H.depth = V;
	    H.subDepth = 1;
	    H.dssSetId = this.dataSetId;
	}
	if (H.subDepth == null || isNaN(H.subDepth)) {
	    H.subDepth = 1;
	}
	if (A && A.getAttribute("olap") == "1") {
	    H.olap = true;
	}
	return H;
    } catch (E) {
	microstrategy.errors.log(E);
	return null;
    }
};
mstrGridInfo.prototype.buildFormSrcFromCM = function(H, K, C) {
    try {
	var I = H.src;
	var A = I.getAttribute(microstrategy.HTMLATTR_DSS_ID);
	var G = I.getAttribute(microstrategy.HTMLATTR_FORM_LIST);
	var L = new mstrAttFormListObj(G);
	var B = (L != null && L.getFormsOnView() != null) ? L.getFormsOnView().length + 1
		: "1";
	var D = document.createElement("td");
	var J = function(N, M) {
	    D.setAttribute(microstrategy["HTMLATTR_" + N], M);
	};
	J("IS_LOCKED",
		((H.isLocked) ? microstrategy.TRUE : microstrategy.FALSE));
	J("SUBOBJTYPE", microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM);
	J("FORM_ID", C);
	J("DSS_ID", A);
	J("FORM_NAME", K);
	J("FORM_POS", B);
	J("FORM_LIST", G);
	var F;
	if (H.parentAlias != null && H.parentAlias.length > 0) {
	    F = H.parentAlias;
	} else {
	    if (H.alias != null && H.alias.length > 0) {
		F = H.alias;
	    }
	}
	F += " " + K;
	D.setAttribute(microstrategy.HTMLATTR_DESCRIPTION, F);
	return D;
    } catch (E) {
	microstrategy.errors.log(E);
	return null;
    }
};
mstrGridInfo.prototype.buildGridAttUnitInfoFromForm = function(C) {
    try {
	var A = this.buildGridUnitInfo(C.src, C.axis, C.depth, 1);
	A.subtype = microstrategy.SUBOBJTYPE_ATTRIBUTE;
	A.alias = C.parentAlias;
	A.attForms = new mstrGridAxisObj(null, 0);
	A.attForms.add(C);
	A.parentDssId = "";
	A.parentAlias = "";
	A.attFormName = C.alias;
	A.attFormId = C.dssId;
	A.attFormList = C.attFormList;
	A.dssId = C.parentDssId;
	A.dssType = microstrategy.DSSTYPE_ATTRIBUTE;
	A.isMetricTemplateUnit = false;
	A.dssSetId = C.dssSetId;
	A.isLocked = C.isLocked;
	return A;
    } catch (B) {
	microstrategy.errors.log(B);
	return null;
    }
};
mstrGridInfo.prototype.buildGridAttFormInfoFromUnit = function(C) {
    try {
	var A = this.buildGridUnitInfo(C.src, C.axis, C.depth, 1);
	A.subtype = microstrategy.SUBOBJTYPE_ATTRIBUTE_FORM;
	A.alias = C.attFormName;
	A.attForms = null;
	A.parentDssId = C.dssId;
	A.parentAlias = C.alias;
	A.attFormName = C.attFormName;
	A.attFormId = C.attFormId;
	A.attFormList = C.attFormList;
	A.dssId = C.attFormId;
	A.dssType = microstrategy.DSSTYPE_ATTRIBUTE_FORM;
	A.isMetricTemplateUnit = false;
	A.dssSetId = C.dssSetId;
	A.isLocked = C.isLocked;
	return A;
    } catch (B) {
	microstrategy.errors.log(B);
	return null;
    }
};
mstrGridInfo.prototype.buildGridMetricsHeaderInfo = function(B, D) {
    try {
	var A = this.buildGridUnitInfo(null, B, D, 1);
	A.subtype = microstrategy.SUBOBJTYPE_ATTRIBUTE;
	A.alias = mstrGridReport.desp("1158");
	A.attForms = null;
	A.parentDssId = "";
	A.parentAlias = "";
	A.attFormName = "";
	A.attFormId = "";
	A.attFormList = "";
	A.dssId = "";
	A.dssType = "";
	A.isMetricTemplateUnit = true;
	A.isVisible = false;
	A.dssSetId = this.dataSetId;
	return A;
    } catch (C) {
	microstrategy.errors.log(C);
	return null;
    }
};
mstrGridInfo.prototype.buildPageByMetrics = function(A) {
    try {
	var G = [];
	if (A) {
	    var H = A.getAttribute("mid");
	    if (H) {
		var I = H.split("~");
		for ( var E = 0, C = I.length; E < C; E++) {
		    var B = this.buildGridUnitInfo(null,
			    microstrategy.GRIDCELL_AXIS_METRICS, E + 1, 1);
		    var F = I[E].split("|");
		    B.subtype = microstrategy.SUBOBJTYPE_METRIC;
		    B.dssType = microstrategy.DSSTYPE_METRIC;
		    B.dssId = F[0];
		    B.alias = F[1];
		    B.dssSetId = this.dataSetId;
		    B.src = A;
		    G.push(B);
		}
	    }
	}
	return G;
    } catch (D) {
	microstrategy.errors.log(D);
	return null;
    }
};
mstrGridInfo.prototype.axisUnitChange = function() {
    try {
	this.isEmptyTemplate = (this.rowAxis.size() == 0 && this.colAxis.size() == 0);
	this.hasNoUnits = (this.isEmptyTemplate && this.pageAxis.size() == 0);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrGridInfo.prototype.hasEmptyAxis = function() {
    try {
	return (this.rowAxis.size() == 0 || this.colAxis.size() == 0 || this.metricAxis
		.size() == 0);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrGridInfo.prototype.initSharedCellProperties = function() {
    var C = this.parentBone && this.parentBone.hdrMvMap;
    if (C) {
	this.valueCellProps = {};
	for ( var A in C) {
	    this.valueCellProps[A] = {};
	    var E = C[A];
	    for ( var G in E) {
		var D = new mstrGridCellProps(this, A, parseInt(G) + 1);
		for ( var H in E[G]) {
		    if (E[G][H]) {
			D[H] = E[G][H];
		    }
		}
		if (!D.p) {
		    D.p = D.depth;
		    if (A === "0" && this.parentBone.currentPageX > 0) {
			var B = this.allAxes[0];
			for ( var F in B.units) {
			    if (B.units[F].depth == D.depth) {
				D.p = parseInt(F) + 1;
				break;
			    }
			}
		    }
		}
		if (!D.tup) {
		    D.tup = D.depth;
		}
		this.valueCellProps[A][G] = D;
	    }
	}
    }
};
mstrGridInfo.prototype.getGridCellProps = function getGridCellProps(A) {
    if (!A) {
	return;
    }
    var B;
    if (typeof A == "string") {
	B = A;
    } else {
	B = A.getAttribute(microstrategy.HTMLATTR_GRIDCELL_ID);
    }
    var C = B && B.split("A");
    if (C && C.length == 2 && !isNaN(C[0]) && !isNaN(C[1])
	    && this.valueCellProps) {
	return this.valueCellProps[C[0]][parseInt(C[1]) - 1];
    }
};
function mstrGridInfo(A) {
    this.parentBone = A;
    this.dataSetId = A.dSetId;
    this.showAttForms = A.showAttForms;
    this.showColHeaders = A.showColHeaders;
    this.showRowHeaders = A.showRowHeaders;
    this.overlapGridTitles = A.overlapGridTitles;
    return this;
}
mstrGridAxisObj.prototype = {};
mstrGridAxisObj.prototype.parentGridInfo = null;
mstrGridAxisObj.prototype.axisType = -2;
mstrGridAxisObj.prototype.units = null;
mstrGridAxisObj.prototype.toString = function(E) {
    try {
	if (E == null) {
	    E = "";
	}
	if (this.size() > 0) {
	    var C = E + "Axis " + this.axisType + "\n\n";
	    for ( var B = 0, A = this.size(); B < A; B++) {
		C += (this.units[B].hasAttForms()) ? this.units[B].attForms
			.toString("     ") : this.units[B].toString(E);
	    }
	    return C;
	} else {
	    return mstrGridReport.desp("2210");
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return -1;
    }
};
mstrGridAxisObj.prototype.clear = function() {
    try {
	var A = [];
	for ( var B = 0; B < this.size(); B++) {
	    if (!this.units[B].isMetricsTemplateUnit) {
		A.push(this.units[B]);
	    }
	}
	this.units = [];
	return A;
    } catch (C) {
	microstrategy.errors.log(C);
	return -1;
    }
};
mstrGridAxisObj.prototype.size = function() {
    try {
	return this.units.length;
    } catch (A) {
	microstrategy.errors.log(A);
	return -1;
    }
};
mstrGridAxisObj.prototype.unitLength = function(B) {
    try {
	return (this.parentGridInfo != null && this.parentGridInfo.showAttForms) ? this
		.axisCellLength(B)
		: B;
    } catch (A) {
	microstrategy.errors.log(A);
	return -1;
    }
};
mstrGridAxisObj.prototype.get = function(A) {
    try {
	if (A > this.size() - 1) {
	    microstrategy.errors.log("Index out of bounds exception: Axis "
		    + this.axisType + " doesn't contain an unit at the " + A
		    + " index.");
	    return null;
	}
	return this.units[A];
    } catch (B) {
	microstrategy.errors.log(B);
	return null;
    }
};
mstrGridAxisObj.prototype.axisCellLength = function(D) {
    try {
	var A = 0;
	for ( var B = 0; B < D; B++) {
	    A += (this.units[B] != null && this.units[B].hasAttForms()) ? this.units[B].attForms
		    .size()
		    : 1;
	}
	return A;
    } catch (C) {
	microstrategy.errors.log(C);
	return -1;
    }
};
mstrGridAxisObj.prototype.headerSize = function() {
    try {
	return (this.parentGridInfo != null && this.parentGridInfo.showAttForms) ? this
		.headerCellSize()
		: this.size();
    } catch (A) {
	microstrategy.errors.log(A);
	return -1;
    }
};
mstrGridAxisObj.prototype.headerCellSize = function() {
    try {
	return this.axisCellLength(this.size());
    } catch (A) {
	microstrategy.errors.log(A);
	return -1;
    }
};
mstrGridAxisObj.prototype.totalSize = function() {
    try {
	var A = 0;
	for ( var D = 0, C = this.size(); D < C; D++) {
	    var B = this.units[D];
	    A += (B != null && B.hasAttForms()) ? B.attForms.size() : 1;
	}
	return A;
    } catch (E) {
	microstrategy.errors.log(E);
	return -1;
    }
};
mstrGridAxisObj.prototype.findUnit = function(C) {
    try {
	if (C == null) {
	    C = "";
	}
	for ( var B = 0, A = this.units.length; B < A; B++) {
	    if (this.units[B].dssId == C) {
		return this.units[B];
	    }
	}
	return null;
    } catch (D) {
	microstrategy.errors.log(D);
	return null;
    }
};
mstrGridAxisObj.prototype.add = function(D) {
    try {
	var E = (this.axisType != microstrategy.GRIDCELL_AXIS_ATT_FORMS) ? D.depth
		: D.subDepth;
	if (E == -1) {
	    E = this.size() + 1;
	    if (this.axisType != microstrategy.GRIDCELL_AXIS_ATT_FORMS) {
		D.depth = E;
	    } else {
		D.subDepth = E;
	    }
	}
	if (D.dssType == microstrategy.DSSTYPE_HIERARCHY) {
	    var C = this.findUnit(D.dssId);
	    if (C) {
		C.lastHiSrc = D.src;
		return true;
	    }
	}
	if (E > this.size()) {
	    var A = this.units.push(D);
	    E = A;
	} else {
	    this.updateDepth(E, 1);
	    this.units.splice(E - 1, 0, D);
	}
	if (this.axisType > microstrategy.GRIDCELL_AXIS_ATT_FORMS) {
	    this.setDepth(this.units[E - 1], E);
	    this.setAxis(this.units[E - 1], this.axisType);
	}
	if (this.parentGridInfo != null) {
	    if (D.isMetricTemplateUnit) {
		this.updateMetricsInfo(E);
	    }
	    this.parentGridInfo.axisUnitChange();
	    this.parentGridInfo.dataSetId = D.dssSetId;
	}
	return true;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrGridAxisObj.prototype.remove = function(C) {
    try {
	this.updateDepth(C + 1, -1);
	var A = this.units.splice(C - 1, 1)[0];
	if (this.parentGridInfo != null) {
	    if (A.isMetricTemplateUnit) {
		this.updateMetricsInfo(-1);
	    }
	    this.parentGridInfo.axisUnitChange();
	}
	return A;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrGridAxisObj.prototype.updateMetricsInfo = function(C) {
    try {
	if (this.parentGridInfo != null) {
	    var D = (C != -1);
	    var A = this.parentGridInfo;
	    A.hasMetrics = D;
	    A.metricsAxis = D ? this.axisType : -1;
	    A.metricsDepth = D ? C : -1;
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridAxisObj.prototype.updateDepth = function(E, C) {
    try {
	if (this.axisType != microstrategy.GRIDCELL_AXIS_ATT_FORMS) {
	    for ( var F = E - 1, A = this.units.length; F < A; F++) {
		var H = this.units[F];
		if (H) {
		    H.depth = H.depth + C;
		    if (H.hasAttForms()) {
			for ( var D = 0, G = H.attForms.size(); D < G; D++) {
			    H.attForms.units[D].depth = H.attForms.units[D].depth
				    + C;
			}
		    }
		}
	    }
	    var I = this.parentGridInfo;
	    if (I.metricsAxis == this.axisType && I.metricsDepth >= E) {
		I.metricsDepth = I.metricsDepth + C;
	    }
	} else {
	    for (F = E - 1, A = this.units.length; F < A; F++) {
		this.units[F].subDepth = this.units[F].subDepth + C;
	    }
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridAxisObj.prototype.setAxis = function(E, A) {
    try {
	E.axis = A;
	if (E.hasAttForms()) {
	    for ( var C = 0, B = E.attForms.size(); C < B; C++) {
		E.attForms.setAxis(E.attForms.units[C], A);
	    }
	}
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrGridAxisObj.prototype.setEntireAxis = function(A) {
    try {
	for ( var C = 0, B = this.size(); C < B; C++) {
	    this.setAxis(this.units[C], A);
	}
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrGridAxisObj.prototype.setDepth = function(D, E) {
    try {
	D.depth = E;
	if (D.hasAttForms()) {
	    for ( var B = 0, A = D.attForms.size(); B < A; B++) {
		D.attForms.setDepth(D.attForms.units[B], E);
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridAxisObj.prototype.getAxisUnitInfos = function(E) {
    try {
	for ( var B = 0, A = this.units.length; B < A; B++) {
	    var D = this.units[B];
	    var F = D.getSubAxis();
	    if (this.parentGridInfo != null && this.parentGridInfo.showAttForms
		    && F != null) {
		E = F.getAxisUnitInfos(E);
	    } else {
		E.push(D);
	    }
	}
	return E;
    } catch (C) {
	microstrategy.errors.log(C);
	return E;
    }
};
mstrGridAxisObj.prototype.setUnitSource = function(D) {
    try {
	for ( var B = 0, A = this.units.length; B < A; B++) {
	    this.units[B].src = D;
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
function mstrGridAxisObj(B, A) {
    this.parentGridInfo = B;
    this.axisType = A;
    this.units = [];
    return this;
}
mstrGridUnitInfo.prototype = {};
mstrGridUnitInfo.prototype.axis = -9;
mstrGridUnitInfo.prototype.depth = 1;
mstrGridUnitInfo.prototype.subDepth = 1;
mstrGridUnitInfo.prototype.alias = "";
mstrGridUnitInfo.prototype.description = "";
mstrGridUnitInfo.prototype.subtype = "";
mstrGridUnitInfo.prototype.isMetricTemplateUnit = false;
mstrGridUnitInfo.prototype.dssSetId = "";
mstrGridUnitInfo.prototype.dssId = "";
mstrGridUnitInfo.prototype.dssType = "";
mstrGridUnitInfo.prototype.dssSubtype = "";
mstrGridUnitInfo.prototype.attForms = null;
mstrGridUnitInfo.prototype.lastHiSrc = null;
mstrGridUnitInfo.prototype.parentDssId = "";
mstrGridUnitInfo.prototype.parentAlias = "";
mstrGridUnitInfo.prototype.attFormName = "";
mstrGridUnitInfo.prototype.attFormId = "";
mstrGridUnitInfo.prototype.attFormList = "";
mstrGridUnitInfo.prototype.src = null;
mstrGridUnitInfo.prototype.isVisible = true;
mstrGridUnitInfo.prototype.isLocked = false;
mstrGridUnitInfo.prototype.toString = function(C) {
    try {
	C = C || "";
	var A = "";
	for ( var D in this) {
	    if (typeof (this[D]) != "function") {
		A += C + D + ": " + this[D] + "\n";
	    }
	}
	return (A + C + "___________________________\n");
    } catch (B) {
	microstrategy.errors.log(B);
	return "";
    }
};
mstrGridUnitInfo.prototype.populate = function(C, A) {
    try {
	for ( var D in C) {
	    this[D] = C[D];
	}
	if (this.subtype == microstrategy.SUBOBJTYPE_ATTRIBUTE) {
	    this.attForms = new mstrGridAxisObj(null, 0);
	}
	if (this.attFormList.length > 0) {
	    this.attFormList = new mstrAttFormListObj(this.attFormList);
	}
	this.populateUnitSrc(A.parentBone.isGraph, A.parentBone.id,
		A.showAttForms);
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrGridUnitInfo.prototype.populateUnitSrc = function(E, B, A) {
    try {
	var F = "";
	if (this.axis == microstrategy.GRIDCELL_AXIS_PAGE_BY) {
	    F = "pbk" + this.depth;
	} else {
	    F = B + "_" + this.axis + "_" + this.depth + "_";
	    if (E && mstrGridReport.isRWD()) {
		F += "1";
	    } else {
		F += (!A && this.subDepth > 1) ? "1" : this.subDepth;
	    }
	}
	var D = document.getElementById(F);
	if (D != null) {
	    this.src = D;
	} else {
	    this.isVisible = false;
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrGridUnitInfo.prototype.hasAttForms = function() {
    try {
	return (this.attForms != null && this.attForms.size() > 0);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrGridUnitInfo.prototype.getSubAxis = function() {
    try {
	return (this.hasAttForms()) ? this.attForms : null;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrGridUnitInfo.prototype.getSubUnit = function(C) {
    try {
	var A = this.getSubAxis();
	return (A != null) ? A.findUnit(C) : null;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
function mstrGridUnitInfo() {
    return this;
}
mstrAttFormListObj.prototype = {};
mstrAttFormListObj.prototype.forms = null;
mstrAttFormListObj.FORM_NAME = 0;
mstrAttFormListObj.FORM_ID = 1;
mstrAttFormListObj.FORM_STATUS = 2;
mstrAttFormListObj.IS_TEMPLATE_FORM = 3;
function mstrAttFormListObj(D) {
    try {
	if (D != null) {
	    this.forms = [];
	    var C = D.split(unescape(UNIT_SEPARATOR));
	    for ( var B = 0, A = C.length; B < A; B++) {
		this.forms.push(C[B]
			.split(unescape(mstrUpdateManager.ITEM_SEPARATOR)));
	    }
	    return this;
	}
    } catch (E) {
	microstrategy.errors.log(E);
    }
    return null;
}
mstrAttFormListObj.prototype.toString = function() {
    try {
	if (this.forms != null) {
	    var A = [];
	    for ( var C = 0, B = this.forms.length; C < B; C++) {
		A.push(this.forms[C].join(mstrUpdateManager.ITEM_SEPARATOR));
	    }
	    return A.join(UNIT_SEPARATOR);
	}
    } catch (D) {
	microstrategy.errors.log(D);
    }
    return "";
};
mstrAttFormListObj.prototype.putForm = function(E, A) {
    try {
	if (this.forms != null) {
	    for ( var C = 0, B = this.forms.length; C < B; C++) {
		if (this.forms[C][microstrategy.FORM_LIST_ID] == E) {
		    this.forms[C][microstrategy.FORM_LIST_STATUS] = A;
		    break;
		}
	    }
	}
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrAttFormListObj.prototype.addForm = function(A) {
    this.putForm(A, microstrategy.FORM_ON_VIEW);
};
mstrAttFormListObj.prototype.addDefaultForms = function() {
    try {
	var A = this.getDefaultForms();
	for ( var C = 0, B = A.length; C < B; C++) {
	    this.addForm(A[C][microstrategy.FORM_LIST_ID]);
	}
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrAttFormListObj.prototype.removeForm = function(A) {
    this.putForm(A, microstrategy.FORM_ON_WS);
};
mstrAttFormListObj.prototype.removeFormFromWS = function(A) {
    this.putForm(A, microstrategy.FORM_NOT_ON_WS);
};
mstrAttFormListObj.prototype.getForms = function(F, D, A) {
    try {
	if (this.forms != null) {
	    F = [];
	    for ( var C = 0, B = this.forms.length; C < B; C++) {
		if (this.forms[C][mstrAttFormListObj[D]] == A) {
		    F.push(this.forms[C]);
		}
	    }
	}
	return F;
    } catch (E) {
	microstrategy.errors.log(E);
	return null;
    }
};
mstrAttFormListObj.prototype.getFormsOnView = function() {
    return this.getForms(null, "FORM_STATUS", "1");
};
mstrAttFormListObj.prototype.getDefaultForms = function() {
    return this.getForms([], "IS_TEMPLATE_FORM", microstrategy.TRUE);
};
mstrGridCellProps.prototype = {};
mstrGridCellProps.prototype.getGridUnitInfo = function getGridUnitInfo() {
    return this.parentBone.getUnit(this.axis, this.p);
};
mstrGridCellProps.prototype.getCellUpt = function getCellUpt() {
    var A = this.getGridUnitInfo();
    if (mstrGridReport.isMetric(A.dssType)) {
	return "-1," + this.tup;
    } else {
	return this.axis + "," + this.tup;
    }
};
mstrGridCellProps.prototype.getCellCx = function getCellCx() {
    return this.cx;
};
mstrGridCellProps.prototype.getAttColTitleMissing = function getAttColTitleMissing() {
    return this.ctm;
};
mstrGridCellProps.prototype.getCellDrillKey = function getCellDrillKey() {
    return this.dk;
};
mstrGridCellProps.prototype.getCellTooltip = function getCellTooltip() {
    return this.tp;
};
mstrGridCellProps.prototype.getCellDrillElement = function getCellDrillElement(
	D) {
    var H;
    if (typeof D != "string" && isNaN(D)) {
	D = D.getAttribute
		&& D.getAttribute(microstrategy.HTMLATTR_GRIDCELL_ORDINAL);
    }
    if (!D) {
	return;
    }
    H = D.split(",");
    var F = this.getGridUnitInfo();
    if (F && mstrGridReport.isMetric(F.dssType)) {
	var E = "";
	var C = this.parentBone;
	var G = this.nh.split(",");
	for ( var B in G) {
	    if (B > 0) {
		E += ",";
	    }
	    var A = G[B].split("A");
	    E += C.valueCellProps[A[0]][parseInt(A[1]) - 1]
		    .getCellDrillElement(H[B]);
	}
	return E;
    } else {
	return this.axis + "A" + this.depth + "A" + H[0];
    }
};
function mstrGridCellProps(B, A, C) {
    this.parentBone = B;
    this.axis = A;
    this.depth = C;
    return this;
}
mstrReportObjectsImplScript = true;
mstrReportObjectsImpl.prototype = new mstrObjectBrowserImpl();
mstrReportObjectsImpl.prototype.selectedTab = "";
mstrReportObjectsImpl.prototype.isWorkingSetTab = false;
mstrReportObjectsImpl.prototype.files = null;
mstrReportObjectsImpl.prototype.searchBox = null;
mstrReportObjectsImpl.prototype.search = null;
mstrReportObjectsImpl.prototype.upFolder = null;
mstrReportObjectsImpl.prototype.folderBox = null;
mstrReportObjectsImpl.prototype.objCount = null;
mstrReportObjectsImpl.prototype.objCountEl = null;
mstrReportObjectsImpl.prototype.incFetch = null;
mstrReportObjectsImpl.prototype.adjustTopContainer = true;
mstrReportObjectsImpl.prototype.onload = function(C) {
    try {
	mstrObjectBrowserImpl.prototype.onload.call(this, C);
	this.initMask();
	this.isTargetingFilter = false;
	this.selections = new mstrReportObjSelectionsImpl();
	this.selections.parentBone = this;
	this.selections.path = "microstrategy.bone('" + this.id
		+ "').selections";
	var A = microstrategy.objectFind(this.elem, "table",
		microstrategy.OBJTYPE_TAB_SET);
	if (A) {
	    A.onmousedown = new Function("e", "return microstrategy.bone('"
		    + this.id + "').ontabclick(e);");
	    this.selectedTab = A.getAttribute("ct");
	}
	this.files = microstrategy.subObjectFind(this.elem, "div",
		microstrategy.SUBOBJTYPE_FILE_LIST);
	this.folderBox = this.elem.getElementsByTagName("select")[0];
	this.upFolder = getElementById("upFolder");
	this.displayFormatIcon = getElementById("changeFormat");
	this.search = getElementById("search");
	this.searchBox = document.getElementById("searchArg");
	var D = microstrategy.objectFind(this.elem, "div",
		microstrategy.OBJTYPE_INC_FETCH_PANE);
	this.incFetch = microstrategy.objectFind(this.elem, "div",
		microstrategy.OBJTYPE_INC_FETCH);
	this.elem.oncontextmenu = new Function("e",
		"return microstrategy.bone('" + this.id
			+ "').cancelContextMenu(e)");
	this.objCountEl = microstrategy.subObjectFind(this.elem, "table",
		microstrategy.OBJTYPE_OBJECT_COUNT)
		|| microstrategy.findChildWithAtt(this.elem, "table", "id",
			this.id + "_oCount");
	if (this.objCountEl) {
	    this.objCount = this.objCountEl.getAttribute("OC");
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrReportObjectsImpl.prototype.resize = function() {
    try {
	if (!this.elem) {
	    return;
	}
	var B = 8;
	if (this.tabManager && this.tabManager.getAvailableHeight) {
	    if (!this.elem.parentNode || !this.elem.parentNode.style) {
		return;
	    }
	    var A = Math.max(this.tabManager.getAvailableHeight() - B, 0)
		    + "px";
	    this.elem.parentNode.style.height = A;
	    this.elem.style.height = A;
	    this.elem.firstChild.style.height = A;
	    this.elem.style.width = Math.max(this.tabManager
		    .getAvailableWidth()
		    - B, 0)
		    + "px";
	    if (this.adjustTopContainer) {
		this.elem.parentNode.parentNode.style.height = (getObjHeight(this.elem) + 12)
			.toString()
			+ "px";
	    }
	}
	if (this.moveResizeHandles) {
	    window.setTimeout("if(microstrategy.bone('" + this.id
		    + "')) microstrategy.bone('" + this.id
		    + "').moveResizeHandles()", 0);
	}
	if (this.resizeContents) {
	    window.setTimeout("if(microstrategy.bone('" + this.id
		    + "')) microstrategy.bone('" + this.id
		    + "').resizeContents()", 0);
	}
	if (this.mask && this.mask.onmaskedobjectresize) {
	    this.mask.onmaskedobjectresize();
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrReportObjectsImpl.prototype.initMask = function() {
    try {
	var A = microstrategy.findChildWithAtt(this.elem, "DIV", "sty",
		"fileList");
	if (A) {
	    this.maskArea = A.parentNode;
	    this.mask.onload(this);
	}
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrReportObjectsImpl.prototype.onforcerepaint = function() {
    try {
	var B = microstrategy.findAncestor(this.elem);
	if (B && B.parentNode) {
	    B = B.parentNode;
	    var A = document.createElement("img");
	    B.appendChild(A);
	    A.parentNode.removeChild(A);
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrReportObjectsImpl.prototype.getTabContainer = function() {
    return microstrategy.subObjectFind(this.elem, "div",
	    microstrategy.SUBOBJTYPE_TAB_CONTAINER);
};
mstrReportObjectsImpl.prototype.checkForFormSubmit = function(B) {
    try {
	if (!B) {
	    B = window.event;
	}
	if (B.keyCode == 13) {
	    if (this.onsearch) {
		this.onsearch();
	    }
	    if (bIsIE4) {
		window.event.cancelBubble = true;
	    }
	    return false;
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrReportObjectsImpl.prototype.updateSelections = function(C, B) {
    if (B.tagName.toLowerCase() == "span" || B.tagName.toLowerCase() == "a") {
	if (this.selections) {
	    var A = this.selections;
	    if (A.isSelected(B)) {
		if (C.ctrlKey) {
		    A.remove(B);
		}
	    } else {
		if (!C.ctrlKey) {
		    A.clear();
		}
		A.add(B);
	    }
	    if (A.onmousedown) {
		return A.onmousedown(C);
	    }
	}
    }
    return false;
};
mstrReportObjectsImpl.prototype.onmousedown = function(C) {
    try {
	if (!C) {
	    C = window.event;
	}
	var B = getEventTarget(C);
	if (B) {
	    if (B.tagName.toLowerCase() == "li") {
		B = B.firstChild;
	    }
	    if (B.tagName.toLowerCase() == "span") {
		if (B.getAttribute("innerSpan") == "-1") {
		    B = microstrategy.findAncestorWithTag(B.parentNode, "SPAN");
		}
		if (!B) {
		    return false;
		} else {
		    return this.updateSelections(C, B);
		}
	    } else {
		if (B.tagName.toLowerCase() == "a") {
		    if (B.getAttribute(microstrategy.HTMLATTR_OBJTYPE) == microstrategy.OBJTYPE_FOLDER) {
			this.openFolder(B
				.getAttribute(microstrategy.HTMLATTR_DSS_ID));
		    } else {
			B = B.parentNode;
			if (B.tagName.toLowerCase() == "span"
				&& this.isTypeElementOrAttribute(B)) {
			    return this.updateSelections(C, B);
			}
		    }
		} else {
		    if (B.tagName.toLowerCase() == "div"
			    && this.isTypeElementOrAttribute(B)) {
			var D = microstrategy.findChildWithAtt(B, "span",
				microstrategy.HTMLATTR_OBJTYPE,
				microstrategy.OBJTYPE_ATTRIBUTE);
			if (D == null) {
			    D = microstrategy.findChildWithAtt(B, "span",
				    microstrategy.HTMLATTR_OBJTYPE,
				    microstrategy.OBJTYPE_ELEMENT);
			}
			if (D != null) {
			    return this.updateSelections(C, D);
			}
		    } else {
			if (this.selections) {
			    this.selections.clear();
			}
		    }
		}
	    }
	}
	return false;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrReportObjectsImpl.prototype.isTypeElementOrAttribute = function(A) {
    return A.getAttribute(microstrategy.HTMLATTR_OBJTYPE) != null
	    && (A.getAttribute(microstrategy.HTMLATTR_OBJTYPE) == microstrategy.OBJTYPE_ATTRIBUTE || A
		    .getAttribute(microstrategy.HTMLATTR_OBJTYPE) == microstrategy.OBJTYPE_ELEMENT);
};
mstrReportObjectsImpl.prototype.initTree = function() {
    try {
	mstrObjectBrowserImpl.prototype.initTree.call(this);
	if (this.tree != null) {
	    this.tree.elem.ondblclick = new Function("e",
		    "return microstrategy.bone('" + this.id
			    + "').ondblclick(e);");
	    var D = this.tree.elem.getElementsByTagName("span");
	    if (D != null) {
		for (i = 0; i < D.length; i++) {
		    var C = D[i];
		    C.onmouseover = new Function(
			    "e",
			    "if (this.className.indexOf('mstrTreeStrong') >= 0) this.className = this.className.replace('mstrTreeStrong', 'mstrTreeHover');");
		    C.onmouseout = new Function(
			    "e",
			    "if (this.className.indexOf('mstrTreeHover') >= 0) this.className = this.className.replace('mstrTreeHover', 'mstrTreeStrong');");
		    if (C.getAttribute("oty") == microstrategy.DSSTYPE_ATTRIBUTE_FORM
			    && !C
				    .getAttribute(microstrategy.HTMLATTR_FORM_LIST)
			    && this.formLists) {
			var A = C.getAttribute("atid") || "", E = this.formLists[A];
			if (E) {
			    C.setAttribute(microstrategy.HTMLATTR_FORM_LIST, E);
			}
		    }
		}
	    }
	}
	return true;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrReportObjectsImpl.prototype.ondblclick = function(H) {
    try {
	if (!H) {
	    H = window.event;
	}
	var G = getEventTarget(H);
	if (!G) {
	    return true;
	}
	var C = G.parentNode.getAttribute(microstrategy.HTMLATTR_OBJTYPE);
	if ((G.tagName.toLowerCase() == "a") && C != "pr") {
	    var F = microstrategy.findAncestorWithTag(G, "LI");
	    if (F && F.className == "leaf") {
		G = G.parentNode;
	    }
	}
	if (G.tagName.toLowerCase() != "span"
		|| !G.getAttribute(microstrategy.HTMLATTR_DSS_ID)) {
	    return true;
	}
	var B = this.selections.getItems().length;
	var A = microstrategy.checkACL(G, [ microstrategy.ACL_USE ]);
	if (!B || A) {
	    if ((G.getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_FILTER && G
		    .getAttribute(microstrategy.HTMLATTR_DSS_SUBTYPE) != microstrategy.DSSTYPE_CUSTOM_GROUP)
		    || G.getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_PROMPT
		    || G.getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_RPT_DEFINITION) {
		this.selections.processContextMenu("af");
	    } else {
		var E = microstrategy.bone("UniqueReportID");
		if (E) {
		    if (!E.isFeatureAvailable(microstrategy.FEATURE_WEB_PIVOT)) {
			return false;
		    }
		    if (!E.commands.queryState("isOnGrid", G)) {
			this.selections.processContextMenu("ag");
		    }
		}
	    }
	}
	return false;
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrReportObjectsImpl.prototype.ontabclick = function(D) {
    try {
	var E = microstrategy.findAncestor(getEventTarget(D));
	if (E
		&& E.getAttribute(microstrategy.HTMLATTR_OBJTYPE) == microstrategy.OBJTYPE_TAB) {
	    var B = E.getAttribute("tab");
	    if (this.selectedTab != B) {
		var A = this.updateManager;
		A.add([ A.createActionObject(E,
			mstrUpdateManager.SET_CURRENT_TAB, this.beanPath,
			[ "49001" ], [ E.getAttribute("curTab") ],
			[ this.selectedTab ], null) ]);
		A.flushAndSubmitChanges();
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrReportObjectsImpl.prototype.resizeContents = function() {
    try {
	var G = 3;
	var J = 10;
	var O = bIsIE6 && !bIsIE7 ? 10 : 20;
	var Q = 1;
	var B = 10;
	var I = 1;
	var H = 1;
	if (!isInDocument(this.elem)) {
	    return false;
	}
	if (bIsIE6 && !bIsIE7) {
	    var M = parseInt(this.elem.style.height) - (I + H);
	} else {
	    var M = getObjInnerHeight(this.elem) - (I + H);
	}
	if (M > 0) {
	    this.elem.childNodes[0].style.height = M + "px";
	}
	var D = M - (J + O + Q * 2);
	var P = getObjOuterWidth(this.elem) - (G + Q) * 2;
	if (this.tree && this.tree.elem && this.tree.elem.style
		&& (isInDocument(this.tree.elem))) {
	    if (D > 0 && (this.tree.elem.style.height != D + "px")) {
		this.tree.elem.style.height = D + "px";
		microstrategy.updateBrowserSetting("obCH", D);
	    }
	    if (P > 0) {
		this.tree.elem.style.width = P + "px";
	    }
	}
	if (this.files && this.files.style && (isInDocument(this.files))) {
	    var N = (D - B);
	    var L = this.files.parentNode.previousSibling;
	    if (L.className == "mstrSearchDiv") {
		N -= L.currentStyle ? parseInt(L.currentStyle.height)
			: getObjOuterHeight(L);
	    }
	    if (this.incFetch) {
		N -= getObjOuterHeight(this.incFetch);
	    }
	    if (this.objCountEl) {
		N -= getObjOuterHeight(this.objCountEl);
	    }
	    if ((D > B) && (this.files.childNodes[0].style.height != N + "px")) {
		this.files.childNodes[0].style.height = Math.max(N, 0) + "px";
		microstrategy.updateBrowserSetting("obCH", Math.max(N, 0));
	    }
	    if (this.incFetch) {
		this.incFetch.style.position = "absolute";
		var A = this.incFetch.offsetWidth;
		this.incFetch.style.position = "static";
		if (A > parseInt(this.elem.style.width)) {
		    this.elem.style.width = A + "px";
		    var K = microstrategy.bones.accordion_AccordionTabManagerStyle;
		    K && (K.elem.style.width = A + "px");
		}
	    }
	    if (P > 0) {
		this.files.childNodes[0].style.width = P + "px";
	    }
	}
	var F = 0;
	if (this.searchBox && this.search) {
	    var C = document.getElementById("name_label");
	    F = getObjWidth(this.elem)
		    - (getObjWidth(this.search) + getObjWidth(C) + 15);
	    if (F > 0) {
		this.searchBox.style.width = F + "px";
	    }
	}
	if (this.folderBox) {
	    F = getObjWidth(this.elem)
		    - (getObjWidth(this.upFolder)
			    + getObjWidth(this.displayFormatIcon) + 15);
	    if (F > 0) {
		this.folderBox.style.width = F + "px";
		if (mstr.utils.ISIE4) {
		    this.folderBox.style.display = "none";
		    this.folderBox.style.display = "inline-block";
		}
	    }
	}
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrReportObjectsImpl.prototype.onsearch = function(C) {
    try {
	if (this.searchBox) {
	    if (!this.searchBox.value) {
		this.searchBox.value = "";
	    }
	    var A = this.updateManager;
	    A.add([ A.createActionObject(null, mstrUpdateManager.OB_SEARCH,
		    microstrategy.obBeanPaths[mstrUpdateManager.OB_SEARCH],
		    [ "51003" ], [ this.searchBox.value ], [], null) ]);
	    A.flushAndSubmitChanges();
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrReportObjectsImpl.prototype.onincfetch = function(D) {
    try {
	if (!D) {
	    D = window.event;
	}
	var E = getEventTarget(D);
	var C = E.getAttribute(microstrategy.HTMLATTR_CMD_VALUE);
	if (C) {
	    var A = this.updateManager;
	    A.add([ A.createActionObject(null, mstrUpdateManager.OB_FETCH,
		    microstrategy.obBeanPaths[mstrUpdateManager.OB_FETCH],
		    [ "51002" ], [ C ], [], null) ]);
	    A.flushAndSubmitChanges();
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrReportObjectsImpl.prototype.ongridstructurechange = function(G) {
    try {
	if (microstrategy.DISPLAY_MODE != microstrategy.DESIGN_MODE) {
	    return;
	}
	if (this.isWorkingSetTab) {
	    var F = microstrategy.getContextMenuManager("ReportObjB")
		    .findMenuItem(
			    microstrategy.descriptors.getDescriptor("2890"));
	    for ( var E = 0; E < F.length; E++) {
		F[E][3] = "0";
	    }
	    for ( var E = 0; E < this.tree.elem.firstChild.childNodes.length; E++) {
		var K = this.tree.elem.firstChild.childNodes[E].firstChild
			.getElementsByTagName("span")[0];
		var H = this.getAttributeForms(K);
		var J = G.findUnit(K
			.getAttribute(microstrategy.HTMLATTR_DSS_ID));
		var I = new mstrAttFormListObj(K
			.getAttribute(microstrategy.HTMLATTR_FORM_LIST));
		if (J == null) {
		    K.className = "";
		    if (H.length > 0) {
			for ( var D = 0; D < H.length; D++) {
			    H[D].className = "";
			    I
				    .removeForm(H[D]
					    .getAttribute(microstrategy.HTMLATTR_DSS_ID));
			}
		    }
		} else {
		    K.className = "mstrTreeStrong";
		    if (H.length > 0) {
			for ( var D = 0; D < H.length; D++) {
			    var B = H[D];
			    var A = findTargetTag(B, "li");
			    if ((J.attForms != null && J.attForms.size() > 0 && J.attForms
				    .findUnit(B
					    .getAttribute(microstrategy.HTMLATTR_DSS_ID)) != null)
				    || (B
					    .getAttribute(microstrategy.HTMLATTR_DSS_ID) == J.attFormId)) {
				B.className = "mstrTreeStrong";
				if (A) {
				    A.style.display = "block";
				}
				I
					.addForm(B
						.getAttribute(microstrategy.HTMLATTR_DSS_ID));
			    } else {
				if (A && A.style.display == "block") {
				    B.className = "";
				    I
					    .removeForm(B
						    .getAttribute(microstrategy.HTMLATTR_DSS_ID));
				}
			    }
			}
		    }
		}
		K.setAttribute(microstrategy.HTMLATTR_FORM_LIST, I.toString());
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrReportObjectsImpl.prototype.onunitsremoved = function(F) {
    try {
	var B = true;
	if (F && F.length) {
	    for ( var D = 0, C = F.length; D < C; ++D) {
		var A = F[D];
		B |= this.removeUnit(A);
	    }
	}
	return B;
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrReportObjectsImpl.prototype.removeUnit = function(A) {
    try {
	var B = this.getWSItems(A.isMetricTemplateUnit, A.dssId);
	if (B) {
	    this.hideWSItems(B);
	}
	return true;
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrReportObjectsImpl.prototype.getWSItems = function(G, I, A) {
    try {
	if (!this.isWorkingSetTab) {
	    return null;
	}
	var E = new Array();
	for ( var F = 0; F < this.tree.elem.firstChild.childNodes.length; F++) {
	    var H = this.tree.elem.firstChild.childNodes[F].firstChild
		    .getElementsByTagName("span")[0];
	    var J = (H.getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_METRIC || H
		    .getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_USER_METRIC);
	    if (J && G) {
		E.push(H);
	    } else {
		if (H.getAttribute(microstrategy.HTMLATTR_DSS_ID) == I) {
		    if (A) {
			H = findTargetTag(H, "li");
			var B = H.getElementsByTagName("ul")[0]
				.getElementsByTagName("span");
			for ( var D = 0; D < B.length; D++) {
			    if (B[D]
				    .getAttribute(microstrategy.HTMLATTR_DSS_ID) == A) {
				E.push(B[D]);
			    }
			}
		    } else {
			E.push(H);
		    }
		}
	    }
	}
	return E;
    } catch (C) {
	microstrategy.errors.log(C);
	return null;
    }
};
mstrReportObjectsImpl.prototype.hideWSItems = function(A) {
    try {
	if (!A || A.length == 0) {
	    return;
	}
	for ( var B in A) {
	    A[B].className = "";
	    var D = findTargetTag(A[B], "li");
	    if (D) {
		D.style.display = "none";
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrReportObjectsImpl.prototype.isWSItemRemovable = function(C, B) {
    try {
	if (C.getAttribute(microstrategy.HTMLATTR_DSS_TYPE) != microstrategy.DSSTYPE_ATTRIBUTE_FORM) {
	    return true;
	}
	if (C.getAttribute(microstrategy.HTMLATTR_DISPLAY_NAME) == "ID") {
	    B.desc = microstrategy.descriptors.getDescriptor("6163");
	    return false;
	} else {
	    var E = this.getWSItems(false, C
		    .getAttribute(microstrategy.HTMLATTR_PARENT_ID))[0];
	    var F = new mstrAttFormListObj(E
		    .getAttribute(microstrategy.HTMLATTR_FORM_LIST));
	    var A = F.getFormsOnView();
	    if (A.length == 1
		    && A[0][microstrategy.FORM_LIST_ID] == C
			    .getAttribute(microstrategy.HTMLATTR_DSS_ID)) {
		B.desc = microstrategy.descriptors.getDescriptor("3626");
		return false;
	    }
	    var D = F.getDefaultForms();
	    if (D.length == 1
		    && D[0][microstrategy.FORM_LIST_ID] == C
			    .getAttribute(microstrategy.HTMLATTR_DSS_ID)) {
		B.desc = microstrategy.descriptors.getDescriptor("3626");
		return false;
	    }
	}
	return true;
    } catch (B) {
	microstrategy.errors.log(B);
    }
};
mstrReportObjectsImpl.prototype.removeFormFromWS = function(H, B, J) {
    try {
	var G = this.getWSItems(false, H)[0];
	var F = new mstrAttFormListObj(G
		.getAttribute(microstrategy.HTMLATTR_FORM_LIST));
	F.removeFormFromWS(B);
	G.setAttribute(microstrategy.HTMLATTR_FORM_LIST, F.toString());
	if (J) {
	    var I = microstrategy.bone("UniqueReportID");
	    var C = I.gridStructureInfo.findUnit(H);
	    if (C) {
		C.src.setAttribute(microstrategy.HTMLATTR_FORM_LIST, F
			.toString());
		if (I.template && I.template.buildAxisContextMenus) {
		    I.template.buildAxisContextMenus([ C.src ]);
		}
		C.attFormList = F;
		for ( var E = 0, A = C.attForms.units.length; E < A; E++) {
		    C.attForms.units[E].attFormList = F;
		}
	    }
	}
    } catch (D) {
	microstrategy.errors.log(D);
    }
};
mstrReportObjectsImpl.prototype.openFolder = function(B) {
    try {
	var A = this.updateManager;
	A.add([ A.createActionObject(null, mstrUpdateManager.OB_NAVIGATE,
		microstrategy.obBeanPaths[mstrUpdateManager.OB_NAVIGATE],
		[ "51001" ], [ B ], [], null) ]);
	A.flushAndSubmitChanges();
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrReportObjectsImpl.prototype.isReportMdxCube = function() {
    var A = microstrategy.bone("UniqueReportID");
    return A && A.isReportMdxCube();
};
function mstrReportObjectsImpl(A) {
    this.inherits = mstrObjectBrowserImpl;
    this.inherits(A);
    delete this.inherits;
    return this;
}
mstrReportObjSelectionsImplScript = true;
mstrReportObjSelectionsImpl.prototype = new mstrObjSelectionsImpl();
mstrReportObjSelectionsImpl.prototype.onmousedown = function(E) {
    try {
	var C = microstrategy.eventManager.getSource(E);
	if (C && ((C.button > 1) || (isMac && E.ctrlKey && C.button == 1))) {
	    if (this.isMulti() && !this.isSameType()) {
		return false;
	    }
	    for ( var F in this.items) {
		var A = new mstrObjectInfoImpl(this.items[F]);
		if (!this.items[F].getAttribute("cx")) {
		    microstrategy.getContextMenuManager("ReportObjB").getMenu(
			    "report_ob_menu").registerTrigger(this.items[F],
			    "['" + A.dssType + "']");
		}
	    }
	    return false;
	}
	if (microstrategy.checkACL(this.clickedSrc, [ microstrategy.ACL_USE ])) {
	    mstrSelectionsImpl.prototype.onmousedown.call(this, E);
	    var B = microstrategy.getEventHandlerString(this.path);
	    if (typeof (mstr) != "undefined") {
		this.parentBone.attachWinListener(this, "mousemove",
			"ondragstart");
		this.parentBone.attachWinListener(this, "mouseup", "onmouseup",
			false);
	    } else {
		document.onmousemove = new Function("e", B + " { return "
			+ this.path + ".ondragstart(e); }");
		if (document.onmouseup == null) {
		    document.onmouseup = new Function("e", B + " { return "
			    + this.path + ".onmouseup(e); }");
		}
	    }
	}
	return false;
    } catch (D) {
	microstrategy.errors.log(D);
    }
    return false;
};
mstrReportObjSelectionsImpl.prototype.ondrag = function(C) {
    try {
	if (!C) {
	    C = window.event;
	}
	if (C.e) {
	    C = C.e;
	}
	getMouse(C);
	if (lMouseX > Math.max(document.documentElement.scrollWidth,
		document.body.scrollWidth) - 25) {
	    return;
	}
	if (!this.dragDisplay) {
	    var A = document.createElement("span");
	    A.className = "mstrDnDReportDragItem";
	    A.appendChild(document.createTextNode(""));
	    this.dragDisplay = document.body.appendChild(A);
	}
	var D = (this.length > 1) ? microstrategy.descriptors
		.getDescriptor("3625") : this.firstItem().getAttribute("ds");
	this.dragDisplay.replaceChild(document.createTextNode(D),
		this.dragDisplay.firstChild);
	moveObjTo(this.dragDisplay, lMouseX - getObjWidth(this.dragDisplay)
		- microstrategy.CURSOR_OFFSET, lMouseY
		- getObjHeight(this.dragDisplay) - microstrategy.CURSOR_OFFSET);
	this.parentBone.dndHelper.moveHelperImage(C);
	microstrategy.scrollPageHorizontally(lMouseX);
    } catch (B) {
	microstrategy.errors.log(B);
    }
    return false;
};
mstrReportObjSelectionsImpl.prototype.ondragend = function(C) {
    try {
	if (!C) {
	    C = window.event;
	}
	if (C.e) {
	    C = C.e;
	}
	this.parentBone.dndHelper.parkObject(this.dragDisplay);
	microstrategy.eventManager.notifyOrphanBones("onnotifydragend");
	this.onmouseup(C);
	var D = microstrategy.findAncestor(getEventTarget(C));
	if (D) {
	    var B = microstrategy.boneForMask(D);
	    if (B && B.ondrop) {
		B.ondrop(D, this);
	    }
	}
    } catch (A) {
	microstrategy.errors.log(A);
    }
    return false;
};
mstrReportObjSelectionsImpl.prototype.getReportFilterBone = function(B, A) {
    try {
	var D = microstrategy.bone("rfe_pane");
	if (!D && B) {
	    D = microstrategy.bone("rle_pane");
	}
	if (!D && A) {
	    D = microstrategy.bone("fexb_pane");
	}
	return D;
    } catch (C) {
	microstrategy.errors.log(C);
	return null;
    }
};
mstrReportObjSelectionsImpl.prototype.checkShowContextMenuOption = function(A) {
    try {
	var D = this.firstItem();
	if (!D) {
	    return false;
	}
	var C = D.getAttribute(microstrategy.HTMLATTR_DSS_TYPE);
	var G = D.getAttribute(microstrategy.HTMLATTR_DSS_SUBTYPE);
	var F = microstrategy.bone("UniqueReportID");
	var B = F != null && F.isReportCustomSQL();
	switch (A) {
	case "ag":
	    if (C == microstrategy.DSSTYPE_TEMPLATE
		    || C == microstrategy.DSSTYPE_RPT_DEFINITION
		    || D.getAttribute(microstrategy.HTMLATTR_OBJTYPE) == microstrategy.OBJTYPE_ELEMENT
		    || (C == microstrategy.DSSTYPE_FILTER && D
			    .getAttribute(microstrategy.HTMLATTR_DSS_SUBTYPE) != microstrategy.DSSTYPE_CUSTOM_GROUP)
		    || C == microstrategy.DSSTYPE_PROMPT
		    && G != microstrategy.DSSSUB_TYPE_PROMPT_OBJECTS) {
		return false;
	    }
	    if (F) {
		if (F.commands && F.commands.queryState("isOnGrid", D)) {
		    return false;
		}
		if (F.isReportMdxCube() && !F.canAddMDXUnit(D)) {
		    return false;
		}
	    }
	    return microstrategy.checkACL(D, [ microstrategy.ACL_USE ]);
	    break;
	case "af":
	    if (B) {
		return false;
	    }
	    if (this.getReportFilterBone(true, true) == null) {
		return false;
	    }
	    return this.getReportFilterBone(true, true).isAddable(D,
		    this.parentBone);
	    break;
	case "rn":
	    return C != microstrategy.DSSTYPE_HIERARCHY
		    && F.commands.queryState("isOnGrid", D);
	case "edm":
	    return C == microstrategy.DSSTYPE_METRIC
		    && D.getAttribute(microstrategy.HTMLATTR_DERIVED_METRIC);
	case "inm":
	    return C == microstrategy.DSSTYPE_METRIC;
	case "aup":
	    if (B) {
		return false;
	    }
	    if (this.getReportFilterBone(false, true) == null) {
		return false;
	    }
	    if ((C == microstrategy.DSSTYPE_METRIC && !D
		    .getAttribute(microstrategy.HTMLATTR_DERIVED_METRIC))
		    || C == microstrategy.DSSTYPE_RPT_DEFINITION
		    || (C == microstrategy.DSSTYPE_FILTER && D
			    .getAttribute(microstrategy.HTMLATTR_DSS_SUBTYPE) != microstrategy.DSSTYPE_CUSTOM_GROUP)
		    || C == microstrategy.DSSTYPE_DIMENSION) {
		return microstrategy.checkACL(D, [ microstrategy.ACL_EXECUTE,
			microstrategy.ACL_USE ]);
	    } else {
		return false;
	    }
	    break;
	case "aelp":
	case "aaqp":
	    if (B) {
		return false;
	    }
	    if (this.getReportFilterBone(false, true) == null) {
		return false;
	    }
	    if (C == microstrategy.DSSTYPE_ATTRIBUTE) {
		return microstrategy.checkACL(D, [ microstrategy.ACL_EXECUTE,
			microstrategy.ACL_USE ]);
	    } else {
		return false;
	    }
	    break;
	case "lt":
	case "et":
	    return ((microstrategy.DISPLAY_MODE == microstrategy.DESIGN_MODE)
		    && (microstrategy.checkACL(D, [ microstrategy.ACL_EXECUTE,
			    microstrategy.ACL_USE ])) && (D
		    .getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_TEMPLATE));
	case "rr":
	    return (microstrategy.DISPLAY_MODE == microstrategy.DESIGN_MODE) ? true
		    : (this.length < this.parentBone.objCount);
	    break;
	case "rm":
	    if (D.getAttribute("dr")) {
		return (microstrategy.DISPLAY_MODE == microstrategy.DESIGN_MODE) ? true
			: (this.length < this.parentBone.objCount);
	    } else {
		return false;
	    }
	    break;
	case "deopen":
	    if (B
		    || (C != microstrategy.DSSTYPE_ATTRIBUTE)
		    || (microstrategy.DISPLAY_MODE == microstrategy.DESIGN_MODE)) {
		return false;
	    }
	    return (F
		    && D.getAttribute("iot")
		    && F
			    .isFeatureAvailable(microstrategy.FEATURE_INSERT_NEW_METRIC)
		    && !D.getAttribute("ul") && (F.isReportViewReport() || !D
		    .getAttribute("vf")));
	case "addsm":
	    return C == microstrategy.DSSTYPE_ATTRIBUTE;
	}
	return true;
    } catch (E) {
	microstrategy.errors.log(E);
	return null;
    }
};
mstrReportObjSelectionsImpl.prototype.checkEnableContextMenuOption = function(A) {
    try {
	switch (A) {
	case "af":
	    if (!this.isMulti()) {
		return true;
	    } else {
		if (this.items) {
		    for (member in this.items) {
			var C = this.items[member];
			if (C.getAttribute(microstrategy.HTMLATTR_OBJTYPE) != microstrategy.OBJTYPE_ELEMENT) {
			    return false;
			}
		    }
		    return true;
		}
	    }
	    break;
	}
	return true;
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrReportObjSelectionsImpl.prototype.buildAttFormSubMenu = function(e) {
    try {
	if (!this.isSameType()) {
	    return false;
	}
	if (this.firstItem() == null) {
	    return false;
	}
	if (!(this.firstItem().getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_ATTRIBUTE || this
		.firstItem().getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_ATTRIBUTE_FORM)) {
	    return false;
	}
	if (this.isMulti()) {
	    return true;
	}
	var cmm = microstrategy.getContextMenuManager("ReportObjB");
	var gridBone = microstrategy.bone("UniqueReportID");
	var attFormsMenuItems = cmm.findMenuItem(microstrategy.descriptors
		.getDescriptor("2890"), eval(this.firstItem()
		.getAttribute("cx")));
	var populateSubmenu = false;
	for ( var i = 0; i < attFormsMenuItems.length; i++) {
	    populateSubmenu |= (attFormsMenuItems[i][3] == "0");
	}
	if (!populateSubmenu) {
	    return true;
	}
	var formsMenu = cmm.getMenu();
	var root = "var bone = microstrategy.bone('" + this.parentBone.id
		+ "'); bone.selections.processContextMenu";
	var treeNodes = this.parentBone.tree.elem.firstChild.childNodes;
	if (treeNodes == null) {
	    return false;
	}
	for (i = 0; i < treeNodes.length; i++) {
	    var item = treeNodes[i].firstChild.getElementsByTagName("span")[0];
	    var attID = item.getAttribute(microstrategy.HTMLATTR_DSS_ID);
	    var isOnGrid;
	    var attForms;
	    var unit = (gridBone && gridBone.gridStructureInfo) ? gridBone.gridStructureInfo
		    .findUnit(attID)
		    : null;
	    if (unit == null) {
		isOnGrid = false;
		attForms = item.getAttribute(microstrategy.HTMLATTR_FORM_LIST);
	    } else {
		isOnGrid = true;
		attForms = unit.attFormList.toString();
	    }
	    var toShow = "(microstrategy.activeCXMenu.getAttribute(microstrategy.HTMLATTR_DSS_ID) =='"
		    + attID
		    + "') || (microstrategy.activeCXMenu.getAttribute(\"pid\") =='"
		    + attID + "');";
	    if (attForms != null && attForms.length > 0) {
		var formsList = attForms.split(unescape(UNIT_SEPARATOR));
		var formsOnViewList = new Array();
		var formsOnWsList = new Array();
		var formsNotOnWsList = new Array();
		for ( var j = 0; j < formsList.length; j++) {
		    form = formsList[j]
			    .split(unescape(mstrUpdateManager.ITEM_SEPARATOR));
		    switch (parseInt(form[microstrategy.FORM_LIST_STATUS])) {
		    case microstrategy.FORM_NOT_ON_WS:
			formsNotOnWsList.push(formsList[j]);
			break;
		    case microstrategy.FORM_ON_VIEW:
			formsOnViewList.push(formsList[j]);
			break;
		    case microstrategy.FORM_ON_WS:
			formsOnWsList.push(formsList[j]);
			break;
		    }
		}
		for ( var j = 0; j < formsOnViewList.length; j++) {
		    form = formsOnViewList[j]
			    .split(unescape(mstrUpdateManager.ITEM_SEPARATOR));
		    if (isOnGrid) {
			if (formsOnViewList.length == 1) {
			    formsMenu.addItem(
				    form[microstrategy.FORM_LIST_NAME], "", "",
				    toShow, mstrContextMenuImpl.IMG_CHECK);
			} else {
			    formsMenu.addItem(
				    form[microstrategy.FORM_LIST_NAME], root
					    + "('atfr', '"
					    + form[microstrategy.FORM_LIST_ID]
					    + "');", "", toShow,
				    mstrContextMenuImpl.IMG_CHECK);
			}
		    }
		}
		for ( var j = 0; j < formsOnWsList.length; j++) {
		    form = formsOnWsList[j]
			    .split(unescape(mstrUpdateManager.ITEM_SEPARATOR));
		    formsMenu.addItem(form[microstrategy.FORM_LIST_NAME], root
			    + "('atfa', '" + form[microstrategy.FORM_LIST_ID]
			    + "');", "", toShow);
		}
		var modifyROList = gridBone
			&& gridBone
				.isFeatureAvailable(microstrategy.FEATURE_MODIFY_REPORT_LIST);
		if ((formsNotOnWsList != null) && (formsNotOnWsList.length > 0)
			&& modifyROList) {
		    formsMenu.addSeparator();
		    for ( var j = 0; j < formsNotOnWsList.length; j++) {
			form = formsNotOnWsList[j]
				.split(unescape(mstrUpdateManager.ITEM_SEPARATOR));
			formsMenu.addItem(form[microstrategy.FORM_LIST_NAME],
				root + "('atfa', '"
					+ form[microstrategy.FORM_LIST_ID]
					+ "');", "", toShow);
		    }
		}
	    }
	}
	formsMenu.addSeparator();
	formsMenu.addItem(microstrategy.descriptors.getDescriptor("1005"), root
		+ "('atfm');");
	for ( var i = 0; i < attFormsMenuItems.length; i++) {
	    attFormsMenuItems[i][3] = "1";
	    attFormsMenuItems[i][4] = "[" + formsMenu.menu_items.toString()
		    + "]";
	}
	return true;
    } catch (err) {
	microstrategy.errors.log(err);
    }
    return false;
};
mstrReportObjSelectionsImpl.prototype.processContextMenu = function(J, W) {
    try {
	var M = new Array();
	var Z = microstrategy.updateManager;
	switch (J) {
	case "ag":
	    var S = microstrategy.bone("UniqueReportID");
	    if (S) {
		var P = this.getItems();
		var N = false;
		for ( var n = P.length - 1; n >= 0; n--) {
		    if (P[n].getAttribute(microstrategy.HTMLATTR_OBJTYPE) != microstrategy.OBJTYPE_ELEMENT
			    && microstrategy.checkACL(P[n],
				    [ microstrategy.ACL_USE ])) {
			var T = microstrategy.GRIDCELL_AXIS_ROWS;
			if (P[n].getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_METRIC
				|| P[n]
					.getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_USER_METRIC) {
			    if (S.gridStructureInfo.hasMetrics) {
				T = microstrategy.GRIDCELL_AXIS_METRICS;
			    } else {
				T = microstrategy.GRIDCELL_AXIS_COLUMNS;
			    }
			}
			if (P[n].getAttribute(microstrategy.HTMLATTR_OBJTYPE) == microstrategy.OBJTYPE_XDA_DATA_ELEMENT
				&& P[n]
					.getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_HIERARCHY) {
			    N = true;
			}
			M = S.commands.exec("addTemplateUnit", P[n], T, -1, M);
		    }
		}
	    }
	    Z.add(M);
	    if (microstrategy.DISPLAY_MODE == microstrategy.VIEW_MODE || N) {
		Z.flushAndSubmitChanges();
	    }
	    break;
	case "af":
	    var S = microstrategy.bone("rfe_pane");
	    if (!S) {
		S = microstrategy.bone("rle_pane");
	    }
	    if (!S) {
		S = microstrategy.bone("fexb_pane");
	    }
	    if (S) {
		var V = this.firstItem();
		if (V == null) {
		    return;
		}
		if (V
			&& V.getAttribute(microstrategy.HTMLATTR_OBJTYPE) == microstrategy.OBJTYPE_ELEMENT) {
		    var b = V.getAttribute(microstrategy.HTMLATTR_PARENT_ID);
		    if (b) {
			M = S.addElements(b, this.getItems(), M);
		    }
		} else {
		    if (S.isAddable(V, this.parentBone)) {
			M = S.addUnit(V, M);
		    }
		}
		if (M.length) {
		    Z.add(M);
		    Z.flushAndSubmitChanges();
		}
	    }
	    break;
	case "rn":
	    var D = 1, G = "false";
	    if (J == "rn") {
		var A = microstrategy.activeCXMenu, r = A
			.getAttribute(microstrategy.HTMLATTR_DSS_TYPE), d = r == microstrategy.DSSTYPE_ATTRIBUTE_FORM ? microstrategy.HTMLATTR_ATTRIBUTE_ID
			: microstrategy.HTMLATTR_DSS_ID, K = A.getAttribute(d), I = microstrategy
			.bone("UniqueReportID").gridStructureInfo, h = I.rowAxis.units
			.concat(I.colAxis.units, I.metricAxis.units,
				I.pageAxis.units);
		G = "true";
		for ( var n = 0; n < h.length; n++) {
		    if (!h[n].dssId
			    || (h[n].dssType == microstrategy.DSSTYPE_HIERARCHY)) {
			continue;
		    }
		    if (h[n].dssId == K) {
			break;
		    }
		    D++;
		}
	    } else {
		D = 0;
	    }
	    M
		    .push(Z
			    .createActionObject(
				    null,
				    mstrUpdateManager.OPEN_FORMULA_EDITOR,
				    microstrategy.obBeanPaths[mstrUpdateManager.OPEN_FORMULA_EDITOR],
				    [ "6036", "6037" ], [ D, G ], [], null));
	    Z.add(M);
	    Z.flushAndSubmitChanges();
	    break;
	case "edm":
	case "inm":
	    var C = mstrApp.getMsgID(), U = microstrategy
		    .bone("UniqueReportID"), a = [ U.wksInfos ], A = microstrategy.activeCXMenu, l = A
		    .getAttribute(microstrategy.HTMLATTR_DSS_ID), X = A
		    .getAttribute(microstrategy.HTMLATTR_DISPLAY_NAME), c = {
		datasets : a,
		msgID : C
	    }, g = [];
	    var m = function(s) {
		Z.add(s);
		Z.flushAndSubmitChanges();
	    };
	    if (J === "inm") {
		c.metricId = "";
		c.action = {
		    cmd : "editNew",
		    refOi : {
			did : l,
			n : X
		    }
		};
		c.onApplyMetricCallback = function(t) {
		    var s = [ "4031", "4032", "4259", "4029" ], u = [ t.alias,
			    t.tokenStreamXML,
			    !mstrmojo.string.isEmpty(t.tokenStreamXML), 1 ];
		    if (t.afb !== undefined) {
			s.push("4260");
			u.push(t.afb);
		    }
		    if (t.sfb !== undefined) {
			s.push("4258");
			u.push(t.sfb);
		    }
		    g.push(Z.createActionObject(null,
			    mstrUpdateManager.ADD_DERIVED_METRIC, U.beanPath,
			    s, u));
		    m.call(this, g);
		};
	    } else {
		c.metricId = l;
		c.action = {
		    cmd : "edit",
		    n : X
		};
		c.onApplyMetricCallback = function(t) {
		    var s = [ "4248", "4031", "4032", "4259" ], u = [ l,
			    t.alias, t.tokenStreamXML,
			    !mstrmojo.string.isEmpty(t.tokenStreamXML) ];
		    if (t.afb !== undefined) {
			s.push("4260");
			u.push(t.afb);
		    }
		    if (t.sfb !== undefined) {
			s.push("4258");
			u.push(t.sfb);
		    }
		    g.push(Z.createActionObject(null,
			    mstrUpdateManager.CHANGE_METRIC_FORMULA,
			    U.beanPath, s, u));
		    m.call(this, g);
		};
	    }
	    microstrategy.openDerivedMetricEditor(c);
	    break;
	case "aup":
	    this.addObjectAsPrompt("");
	    break;
	case "aelp":
	    this.addObjectAsPrompt("el");
	    break;
	case "aaqp":
	    this.addObjectAsPrompt("aq");
	    break;
	case "ef":
	    var S = microstrategy.bone("rfe_pane");
	    if (!S) {
		S = microstrategy.bone("fexb_pane");
	    }
	    if (S) {
		var P = this.getItems();
		var b = this.firstItem().getAttribute(
			microstrategy.HTMLATTR_PARENT_ID);
		if (b) {
		    M = S.addElements(b, this.getItems(), M);
		    Z.add(M);
		    Z.flushAndSubmitChanges();
		}
	    }
	    break;
	case "rr":
	    var P = this.getItems();
	    var H = true;
	    var S = microstrategy.bone("UniqueReportID");
	    if (!S) {
		return;
	    }
	    var q = false;
	    var E = S.commands.queryState("graphMode");
	    var o = new Object();
	    var R = false;
	    for ( var n = 0; n < P.length; n++) {
		if (!this.parentBone.isWSItemRemovable(P[n], o)) {
		    R = true;
		    showMessage({
			contents : o.desc,
			elements : microstrategy.OK_BUTTON,
			type : mstrMsgBoxImpl.MSG_WARNING
		    });
		    break;
		}
	    }
	    if (R) {
		break;
	    }
	    for ( var n = 0; n < P.length; n++) {
		if (P[n].getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_ATTRIBUTE_FORM) {
		    M
			    .push(Z
				    .createActionObject(
					    null,
					    mstrUpdateManager.REMOVE_FORM_FROM_WS,
					    microstrategy.obBeanPaths[mstrUpdateManager.REMOVE_FORM_FROM_WS],
					    [ "4167", "4168", "4169" ],
					    [
						    P[n].getAttribute("pid"),
						    P[n]
							    .getAttribute(microstrategy.HTMLATTR_DSS_ID),
						    "1" ], [], null));
		    if (S.useClientSideManipulations) {
			var Y = S.gridStructureInfo
				.findUnit(P[n]
					.getAttribute(microstrategy.HTMLATTR_PARENT_ID));
			var B = Y
				&& Y.attForms
					.findUnit(P[n]
						.getAttribute(microstrategy.HTMLATTR_DSS_ID));
			if (B != null && !E) {
			    S.commands
				    .exec(
					    "removeTemplateUnit",
					    P[n],
					    P[n]
						    .getAttribute(microstrategy.HTMLATTR_PARENT_ID),
					    P[n]
						    .getAttribute(microstrategy.HTMLATTR_DSS_ID),
					    new Array());
			}
			this.parentBone.hideWSItems([ P[n] ]);
			this.parentBone
				.removeFormFromWS(
					P[n]
						.getAttribute(microstrategy.HTMLATTR_PARENT_ID),
					P[n]
						.getAttribute(microstrategy.HTMLATTR_DSS_ID),
					!E);
		    }
		} else {
		    if (S.commands.queryState("isLocked", P[n]
			    .getAttribute(microstrategy.HTMLATTR_DSS_ID))) {
			q = true;
		    } else {
			var L = (n == P.length - 1) && H;
			M
				.push(Z
					.createActionObject(
						null,
						mstrUpdateManager.REMOVE_WORKINGSET_OBJECT,
						microstrategy.obBeanPaths[mstrUpdateManager.REMOVE_WORKINGSET_OBJECT],
						[ "4110", "4165", "4166",
							"4164" ],
						[
							L,
							P[n]
								.getAttribute(microstrategy.HTMLATTR_DSS_ID),
							P[n]
								.getAttribute(microstrategy.HTMLATTR_DSS_TYPE),
							"" ], [], null));
			if (S.useClientSideManipulations) {
			    var Y = S.gridStructureInfo
				    .findUnit(P[n]
					    .getAttribute(microstrategy.HTMLATTR_DSS_ID));
			    if (Y != null) {
				S.commands
					.exec(
						"removeTemplateUnit",
						P[n],
						P[n]
							.getAttribute(microstrategy.HTMLATTR_DSS_ID),
						null, new Array());
			    }
			    this.parentBone.hideWSItems([ P[n] ]);
			}
		    }
		}
	    }
	    if (q) {
		if (P.length == 1) {
		    showMessage({
			contents : microstrategy.descriptors
				.getDescriptor("3807"),
			elements : microstrategy.OK_BUTTON,
			type : mstrMsgBoxImpl.MSG_WARNING
		    });
		} else {
		    showMessage({
			contents : microstrategy.descriptors
				.getDescriptor("3811"),
			elements : microstrategy.OK_BUTTON,
			type : mstrMsgBoxImpl.MSG_WARNING
		    });
		}
	    } else {
		Z.add(M);
		Z.flushAndSubmitChanges();
	    }
	    break;
	case "atfa":
	    var n = 0;
	    if (microstrategy.activeCXMenu
		    .getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_ATTRIBUTE_FORM) {
		var O = this.getChildren(this
			.getParent(microstrategy.activeCXMenu));
	    } else {
		var O = this.getChildren(microstrategy.activeCXMenu);
	    }
	    for (n = 0; n < O.length; n++) {
		if (O[n].getAttribute(microstrategy.HTMLATTR_DSS_ID) == W) {
		    var S = microstrategy.bone("UniqueReportID");
		    if (S) {
			M = S.commands.exec("addTemplateUnitAttForm", O[n], 1,
				1, M);
			if (M.length > 0) {
			    Z.add(M);
			    if (microstrategy.DISPLAY_MODE == microstrategy.VIEW_MODE) {
				Z.flushAndSubmitChanges();
			    }
			}
		    }
		    break;
		}
	    }
	    break;
	case "atfr":
	    var n = 0;
	    if (microstrategy.activeCXMenu
		    .getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_ATTRIBUTE_FORM) {
		var O = this.getChildren(this
			.getParent(microstrategy.activeCXMenu));
	    } else {
		var O = this.getChildren(microstrategy.activeCXMenu);
	    }
	    for (n = 0; n < O.length; n++) {
		if (O[n].getAttribute(microstrategy.HTMLATTR_DSS_ID) == W) {
		    var S = microstrategy.bone("UniqueReportID");
		    if (S) {
			M = S.commands
				.exec(
					"removeTemplateUnit",
					O[n],
					O[n]
						.getAttribute(microstrategy.HTMLATTR_PARENT_ID),
					O[n]
						.getAttribute(microstrategy.HTMLATTR_DSS_ID),
					M);
			if (M.length > 0) {
			    Z.add(M);
			    if (microstrategy.DISPLAY_MODE == microstrategy.VIEW_MODE) {
				Z.flushAndSubmitChanges();
			    }
			}
		    }
		    break;
		}
	    }
	    break;
	case "atfm":
	    if (microstrategy.activeCXMenu
		    .getAttribute(microstrategy.HTMLATTR_DSS_TYPE) == microstrategy.DSSTYPE_ATTRIBUTE_FORM) {
		var F = this.getParent(microstrategy.activeCXMenu)
			.getAttribute(microstrategy.HTMLATTR_DSS_ID);
	    } else {
		var F = microstrategy.activeCXMenu
			.getAttribute(microstrategy.HTMLATTR_DSS_ID);
	    }
	    Z
		    .add([ Z
			    .createActionObject(
				    null,
				    mstrUpdateManager.OPEN_ATT_FORMS_EDITOR,
				    microstrategy.obBeanPaths[mstrUpdateManager.OPEN_ATT_FORMS_EDITOR],
				    [ "6042", "6044" ], [ F, "false" ], [],
				    null) ]);
	    Z.flushAndSubmitChanges();
	    break;
	case "lt":
	case "et":
	    var e = (J == "lt");
	    var S = microstrategy.bone("UniqueReportID");
	    if (S) {
		M = S.commands.exec("replaceTemplate", this.firstItem(), e, M);
	    }
	    break;
	case "deopen":
	    var S = microstrategy.bone("UniqueReportID");
	    if (S) {
		M = S.processContextMenus("deopen");
	    }
	    break;
	case "addShortcutMetricCount":
	case "addShortcutMetricMin":
	case "addShortcutMetricMax":
	case "addShortcutMetricAvg":
	case "addShortcutMetricSum":
	    var Q = {
		addShortcutMetricSum : 12,
		addShortcutMetricCount : 13,
		addShortcutMetricAvg : 14,
		addShortcutMetricMin : 15,
		addShortcutMetricMax : 16
	    }[J];
	    var F = microstrategy.activeCXMenu
		    .getAttribute(microstrategy.HTMLATTR_DSS_ID);
	    Z
		    .add([ Z
			    .createActionObject(
				    null,
				    mstrUpdateManager.ADD_SHORTCUT_METRIC,
				    microstrategy.obBeanPaths[mstrUpdateManager.ADD_SHORTCUT_METRIC],
				    [ "4235", "4237" ],
				    [
					    Q,
					    F
						    + ","
						    + microstrategy.DSSTYPE_ATTRIBUTE ],
				    [], null) ]);
	    Z.flushAndSubmitChanges();
	    break;
	}
    } catch (o) {
	microstrategy.errors.log(o);
	return null;
    }
};
mstrReportObjSelectionsImpl.prototype.getParent = function(C) {
    try {
	var A = findTargetTag(C, "UL");
	if (A) {
	    var D = findTargetTag(A, "LI");
	    if (D) {
		if (D.getElementsByTagName("span")[0]) {
		    return D.getElementsByTagName("span")[0];
		}
	    }
	}
	return null;
    } catch (B) {
	microstrategy.errors.log(B);
	return null;
    }
};
function mstrReportObjSelectionsImpl() {
    this.inherits = mstrObjSelectionsImpl;
    this.inherits();
    delete this.inherits;
    return this;
}
mstrReportObjSelectionsImpl.prototype.addObjectAsPrompt = function(A) {
    try {
	if (this.isMulti()) {
	    return;
	}
	var F = microstrategy.bone("rfe_pane");
	if (!F) {
	    F = microstrategy.bone("fexb_pane");
	}
	if (F) {
	    var E = new Array();
	    var B = microstrategy.updateManager;
	    var D = this.firstItem();
	    if (!D) {
		return;
	    }
	    E = F.addUnitAsPrompt(D, E, A, true);
	    B.add(E);
	    B.flushAndSubmitChanges();
	}
    } catch (C) {
	microstrategy.errors.log(C);
	return null;
    }
};
mstrAccordionTabManagerImplScript = true;
mstrAccordionTabManagerImpl.prototype = new mstrFormatImpl();
mstrAccordionTabManagerImpl.prototype.adjustContainer = true;
mstrAccordionTabManagerImpl.prototype.bottomAdjustHeight = 10;
mstrAccordionTabManagerImpl.prototype.currentTabName = "";
mstrAccordionTabManagerImpl.prototype.bottomSum = 0;
mstrAccordionTabManagerImpl.prototype.onload = function() {
    try {
	mstrFormatImpl.prototype.onload.call(this);
	this.bottomAdjustHeight = (this.adjustContainer) ? 2 : 5;
	microstrategy.eventManager.notifyOrphanBones(
		"onObjectBrowserTabChange", this.currentTabName);
	microstrategy.eventManager.ondialogresize();
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrAccordionTabManagerImpl.prototype.closeEditor = function(B) {
    try {
	mstrEditorImpl.prototype.closeEditor.call(this, B);
	microstrategy.eventManager.notifyOrphanBones(
		"onObjectBrowserTabChange", null);
    } catch (A) {
	microstrategy.errors.log(A);
    }
};
mstrAccordionTabManagerImpl.prototype.onforcerepaint = function() {
    try {
	var C = document.createElement("img");
	if (this.elem) {
	    this.elem.parentNode.parentNode.style.width = getObjOuterWidth(this.elem)
		    + "px";
	    this.elem.appendChild(C);
	    this.elem.removeChild(C);
	    var B = microstrategy.findChildWithAtt(this.elem, "IMG", "name",
		    "tbDatasetNew2Img");
	    var E = microstrategy.findChildWithAtt(this.elem, "INPUT", "id",
		    "tbDatasetNew2Button");
	    if (B !== null && E !== null) {
		B.style.display = "block";
		E.style.display = "block";
	    }
	}
	window.setTimeout("if(microstrategy.bone('" + this.id
		+ "')) microstrategy.bone('" + this.id + "').resize()", 0);
	window.setTimeout("if(microstrategy.bone('" + this.id
		+ "')) microstrategy.bone('" + this.id + "').adjustTabTable()",
		0);
	var A = microstrategy.findChildWithAtt(this.elem, "DIV", "id", this.id
		+ "_tabSet");
	if (A) {
	    A.style.visibility = "visible";
	}
	this.callOnTabs("onforcerepaint");
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.onreload = function() {
    try {
	mstrFormatImpl.prototype.onreload.call(this);
	window.setTimeout("if(microstrategy.bone('" + this.id
		+ "')) microstrategy.bone('" + this.id + "').resize()", 0);
	window.setTimeout("if(microstrategy.bone('" + this.id
		+ "')) microstrategy.bone('" + this.id + "').adjustTabTable()",
		0);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.findTabSectionContainer = function(B) {
    try {
	return (B.parentNode) ? B.parentNode : B;
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.callDelayedResize = function() {
    try {
	if (this.resizeTimer) {
	    window.clearTimeout(this.resizeTimer);
	}
	this.resizeTimer = window.setTimeout("microstrategy.bone('" + this.id
		+ "').ondialogresize()", 0);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.onwinresize = function() {
    try {
	if (bIsFirefox || bIsChrome) {
	    this.callDelayedResize();
	} else {
	    this.ondialogresize();
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.ondialogresize = function() {
    try {
	if (mstrFormatImpl.prototype.ondialogresize) {
	    mstrFormatImpl.prototype.ondialogresize.call(this);
	}
	if (this.elem && this.elem.parentNode) {
	    if (microstrategy.pageScreenMode != microstrategy.PAGE_FULL_SCREEN_MODE) {
		var D = microstrategy.findChildWithAtt(this.elem, "DIV", "sty",
			"titl");
		if (D) {
		    var E = D.firstChild;
		    if (E) {
			var C = E.nextSibling;
			var A = ((C != null) ? getObjWidth(C) : 0) + 20;
			E.style.width = Math.max(0, getObjWidth(this.elem) - A)
				+ "px";
		    }
		}
	    }
	    this.elem.parentNode.parentNode.style.width = getObjOuterWidth(this.elem)
		    + "px";
	    this.elem.style.height = Math.max(microstrategy.contentHeight
		    - this.bottomAdjustHeight - this.bottomSum, SCROLLBAR_SIZE)
		    + "px";
	    this.elem.parentNode.style.height = Math.max(
		    getObjOuterHeight(this.elem) - 1, 0)
		    + "px";
	    if (this.adjustContainer) {
		this.elem.parentNode.parentNode.style.height = microstrategy.contentHeight
			- 1 + "px";
	    }
	}
	this.callOnTabs("onwinresize");
	window.setTimeout("if(microstrategy.bone('" + this.id
		+ "')) microstrategy.bone('" + this.id + "').adjustTabTable()",
		0);
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.adjustTabTable = function() {
    try {
	if (!this.elem
		|| microstrategy.pageScreenMode == microstrategy.PAGE_FULL_SCREEN_MODE) {
	    return;
	}
	if (this.adjustContainer) {
	    if (this.elem.parentNode && this.elem.parentNode.parentNode) {
		var B = Math.max(microstrategy.contentHeight
			- this.bottomAdjustHeight - this.bottomSum,
			SCROLLBAR_SIZE);
		this.elem.parentNode.parentNode.style.height = B + "px";
		var F = (B - this.bottomAdjustHeight / 2);
		this.elem.parentNode.style.height = F + "px";
		this.elem.style.height = Math.max((F - 1), 0) + "px";
	    }
	} else {
	    if (this.elem.parentNode) {
	    }
	}
	var C = microstrategy.findChildWithAtt(this.elem, "DIV", "id", this.id
		+ "_tabSet");
	if (C) {
	    C.style.width = Math.max(getObjWidth(this.elem) - 2, 0) + "px";
	}
	this.moveResizeHandles();
	var E = (microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION) ? microstrategy.ACCORDION_REPORT_RELATED_RP_PANEL
		: microstrategy.ACCORDION_RW_RELATED_RP_PANEL;
	if (this.currentTabName == E) {
	    var G = document.getElementById(E + "Id");
	    var A = document.getElementById(E + "IdList");
	    if (A != null) {
		A.style.height = Math.max(this.getAvailableHeight() - 10, 0)
			+ "px";
		A.style.width = Math.max(this.getAvailableWidth() - 6, 0)
			+ "px";
	    }
	}
    } catch (D) {
	microstrategy.errors.log(D);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.afterresize = function() {
    try {
	if (mstrFormatImpl.prototype.afterresize) {
	    mstrFormatImpl.prototype.afterresize.call(this);
	}
	var B = getObjWidth(this.elem);
	this.elem.parentNode.parentNode.style.width = B + "px";
	microstrategy.eventManager.ondialogresize();
	this.onforcerepaint();
	microstrategy.updateBrowserSetting("rwltW", B);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.getAvailableHeight = function() {
    try {
	var A = microstrategy.findChildWithAtt(this.elem, "DIV", "id", this.id
		+ "_tabSet");
	var D = (A) ? getObjOuterHeight(A) : 0;
	var B = (this.getTitleContainer()) ? getObjOuterHeight(this.titleContainer.parentNode)
		: 0;
	return (Math.max(microstrategy.contentHeight - this.bottomAdjustHeight
		- this.bottomSum, SCROLLBAR_SIZE)
		- D - B);
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.getAvailableWidth = function() {
    try {
	return getObjInnerWidth(this.elem);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.resize = function() {
    try {
	if (mstrFormatImpl.prototype.resize) {
	    mstrFormatImpl.prototype.resize.call(this);
	}
	this.callOnTabs("resize");
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.callOnTabs = function(A) {
    for ( var B = 0; B < this.childrenTabs.length; B++) {
	if (this.childrenTabs[B] && this.childrenTabs[B][A]) {
	    this.childrenTabs[B][A]();
	}
    }
};
mstrAccordionTabManagerImpl.prototype.unregister = function() {
    try {
	for ( var A = 0; A < this.childrenTabs.length; A++) {
	    if (this.childrenTabs[A] && this.childrenTabs[A].unregister) {
		var C = this.childrenTabs[A];
		this
			.unRegisterChildrenBones(C.elem
				.getElementsByTagName("div"));
		C.unregister();
	    }
	}
	this.elem.innerHTML = "";
	microstrategy.unRegisterBone(this.id);
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.unRegisterChildrenBones = function(D) {
    try {
	for ( var B = 0, A = D.length; B < A; B++) {
	    var E = D[B].id;
	    if (microstrategy.bones[E]) {
		microstrategy.unRegisterBone(E);
	    }
	}
    } catch (C) {
	microstrategy.errors.log(C);
    }
};
mstrAccordionTabManagerImpl.prototype.close = function() {
    try {
	mstrEditorImpl.prototype.close.call(this);
	if (this.elem && this.elem.parentNode) {
	    this.elem.parentNode.parentNode.style.width = "0px";
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.hideAccordion = function() {
    try {
	microstrategy.toggleAccordion();
	microstrategy.eventManager.notifyOrphanBones("onwinresize");
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.onMouseOverTab = function(B) {
    try {
	B.className += "Hover";
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.onMouseOutTab = function(B) {
    try {
	if (B.className.indexOf("Hover") >= 0) {
	    B.className = B.className.slice(0, B.className.indexOf("Hover"));
	}
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.setCurTab = function(A) {
    try {
	var B = (isNaN(A)) ? "curTabName" : "curTab";
	var D = microstrategy.findChildrenWithAtt(this.elem, "SPAN", "ty",
		"tab");
	for ( var C = 0; C < D.length; C++) {
	    if (D[C].getAttribute(B) == A) {
		this.setCurrentTab(D[C]);
		break;
	    }
	}
    } catch (E) {
	microstrategy.errors.log(E);
	return false;
    }
};
mstrAccordionTabManagerImpl.prototype.setCurrentTab = function(E) {
    try {
	this.currentTabName = E.getAttribute("curTabName");
	if (mstrApp.rememberLastEditorPanel !== "0") {
	    microstrategy
		    .updateBrowserSetting(
			    (microstrategy.EXECUTION_SCOPE == microstrategy.RWD_EXECUTION) ? "accordionRWTab"
				    : "accordionReportTab", this.currentTabName);
	}
	mstrFormatImpl.prototype.setCurrentTab.call(this, E);
	var D = (microstrategy.EXECUTION_SCOPE == microstrategy.REPORT_EXECUTION) ? microstrategy.ACCORDION_REPORT_NOTES_PANEL
		: microstrategy.ACCORDION_RW_NOTES_PANEL;
	if (this.currentTabName == D || microstrategy.needSaveBeforeNotes()) {
	    var A = mstr.$obj("NotesIconView_view");
	    if (A) {
		A.set("visible", false);
	    }
	} else {
	    var B = mstr.$obj("NotesIconModel_model");
	    if (B) {
		B.execCheck();
	    }
	}
	microstrategy.eventManager.notifyOrphanBones(
		"onObjectBrowserTabChange", this.currentTabName);
	return true;
    } catch (C) {
	microstrategy.errors.log(C);
	return false;
    }
};
function mstrAccordionTabManagerImpl(A) {
    this.inherits = mstrFormatImpl;
    this.inherits(A);
    this.inherits = null;
    return this;
}
mstrReportWSObjectsImplScript = true;
mstrReportWSObjectsImpl.prototype = new mstrReportObjectsImpl();
mstrReportWSObjectsImpl.prototype.onload = function(B) {
    try {
	mstrReportObjectsImpl.prototype.onload.call(this, B);
    } catch (A) {
	microstrategy.errors.log(A);
	return false;
    }
};
mstrReportWSObjectsImpl.prototype.initMask = function() {
    try {
	var A = this.elem.firstChild;
	if (A) {
	    this.maskArea = A.firstChild;
	    this.mask.onload(this);
	}
    } catch (B) {
	microstrategy.errors.log(B);
	return false;
    }
};
function mstrReportWSObjectsImpl(A) {
    this.inherits = mstrReportObjectsImpl;
    this.inherits(A);
    delete this.inherits;
    return this;
}