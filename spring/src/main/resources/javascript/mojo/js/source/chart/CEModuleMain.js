(function(){mstrmojo.requiresCls("mstrmojo.Base");mstrmojo.requiresCls("mstrmojo.chart.common.MapStructure");mstrmojo.requiresClsP("mstrmojo.chart","Vector2D","Point2D","RGBColor","ChartConstants");var $C=mstrmojo.chart,$K=$C.ChartConstants,$M=mstrmojo.chart.model,$MODEL_ENUMS=$M.enums;mstrmojo.chart.CEModuleMain=mstrmojo.declare(mstrmojo.Base,null,{scriptClass:"mstrmojo.chart.CEModuleMain",mTolerance:0.01,mDefaultGraphWidth:700,mDefaultGraphHeight:400,mRiserCountLimit:32767,mpController:null,mGlowWidth:10,mColorParser:null,mGraphObjectMap:null,DegreeToRadian:function DegreeToRadian(degree){return degree*$K.kPI/180;},GetColorParser:function GetColorParser(){if(this.mColorParser===null){this.mColorParser=new $C.RGBColor();}return this.mColorParser;},GetGraphObjectMap:function GetGraphObjectMap(){if(this.mGraphObjectMap===null){this.mGraphObjectMap=new $C.common.MapStructure();}return this.mGraphObjectMap;},ResetGraphObjectMap:function ResetGraphObjectMap(){if(this.mGraphObjectMap){this.mGraphObjectMap.clear();}},RadianToDegree:function RadianToDegree(radian){return(radian*180/$K.kPI+(radian>=0?0.5:-0.5));},setController:function setController(controller){this.mpController=controller;},GetLocalizedValue:function GetLocalizedValue(){},ShiftPolygonBy:function ShiftPolygonBy(polygon,shiftSize){if(shiftSize<=0){return polygon;}var first,second,size=polygon.length;shiftSize%=size;if(size<=1){return polygon;}first=polygon.slice(shiftSize,polygon.length);second=polygon.slice(0,shiftSize);return first.concat(second);},GetAngularBisectorIntersectionPoint:function GetAngularBisectorIntersectionPoint(pointA,pointB,pointC,depth,bisectorPoint){var vectorBA=new $C.Vector2D({x:pointA.x-pointB.x,y:pointA.y-pointB.y}),vectorBC=new $C.Vector2D({x:pointC.x-pointB.x,y:pointC.y-pointB.y}),lengthBA=vectorBA.Length(),lengthBC=vectorBC.Length(),vectorUnitBA=new $C.Vector2D({x:vectorBA.x/lengthBA,y:vectorBA.y/lengthBA}),vectorUnitBC=new $C.Vector2D({x:vectorBC.x/lengthBC,y:vectorBC.y/lengthBC}),length=0;if(Math.abs(vectorUnitBA.x-vectorUnitBC.y)<this.mTolerance){length=depth*(vectorUnitBC.x+vectorUnitBA.x)/(vectorUnitBA.y-vectorUnitBC.y);}else{length=depth*(vectorUnitBC.y+vectorUnitBA.y)/(vectorUnitBC.x-vectorUnitBA.x);}bisectorPoint.x=pointB.x+length*vectorUnitBC.x+depth*(-vectorUnitBC.y);bisectorPoint.y=pointB.y+length*vectorUnitBC.y+depth*vectorUnitBC.x;},MakePolygonClockwise:function MakePolygonClockwise(polygon){var numberOfEdges=polygon.length,leftTopIndex=0,i,tempIndex,vectorBA,vectorBC,point;if(numberOfEdges<3){return ;}for(i=1;i<numberOfEdges;++i){if(polygon[i].x<polygon[leftTopIndex].x||(polygon[i].x<=polygon[leftTopIndex].x&&polygon[i].y<polygon[leftTopIndex].y)){leftTopIndex=i;}}tempIndex=(leftTopIndex+numberOfEdges-1)%numberOfEdges;vectorBA=new $C.Vector2D({x:(polygon[tempIndex].x-polygon[leftTopIndex].x),y:(polygon[tempIndex].y-polygon[leftTopIndex].y)});tempIndex=(leftTopIndex+1)%numberOfEdges;vectorBC=new $C.Vector2D({x:(polygon[tempIndex].x-polygon[leftTopIndex].x),y:(polygon[tempIndex].y-polygon[leftTopIndex].y)});if(vectorBC.CrossProduct(vectorBA)<-this.mTolerance){for(i=0;i<numberOfEdges/2;++i){point=polygon[i];polygon[i]=polygon[numberOfEdges-i-1];polygon[numberOfEdges-i-1]=point;}}}});$C.gModuleMain=new $C.CEModuleMain();}());