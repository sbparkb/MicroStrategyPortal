<!--
	A Servant or Service Endpoint class contains the set of methods that are 
	exposed as a Web Service. In the context of this DTD, we will define the
	properties of such a class so that it can be generated from this description.
	
	Simply put, an endpointClass is nothing more than a set of methods.
	An endpointClass has several properties which add more information about it.
	1) First, it has a simple name (the 'name' attribute) which is REQUIRED.
	2) It has an OPTIONAL package name. If present, it will be used in a 
	   package declaration.
	3) It has an OPTIONAL superclass name. If present, it will be used in an
	   extends clause.
	4) You can also specify a textual description to be associated with the class.
	5) Finally, you can specify whether you want a main method generated. If
	   you want one, it will enable you to test your servant class from the 
	   command line.
-->

<!ELEMENT endpointClass (method*)>
<!ATTLIST endpointClass name NMTOKEN #REQUIRED>
<!ATTLIST endpointClass package NMTOKEN #IMPLIED>
<!ATTLIST endpointClass superClass NMTOKEN #IMPLIED>
<!ATTLIST endpointClass description CDATA #IMPLIED>
<!ATTLIST endpointClass includeMain (true | false) "false">

<!--
	A Method is the way that you specify a Web Service method for this endpoint
	class.  The implementation of this method body will use a previously 
	specified MicroStrategy Task. Arguments of the method are 
	mapped to parameters of the Task.  In its simplest form,
	it is ZERO OR MORE parameter elements followed by a returnValue
	element.
	
	Here are the attributes that refine the meaning of the method:
	1) First, it has a simple name which is REQUIRED.
	2) It also has a Task ID.  This is the name of the
	   Task that implements the body of the method.  If
	   omitted, it is assumed to be the same name as the method.
-->

<!ELEMENT method (parameter*, returnValue)>
<!ATTLIST method name NMTOKEN #REQUIRED>
<!ATTLIST method taskID NMTOKEN #IMPLIED>

<!--
	A Parameter is an argument of the Method. It specifies the mapping between
	the Web Service Method parameter and the Task argument.
	
	Here are the attributes which refine the meaning of the parameter:
	1) It has a REQUIRED name.
	2) It has a REQUIRED Java type. This is a fully qualified class name that 
	   is used in defining the method signature. Arrays can be specified by
	   adding "[]" to the FQCN.
	3) It has a Task argument name. This is the argument
	   in the Task that receives the value of the Web Service method
	   parameter. If absent, it is assumed to be the same name as the parameter.
-->

<!ELEMENT parameter EMPTY>
<!ATTLIST parameter name NMTOKEN #REQUIRED>
<!ATTLIST parameter type CDATA #REQUIRED>
<!ATTLIST parameter taskArgument NMTOKEN #IMPLIED>
<!ATTLIST parameter useDefault CDATA #IMPLIED>
<!ATTLIST parameter expose CDATA #IMPLIED>
<!ATTLIST parameter defaultValue CDATA #IMPLIED>


<!--
	A Return Value element defines how the content generated by the Task
	is returned to the caller of the Web Service method. There are
	essentially three ways that content can be produced: arbitrary
	markup generated by a Transform/Layout, as a Block tree, or as an
	unserialized object.  

	In the first case, the Transform/Layout is generating some form of textual
	markup (XML, XHTML, etc) and the result is converted to a String (which is
	the implied return type). 
	
	Also, a Transform/Layout can construct a Block tree.  In this case,
	the method may elect to return one property of the generated Block Tree.

	Finally, a complex Java data structure can be returned without being
	serialized.
-->

<!ELEMENT returnValue (markupOutput | blockOutput | unserializedOutput)>

<!-- 
	A markupOutput element simply indicates that whatever is generated by the
	specified Transform/Layout is serialized as text to a String.
-->

<!ELEMENT markupOutput EMPTY>

<!--
	A blockOutput element indicates that the generated content is in the form
	of a Block tree. In this case, we must specify what the return type is
	as Block properties may be String, Boolean or Integer. If the method has
	no return type, then 'void' may be specified as the return type.
	
	To extract a property from the tree to return to the caller, you may specify
	a Block path specification.  This string may refer to properties of the root
	Block or any nested Block (of arbitrary depth).  If the return type is 'void',
	then this attribute ('propertyPath') may be absent.  Otherwise, it is required.
-->

<!ELEMENT blockOutput EMPTY>
<!ATTLIST blockOutput returnType (String|Boolean|Integer|void) #REQUIRED>
<!ATTLIST blockOutput propertyPath CDATA #IMPLIED>

<!-- 
	An unserializedOutput element indicates that an unserialized user specified
	object (using FQCN) will be the return type. Arrays can be specified by adding
	"[]" to the FQCN.
-->

<!ELEMENT unserializedOutput EMPTY>
<!ATTLIST unserializedOutput returnType CDATA #REQUIRED>
